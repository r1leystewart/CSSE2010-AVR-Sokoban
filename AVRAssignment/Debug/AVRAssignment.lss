
AVRAssignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b2  00800100  00002988  00002a1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002988  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001bb  008002b2  008002b2  00002bce  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002bce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002c2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003b0  00000000  00000000  00002c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000040e6  00000000  00000000  0000301c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001786  00000000  00000000  00007102  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000024c0  00000000  00000000  00008888  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a2c  00000000  00000000  0000ad48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000100b  00000000  00000000  0000b774  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000028e7  00000000  00000000  0000c77f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003a8  00000000  00000000  0000f066  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c2 01 	jmp	0x384	; 0x384 <__ctors_end>
       4:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
       8:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
       c:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      10:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      14:	0c 94 22 02 	jmp	0x444	; 0x444 <__vector_5>
      18:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      1c:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      20:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      24:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      28:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      2c:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      30:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      34:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      38:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      3c:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      40:	0c 94 f7 0f 	jmp	0x1fee	; 0x1fee <__vector_16>
      44:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      48:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      4c:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      50:	0c 94 f0 0c 	jmp	0x19e0	; 0x19e0 <__vector_20>
      54:	0c 94 ae 0c 	jmp	0x195c	; 0x195c <__vector_21>
      58:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      5c:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      60:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      64:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      68:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      6c:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      70:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      74:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      78:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	43 61       	ori	r20, 0x13	; 19
      7e:	6e 6e       	ori	r22, 0xEE	; 238
      80:	6f 74       	andi	r22, 0x4F	; 79
      82:	20 6d       	ori	r18, 0xD0	; 208
      84:	6f 76       	andi	r22, 0x6F	; 111
      86:	65 20       	and	r6, r5
      88:	62 6f       	ori	r22, 0xF2	; 242
      8a:	78 65       	ori	r23, 0x58	; 88
      8c:	73 20       	and	r7, r3
      8e:	64 69       	ori	r22, 0x94	; 148
      90:	61 67       	ori	r22, 0x71	; 113
      92:	6f 6e       	ori	r22, 0xEF	; 239
      94:	61 6c       	ori	r22, 0xC1	; 193
      96:	6c 79       	andi	r22, 0x9C	; 156
	...

00000099 <__c.2487>:
      99:	44 69 61 67 6f 6e 61 6c 20 6d 6f 76 65 20 63 61     Diagonal move ca
      a9:	6e 6e 6f 74 20 62 65 20 6d 61 64 65 00              nnot be made.

000000b6 <__c.2485>:
      b6:	43 61 6e 6e 6f 74 20 73 74 61 63 6b 20 62 6f 78     Cannot stack box
      c6:	65 73 00                                            es.

000000c9 <__c.2483>:
      c9:	43 61 6e 6e 6f 74 20 70 75 73 68 20 62 6f 78 20     Cannot push box 
      d9:	6f 6e 74 6f 20 77 61 6c 6c 00                       onto wall.

000000e3 <__c.2481>:
      e3:	54 68 65 72 65 20 69 73 20 61 20 77 61 6c 6c 20     There is a wall 
      f3:	69 6e 20 74 68 65 20 77 61 79 00                    in the way.

000000fe <__c.2479>:
      fe:	57 61 6c 6c 20 68 69 74 00                          Wall hit.

00000107 <__c.2477>:
     107:	50 6c 61 79 65 72 20 68 69 74 20 61 20 77 61 6c     Player hit a wal
     117:	6c 00                                               l.

00000119 <__c.2667>:
     119:	6f 72 20 70 72 65 73 73 20 27 6e 27 2f 27 4e 27     or press 'n'/'N'
     129:	20 74 6f 20 70 72 6f 67 72 65 73 73 20 74 6f 20      to progress to 
     139:	6c 65 76 65 6c 20 32 00                             level 2.

00000141 <__c.2665>:
     141:	50 72 65 73 73 20 27 72 27 2f 27 52 27 20 74 6f     Press 'r'/'R' to
     151:	20 72 65 73 74 61 72 74 2c 20 27 65 27 2f 27 45      restart, 'e'/'E
     161:	27 20 74 6f 20 65 78 69 74 2c 00                    ' to exit,.

0000016c <__c.2663>:
     16c:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

00000176 <__c.2620>:
     176:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 50 72     CSSE2010/7201 Pr
     186:	6f 6a 65 63 74 20 62 79 20 52 69 6c 65 79 20 53     oject by Riley S
     196:	74 65 77 61 72 74 20 2d 20 34 38 38 32 38 36 36     tewart - 4882866
     1a6:	32 00                                               2.

000001a8 <title_data>:
     1a8:	60 38 1f 3f 3f 63 7e fe 60 bc b1 b1 61 66 c3 c0     `8.??c~.`...af..
     1b8:	60 b6 3f bf 61 7c c3 fe 60 b3 b1 b1 61 66 c3 06     `.?.a|..`...af..
     1c8:	e0 b1 31 3f 3f 63 7e fe                             ..1??c~.

000001d0 <anim_data>:
     1d0:	f0 f0 00 f0 f0 f0 f0 00 f0 00 00 f0 00 00 f0 00     ................
     1e0:	f0 00 00 f0 00 00 f0 00 f0 f0 f0 f0 00 f0 f0 00     ................
	...
     1f8:	f0 f0 f0 f0 f0 00 00 00 f0 00 00 00 f0 00 00 00     ................
     208:	f0 00 00 00 f0 00 00 00 f0 f0 f0 f0 f0 00 00 00     ................
	...
     220:	f0 f0 f0 f0 f0 f0 f0 00 00 00 00 f0 00 00 00 00     ................
     230:	00 00 f0 00 f0 00 00 00 f0 f0 00 00 00 f0 00 00     ................
	...
     248:	f0 f0 f0 f0 f0 00 00 00 f0 00 00 00 f0 00 00 00     ................
     258:	f0 00 00 00 f0 00 00 00 f0 f0 f0 f0 f0 00 00 00     ................
	...
     270:	f0 f0 f0 f0 f0 f0 f0 00 f0 00 00 f0 00 00 00 00     ................
     280:	f0 00 00 f0 00 00 00 00 f0 f0 f0 f0 00 00 00 00     ................
	...
     298:	f0 f0 f0 00 f0 00 00 00 f0 00 f0 00 f0 00 00 00     ................
     2a8:	f0 00 f0 00 f0 00 00 00 f0 f0 f0 f0 f0 00 00 00     ................
	...
     2c0:	f0 f0 f0 f0 f0 00 00 00 00 00 00 00 f0 00 00 00     ................
     2d0:	00 00 00 00 f0 00 00 00 f0 f0 f0 f0 f0 00 00 00     ................
	...
     2f0:	3c 3c 3c 3c 3c 3c 00 00 3c 3c 00 00 3c 3c 00 00     <<<<<<..<<..<<..
     300:	3c 00 3c 3c 00 3c 00 00 3c 00 3c 3c 00 3c 00 00     <.<<.<..<.<<.<..
     310:	3c 3c 00 00 3c 3c 00 00 3c 3c 3c 3c 3c 3c 00 00     <<..<<..<<<<<<..
     320:	00 00 00 10 00 10 00 00 10 00 00 10 00 10 00 00     ................
     330:	00 10 00 00 10 00 10 10 00 00 10 10 00 10 10 10     ................
     340:	00 10 00 00 00 00 10 10 10 00 00 00 00 00 00 00     ................
	...

00000360 <__c.2187>:
     360:	1b 5b 3f 32 35 6c 00                                .[?25l.

00000367 <__c.2182>:
     367:	1b 5b 25 64 6d 00                                   .[%dm.

0000036d <__c.2177>:
     36d:	1b 5b 4b 00                                         .[K.

00000371 <__c.2172>:
     371:	1b 5b 32 4a 00                                      .[2J.

00000376 <__c.2162>:
     376:	1b 5b 30 6d 00                                      .[0m.

0000037b <__c.2157>:
     37b:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

00000384 <__ctors_end>:
     384:	11 24       	eor	r1, r1
     386:	1f be       	out	0x3f, r1	; 63
     388:	cf ef       	ldi	r28, 0xFF	; 255
     38a:	d8 e0       	ldi	r29, 0x08	; 8
     38c:	de bf       	out	0x3e, r29	; 62
     38e:	cd bf       	out	0x3d, r28	; 61

00000390 <__do_copy_data>:
     390:	12 e0       	ldi	r17, 0x02	; 2
     392:	a0 e0       	ldi	r26, 0x00	; 0
     394:	b1 e0       	ldi	r27, 0x01	; 1
     396:	e8 e8       	ldi	r30, 0x88	; 136
     398:	f9 e2       	ldi	r31, 0x29	; 41
     39a:	02 c0       	rjmp	.+4      	; 0x3a0 <__do_copy_data+0x10>
     39c:	05 90       	lpm	r0, Z+
     39e:	0d 92       	st	X+, r0
     3a0:	a2 3b       	cpi	r26, 0xB2	; 178
     3a2:	b1 07       	cpc	r27, r17
     3a4:	d9 f7       	brne	.-10     	; 0x39c <__do_copy_data+0xc>

000003a6 <__do_clear_bss>:
     3a6:	24 e0       	ldi	r18, 0x04	; 4
     3a8:	a2 eb       	ldi	r26, 0xB2	; 178
     3aa:	b2 e0       	ldi	r27, 0x02	; 2
     3ac:	01 c0       	rjmp	.+2      	; 0x3b0 <.do_clear_bss_start>

000003ae <.do_clear_bss_loop>:
     3ae:	1d 92       	st	X+, r1

000003b0 <.do_clear_bss_start>:
     3b0:	ad 36       	cpi	r26, 0x6D	; 109
     3b2:	b2 07       	cpc	r27, r18
     3b4:	e1 f7       	brne	.-8      	; 0x3ae <.do_clear_bss_loop>
     3b6:	0e 94 14 0c 	call	0x1828	; 0x1828 <main>
     3ba:	0c 94 c2 14 	jmp	0x2984	; 0x2984 <_exit>

000003be <__bad_interrupt>:
     3be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003c2 <init_buttons>:
	// using a pin change interrupt. These pins correspond to pin
	// change interrupts PCINT8 to PCINT11 which are covered by
	// pin change interrupt 1.

	// Empty the button push queue and reset last state.
	queue_length = 0;
     3c2:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <__data_end>
	last_button_state = 0;
     3c6:	10 92 b7 02 	sts	0x02B7, r1	; 0x8002b7 <last_button_state>

	// Enable the interrupt (see datasheet page 77).
	PCICR |= (1 << PCIE1);
     3ca:	e8 e6       	ldi	r30, 0x68	; 104
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	80 81       	ld	r24, Z
     3d0:	82 60       	ori	r24, 0x02	; 2
     3d2:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78).
	PCIFR |= (1 << PCIF1);
     3d4:	8b b3       	in	r24, 0x1b	; 27
     3d6:	82 60       	ori	r24, 0x02	; 2
     3d8:	8b bb       	out	0x1b, r24	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78).
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT10) |
     3da:	ec e6       	ldi	r30, 0x6C	; 108
     3dc:	f0 e0       	ldi	r31, 0x00	; 0
     3de:	80 81       	ld	r24, Z
     3e0:	8f 60       	ori	r24, 0x0F	; 15
     3e2:	80 83       	st	Z, r24
     3e4:	08 95       	ret

000003e6 <button_pushed>:

ButtonState button_pushed(void)
{
	ButtonState result = NO_BUTTON_PUSHED; // Default result.

	if (queue_length > 0)
     3e6:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <__data_end>
     3ea:	88 23       	and	r24, r24
     3ec:	f9 f0       	breq	.+62     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
	{
		// Remove the first element off the queue and move all the
		// other entries closer to the front of the queue. We turn off
		// interrupts (if on) before we make any changes to the queue.
		// If interrupts were on, we turn them back on when done.
		result = button_queue[0];
     3ee:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <button_queue>

		// Save whether interrupts were enabled and turn them off.
		bool interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     3f2:	5f b7       	in	r21, 0x3f	; 63
     3f4:	50 78       	andi	r21, 0x80	; 128
		cli();
     3f6:	f8 94       	cli
		
		for (uint8_t i = 1; i < queue_length; i++)
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	0b c0       	rjmp	.+22     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
		{
			button_queue[i - 1] = button_queue[i];
     3fc:	29 2f       	mov	r18, r25
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	f9 01       	movw	r30, r18
     402:	ed 54       	subi	r30, 0x4D	; 77
     404:	fd 4f       	sbci	r31, 0xFD	; 253
     406:	40 81       	ld	r20, Z
     408:	f9 01       	movw	r30, r18
     40a:	ee 54       	subi	r30, 0x4E	; 78
     40c:	fd 4f       	sbci	r31, 0xFD	; 253
     40e:	40 83       	st	Z, r20

		// Save whether interrupts were enabled and turn them off.
		bool interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for (uint8_t i = 1; i < queue_length; i++)
     410:	9f 5f       	subi	r25, 0xFF	; 255
     412:	20 91 b2 02 	lds	r18, 0x02B2	; 0x8002b2 <__data_end>
     416:	92 17       	cp	r25, r18
     418:	88 f3       	brcs	.-30     	; 0x3fc <button_pushed+0x16>
		{
			button_queue[i - 1] = button_queue[i];
		}
		queue_length--;
     41a:	90 91 b2 02 	lds	r25, 0x02B2	; 0x8002b2 <__data_end>
     41e:	91 50       	subi	r25, 0x01	; 1
     420:	90 93 b2 02 	sts	0x02B2, r25	; 0x8002b2 <__data_end>

		if (interrupts_were_enabled)
     424:	55 23       	and	r21, r21
     426:	19 f0       	breq	.+6      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
		{
			// Turn them back on again.
			sei();
     428:	78 94       	sei
     42a:	08 95       	ret
		(1 << PCINT11);
}

ButtonState button_pushed(void)
{
	ButtonState result = NO_BUTTON_PUSHED; // Default result.
     42c:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again.
			sei();
		}
	}
	return result;
}
     42e:	08 95       	ret

00000430 <clear_button_presses>:

void clear_button_presses(void)
{
	// Save whether interrupts were enabled and turn them off.
	bool interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     430:	8f b7       	in	r24, 0x3f	; 63
	cli();
     432:	f8 94       	cli
	queue_length = 0;
     434:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <__data_end>
	last_button_state = 0;
     438:	10 92 b7 02 	sts	0x02B7, r1	; 0x8002b7 <last_button_state>
	if (interrupts_were_enabled)
     43c:	88 23       	and	r24, r24
     43e:	0c f4       	brge	.+2      	; 0x442 <clear_button_presses+0x12>
	{
		// Turn them back on again.
		sei();
     440:	78 94       	sei
     442:	08 95       	ret

00000444 <__vector_5>:
	}
}

// Interrupt handler for a change on buttons.
ISR(PCINT1_vect)
{
     444:	1f 92       	push	r1
     446:	0f 92       	push	r0
     448:	0f b6       	in	r0, 0x3f	; 63
     44a:	0f 92       	push	r0
     44c:	11 24       	eor	r1, r1
     44e:	2f 93       	push	r18
     450:	3f 93       	push	r19
     452:	4f 93       	push	r20
     454:	8f 93       	push	r24
     456:	9f 93       	push	r25
     458:	ef 93       	push	r30
     45a:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     45c:	43 b1       	in	r20, 0x03	; 3
     45e:	4f 70       	andi	r20, 0x0F	; 15
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++)
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	24 c0       	rjmp	.+72     	; 0x4ac <__vector_5+0x68>
	{
		if (queue_length < BUTTON_QUEUE_SIZE
     464:	90 91 b2 02 	lds	r25, 0x02B2	; 0x8002b2 <__data_end>
     468:	94 30       	cpi	r25, 0x04	; 4
     46a:	f8 f4       	brcc	.+62     	; 0x4aa <__vector_5+0x66>
				&& (button_state & (1 << pin))
     46c:	24 2f       	mov	r18, r20
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	08 2e       	mov	r0, r24
     472:	02 c0       	rjmp	.+4      	; 0x478 <__vector_5+0x34>
     474:	35 95       	asr	r19
     476:	27 95       	ror	r18
     478:	0a 94       	dec	r0
     47a:	e2 f7       	brpl	.-8      	; 0x474 <__vector_5+0x30>
     47c:	20 ff       	sbrs	r18, 0
     47e:	15 c0       	rjmp	.+42     	; 0x4aa <__vector_5+0x66>
				&& !(last_button_state & (1 << pin)))
     480:	20 91 b7 02 	lds	r18, 0x02B7	; 0x8002b7 <last_button_state>
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	08 2e       	mov	r0, r24
     488:	02 c0       	rjmp	.+4      	; 0x48e <__vector_5+0x4a>
     48a:	35 95       	asr	r19
     48c:	27 95       	ror	r18
     48e:	0a 94       	dec	r0
     490:	e2 f7       	brpl	.-8      	; 0x48a <__vector_5+0x46>
     492:	20 fd       	sbrc	r18, 0
     494:	0a c0       	rjmp	.+20     	; 0x4aa <__vector_5+0x66>
				{
			// Add the button push to the queue (and update the
			// length of the queue).
			button_queue[queue_length++] = pin;
     496:	e0 91 b2 02 	lds	r30, 0x02B2	; 0x8002b2 <__data_end>
     49a:	91 e0       	ldi	r25, 0x01	; 1
     49c:	9e 0f       	add	r25, r30
     49e:	90 93 b2 02 	sts	0x02B2, r25	; 0x8002b2 <__data_end>
     4a2:	f0 e0       	ldi	r31, 0x00	; 0
     4a4:	ed 54       	subi	r30, 0x4D	; 77
     4a6:	fd 4f       	sbci	r31, 0xFD	; 253
     4a8:	80 83       	st	Z, r24
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++)
     4aa:	8f 5f       	subi	r24, 0xFF	; 255
     4ac:	84 30       	cpi	r24, 0x04	; 4
     4ae:	d0 f2       	brcs	.-76     	; 0x464 <__vector_5+0x20>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state.
	last_button_state = button_state;
     4b0:	40 93 b7 02 	sts	0x02B7, r20	; 0x8002b7 <last_button_state>
}
     4b4:	ff 91       	pop	r31
     4b6:	ef 91       	pop	r30
     4b8:	9f 91       	pop	r25
     4ba:	8f 91       	pop	r24
     4bc:	4f 91       	pop	r20
     4be:	3f 91       	pop	r19
     4c0:	2f 91       	pop	r18
     4c2:	0f 90       	pop	r0
     4c4:	0f be       	out	0x3f, r0	; 63
     4c6:	0f 90       	pop	r0
     4c8:	1f 90       	pop	r1
     4ca:	18 95       	reti

000004cc <freq_to_clock_period>:

// Return the width of a pulse (in clock cycles) given a duty cycle (%) and
// the period of the clock (measured in clock cycles)
uint16_t duty_cycle_to_pulse_width(float dutycycle, uint16_t clockperiod) {
	return (dutycycle * clockperiod) / 100;
}
     4cc:	9c 01       	movw	r18, r24
     4ce:	40 e0       	ldi	r20, 0x00	; 0
     4d0:	50 e0       	ldi	r21, 0x00	; 0
     4d2:	60 e4       	ldi	r22, 0x40	; 64
     4d4:	72 e4       	ldi	r23, 0x42	; 66
     4d6:	8f e0       	ldi	r24, 0x0F	; 15
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	0e 94 38 10 	call	0x2070	; 0x2070 <__udivmodsi4>
     4de:	c9 01       	movw	r24, r18
     4e0:	08 95       	ret

000004e2 <init_buzzer>:
	// Make pin OC2B be an output
	//DDRD = (1 << 6);
	//Done by project.c

	// Set the maximum count value for timer/counter 2 to be one less than the clockperiod
	OCR2A = 0;
     4e2:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>

	// Set up timer/counter 2 for Fast PWM, counting from 0 to the value in OCR2A
	// before reseting to 0. Count at 1MHz (CLK/8).
	// Configure output OC2B to be clear on compare match and set on timer/counter
	// overflow (non-inverting mode).
	TCCR2A = (1 << COM2A1) | (1 << COM2B1) | (1 << WGM21) | (1 << WGM20);
     4e6:	83 ea       	ldi	r24, 0xA3	; 163
     4e8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (1 << WGM22) | (1 << CS21);
     4ec:	8a e0       	ldi	r24, 0x0A	; 10
     4ee:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     4f2:	08 95       	ret

000004f4 <play_move_sound>:
}

void play_move_sound(bool enabled) {
	if (enabled) {
     4f4:	88 23       	and	r24, r24
     4f6:	89 f0       	breq	.+34     	; 0x51a <play_move_sound+0x26>
		OCR2A = freq_to_clock_period(2000);
     4f8:	80 ed       	ldi	r24, 0xD0	; 208
     4fa:	97 e0       	ldi	r25, 0x07	; 7
     4fc:	0e 94 66 02 	call	0x4cc	; 0x4cc <freq_to_clock_period>
     500:	e3 eb       	ldi	r30, 0xB3	; 179
     502:	f0 e0       	ldi	r31, 0x00	; 0
     504:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     506:	2f ef       	ldi	r18, 0xFF	; 255
     508:	83 ef       	ldi	r24, 0xF3	; 243
     50a:	91 e0       	ldi	r25, 0x01	; 1
     50c:	21 50       	subi	r18, 0x01	; 1
     50e:	80 40       	sbci	r24, 0x00	; 0
     510:	90 40       	sbci	r25, 0x00	; 0
     512:	e1 f7       	brne	.-8      	; 0x50c <play_move_sound+0x18>
     514:	00 c0       	rjmp	.+0      	; 0x516 <play_move_sound+0x22>
     516:	00 00       	nop
		_delay_ms(80);
		OCR2A = 0;
     518:	10 82       	st	Z, r1
     51a:	08 95       	ret

0000051c <play_start_sound>:
	}
}

void play_start_sound(bool enabled) {
     51c:	cf 93       	push	r28
     51e:	df 93       	push	r29
	if (enabled) {
     520:	88 23       	and	r24, r24
     522:	f9 f0       	breq	.+62     	; 0x562 <play_start_sound+0x46>
		OCR2A = freq_to_clock_period(2000);
     524:	80 ed       	ldi	r24, 0xD0	; 208
     526:	97 e0       	ldi	r25, 0x07	; 7
     528:	0e 94 66 02 	call	0x4cc	; 0x4cc <freq_to_clock_period>
     52c:	c3 eb       	ldi	r28, 0xB3	; 179
     52e:	d0 e0       	ldi	r29, 0x00	; 0
     530:	88 83       	st	Y, r24
     532:	2f ef       	ldi	r18, 0xFF	; 255
     534:	82 e5       	ldi	r24, 0x52	; 82
     536:	97 e0       	ldi	r25, 0x07	; 7
     538:	21 50       	subi	r18, 0x01	; 1
     53a:	80 40       	sbci	r24, 0x00	; 0
     53c:	90 40       	sbci	r25, 0x00	; 0
     53e:	e1 f7       	brne	.-8      	; 0x538 <play_start_sound+0x1c>
     540:	00 c0       	rjmp	.+0      	; 0x542 <play_start_sound+0x26>
     542:	00 00       	nop
		_delay_ms(300);
		OCR2A = freq_to_clock_period(400);
     544:	80 e9       	ldi	r24, 0x90	; 144
     546:	91 e0       	ldi	r25, 0x01	; 1
     548:	0e 94 66 02 	call	0x4cc	; 0x4cc <freq_to_clock_period>
     54c:	88 83       	st	Y, r24
     54e:	2f ef       	ldi	r18, 0xFF	; 255
     550:	82 e5       	ldi	r24, 0x52	; 82
     552:	97 e0       	ldi	r25, 0x07	; 7
     554:	21 50       	subi	r18, 0x01	; 1
     556:	80 40       	sbci	r24, 0x00	; 0
     558:	90 40       	sbci	r25, 0x00	; 0
     55a:	e1 f7       	brne	.-8      	; 0x554 <play_start_sound+0x38>
     55c:	00 c0       	rjmp	.+0      	; 0x55e <play_start_sound+0x42>
     55e:	00 00       	nop
		_delay_ms(300);
		OCR2A = 0;
     560:	18 82       	st	Y, r1
	}
}
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	08 95       	ret

00000568 <play_victory_sound>:

void play_victory_sound(bool enabled) {
     568:	1f 93       	push	r17
     56a:	cf 93       	push	r28
     56c:	df 93       	push	r29
	if (enabled) {
     56e:	88 23       	and	r24, r24
     570:	c1 f1       	breq	.+112    	; 0x5e2 <play_victory_sound+0x7a>
		OCR2A = freq_to_clock_period(2000);
     572:	80 ed       	ldi	r24, 0xD0	; 208
     574:	97 e0       	ldi	r25, 0x07	; 7
     576:	0e 94 66 02 	call	0x4cc	; 0x4cc <freq_to_clock_period>
     57a:	18 2f       	mov	r17, r24
     57c:	c3 eb       	ldi	r28, 0xB3	; 179
     57e:	d0 e0       	ldi	r29, 0x00	; 0
     580:	88 83       	st	Y, r24
     582:	2f ef       	ldi	r18, 0xFF	; 255
     584:	82 e5       	ldi	r24, 0x52	; 82
     586:	97 e0       	ldi	r25, 0x07	; 7
     588:	21 50       	subi	r18, 0x01	; 1
     58a:	80 40       	sbci	r24, 0x00	; 0
     58c:	90 40       	sbci	r25, 0x00	; 0
     58e:	e1 f7       	brne	.-8      	; 0x588 <play_victory_sound+0x20>
     590:	00 c0       	rjmp	.+0      	; 0x592 <play_victory_sound+0x2a>
     592:	00 00       	nop
		_delay_ms(300);
		OCR2A = freq_to_clock_period(5000);
     594:	88 e8       	ldi	r24, 0x88	; 136
     596:	93 e1       	ldi	r25, 0x13	; 19
     598:	0e 94 66 02 	call	0x4cc	; 0x4cc <freq_to_clock_period>
     59c:	88 83       	st	Y, r24
     59e:	2f ef       	ldi	r18, 0xFF	; 255
     5a0:	82 e5       	ldi	r24, 0x52	; 82
     5a2:	97 e0       	ldi	r25, 0x07	; 7
     5a4:	21 50       	subi	r18, 0x01	; 1
     5a6:	80 40       	sbci	r24, 0x00	; 0
     5a8:	90 40       	sbci	r25, 0x00	; 0
     5aa:	e1 f7       	brne	.-8      	; 0x5a4 <play_victory_sound+0x3c>
     5ac:	00 c0       	rjmp	.+0      	; 0x5ae <play_victory_sound+0x46>
     5ae:	00 00       	nop
		_delay_ms(300);
		OCR2A = freq_to_clock_period(2000);
     5b0:	18 83       	st	Y, r17
     5b2:	2f ef       	ldi	r18, 0xFF	; 255
     5b4:	82 e5       	ldi	r24, 0x52	; 82
     5b6:	97 e0       	ldi	r25, 0x07	; 7
     5b8:	21 50       	subi	r18, 0x01	; 1
     5ba:	80 40       	sbci	r24, 0x00	; 0
     5bc:	90 40       	sbci	r25, 0x00	; 0
     5be:	e1 f7       	brne	.-8      	; 0x5b8 <play_victory_sound+0x50>
     5c0:	00 c0       	rjmp	.+0      	; 0x5c2 <play_victory_sound+0x5a>
     5c2:	00 00       	nop
		_delay_ms(300);
		OCR2A = freq_to_clock_period(2500);
     5c4:	84 ec       	ldi	r24, 0xC4	; 196
     5c6:	99 e0       	ldi	r25, 0x09	; 9
     5c8:	0e 94 66 02 	call	0x4cc	; 0x4cc <freq_to_clock_period>
     5cc:	88 83       	st	Y, r24
     5ce:	2f ef       	ldi	r18, 0xFF	; 255
     5d0:	82 e5       	ldi	r24, 0x52	; 82
     5d2:	97 e0       	ldi	r25, 0x07	; 7
     5d4:	21 50       	subi	r18, 0x01	; 1
     5d6:	80 40       	sbci	r24, 0x00	; 0
     5d8:	90 40       	sbci	r25, 0x00	; 0
     5da:	e1 f7       	brne	.-8      	; 0x5d4 <play_victory_sound+0x6c>
     5dc:	00 c0       	rjmp	.+0      	; 0x5de <play_victory_sound+0x76>
     5de:	00 00       	nop
		_delay_ms(300);
		OCR2A = 0;
     5e0:	18 82       	st	Y, r1
	}
     5e2:	df 91       	pop	r29
     5e4:	cf 91       	pop	r28
     5e6:	1f 91       	pop	r17
     5e8:	08 95       	ret

000005ea <paint_square>:
// ========================== GAME LOGIC FUNCTIONS ===========================

// This function paints a square based on the object(s) currently on it.
static void paint_square(uint8_t row, uint8_t col)
{	
	switch (board[row][col] & OBJECT_MASK)
     5ea:	90 e1       	ldi	r25, 0x10	; 16
     5ec:	89 9f       	mul	r24, r25
     5ee:	f0 01       	movw	r30, r0
     5f0:	11 24       	eor	r1, r1
     5f2:	e4 54       	subi	r30, 0x44	; 68
     5f4:	fd 4f       	sbci	r31, 0xFD	; 253
     5f6:	e6 0f       	add	r30, r22
     5f8:	f1 1d       	adc	r31, r1
     5fa:	90 81       	ld	r25, Z
     5fc:	97 70       	andi	r25, 0x07	; 7
     5fe:	92 30       	cpi	r25, 0x02	; 2
     600:	99 f0       	breq	.+38     	; 0x628 <paint_square+0x3e>
     602:	28 f4       	brcc	.+10     	; 0x60e <paint_square+0x24>
     604:	99 23       	and	r25, r25
     606:	41 f0       	breq	.+16     	; 0x618 <paint_square+0x2e>
     608:	91 30       	cpi	r25, 0x01	; 1
     60a:	51 f0       	breq	.+20     	; 0x620 <paint_square+0x36>
     60c:	08 95       	ret
     60e:	94 30       	cpi	r25, 0x04	; 4
     610:	79 f0       	breq	.+30     	; 0x630 <paint_square+0x46>
     612:	96 30       	cpi	r25, 0x06	; 6
     614:	89 f0       	breq	.+34     	; 0x638 <paint_square+0x4e>
     616:	08 95       	ret
	{
		case ROOM:
			ledmatrix_update_pixel(row, col, COLOUR_BLACK);
     618:	40 e0       	ldi	r20, 0x00	; 0
     61a:	0e 94 79 07 	call	0xef2	; 0xef2 <ledmatrix_update_pixel>
			break;
     61e:	08 95       	ret
		case WALL:
			ledmatrix_update_pixel(row, col, COLOUR_WALL);
     620:	4f ef       	ldi	r20, 0xFF	; 255
     622:	0e 94 79 07 	call	0xef2	; 0xef2 <ledmatrix_update_pixel>
			break;
     626:	08 95       	ret
		case BOX:
			ledmatrix_update_pixel(row, col, COLOUR_BOX);
     628:	4c e3       	ldi	r20, 0x3C	; 60
     62a:	0e 94 79 07 	call	0xef2	; 0xef2 <ledmatrix_update_pixel>
			break;
     62e:	08 95       	ret
		case TARGET:
			ledmatrix_update_pixel(row, col, COLOUR_TARGET);
     630:	4f e0       	ldi	r20, 0x0F	; 15
     632:	0e 94 79 07 	call	0xef2	; 0xef2 <ledmatrix_update_pixel>
			break;
     636:	08 95       	ret
		case BOX | TARGET:
			ledmatrix_update_pixel(row, col, COLOUR_DONE);
     638:	40 ef       	ldi	r20, 0xF0	; 240
     63a:	0e 94 79 07 	call	0xef2	; 0xef2 <ledmatrix_update_pixel>
     63e:	08 95       	ret

00000640 <initialise_level>:
		default:
			break;
	}
}

void initialise_level(int level) {
     640:	cf 93       	push	r28
     642:	df 93       	push	r29
     644:	cd b7       	in	r28, 0x3d	; 61
     646:	de b7       	in	r29, 0x3e	; 62
     648:	da 95       	dec	r29
     64a:	0f b6       	in	r0, 0x3f	; 63
     64c:	f8 94       	cli
     64e:	de bf       	out	0x3e, r29	; 62
     650:	0f be       	out	0x3f, r0	; 63
     652:	cd bf       	out	0x3d, r28	; 61
	// identical to how the pixels are oriented on the LED matrix, however
	// the LED matrix treats row 0 as the bottom row and row 7 as the top
	// row.
	
	uint8_t level_layout[MATRIX_NUM_ROWS][MATRIX_NUM_COLUMNS];
	switch (level) {
     654:	81 30       	cpi	r24, 0x01	; 1
     656:	91 05       	cpc	r25, r1
     658:	19 f0       	breq	.+6      	; 0x660 <initialise_level+0x20>
     65a:	02 97       	sbiw	r24, 0x02	; 2
     65c:	e1 f0       	breq	.+56     	; 0x696 <initialise_level+0x56>
     65e:	35 c0       	rjmp	.+106    	; 0x6ca <initialise_level+0x8a>
			case 1:
			{
			uint8_t temp_layout[MATRIX_NUM_ROWS][MATRIX_NUM_COLUMNS] = {
     660:	80 e8       	ldi	r24, 0x80	; 128
     662:	ec e1       	ldi	r30, 0x1C	; 28
     664:	f1 e0       	ldi	r31, 0x01	; 1
     666:	de 01       	movw	r26, r28
     668:	af 57       	subi	r26, 0x7F	; 127
     66a:	bf 4f       	sbci	r27, 0xFF	; 255
     66c:	01 90       	ld	r0, Z+
     66e:	0d 92       	st	X+, r0
     670:	8a 95       	dec	r24
     672:	e1 f7       	brne	.-8      	; 0x66c <initialise_level+0x2c>
				{ W, _, _, _, W, _, B, _, _, _, _, _, _, _, _, _ },
				{ _, _, _, _, _, _, T, _, _, _, _, _, _, _, _, _ },
				{ _, _, _, W, W, W, W, W, W, T, _, _, _, _, _, W },
				{ W, W, _, _, _, _, _, _, W, W, _, _, W, W, W, W }
			};
			memcpy(level_layout, temp_layout, sizeof(level_layout));
     674:	80 e8       	ldi	r24, 0x80	; 128
     676:	fe 01       	movw	r30, r28
     678:	ef 57       	subi	r30, 0x7F	; 127
     67a:	ff 4f       	sbci	r31, 0xFF	; 255
     67c:	de 01       	movw	r26, r28
     67e:	11 96       	adiw	r26, 0x01	; 1
     680:	01 90       	ld	r0, Z+
     682:	0d 92       	st	X+, r0
     684:	8a 95       	dec	r24
     686:	e1 f7       	brne	.-8      	; 0x680 <initialise_level+0x40>
			player_row = 5;
     688:	85 e0       	ldi	r24, 0x05	; 5
     68a:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <player_row>
			player_col = 2;
     68e:	82 e0       	ldi	r24, 0x02	; 2
     690:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <player_col>
			}
			break;
     694:	1a c0       	rjmp	.+52     	; 0x6ca <initialise_level+0x8a>
		case 2:
			{
			uint8_t temp_layout[MATRIX_NUM_ROWS][MATRIX_NUM_COLUMNS] = {
     696:	80 e8       	ldi	r24, 0x80	; 128
     698:	ec e9       	ldi	r30, 0x9C	; 156
     69a:	f1 e0       	ldi	r31, 0x01	; 1
     69c:	de 01       	movw	r26, r28
     69e:	af 57       	subi	r26, 0x7F	; 127
     6a0:	bf 4f       	sbci	r27, 0xFF	; 255
     6a2:	01 90       	ld	r0, Z+
     6a4:	0d 92       	st	X+, r0
     6a6:	8a 95       	dec	r24
     6a8:	e1 f7       	brne	.-8      	; 0x6a2 <initialise_level+0x62>
				{W, W, W, W, _, W, _, _, _, _, _, W, _, W, W, _ },
				{W, T, B, _, _, _, _, B, _, _, _, W, W, _, W, W },
				{W, _, _, _, T, _, _, _, _, _, _, B, T, _, _, _ },
				{W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W }
			};
			memcpy(level_layout, temp_layout, sizeof(level_layout));
     6aa:	80 e8       	ldi	r24, 0x80	; 128
     6ac:	fe 01       	movw	r30, r28
     6ae:	ef 57       	subi	r30, 0x7F	; 127
     6b0:	ff 4f       	sbci	r31, 0xFF	; 255
     6b2:	de 01       	movw	r26, r28
     6b4:	11 96       	adiw	r26, 0x01	; 1
     6b6:	01 90       	ld	r0, Z+
     6b8:	0d 92       	st	X+, r0
     6ba:	8a 95       	dec	r24
     6bc:	e1 f7       	brne	.-8      	; 0x6b6 <initialise_level+0x76>
			player_row = 6;
     6be:	86 e0       	ldi	r24, 0x06	; 6
     6c0:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <player_row>
			player_col = 15;
     6c4:	8f e0       	ldi	r24, 0x0F	; 15
     6c6:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <player_col>
     6ca:	a0 e0       	ldi	r26, 0x00	; 0
     6cc:	2b c0       	rjmp	.+86     	; 0x724 <initialise_level+0xe4>
	// all the rows.
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
	{
		for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
		{
			board[MATRIX_NUM_ROWS - 1 - row][col] =
     6ce:	8a 2f       	mov	r24, r26
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	27 e0       	ldi	r18, 0x07	; 7
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	28 1b       	sub	r18, r24
     6d8:	39 0b       	sbc	r19, r25
			level_layout[row][col];
     6da:	46 2f       	mov	r20, r22
     6dc:	50 e0       	ldi	r21, 0x00	; 0
     6de:	fc 01       	movw	r30, r24
     6e0:	e2 95       	swap	r30
     6e2:	f2 95       	swap	r31
     6e4:	f0 7f       	andi	r31, 0xF0	; 240
     6e6:	fe 27       	eor	r31, r30
     6e8:	e0 7f       	andi	r30, 0xF0	; 240
     6ea:	fe 27       	eor	r31, r30
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	8c 0f       	add	r24, r28
     6f2:	9d 1f       	adc	r25, r29
     6f4:	e8 0f       	add	r30, r24
     6f6:	f9 1f       	adc	r31, r25
     6f8:	e4 0f       	add	r30, r20
     6fa:	f5 1f       	adc	r31, r21
     6fc:	70 81       	ld	r23, Z
	// all the rows.
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
	{
		for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
		{
			board[MATRIX_NUM_ROWS - 1 - row][col] =
     6fe:	c9 01       	movw	r24, r18
     700:	82 95       	swap	r24
     702:	92 95       	swap	r25
     704:	90 7f       	andi	r25, 0xF0	; 240
     706:	98 27       	eor	r25, r24
     708:	80 7f       	andi	r24, 0xF0	; 240
     70a:	98 27       	eor	r25, r24
     70c:	84 54       	subi	r24, 0x44	; 68
     70e:	9d 4f       	sbci	r25, 0xFD	; 253
     710:	fc 01       	movw	r30, r24
     712:	e4 0f       	add	r30, r20
     714:	f5 1f       	adc	r31, r21
     716:	70 83       	st	Z, r23
	
	// Copy the starting layout (level map) to the board array, and flip
	// all the rows.
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
	{
		for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
     718:	6f 5f       	subi	r22, 0xFF	; 255
     71a:	01 c0       	rjmp	.+2      	; 0x71e <initialise_level+0xde>
     71c:	60 e0       	ldi	r22, 0x00	; 0
     71e:	60 31       	cpi	r22, 0x10	; 16
     720:	b0 f2       	brcs	.-84     	; 0x6ce <initialise_level+0x8e>
	#undef T
	#undef B
	
	// Copy the starting layout (level map) to the board array, and flip
	// all the rows.
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     722:	af 5f       	subi	r26, 0xFF	; 255
     724:	a8 30       	cpi	r26, 0x08	; 8
     726:	d0 f3       	brcs	.-12     	; 0x71c <initialise_level+0xdc>
		{
			board[MATRIX_NUM_ROWS - 1 - row][col] =
			level_layout[row][col];
		}
	}
}
     728:	d3 95       	inc	r29
     72a:	0f b6       	in	r0, 0x3f	; 63
     72c:	f8 94       	cli
     72e:	de bf       	out	0x3e, r29	; 62
     730:	0f be       	out	0x3f, r0	; 63
     732:	cd bf       	out	0x3d, r28	; 61
     734:	df 91       	pop	r29
     736:	cf 91       	pop	r28
     738:	08 95       	ret

0000073a <flash_player>:
// currently not visible, it is set to visible and rendered on the display.
// The static global variable "player_visible" indicates whether the player
// icon is currently visible.
void flash_player(void)
{
	player_visible = !player_visible;
     73a:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <player_visible>
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	89 27       	eor	r24, r25
     742:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <player_visible>
	if (player_visible)
     746:	88 23       	and	r24, r24
     748:	41 f0       	breq	.+16     	; 0x75a <flash_player+0x20>
	{
		// The player is visible, paint it with COLOUR_PLAYER.
		ledmatrix_update_pixel(player_row, player_col, COLOUR_PLAYER);
     74a:	40 e1       	ldi	r20, 0x10	; 16
     74c:	60 91 ba 02 	lds	r22, 0x02BA	; 0x8002ba <player_col>
     750:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <player_row>
     754:	0e 94 79 07 	call	0xef2	; 0xef2 <ledmatrix_update_pixel>
     758:	08 95       	ret
	}
	else
	{
		// The player is not visible, paint the underlying square.
		paint_square(player_row, player_col);
     75a:	60 91 ba 02 	lds	r22, 0x02BA	; 0x8002ba <player_col>
     75e:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <player_row>
     762:	0e 94 f5 02 	call	0x5ea	; 0x5ea <paint_square>
     766:	08 95       	ret

00000768 <flash_targets>:
	}
}

void flash_targets(void) {
     768:	0f 93       	push	r16
     76a:	1f 93       	push	r17
     76c:	cf 93       	push	r28
     76e:	df 93       	push	r29
	targets_visible = !targets_visible;
     770:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <targets_visible>
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	89 27       	eor	r24, r25
     778:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <targets_visible>
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
     77c:	00 e0       	ldi	r16, 0x00	; 0
     77e:	10 e0       	ldi	r17, 0x00	; 0
     780:	26 c0       	rjmp	.+76     	; 0x7ce <flash_targets+0x66>
		for (int col = 0; col < MATRIX_NUM_COLUMNS; col++) {
			if (board[row][col] == TARGET) {
     782:	f8 01       	movw	r30, r16
     784:	e2 95       	swap	r30
     786:	f2 95       	swap	r31
     788:	f0 7f       	andi	r31, 0xF0	; 240
     78a:	fe 27       	eor	r31, r30
     78c:	e0 7f       	andi	r30, 0xF0	; 240
     78e:	fe 27       	eor	r31, r30
     790:	e4 54       	subi	r30, 0x44	; 68
     792:	fd 4f       	sbci	r31, 0xFD	; 253
     794:	ec 0f       	add	r30, r28
     796:	fd 1f       	adc	r31, r29
     798:	80 81       	ld	r24, Z
     79a:	84 30       	cpi	r24, 0x04	; 4
     79c:	79 f4       	brne	.+30     	; 0x7bc <flash_targets+0x54>
				if (targets_visible) {
     79e:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <targets_visible>
     7a2:	88 23       	and	r24, r24
     7a4:	31 f0       	breq	.+12     	; 0x7b2 <flash_targets+0x4a>
					ledmatrix_update_pixel(row, col, COLOUR_TARGET);
     7a6:	4f e0       	ldi	r20, 0x0F	; 15
     7a8:	6c 2f       	mov	r22, r28
     7aa:	80 2f       	mov	r24, r16
     7ac:	0e 94 79 07 	call	0xef2	; 0xef2 <ledmatrix_update_pixel>
     7b0:	05 c0       	rjmp	.+10     	; 0x7bc <flash_targets+0x54>
				} else {
					ledmatrix_update_pixel(row, col, COLOUR_BLACK);
     7b2:	40 e0       	ldi	r20, 0x00	; 0
     7b4:	6c 2f       	mov	r22, r28
     7b6:	80 2f       	mov	r24, r16
     7b8:	0e 94 79 07 	call	0xef2	; 0xef2 <ledmatrix_update_pixel>
}

void flash_targets(void) {
	targets_visible = !targets_visible;
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
		for (int col = 0; col < MATRIX_NUM_COLUMNS; col++) {
     7bc:	21 96       	adiw	r28, 0x01	; 1
     7be:	02 c0       	rjmp	.+4      	; 0x7c4 <flash_targets+0x5c>
     7c0:	c0 e0       	ldi	r28, 0x00	; 0
     7c2:	d0 e0       	ldi	r29, 0x00	; 0
     7c4:	c0 31       	cpi	r28, 0x10	; 16
     7c6:	d1 05       	cpc	r29, r1
     7c8:	e4 f2       	brlt	.-72     	; 0x782 <flash_targets+0x1a>
	}
}

void flash_targets(void) {
	targets_visible = !targets_visible;
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
     7ca:	0f 5f       	subi	r16, 0xFF	; 255
     7cc:	1f 4f       	sbci	r17, 0xFF	; 255
     7ce:	08 30       	cpi	r16, 0x08	; 8
     7d0:	11 05       	cpc	r17, r1
     7d2:	b4 f3       	brlt	.-20     	; 0x7c0 <flash_targets+0x58>
					ledmatrix_update_pixel(row, col, COLOUR_BLACK);
				}
			}
		}
	}
}
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	1f 91       	pop	r17
     7da:	0f 91       	pop	r16
     7dc:	08 95       	ret

000007de <display_terminal_message>:
		return false;
	}
	return true;
}

void display_terminal_message(char type[]) {
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
     7e2:	ec 01       	movw	r28, r24
	if (strcmp(type, "wall") == 0) {
     7e4:	60 e2       	ldi	r22, 0x20	; 32
     7e6:	72 e0       	ldi	r23, 0x02	; 2
     7e8:	0e 94 3b 11 	call	0x2276	; 0x2276 <strcmp>
     7ec:	89 2b       	or	r24, r25
     7ee:	91 f5       	brne	.+100    	; 0x854 <__DATA_REGION_LENGTH__+0x54>
		int rand_num;
		int lb = 1;
		int ub = 3;
		rand_num = (rand() % (ub - lb + 1)) + lb;
     7f0:	0e 94 12 11 	call	0x2224	; 0x2224 <rand>
     7f4:	63 e0       	ldi	r22, 0x03	; 3
     7f6:	70 e0       	ldi	r23, 0x00	; 0
     7f8:	0e 94 24 10 	call	0x2048	; 0x2048 <__divmodhi4>
     7fc:	ec 01       	movw	r28, r24
     7fe:	21 96       	adiw	r28, 0x01	; 1
		move_terminal_cursor(20, 1);
     800:	61 e0       	ldi	r22, 0x01	; 1
     802:	70 e0       	ldi	r23, 0x00	; 0
     804:	84 e1       	ldi	r24, 0x14	; 20
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <move_terminal_cursor>
		if (rand_num == 1) {
     80c:	c1 30       	cpi	r28, 0x01	; 1
     80e:	d1 05       	cpc	r29, r1
     810:	49 f4       	brne	.+18     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
			printf_P(PSTR("Player hit a wall"));
     812:	87 e0       	ldi	r24, 0x07	; 7
     814:	91 e0       	ldi	r25, 0x01	; 1
     816:	9f 93       	push	r25
     818:	8f 93       	push	r24
     81a:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <printf_P>
     81e:	0f 90       	pop	r0
     820:	0f 90       	pop	r0
     822:	6f c0       	rjmp	.+222    	; 0x902 <__stack+0x3>
		} else if (rand_num == 2) {
     824:	c2 30       	cpi	r28, 0x02	; 2
     826:	d1 05       	cpc	r29, r1
     828:	49 f4       	brne	.+18     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
			printf_P(PSTR("Wall hit"));
     82a:	8e ef       	ldi	r24, 0xFE	; 254
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	9f 93       	push	r25
     830:	8f 93       	push	r24
     832:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <printf_P>
     836:	0f 90       	pop	r0
     838:	0f 90       	pop	r0
     83a:	63 c0       	rjmp	.+198    	; 0x902 <__stack+0x3>
		} else if (rand_num == 3) {
     83c:	23 97       	sbiw	r28, 0x03	; 3
     83e:	09 f0       	breq	.+2      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
     840:	60 c0       	rjmp	.+192    	; 0x902 <__stack+0x3>
			printf_P(PSTR("There is a wall in the way"));
     842:	83 ee       	ldi	r24, 0xE3	; 227
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	9f 93       	push	r25
     848:	8f 93       	push	r24
     84a:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <printf_P>
     84e:	0f 90       	pop	r0
     850:	0f 90       	pop	r0
     852:	57 c0       	rjmp	.+174    	; 0x902 <__stack+0x3>
		}
	} else if (strcmp(type, "box_wall") == 0) {
     854:	6c e1       	ldi	r22, 0x1C	; 28
     856:	72 e0       	ldi	r23, 0x02	; 2
     858:	ce 01       	movw	r24, r28
     85a:	0e 94 3b 11 	call	0x2276	; 0x2276 <strcmp>
     85e:	89 2b       	or	r24, r25
     860:	79 f4       	brne	.+30     	; 0x880 <__DATA_REGION_LENGTH__+0x80>
		move_terminal_cursor(20, 1);
     862:	61 e0       	ldi	r22, 0x01	; 1
     864:	70 e0       	ldi	r23, 0x00	; 0
     866:	84 e1       	ldi	r24, 0x14	; 20
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <move_terminal_cursor>
		printf_P(PSTR("Cannot push box onto wall"));
     86e:	89 ec       	ldi	r24, 0xC9	; 201
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	9f 93       	push	r25
     874:	8f 93       	push	r24
     876:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <printf_P>
     87a:	0f 90       	pop	r0
     87c:	0f 90       	pop	r0
     87e:	41 c0       	rjmp	.+130    	; 0x902 <__stack+0x3>
	} else if (strcmp(type, "box_box") == 0) {
     880:	65 e2       	ldi	r22, 0x25	; 37
     882:	72 e0       	ldi	r23, 0x02	; 2
     884:	ce 01       	movw	r24, r28
     886:	0e 94 3b 11 	call	0x2276	; 0x2276 <strcmp>
     88a:	89 2b       	or	r24, r25
     88c:	79 f4       	brne	.+30     	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
		move_terminal_cursor(20, 1);
     88e:	61 e0       	ldi	r22, 0x01	; 1
     890:	70 e0       	ldi	r23, 0x00	; 0
     892:	84 e1       	ldi	r24, 0x14	; 20
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <move_terminal_cursor>
		printf_P(PSTR("Cannot stack boxes"));
     89a:	86 eb       	ldi	r24, 0xB6	; 182
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	9f 93       	push	r25
     8a0:	8f 93       	push	r24
     8a2:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <printf_P>
     8a6:	0f 90       	pop	r0
     8a8:	0f 90       	pop	r0
     8aa:	2b c0       	rjmp	.+86     	; 0x902 <__stack+0x3>
	} else if (strcmp(type, "wall_diagonal") == 0) {
     8ac:	6d e2       	ldi	r22, 0x2D	; 45
     8ae:	72 e0       	ldi	r23, 0x02	; 2
     8b0:	ce 01       	movw	r24, r28
     8b2:	0e 94 3b 11 	call	0x2276	; 0x2276 <strcmp>
     8b6:	89 2b       	or	r24, r25
     8b8:	79 f4       	brne	.+30     	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
		move_terminal_cursor(20, 1);
     8ba:	61 e0       	ldi	r22, 0x01	; 1
     8bc:	70 e0       	ldi	r23, 0x00	; 0
     8be:	84 e1       	ldi	r24, 0x14	; 20
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <move_terminal_cursor>
		printf_P(PSTR("Diagonal move cannot be made"));
     8c6:	89 e9       	ldi	r24, 0x99	; 153
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	9f 93       	push	r25
     8cc:	8f 93       	push	r24
     8ce:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <printf_P>
     8d2:	0f 90       	pop	r0
     8d4:	0f 90       	pop	r0
     8d6:	15 c0       	rjmp	.+42     	; 0x902 <__stack+0x3>
	} else if (strcmp(type, "box_diagonal") == 0) {
     8d8:	6b e3       	ldi	r22, 0x3B	; 59
     8da:	72 e0       	ldi	r23, 0x02	; 2
     8dc:	ce 01       	movw	r24, r28
     8de:	0e 94 3b 11 	call	0x2276	; 0x2276 <strcmp>
     8e2:	89 2b       	or	r24, r25
     8e4:	71 f4       	brne	.+28     	; 0x902 <__stack+0x3>
		move_terminal_cursor(20, 1);
     8e6:	61 e0       	ldi	r22, 0x01	; 1
     8e8:	70 e0       	ldi	r23, 0x00	; 0
     8ea:	84 e1       	ldi	r24, 0x14	; 20
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <move_terminal_cursor>
		printf_P(PSTR("Cannot move boxes diagonally"));
     8f2:	8c e7       	ldi	r24, 0x7C	; 124
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	9f 93       	push	r25
     8f8:	8f 93       	push	r24
     8fa:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <printf_P>
     8fe:	0f 90       	pop	r0
     900:	0f 90       	pop	r0
}
	return;
}
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	08 95       	ret

00000908 <check_wall_or_box>:
	}
	return false;  //both directions failed, move cannot be made
}

bool check_wall_or_box(int row, int col) {
	if (board[row][col] == WALL) {
     908:	82 95       	swap	r24
     90a:	92 95       	swap	r25
     90c:	90 7f       	andi	r25, 0xF0	; 240
     90e:	98 27       	eor	r25, r24
     910:	80 7f       	andi	r24, 0xF0	; 240
     912:	98 27       	eor	r25, r24
     914:	84 54       	subi	r24, 0x44	; 68
     916:	9d 4f       	sbci	r25, 0xFD	; 253
     918:	fc 01       	movw	r30, r24
     91a:	e6 0f       	add	r30, r22
     91c:	f7 1f       	adc	r31, r23
     91e:	80 81       	ld	r24, Z
     920:	81 30       	cpi	r24, 0x01	; 1
     922:	31 f4       	brne	.+12     	; 0x930 <check_wall_or_box+0x28>
		display_terminal_message("wall_diagonal");
     924:	8d e2       	ldi	r24, 0x2D	; 45
     926:	92 e0       	ldi	r25, 0x02	; 2
     928:	0e 94 ef 03 	call	0x7de	; 0x7de <display_terminal_message>
		return false;
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	08 95       	ret
	} else if (board[row][col] == BOX) {
     930:	82 30       	cpi	r24, 0x02	; 2
     932:	31 f4       	brne	.+12     	; 0x940 <check_wall_or_box+0x38>
		display_terminal_message("box_diagonal");
     934:	8b e3       	ldi	r24, 0x3B	; 59
     936:	92 e0       	ldi	r25, 0x02	; 2
     938:	0e 94 ef 03 	call	0x7de	; 0x7de <display_terminal_message>
		return false;
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	08 95       	ret
	} else if (board[row][col] == (BOX | TARGET)) {
     940:	86 30       	cpi	r24, 0x06	; 6
     942:	31 f4       	brne	.+12     	; 0x950 <check_wall_or_box+0x48>
		display_terminal_message("box_diagonal");
     944:	8b e3       	ldi	r24, 0x3B	; 59
     946:	92 e0       	ldi	r25, 0x02	; 2
     948:	0e 94 ef 03 	call	0x7de	; 0x7de <display_terminal_message>
		return false;
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	08 95       	ret
	}
	return true;
     950:	81 e0       	ldi	r24, 0x01	; 1
}
     952:	08 95       	ret

00000954 <is_game_over>:

// This function checks if the game is over (i.e., the level is solved), and
// returns true iff (if and only if) the game is over.
bool is_game_over(void)
{
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	17 c0       	rjmp	.+46     	; 0x988 <is_game_over+0x34>
		for (int col = 0; col < MATRIX_NUM_COLUMNS; col++) {
			if (board[row][col] == TARGET) {
     95a:	fa 01       	movw	r30, r20
     95c:	e2 95       	swap	r30
     95e:	f2 95       	swap	r31
     960:	f0 7f       	andi	r31, 0xF0	; 240
     962:	fe 27       	eor	r31, r30
     964:	e0 7f       	andi	r30, 0xF0	; 240
     966:	fe 27       	eor	r31, r30
     968:	e4 54       	subi	r30, 0x44	; 68
     96a:	fd 4f       	sbci	r31, 0xFD	; 253
     96c:	e8 0f       	add	r30, r24
     96e:	f9 1f       	adc	r31, r25
     970:	20 81       	ld	r18, Z
     972:	24 30       	cpi	r18, 0x04	; 4
     974:	a1 f0       	breq	.+40     	; 0x99e <is_game_over+0x4a>
// This function checks if the game is over (i.e., the level is solved), and
// returns true iff (if and only if) the game is over.
bool is_game_over(void)
{
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
		for (int col = 0; col < MATRIX_NUM_COLUMNS; col++) {
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	02 c0       	rjmp	.+4      	; 0x97e <is_game_over+0x2a>
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	80 31       	cpi	r24, 0x10	; 16
     980:	91 05       	cpc	r25, r1
     982:	5c f3       	brlt	.-42     	; 0x95a <is_game_over+0x6>

// This function checks if the game is over (i.e., the level is solved), and
// returns true iff (if and only if) the game is over.
bool is_game_over(void)
{
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
     984:	4f 5f       	subi	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	48 30       	cpi	r20, 0x08	; 8
     98a:	51 05       	cpc	r21, r1
     98c:	b4 f3       	brlt	.-20     	; 0x97a <is_game_over+0x26>
			if (board[row][col] == TARGET) {
				return false;
			}
		}
	}
	paint_square(player_row, player_col);
     98e:	60 91 ba 02 	lds	r22, 0x02BA	; 0x8002ba <player_col>
     992:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <player_row>
     996:	0e 94 f5 02 	call	0x5ea	; 0x5ea <paint_square>
	return true;
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	08 95       	ret
bool is_game_over(void)
{
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
		for (int col = 0; col < MATRIX_NUM_COLUMNS; col++) {
			if (board[row][col] == TARGET) {
				return false;
     99e:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}
	paint_square(player_row, player_col);
	return true;
}
     9a0:	08 95       	ret

000009a2 <modulo>:

//Calculates the modulus of a number for player movement
int modulo(int x,int y){
     9a2:	9b 01       	movw	r18, r22
	return (x % y + y) % y;
     9a4:	0e 94 24 10 	call	0x2048	; 0x2048 <__divmodhi4>
     9a8:	82 0f       	add	r24, r18
     9aa:	93 1f       	adc	r25, r19
     9ac:	b9 01       	movw	r22, r18
     9ae:	0e 94 24 10 	call	0x2048	; 0x2048 <__divmodhi4>
}
     9b2:	08 95       	ret

000009b4 <update_terminal_display>:
		printf("\n");
		GAME_BOARD_ROW++;
	}
}

void update_terminal_display(int board_row, int terminal_row, int terminal_col) {
     9b4:	0f 93       	push	r16
     9b6:	1f 93       	push	r17
     9b8:	cf 93       	push	r28
     9ba:	df 93       	push	r29
     9bc:	8c 01       	movw	r16, r24
     9be:	cb 01       	movw	r24, r22
	move_terminal_cursor(terminal_row, terminal_col);
     9c0:	ba 01       	movw	r22, r20
     9c2:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <move_terminal_cursor>
	clear_to_end_of_line();
     9c6:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <clear_to_end_of_line>
	for (int column = 1; column <= MATRIX_NUM_COLUMNS-1; column++) {
     9ca:	c1 e0       	ldi	r28, 0x01	; 1
     9cc:	d0 e0       	ldi	r29, 0x00	; 0
     9ce:	43 c0       	rjmp	.+134    	; 0xa56 <update_terminal_display+0xa2>
		if (board[board_row][column] == ROOM) {
     9d0:	f8 01       	movw	r30, r16
     9d2:	e2 95       	swap	r30
     9d4:	f2 95       	swap	r31
     9d6:	f0 7f       	andi	r31, 0xF0	; 240
     9d8:	fe 27       	eor	r31, r30
     9da:	e0 7f       	andi	r30, 0xF0	; 240
     9dc:	fe 27       	eor	r31, r30
     9de:	e4 54       	subi	r30, 0x44	; 68
     9e0:	fd 4f       	sbci	r31, 0xFD	; 253
     9e2:	ec 0f       	add	r30, r28
     9e4:	fd 1f       	adc	r31, r29
     9e6:	80 81       	ld	r24, Z
     9e8:	81 11       	cpse	r24, r1
     9ea:	09 c0       	rjmp	.+18     	; 0x9fe <update_terminal_display+0x4a>
			printf("\033[100m   \033[0m");
     9ec:	88 e4       	ldi	r24, 0x48	; 72
     9ee:	92 e0       	ldi	r25, 0x02	; 2
     9f0:	9f 93       	push	r25
     9f2:	8f 93       	push	r24
     9f4:	0e 94 be 11 	call	0x237c	; 0x237c <printf>
     9f8:	0f 90       	pop	r0
     9fa:	0f 90       	pop	r0
     9fc:	2b c0       	rjmp	.+86     	; 0xa54 <update_terminal_display+0xa0>
		} else if (board[board_row][column] == WALL) {
     9fe:	81 30       	cpi	r24, 0x01	; 1
     a00:	49 f4       	brne	.+18     	; 0xa14 <update_terminal_display+0x60>
			printf("\033[103m   \033[0m");
     a02:	86 e5       	ldi	r24, 0x56	; 86
     a04:	92 e0       	ldi	r25, 0x02	; 2
     a06:	9f 93       	push	r25
     a08:	8f 93       	push	r24
     a0a:	0e 94 be 11 	call	0x237c	; 0x237c <printf>
     a0e:	0f 90       	pop	r0
     a10:	0f 90       	pop	r0
     a12:	20 c0       	rjmp	.+64     	; 0xa54 <update_terminal_display+0xa0>
		} else if (board[board_row][column] == BOX) {
     a14:	82 30       	cpi	r24, 0x02	; 2
     a16:	49 f4       	brne	.+18     	; 0xa2a <update_terminal_display+0x76>
			printf("\033[43m   \033[0m");
     a18:	84 e6       	ldi	r24, 0x64	; 100
     a1a:	92 e0       	ldi	r25, 0x02	; 2
     a1c:	9f 93       	push	r25
     a1e:	8f 93       	push	r24
     a20:	0e 94 be 11 	call	0x237c	; 0x237c <printf>
     a24:	0f 90       	pop	r0
     a26:	0f 90       	pop	r0
     a28:	15 c0       	rjmp	.+42     	; 0xa54 <update_terminal_display+0xa0>
		} else if (board[board_row][column] == TARGET) {
     a2a:	84 30       	cpi	r24, 0x04	; 4
     a2c:	49 f4       	brne	.+18     	; 0xa40 <update_terminal_display+0x8c>
			printf("\033[41m   \033[0m");
     a2e:	81 e7       	ldi	r24, 0x71	; 113
     a30:	92 e0       	ldi	r25, 0x02	; 2
     a32:	9f 93       	push	r25
     a34:	8f 93       	push	r24
     a36:	0e 94 be 11 	call	0x237c	; 0x237c <printf>
     a3a:	0f 90       	pop	r0
     a3c:	0f 90       	pop	r0
     a3e:	0a c0       	rjmp	.+20     	; 0xa54 <update_terminal_display+0xa0>
		} else if (board[board_row][column] == (BOX | TARGET)) {
     a40:	86 30       	cpi	r24, 0x06	; 6
     a42:	41 f4       	brne	.+16     	; 0xa54 <update_terminal_display+0xa0>
			printf("\033[102m   \033[0m");
     a44:	8e e7       	ldi	r24, 0x7E	; 126
     a46:	92 e0       	ldi	r25, 0x02	; 2
     a48:	9f 93       	push	r25
     a4a:	8f 93       	push	r24
     a4c:	0e 94 be 11 	call	0x237c	; 0x237c <printf>
     a50:	0f 90       	pop	r0
     a52:	0f 90       	pop	r0
}

void update_terminal_display(int board_row, int terminal_row, int terminal_col) {
	move_terminal_cursor(terminal_row, terminal_col);
	clear_to_end_of_line();
	for (int column = 1; column <= MATRIX_NUM_COLUMNS-1; column++) {
     a54:	21 96       	adiw	r28, 0x01	; 1
     a56:	c0 31       	cpi	r28, 0x10	; 16
     a58:	d1 05       	cpc	r29, r1
     a5a:	0c f4       	brge	.+2      	; 0xa5e <update_terminal_display+0xaa>
     a5c:	b9 cf       	rjmp	.-142    	; 0x9d0 <update_terminal_display+0x1c>
			printf("\033[41m   \033[0m");
		} else if (board[board_row][column] == (BOX | TARGET)) {
			printf("\033[102m   \033[0m");
		}
	}
     a5e:	df 91       	pop	r29
     a60:	cf 91       	pop	r28
     a62:	1f 91       	pop	r17
     a64:	0f 91       	pop	r16
     a66:	08 95       	ret

00000a68 <move_player>:
	}
}

// This function handles player movements.
bool move_player(int8_t delta_row, int8_t delta_col)
{
     a68:	af 92       	push	r10
     a6a:	bf 92       	push	r11
     a6c:	cf 92       	push	r12
     a6e:	df 92       	push	r13
     a70:	ef 92       	push	r14
     a72:	ff 92       	push	r15
     a74:	0f 93       	push	r16
     a76:	1f 93       	push	r17
     a78:	cf 93       	push	r28
     a7a:	df 93       	push	r29
     a7c:	c6 2e       	mov	r12, r22
	// |    message area of the terminal and return a valid indicating a |
	// |    valid move.                                                  |
	// +-----------------------------------------------------------------+
	
	//Calculate next positions
	int next_row = modulo((player_row+delta_row), 8);
     a7e:	b0 90 bb 02 	lds	r11, 0x02BB	; 0x8002bb <player_row>
     a82:	e8 2e       	mov	r14, r24
     a84:	88 0f       	add	r24, r24
     a86:	ff 08       	sbc	r15, r15
     a88:	68 e0       	ldi	r22, 0x08	; 8
     a8a:	70 e0       	ldi	r23, 0x00	; 0
     a8c:	c7 01       	movw	r24, r14
     a8e:	8b 0d       	add	r24, r11
     a90:	91 1d       	adc	r25, r1
     a92:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <modulo>
     a96:	ec 01       	movw	r28, r24
	int next_col = modulo((player_col+delta_col), 16);
     a98:	a0 90 ba 02 	lds	r10, 0x02BA	; 0x8002ba <player_col>
     a9c:	0c 2c       	mov	r0, r12
     a9e:	00 0c       	add	r0, r0
     aa0:	dd 08       	sbc	r13, r13
     aa2:	60 e1       	ldi	r22, 0x10	; 16
     aa4:	70 e0       	ldi	r23, 0x00	; 0
     aa6:	c6 01       	movw	r24, r12
     aa8:	8a 0d       	add	r24, r10
     aaa:	91 1d       	adc	r25, r1
     aac:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <modulo>
     ab0:	8c 01       	movw	r16, r24
	int next_next_row = modulo((next_row+delta_row), 8);
     ab2:	68 e0       	ldi	r22, 0x08	; 8
     ab4:	70 e0       	ldi	r23, 0x00	; 0
     ab6:	c7 01       	movw	r24, r14
     ab8:	8c 0f       	add	r24, r28
     aba:	9d 1f       	adc	r25, r29
     abc:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <modulo>
     ac0:	7c 01       	movw	r14, r24
	int next_next_col = modulo((next_col+delta_col), 16);
     ac2:	60 e1       	ldi	r22, 0x10	; 16
     ac4:	70 e0       	ldi	r23, 0x00	; 0
     ac6:	c6 01       	movw	r24, r12
     ac8:	80 0f       	add	r24, r16
     aca:	91 1f       	adc	r25, r17
     acc:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <modulo>
     ad0:	6c 01       	movw	r12, r24

	paint_square(player_row, player_col);
     ad2:	6a 2d       	mov	r22, r10
     ad4:	8b 2d       	mov	r24, r11
     ad6:	0e 94 f5 02 	call	0x5ea	; 0x5ea <paint_square>
	move_terminal_cursor(20,0);
     ada:	60 e0       	ldi	r22, 0x00	; 0
     adc:	70 e0       	ldi	r23, 0x00	; 0
     ade:	84 e1       	ldi	r24, 0x14	; 20
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <move_terminal_cursor>
	clear_to_end_of_line();
     ae6:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <clear_to_end_of_line>
	
	//checks for wall in front of player
	if (board[next_row][next_col] == WALL) {
     aea:	fe 01       	movw	r30, r28
     aec:	e2 95       	swap	r30
     aee:	f2 95       	swap	r31
     af0:	f0 7f       	andi	r31, 0xF0	; 240
     af2:	fe 27       	eor	r31, r30
     af4:	e0 7f       	andi	r30, 0xF0	; 240
     af6:	fe 27       	eor	r31, r30
     af8:	e4 54       	subi	r30, 0x44	; 68
     afa:	fd 4f       	sbci	r31, 0xFD	; 253
     afc:	e0 0f       	add	r30, r16
     afe:	f1 1f       	adc	r31, r17
     b00:	80 81       	ld	r24, Z
     b02:	81 30       	cpi	r24, 0x01	; 1
     b04:	31 f4       	brne	.+12     	; 0xb12 <move_player+0xaa>
		display_terminal_message("wall");
     b06:	80 e2       	ldi	r24, 0x20	; 32
     b08:	92 e0       	ldi	r25, 0x02	; 2
     b0a:	0e 94 ef 03 	call	0x7de	; 0x7de <display_terminal_message>
		return false;
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	d2 c0       	rjmp	.+420    	; 0xcb6 <move_player+0x24e>
		
	//checks for filled target in front of player
	} else if (board[next_row][next_col] == (BOX | TARGET)) {
     b12:	86 30       	cpi	r24, 0x06	; 6
     b14:	09 f0       	breq	.+2      	; 0xb18 <move_player+0xb0>
     b16:	4b c0       	rjmp	.+150    	; 0xbae <move_player+0x146>
		if (board[next_next_row][next_next_col] == WALL) {
     b18:	f7 01       	movw	r30, r14
     b1a:	e2 95       	swap	r30
     b1c:	f2 95       	swap	r31
     b1e:	f0 7f       	andi	r31, 0xF0	; 240
     b20:	fe 27       	eor	r31, r30
     b22:	e0 7f       	andi	r30, 0xF0	; 240
     b24:	fe 27       	eor	r31, r30
     b26:	e4 54       	subi	r30, 0x44	; 68
     b28:	fd 4f       	sbci	r31, 0xFD	; 253
     b2a:	ec 0d       	add	r30, r12
     b2c:	fd 1d       	adc	r31, r13
     b2e:	80 81       	ld	r24, Z
     b30:	81 30       	cpi	r24, 0x01	; 1
     b32:	31 f4       	brne	.+12     	; 0xb40 <move_player+0xd8>
			display_terminal_message("box_wall");
     b34:	8c e1       	ldi	r24, 0x1C	; 28
     b36:	92 e0       	ldi	r25, 0x02	; 2
     b38:	0e 94 ef 03 	call	0x7de	; 0x7de <display_terminal_message>
			return false;
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	bb c0       	rjmp	.+374    	; 0xcb6 <move_player+0x24e>
		}
		board[next_row][next_col] = TARGET;
     b40:	fe 01       	movw	r30, r28
     b42:	e2 95       	swap	r30
     b44:	f2 95       	swap	r31
     b46:	f0 7f       	andi	r31, 0xF0	; 240
     b48:	fe 27       	eor	r31, r30
     b4a:	e0 7f       	andi	r30, 0xF0	; 240
     b4c:	fe 27       	eor	r31, r30
     b4e:	e4 54       	subi	r30, 0x44	; 68
     b50:	fd 4f       	sbci	r31, 0xFD	; 253
     b52:	e0 0f       	add	r30, r16
     b54:	f1 1f       	adc	r31, r17
     b56:	84 e0       	ldi	r24, 0x04	; 4
     b58:	80 83       	st	Z, r24
		paint_square(next_row, next_col);
     b5a:	60 2f       	mov	r22, r16
     b5c:	8c 2f       	mov	r24, r28
     b5e:	0e 94 f5 02 	call	0x5ea	; 0x5ea <paint_square>
		update_terminal_display(next_row, MATRIX_NUM_ROWS-next_row, 1);
     b62:	68 94       	set
     b64:	aa 24       	eor	r10, r10
     b66:	a3 f8       	bld	r10, 3
     b68:	b1 2c       	mov	r11, r1
     b6a:	b5 01       	movw	r22, r10
     b6c:	6c 1b       	sub	r22, r28
     b6e:	7d 0b       	sbc	r23, r29
     b70:	41 e0       	ldi	r20, 0x01	; 1
     b72:	50 e0       	ldi	r21, 0x00	; 0
     b74:	ce 01       	movw	r24, r28
     b76:	0e 94 da 04 	call	0x9b4	; 0x9b4 <update_terminal_display>
		board[next_next_row][next_next_col] = BOX;
     b7a:	f7 01       	movw	r30, r14
     b7c:	e2 95       	swap	r30
     b7e:	f2 95       	swap	r31
     b80:	f0 7f       	andi	r31, 0xF0	; 240
     b82:	fe 27       	eor	r31, r30
     b84:	e0 7f       	andi	r30, 0xF0	; 240
     b86:	fe 27       	eor	r31, r30
     b88:	e4 54       	subi	r30, 0x44	; 68
     b8a:	fd 4f       	sbci	r31, 0xFD	; 253
     b8c:	ec 0d       	add	r30, r12
     b8e:	fd 1d       	adc	r31, r13
     b90:	82 e0       	ldi	r24, 0x02	; 2
     b92:	80 83       	st	Z, r24
		paint_square(next_next_row, next_next_col);
     b94:	6c 2d       	mov	r22, r12
     b96:	8e 2d       	mov	r24, r14
     b98:	0e 94 f5 02 	call	0x5ea	; 0x5ea <paint_square>
		update_terminal_display(next_next_row, MATRIX_NUM_ROWS-next_next_row, 1);
     b9c:	b5 01       	movw	r22, r10
     b9e:	6e 19       	sub	r22, r14
     ba0:	7f 09       	sbc	r23, r15
     ba2:	41 e0       	ldi	r20, 0x01	; 1
     ba4:	50 e0       	ldi	r21, 0x00	; 0
     ba6:	c7 01       	movw	r24, r14
     ba8:	0e 94 da 04 	call	0x9b4	; 0x9b4 <update_terminal_display>
     bac:	6e c0       	rjmp	.+220    	; 0xc8a <move_player+0x222>
		
	//checks for box in front of player
	} else if (board[next_row][next_col] == BOX) {
     bae:	82 30       	cpi	r24, 0x02	; 2
     bb0:	09 f0       	breq	.+2      	; 0xbb4 <move_player+0x14c>
     bb2:	6b c0       	rjmp	.+214    	; 0xc8a <move_player+0x222>
		if (board[next_next_row][next_next_col] == WALL) {
     bb4:	f7 01       	movw	r30, r14
     bb6:	e2 95       	swap	r30
     bb8:	f2 95       	swap	r31
     bba:	f0 7f       	andi	r31, 0xF0	; 240
     bbc:	fe 27       	eor	r31, r30
     bbe:	e0 7f       	andi	r30, 0xF0	; 240
     bc0:	fe 27       	eor	r31, r30
     bc2:	e4 54       	subi	r30, 0x44	; 68
     bc4:	fd 4f       	sbci	r31, 0xFD	; 253
     bc6:	ec 0d       	add	r30, r12
     bc8:	fd 1d       	adc	r31, r13
     bca:	80 81       	ld	r24, Z
     bcc:	81 30       	cpi	r24, 0x01	; 1
     bce:	31 f4       	brne	.+12     	; 0xbdc <move_player+0x174>
			display_terminal_message("box_wall");
     bd0:	8c e1       	ldi	r24, 0x1C	; 28
     bd2:	92 e0       	ldi	r25, 0x02	; 2
     bd4:	0e 94 ef 03 	call	0x7de	; 0x7de <display_terminal_message>
			return false;
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	6d c0       	rjmp	.+218    	; 0xcb6 <move_player+0x24e>
		} else if (board[next_next_row][next_next_col] == BOX) {
     bdc:	82 30       	cpi	r24, 0x02	; 2
     bde:	31 f4       	brne	.+12     	; 0xbec <move_player+0x184>
			display_terminal_message("box_box");
     be0:	85 e2       	ldi	r24, 0x25	; 37
     be2:	92 e0       	ldi	r25, 0x02	; 2
     be4:	0e 94 ef 03 	call	0x7de	; 0x7de <display_terminal_message>
			return false;
     be8:	80 e0       	ldi	r24, 0x00	; 0
     bea:	65 c0       	rjmp	.+202    	; 0xcb6 <move_player+0x24e>
		} else {
			board[next_row][next_col] = ROOM;
     bec:	fe 01       	movw	r30, r28
     bee:	e2 95       	swap	r30
     bf0:	f2 95       	swap	r31
     bf2:	f0 7f       	andi	r31, 0xF0	; 240
     bf4:	fe 27       	eor	r31, r30
     bf6:	e0 7f       	andi	r30, 0xF0	; 240
     bf8:	fe 27       	eor	r31, r30
     bfa:	e4 54       	subi	r30, 0x44	; 68
     bfc:	fd 4f       	sbci	r31, 0xFD	; 253
     bfe:	e0 0f       	add	r30, r16
     c00:	f1 1f       	adc	r31, r17
     c02:	10 82       	st	Z, r1
			if (board[next_next_row][next_next_col] == TARGET) {
     c04:	f7 01       	movw	r30, r14
     c06:	e2 95       	swap	r30
     c08:	f2 95       	swap	r31
     c0a:	f0 7f       	andi	r31, 0xF0	; 240
     c0c:	fe 27       	eor	r31, r30
     c0e:	e0 7f       	andi	r30, 0xF0	; 240
     c10:	fe 27       	eor	r31, r30
     c12:	e4 54       	subi	r30, 0x44	; 68
     c14:	fd 4f       	sbci	r31, 0xFD	; 253
     c16:	ec 0d       	add	r30, r12
     c18:	fd 1d       	adc	r31, r13
     c1a:	80 81       	ld	r24, Z
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	d9 f4       	brne	.+54     	; 0xc56 <move_player+0x1ee>
				board[next_next_row][next_next_col] = (TARGET | BOX);
     c20:	f7 01       	movw	r30, r14
     c22:	e2 95       	swap	r30
     c24:	f2 95       	swap	r31
     c26:	f0 7f       	andi	r31, 0xF0	; 240
     c28:	fe 27       	eor	r31, r30
     c2a:	e0 7f       	andi	r30, 0xF0	; 240
     c2c:	fe 27       	eor	r31, r30
     c2e:	e4 54       	subi	r30, 0x44	; 68
     c30:	fd 4f       	sbci	r31, 0xFD	; 253
     c32:	ec 0d       	add	r30, r12
     c34:	fd 1d       	adc	r31, r13
     c36:	86 e0       	ldi	r24, 0x06	; 6
     c38:	80 83       	st	Z, r24
				paint_square(next_next_row, next_next_col);
     c3a:	6c 2d       	mov	r22, r12
     c3c:	8e 2d       	mov	r24, r14
     c3e:	0e 94 f5 02 	call	0x5ea	; 0x5ea <paint_square>
				update_terminal_display(next_next_row, MATRIX_NUM_ROWS-next_next_row, 1);
     c42:	68 e0       	ldi	r22, 0x08	; 8
     c44:	70 e0       	ldi	r23, 0x00	; 0
     c46:	6e 19       	sub	r22, r14
     c48:	7f 09       	sbc	r23, r15
     c4a:	41 e0       	ldi	r20, 0x01	; 1
     c4c:	50 e0       	ldi	r21, 0x00	; 0
     c4e:	c7 01       	movw	r24, r14
     c50:	0e 94 da 04 	call	0x9b4	; 0x9b4 <update_terminal_display>
     c54:	1a c0       	rjmp	.+52     	; 0xc8a <move_player+0x222>
			} else {
				board[next_next_row][next_next_col] = BOX;
     c56:	f7 01       	movw	r30, r14
     c58:	e2 95       	swap	r30
     c5a:	f2 95       	swap	r31
     c5c:	f0 7f       	andi	r31, 0xF0	; 240
     c5e:	fe 27       	eor	r31, r30
     c60:	e0 7f       	andi	r30, 0xF0	; 240
     c62:	fe 27       	eor	r31, r30
     c64:	e4 54       	subi	r30, 0x44	; 68
     c66:	fd 4f       	sbci	r31, 0xFD	; 253
     c68:	ec 0d       	add	r30, r12
     c6a:	fd 1d       	adc	r31, r13
     c6c:	82 e0       	ldi	r24, 0x02	; 2
     c6e:	80 83       	st	Z, r24
				paint_square(next_next_row, next_next_col);
     c70:	6c 2d       	mov	r22, r12
     c72:	8e 2d       	mov	r24, r14
     c74:	0e 94 f5 02 	call	0x5ea	; 0x5ea <paint_square>
				update_terminal_display(next_next_row, MATRIX_NUM_ROWS-next_next_row, 1);
     c78:	68 e0       	ldi	r22, 0x08	; 8
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	6e 19       	sub	r22, r14
     c7e:	7f 09       	sbc	r23, r15
     c80:	41 e0       	ldi	r20, 0x01	; 1
     c82:	50 e0       	ldi	r21, 0x00	; 0
     c84:	c7 01       	movw	r24, r14
     c86:	0e 94 da 04 	call	0x9b4	; 0x9b4 <update_terminal_display>
			}
		}
	}
	player_row = next_row;
     c8a:	8c 2f       	mov	r24, r28
     c8c:	c0 93 bb 02 	sts	0x02BB, r28	; 0x8002bb <player_row>
	player_col = next_col;
     c90:	00 93 ba 02 	sts	0x02BA, r16	; 0x8002ba <player_col>
	paint_square(player_row, player_col);
     c94:	60 2f       	mov	r22, r16
     c96:	0e 94 f5 02 	call	0x5ea	; 0x5ea <paint_square>
	update_terminal_display(player_row, MATRIX_NUM_ROWS-player_row, 1);
     c9a:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <player_row>
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	68 e0       	ldi	r22, 0x08	; 8
     ca2:	70 e0       	ldi	r23, 0x00	; 0
     ca4:	68 1b       	sub	r22, r24
     ca6:	79 0b       	sbc	r23, r25
     ca8:	41 e0       	ldi	r20, 0x01	; 1
     caa:	50 e0       	ldi	r21, 0x00	; 0
     cac:	0e 94 da 04 	call	0x9b4	; 0x9b4 <update_terminal_display>
	flash_player();
     cb0:	0e 94 9d 03 	call	0x73a	; 0x73a <flash_player>
	return true;
     cb4:	81 e0       	ldi	r24, 0x01	; 1
}
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	1f 91       	pop	r17
     cbc:	0f 91       	pop	r16
     cbe:	ff 90       	pop	r15
     cc0:	ef 90       	pop	r14
     cc2:	df 90       	pop	r13
     cc4:	cf 90       	pop	r12
     cc6:	bf 90       	pop	r11
     cc8:	af 90       	pop	r10
     cca:	08 95       	ret

00000ccc <move_diagonal>:

bool move_diagonal(int8_t delta_row_1, int8_t delta_col_1, int8_t delta_row_2, int8_t delta_col_2) {
     ccc:	8f 92       	push	r8
     cce:	9f 92       	push	r9
     cd0:	af 92       	push	r10
     cd2:	bf 92       	push	r11
     cd4:	df 92       	push	r13
     cd6:	ef 92       	push	r14
     cd8:	ff 92       	push	r15
     cda:	0f 93       	push	r16
     cdc:	1f 93       	push	r17
     cde:	cf 93       	push	r28
     ce0:	df 93       	push	r29
     ce2:	06 2f       	mov	r16, r22
     ce4:	d4 2e       	mov	r13, r20
     ce6:	d2 2f       	mov	r29, r18
	int first_move_row;
	int first_move_col;
	int second_move_row;
	int second_move_col;
	first_move_row = modulo((player_row+delta_row_1), 8);  //try moving in the first direction first
     ce8:	e8 2e       	mov	r14, r24
     cea:	88 0f       	add	r24, r24
     cec:	ff 08       	sbc	r15, r15
     cee:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <player_row>
     cf2:	68 e0       	ldi	r22, 0x08	; 8
     cf4:	70 e0       	ldi	r23, 0x00	; 0
     cf6:	97 01       	movw	r18, r14
     cf8:	28 0f       	add	r18, r24
     cfa:	31 1d       	adc	r19, r1
     cfc:	c9 01       	movw	r24, r18
     cfe:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <modulo>
     d02:	4c 01       	movw	r8, r24
	first_move_col = modulo((player_col+delta_col_1), 16);
     d04:	00 2e       	mov	r0, r16
     d06:	00 0c       	add	r0, r0
     d08:	11 0b       	sbc	r17, r17
     d0a:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <player_col>
     d0e:	60 e1       	ldi	r22, 0x10	; 16
     d10:	70 e0       	ldi	r23, 0x00	; 0
     d12:	98 01       	movw	r18, r16
     d14:	28 0f       	add	r18, r24
     d16:	31 1d       	adc	r19, r1
     d18:	c9 01       	movw	r24, r18
     d1a:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <modulo>
     d1e:	5c 01       	movw	r10, r24
	if (check_wall_or_box(first_move_row, first_move_col)) {  //try first move
     d20:	bc 01       	movw	r22, r24
     d22:	c4 01       	movw	r24, r8
     d24:	0e 94 84 04 	call	0x908	; 0x908 <check_wall_or_box>
     d28:	88 23       	and	r24, r24
     d2a:	d1 f1       	breq	.+116    	; 0xda0 <move_diagonal+0xd4>
		second_move_row = modulo((first_move_row+delta_row_2), 8);
     d2c:	68 e0       	ldi	r22, 0x08	; 8
     d2e:	70 e0       	ldi	r23, 0x00	; 0
     d30:	c4 01       	movw	r24, r8
     d32:	8d 0d       	add	r24, r13
     d34:	91 1d       	adc	r25, r1
     d36:	d7 fc       	sbrc	r13, 7
     d38:	9a 95       	dec	r25
     d3a:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <modulo>
     d3e:	98 2e       	mov	r9, r24
     d40:	c9 2f       	mov	r28, r25
		second_move_col = modulo((first_move_col+delta_col_2), 16);
     d42:	60 e1       	ldi	r22, 0x10	; 16
     d44:	70 e0       	ldi	r23, 0x00	; 0
     d46:	c5 01       	movw	r24, r10
     d48:	8d 0f       	add	r24, r29
     d4a:	91 1d       	adc	r25, r1
     d4c:	d7 fd       	sbrc	r29, 7
     d4e:	9a 95       	dec	r25
     d50:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <modulo>
     d54:	b8 2e       	mov	r11, r24
		if (check_wall_or_box(second_move_row, second_move_col)) {  //try second move
     d56:	68 2f       	mov	r22, r24
     d58:	79 2f       	mov	r23, r25
     d5a:	89 2d       	mov	r24, r9
     d5c:	9c 2f       	mov	r25, r28
     d5e:	0e 94 84 04 	call	0x908	; 0x908 <check_wall_or_box>
     d62:	c8 2f       	mov	r28, r24
     d64:	88 23       	and	r24, r24
     d66:	e1 f0       	breq	.+56     	; 0xda0 <move_diagonal+0xd4>
			paint_square(player_row, player_col);  //second move successful
     d68:	60 91 ba 02 	lds	r22, 0x02BA	; 0x8002ba <player_col>
     d6c:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <player_row>
     d70:	0e 94 f5 02 	call	0x5ea	; 0x5ea <paint_square>
			player_row = second_move_row;
     d74:	90 92 bb 02 	sts	0x02BB, r9	; 0x8002bb <player_row>
			player_col = second_move_col;
     d78:	b0 92 ba 02 	sts	0x02BA, r11	; 0x8002ba <player_col>
			paint_square(player_row, player_col);
     d7c:	6b 2d       	mov	r22, r11
     d7e:	89 2d       	mov	r24, r9
     d80:	0e 94 f5 02 	call	0x5ea	; 0x5ea <paint_square>
			update_terminal_display(player_row, MATRIX_NUM_ROWS-player_row, 1);
     d84:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <player_row>
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	68 e0       	ldi	r22, 0x08	; 8
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	68 1b       	sub	r22, r24
     d90:	79 0b       	sbc	r23, r25
     d92:	41 e0       	ldi	r20, 0x01	; 1
     d94:	50 e0       	ldi	r21, 0x00	; 0
     d96:	0e 94 da 04 	call	0x9b4	; 0x9b4 <update_terminal_display>
			flash_player();
     d9a:	0e 94 9d 03 	call	0x73a	; 0x73a <flash_player>
			return true;
     d9e:	54 c0       	rjmp	.+168    	; 0xe48 <move_diagonal+0x17c>
		}
	} 
	first_move_row = modulo((player_row+delta_row_2), 8);  //try moving in the second direction first
     da0:	20 91 bb 02 	lds	r18, 0x02BB	; 0x8002bb <player_row>
     da4:	8d 2d       	mov	r24, r13
     da6:	dd 0c       	add	r13, r13
     da8:	99 0b       	sbc	r25, r25
     daa:	68 e0       	ldi	r22, 0x08	; 8
     dac:	70 e0       	ldi	r23, 0x00	; 0
     dae:	82 0f       	add	r24, r18
     db0:	91 1d       	adc	r25, r1
     db2:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <modulo>
     db6:	5c 01       	movw	r10, r24
	first_move_col = modulo((player_col+delta_col_2), 16);
     db8:	20 91 ba 02 	lds	r18, 0x02BA	; 0x8002ba <player_col>
     dbc:	8d 2f       	mov	r24, r29
     dbe:	dd 0f       	add	r29, r29
     dc0:	99 0b       	sbc	r25, r25
     dc2:	60 e1       	ldi	r22, 0x10	; 16
     dc4:	70 e0       	ldi	r23, 0x00	; 0
     dc6:	82 0f       	add	r24, r18
     dc8:	91 1d       	adc	r25, r1
     dca:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <modulo>
     dce:	4c 01       	movw	r8, r24
	if (check_wall_or_box(first_move_row, first_move_col)) {  //try first move
     dd0:	bc 01       	movw	r22, r24
     dd2:	c5 01       	movw	r24, r10
     dd4:	0e 94 84 04 	call	0x908	; 0x908 <check_wall_or_box>
     dd8:	c8 2f       	mov	r28, r24
     dda:	88 23       	and	r24, r24
     ddc:	a9 f1       	breq	.+106    	; 0xe48 <move_diagonal+0x17c>
		second_move_row = modulo((first_move_row+delta_row_1), 8);
     dde:	68 e0       	ldi	r22, 0x08	; 8
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	c7 01       	movw	r24, r14
     de4:	8a 0d       	add	r24, r10
     de6:	9b 1d       	adc	r25, r11
     de8:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <modulo>
     dec:	d8 2f       	mov	r29, r24
     dee:	c9 2f       	mov	r28, r25
		second_move_col = modulo((first_move_col+delta_col_1), 16);
     df0:	60 e1       	ldi	r22, 0x10	; 16
     df2:	70 e0       	ldi	r23, 0x00	; 0
     df4:	c8 01       	movw	r24, r16
     df6:	88 0d       	add	r24, r8
     df8:	99 1d       	adc	r25, r9
     dfa:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <modulo>
     dfe:	18 2f       	mov	r17, r24
		if (check_wall_or_box(second_move_row, second_move_col)) {  //try second move
     e00:	68 2f       	mov	r22, r24
     e02:	79 2f       	mov	r23, r25
     e04:	8d 2f       	mov	r24, r29
     e06:	9c 2f       	mov	r25, r28
     e08:	0e 94 84 04 	call	0x908	; 0x908 <check_wall_or_box>
     e0c:	c8 2f       	mov	r28, r24
     e0e:	88 23       	and	r24, r24
     e10:	d9 f0       	breq	.+54     	; 0xe48 <move_diagonal+0x17c>
			paint_square(player_row, player_col);  //second move successful
     e12:	60 91 ba 02 	lds	r22, 0x02BA	; 0x8002ba <player_col>
     e16:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <player_row>
     e1a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <paint_square>
			player_row = second_move_row;
     e1e:	d0 93 bb 02 	sts	0x02BB, r29	; 0x8002bb <player_row>
			player_col = second_move_col;
     e22:	10 93 ba 02 	sts	0x02BA, r17	; 0x8002ba <player_col>
			paint_square(player_row, player_col);
     e26:	61 2f       	mov	r22, r17
     e28:	8d 2f       	mov	r24, r29
     e2a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <paint_square>
			update_terminal_display(player_row, MATRIX_NUM_ROWS-player_row, 1);
     e2e:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <player_row>
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	68 e0       	ldi	r22, 0x08	; 8
     e36:	70 e0       	ldi	r23, 0x00	; 0
     e38:	68 1b       	sub	r22, r24
     e3a:	79 0b       	sbc	r23, r25
     e3c:	41 e0       	ldi	r20, 0x01	; 1
     e3e:	50 e0       	ldi	r21, 0x00	; 0
     e40:	0e 94 da 04 	call	0x9b4	; 0x9b4 <update_terminal_display>
			flash_player();
     e44:	0e 94 9d 03 	call	0x73a	; 0x73a <flash_player>
			return true;
		}
	}
	return false;  //both directions failed, move cannot be made
}
     e48:	8c 2f       	mov	r24, r28
     e4a:	df 91       	pop	r29
     e4c:	cf 91       	pop	r28
     e4e:	1f 91       	pop	r17
     e50:	0f 91       	pop	r16
     e52:	ff 90       	pop	r15
     e54:	ef 90       	pop	r14
     e56:	df 90       	pop	r13
     e58:	bf 90       	pop	r11
     e5a:	af 90       	pop	r10
     e5c:	9f 90       	pop	r9
     e5e:	8f 90       	pop	r8
     e60:	08 95       	ret

00000e62 <draw_terminal_board>:
int modulo(int x,int y){
	return (x % y + y) % y;
}

//Paints the current board on the terminal display
void draw_terminal_board(void) {
     e62:	0f 93       	push	r16
     e64:	1f 93       	push	r17
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
	int GAME_BOARD_ROW = 1;
	int GAME_BOARD_COL = 1;
	for (int row = MATRIX_NUM_ROWS-1; row >= 0; row--) {
     e6a:	c7 e0       	ldi	r28, 0x07	; 7
     e6c:	d0 e0       	ldi	r29, 0x00	; 0
	return (x % y + y) % y;
}

//Paints the current board on the terminal display
void draw_terminal_board(void) {
	int GAME_BOARD_ROW = 1;
     e6e:	01 e0       	ldi	r16, 0x01	; 1
     e70:	10 e0       	ldi	r17, 0x00	; 0
	int GAME_BOARD_COL = 1;
	for (int row = MATRIX_NUM_ROWS-1; row >= 0; row--) {
     e72:	0d c0       	rjmp	.+26     	; 0xe8e <draw_terminal_board+0x2c>
		update_terminal_display(row, GAME_BOARD_ROW, GAME_BOARD_COL);
     e74:	41 e0       	ldi	r20, 0x01	; 1
     e76:	50 e0       	ldi	r21, 0x00	; 0
     e78:	b8 01       	movw	r22, r16
     e7a:	ce 01       	movw	r24, r28
     e7c:	0e 94 da 04 	call	0x9b4	; 0x9b4 <update_terminal_display>
		printf("\n");
     e80:	8a e0       	ldi	r24, 0x0A	; 10
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <putchar>
		GAME_BOARD_ROW++;
     e88:	0f 5f       	subi	r16, 0xFF	; 255
     e8a:	1f 4f       	sbci	r17, 0xFF	; 255

//Paints the current board on the terminal display
void draw_terminal_board(void) {
	int GAME_BOARD_ROW = 1;
	int GAME_BOARD_COL = 1;
	for (int row = MATRIX_NUM_ROWS-1; row >= 0; row--) {
     e8c:	21 97       	sbiw	r28, 0x01	; 1
     e8e:	dd 23       	and	r29, r29
     e90:	8c f7       	brge	.-30     	; 0xe74 <draw_terminal_board+0x12>
		update_terminal_display(row, GAME_BOARD_ROW, GAME_BOARD_COL);
		printf("\n");
		GAME_BOARD_ROW++;
	}
}
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	1f 91       	pop	r17
     e98:	0f 91       	pop	r16
     e9a:	08 95       	ret

00000e9c <initialise_game>:
	}
}

// This function initialises the global variables used to store the game
// state, and renders the initial game display.
void initialise_game(int level) {
     e9c:	cf 93       	push	r28
     e9e:	df 93       	push	r29
	
	initialise_level(level);
     ea0:	0e 94 20 03 	call	0x640	; 0x640 <initialise_level>

	// Make the player icon initially invisible.
	player_visible = false;
     ea4:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <player_visible>

	// Draw the game board (map).
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     ea8:	d0 e0       	ldi	r29, 0x00	; 0
     eaa:	0a c0       	rjmp	.+20     	; 0xec0 <initialise_game+0x24>
	{
		for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
		{
			paint_square(row, col);
     eac:	6c 2f       	mov	r22, r28
     eae:	8d 2f       	mov	r24, r29
     eb0:	0e 94 f5 02 	call	0x5ea	; 0x5ea <paint_square>
	player_visible = false;

	// Draw the game board (map).
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
	{
		for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
     eb4:	cf 5f       	subi	r28, 0xFF	; 255
     eb6:	01 c0       	rjmp	.+2      	; 0xeba <initialise_game+0x1e>
     eb8:	c0 e0       	ldi	r28, 0x00	; 0
     eba:	c0 31       	cpi	r28, 0x10	; 16
     ebc:	b8 f3       	brcs	.-18     	; 0xeac <initialise_game+0x10>

	// Make the player icon initially invisible.
	player_visible = false;

	// Draw the game board (map).
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     ebe:	df 5f       	subi	r29, 0xFF	; 255
     ec0:	d8 30       	cpi	r29, 0x08	; 8
     ec2:	d0 f3       	brcs	.-12     	; 0xeb8 <initialise_game+0x1c>
			paint_square(row, col);
		}
	}
	
	//Draw the game board on the terminal
	draw_terminal_board();
     ec4:	0e 94 31 07 	call	0xe62	; 0xe62 <draw_terminal_board>
}
     ec8:	df 91       	pop	r29
     eca:	cf 91       	pop	r28
     ecc:	08 95       	ret

00000ece <init_joystick>:

#include <stdio.h>
#include <avr/interrupt.h>

void init_joystick(void) {
	init_serial_stdio(19200,0);
     ece:	40 e0       	ldi	r20, 0x00	; 0
     ed0:	60 e0       	ldi	r22, 0x00	; 0
     ed2:	7b e4       	ldi	r23, 0x4B	; 75
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <init_serial_stdio>

	// Set up ADC - AVCC reference, right adjust
	// Input selection doesn't matter yet - we'll swap this around in the while
	// loop below.
	ADMUX = (1<<REFS0);
     edc:	80 e4       	ldi	r24, 0x40	; 64
     ede:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	// Turn on the ADC (but don't start a conversion yet). Choose a clock
	// divider of 64. (The ADC clock must be somewhere
	// between 50kHz and 200kHz. We will divide our 8MHz clock by 64
	// to give us 125kHz.)
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1);
     ee2:	86 e8       	ldi	r24, 0x86	; 134
     ee4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     ee8:	08 95       	ret

00000eea <init_ledmatrix>:
}

void ledmatrix_shift_display_down(void)
{
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     eea:	80 e8       	ldi	r24, 0x80	; 128
     eec:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <spi_setup_master>
     ef0:	08 95       	ret

00000ef2 <ledmatrix_update_pixel>:
     ef2:	1f 93       	push	r17
     ef4:	cf 93       	push	r28
     ef6:	df 93       	push	r29
     ef8:	60 31       	cpi	r22, 0x10	; 16
     efa:	b0 f4       	brcc	.+44     	; 0xf28 <ledmatrix_update_pixel+0x36>
     efc:	88 30       	cpi	r24, 0x08	; 8
     efe:	a0 f4       	brcc	.+40     	; 0xf28 <ledmatrix_update_pixel+0x36>
     f00:	14 2f       	mov	r17, r20
     f02:	d6 2f       	mov	r29, r22
     f04:	c8 2f       	mov	r28, r24
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <spi_send_byte>
     f0c:	8c 2f       	mov	r24, r28
     f0e:	87 70       	andi	r24, 0x07	; 7
     f10:	20 e1       	ldi	r18, 0x10	; 16
     f12:	82 9f       	mul	r24, r18
     f14:	c0 01       	movw	r24, r0
     f16:	11 24       	eor	r1, r1
     f18:	6d 2f       	mov	r22, r29
     f1a:	6f 70       	andi	r22, 0x0F	; 15
     f1c:	86 2b       	or	r24, r22
     f1e:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <spi_send_byte>
     f22:	81 2f       	mov	r24, r17
     f24:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <spi_send_byte>
     f28:	df 91       	pop	r29
     f2a:	cf 91       	pop	r28
     f2c:	1f 91       	pop	r17
     f2e:	08 95       	ret

00000f30 <ledmatrix_update_column>:
     f30:	0f 93       	push	r16
     f32:	1f 93       	push	r17
     f34:	cf 93       	push	r28
     f36:	80 31       	cpi	r24, 0x10	; 16
     f38:	a0 f4       	brcc	.+40     	; 0xf62 <ledmatrix_update_column+0x32>
     f3a:	8b 01       	movw	r16, r22
     f3c:	c8 2f       	mov	r28, r24
     f3e:	83 e0       	ldi	r24, 0x03	; 3
     f40:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <spi_send_byte>
     f44:	8c 2f       	mov	r24, r28
     f46:	8f 70       	andi	r24, 0x0F	; 15
     f48:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <spi_send_byte>
     f4c:	c0 e0       	ldi	r28, 0x00	; 0
     f4e:	07 c0       	rjmp	.+14     	; 0xf5e <ledmatrix_update_column+0x2e>
     f50:	f8 01       	movw	r30, r16
     f52:	ec 0f       	add	r30, r28
     f54:	f1 1d       	adc	r31, r1
     f56:	80 81       	ld	r24, Z
     f58:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <spi_send_byte>
     f5c:	cf 5f       	subi	r28, 0xFF	; 255
     f5e:	c8 30       	cpi	r28, 0x08	; 8
     f60:	b8 f3       	brcs	.-18     	; 0xf50 <ledmatrix_update_column+0x20>
     f62:	cf 91       	pop	r28
     f64:	1f 91       	pop	r17
     f66:	0f 91       	pop	r16
     f68:	08 95       	ret

00000f6a <ledmatrix_shift_display_left>:
     f6a:	84 e0       	ldi	r24, 0x04	; 4
     f6c:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <spi_send_byte>
     f70:	82 e0       	ldi	r24, 0x02	; 2
     f72:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <spi_send_byte>
     f76:	08 95       	ret

00000f78 <ledmatrix_clear>:
}

void ledmatrix_clear(void)
{
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     f78:	8f e0       	ldi	r24, 0x0F	; 15
     f7a:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <spi_send_byte>
     f7e:	08 95       	ret

00000f80 <initialise_hardware>:
	DDRD &= (11111101);
	handle_game_over();
}

void increment_step_counter(void) {
	step_counter++;
     f80:	0e 94 75 07 	call	0xeea	; 0xeea <init_ledmatrix>
     f84:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <init_buttons>
     f88:	40 e0       	ldi	r20, 0x00	; 0
     f8a:	60 e0       	ldi	r22, 0x00	; 0
     f8c:	7b e4       	ldi	r23, 0x4B	; 75
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <init_serial_stdio>
     f96:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <init_timer0>
     f9a:	0e 94 1c 10 	call	0x2038	; 0x2038 <init_timer1>
     f9e:	0e 94 21 10 	call	0x2042	; 0x2042 <init_timer2>
     fa2:	0e 94 71 02 	call	0x4e2	; 0x4e2 <init_buzzer>
     fa6:	0e 94 67 07 	call	0xece	; 0xece <init_joystick>
     faa:	78 94       	sei
     fac:	ec e7       	ldi	r30, 0x7C	; 124
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	8e 7f       	andi	r24, 0xFE	; 254
     fb4:	80 83       	st	Z, r24
     fb6:	ea e7       	ldi	r30, 0x7A	; 122
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	80 64       	ori	r24, 0x40	; 64
     fbe:	80 83       	st	Z, r24
     fc0:	8a e1       	ldi	r24, 0x1A	; 26
     fc2:	8a 95       	dec	r24
     fc4:	f1 f7       	brne	.-4      	; 0xfc2 <initialise_hardware+0x42>
     fc6:	00 c0       	rjmp	.+0      	; 0xfc8 <initialise_hardware+0x48>
     fc8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     fcc:	86 fd       	sbrc	r24, 6
     fce:	fc cf       	rjmp	.-8      	; 0xfc8 <initialise_hardware+0x48>
     fd0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     fd4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     fd8:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <rest_value_x>
     fdc:	ec e7       	ldi	r30, 0x7C	; 124
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	81 60       	ori	r24, 0x01	; 1
     fe4:	80 83       	st	Z, r24
     fe6:	ea e7       	ldi	r30, 0x7A	; 122
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	80 64       	ori	r24, 0x40	; 64
     fee:	80 83       	st	Z, r24
     ff0:	8a e1       	ldi	r24, 0x1A	; 26
     ff2:	8a 95       	dec	r24
     ff4:	f1 f7       	brne	.-4      	; 0xff2 <initialise_hardware+0x72>
     ff6:	00 c0       	rjmp	.+0      	; 0xff8 <initialise_hardware+0x78>
     ff8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     ffc:	86 fd       	sbrc	r24, 6
     ffe:	fc cf       	rjmp	.-8      	; 0xff8 <initialise_hardware+0x78>
    1000:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    1004:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    1008:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <rest_value_y>
    100c:	08 95       	ret

0000100e <start_screen>:
    100e:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <hide_cursor>
    1012:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <normal_display_mode>
    1016:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <clear_terminal>
    101a:	65 e0       	ldi	r22, 0x05	; 5
    101c:	83 e0       	ldi	r24, 0x03	; 3
    101e:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <display_terminal_title>
    1022:	65 e0       	ldi	r22, 0x05	; 5
    1024:	70 e0       	ldi	r23, 0x00	; 0
    1026:	8b e0       	ldi	r24, 0x0B	; 11
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <move_terminal_cursor>
    102e:	86 e7       	ldi	r24, 0x76	; 118
    1030:	91 e0       	ldi	r25, 0x01	; 1
    1032:	9f 93       	push	r25
    1034:	8f 93       	push	r24
    1036:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <printf_P>
    103a:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <setup_start_screen>
    103e:	0e 94 18 02 	call	0x430	; 0x430 <clear_button_presses>
    1042:	0f 90       	pop	r0
    1044:	0f 90       	pop	r0
    1046:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <button_pushed>
    104a:	8f 3f       	cpi	r24, 0xFF	; 255
    104c:	99 f4       	brne	.+38     	; 0x1074 <start_screen+0x66>
    104e:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <serial_input_available>
    1052:	88 23       	and	r24, r24
    1054:	61 f0       	breq	.+24     	; 0x106e <start_screen+0x60>
    1056:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <__iob>
    105a:	90 91 68 04 	lds	r25, 0x0468	; 0x800468 <__iob+0x1>
    105e:	0e 94 44 11 	call	0x2288	; 0x2288 <fgetc>
    1062:	83 37       	cpi	r24, 0x73	; 115
    1064:	91 05       	cpc	r25, r1
    1066:	31 f0       	breq	.+12     	; 0x1074 <start_screen+0x66>
    1068:	83 35       	cpi	r24, 0x53	; 83
    106a:	91 05       	cpc	r25, r1
    106c:	19 f0       	breq	.+6      	; 0x1074 <start_screen+0x66>
    106e:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <update_start_screen>
    1072:	e9 cf       	rjmp	.-46     	; 0x1046 <start_screen+0x38>
    1074:	08 95       	ret

00001076 <new_game>:
    1076:	cf 93       	push	r28
    1078:	df 93       	push	r29
    107a:	ec 01       	movw	r28, r24
    107c:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <hide_cursor>
    1080:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <clear_terminal>
    1084:	ce 01       	movw	r24, r28
    1086:	0e 94 4e 07 	call	0xe9c	; 0xe9c <initialise_game>
    108a:	61 e0       	ldi	r22, 0x01	; 1
    108c:	70 e0       	ldi	r23, 0x00	; 0
    108e:	8a e0       	ldi	r24, 0x0A	; 10
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <move_terminal_cursor>
    1096:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <current_level>
    109a:	1f 92       	push	r1
    109c:	8f 93       	push	r24
    109e:	8c e8       	ldi	r24, 0x8C	; 140
    10a0:	92 e0       	ldi	r25, 0x02	; 2
    10a2:	9f 93       	push	r25
    10a4:	8f 93       	push	r24
    10a6:	0e 94 be 11 	call	0x237c	; 0x237c <printf>
    10aa:	8a b1       	in	r24, 0x0a	; 10
    10ac:	80 64       	ori	r24, 0x40	; 64
    10ae:	8a b9       	out	0x0a, r24	; 10
    10b0:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <buzzer_enabled>
    10b4:	0e 94 8e 02 	call	0x51c	; 0x51c <play_start_sound>
    10b8:	0e 94 18 02 	call	0x430	; 0x430 <clear_button_presses>
    10bc:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <clear_serial_input_buffer>
    10c0:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <step_counter>
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	df 91       	pop	r29
    10ce:	cf 91       	pop	r28
    10d0:	08 95       	ret

000010d2 <handle_game_over>:
}

void handle_game_over(void)
{
	move_terminal_cursor(14, 10);
    10d2:	6a e0       	ldi	r22, 0x0A	; 10
    10d4:	70 e0       	ldi	r23, 0x00	; 0
    10d6:	8e e0       	ldi	r24, 0x0E	; 14
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <move_terminal_cursor>
	printf_P(PSTR("GAME OVER"));
    10de:	8c e6       	ldi	r24, 0x6C	; 108
    10e0:	91 e0       	ldi	r25, 0x01	; 1
    10e2:	9f 93       	push	r25
    10e4:	8f 93       	push	r24
    10e6:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <printf_P>
	move_terminal_cursor(15, 10);
    10ea:	6a e0       	ldi	r22, 0x0A	; 10
    10ec:	70 e0       	ldi	r23, 0x00	; 0
    10ee:	8f e0       	ldi	r24, 0x0F	; 15
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <move_terminal_cursor>
	printf_P(PSTR("Press 'r'/'R' to restart, 'e'/'E' to exit,"));
    10f6:	81 e4       	ldi	r24, 0x41	; 65
    10f8:	91 e0       	ldi	r25, 0x01	; 1
    10fa:	9f 93       	push	r25
    10fc:	8f 93       	push	r24
    10fe:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <printf_P>
	move_terminal_cursor(16, 10);
    1102:	6a e0       	ldi	r22, 0x0A	; 10
    1104:	70 e0       	ldi	r23, 0x00	; 0
    1106:	80 e1       	ldi	r24, 0x10	; 16
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <move_terminal_cursor>
	printf_P(PSTR("or press 'n'/'N' to progress to level 2"));
    110e:	89 e1       	ldi	r24, 0x19	; 25
    1110:	91 e0       	ldi	r25, 0x01	; 1
    1112:	9f 93       	push	r25
    1114:	8f 93       	push	r24
    1116:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <printf_P>
	
	//calculate and print score
	int score = 0;
	if (200-step_counter > 0) {
    111a:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <step_counter>
    111e:	c8 ec       	ldi	r28, 0xC8	; 200
    1120:	d0 e0       	ldi	r29, 0x00	; 0
    1122:	c8 1b       	sub	r28, r24
    1124:	d1 09       	sbc	r29, r1
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	1c 16       	cp	r1, r28
    1134:	1d 06       	cpc	r1, r29
    1136:	14 f0       	brlt	.+4      	; 0x113c <handle_game_over+0x6a>
	printf_P(PSTR("Press 'r'/'R' to restart, 'e'/'E' to exit,"));
	move_terminal_cursor(16, 10);
	printf_P(PSTR("or press 'n'/'N' to progress to level 2"));
	
	//calculate and print score
	int score = 0;
    1138:	c0 e0       	ldi	r28, 0x00	; 0
    113a:	d0 e0       	ldi	r29, 0x00	; 0
	if (200-step_counter > 0) {
		score += 200-step_counter;
	}
	if (1200-play_time > 0) {
    113c:	20 91 51 03 	lds	r18, 0x0351	; 0x800351 <play_time>
    1140:	80 eb       	ldi	r24, 0xB0	; 176
    1142:	94 e0       	ldi	r25, 0x04	; 4
    1144:	82 1b       	sub	r24, r18
    1146:	91 09       	sbc	r25, r1
    1148:	18 16       	cp	r1, r24
    114a:	19 06       	cpc	r1, r25
    114c:	14 f4       	brge	.+4      	; 0x1152 <handle_game_over+0x80>
		score += 1200-play_time;
    114e:	c8 0f       	add	r28, r24
    1150:	d9 1f       	adc	r29, r25
	}
	move_terminal_cursor(18, 10);
    1152:	6a e0       	ldi	r22, 0x0A	; 10
    1154:	70 e0       	ldi	r23, 0x00	; 0
    1156:	82 e1       	ldi	r24, 0x12	; 18
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <move_terminal_cursor>
	printf("Score: %d", score);
    115e:	df 93       	push	r29
    1160:	cf 93       	push	r28
    1162:	86 e9       	ldi	r24, 0x96	; 150
    1164:	92 e0       	ldi	r25, 0x02	; 2
    1166:	9f 93       	push	r25
    1168:	8f 93       	push	r24
    116a:	0e 94 be 11 	call	0x237c	; 0x237c <printf>
    116e:	0f 90       	pop	r0
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0

	//For ssd
	int digit = 0;
    1176:	c0 e0       	ldi	r28, 0x00	; 0
    1178:	d0 e0       	ldi	r29, 0x00	; 0
	while (1)
	{
		// Get serial input. If no serial input is ready, serial_input
		// would be -1 (not a valid character).
		int serial_input = -1;
		if (serial_input_available())
    117a:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <serial_input_available>
    117e:	88 23       	and	r24, r24
    1180:	39 f0       	breq	.+14     	; 0x1190 <handle_game_over+0xbe>
		{
			serial_input = fgetc(stdin);
    1182:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <__iob>
    1186:	90 91 68 04 	lds	r25, 0x0468	; 0x800468 <__iob+0x1>
    118a:	0e 94 44 11 	call	0x2288	; 0x2288 <fgetc>
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <handle_game_over+0xc2>
	// Do nothing until a valid input is made.
	while (1)
	{
		// Get serial input. If no serial input is ready, serial_input
		// would be -1 (not a valid character).
		int serial_input = -1;
    1190:	8f ef       	ldi	r24, 0xFF	; 255
    1192:	9f ef       	ldi	r25, 0xFF	; 255
		{
			serial_input = fgetc(stdin);
		}

		// Check serial input.
		if (toupper(serial_input) == 'R') {
    1194:	0e 94 2a 11 	call	0x2254	; 0x2254 <toupper>
    1198:	82 35       	cpi	r24, 0x52	; 82
    119a:	91 05       	cpc	r25, r1
    119c:	41 f4       	brne	.+16     	; 0x11ae <handle_game_over+0xdc>
			new_game(current_level);
    119e:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <current_level>
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	0e 94 3b 08 	call	0x1076	; 0x1076 <new_game>
			play_game();
    11a8:	0e 94 2e 09 	call	0x125c	; 0x125c <play_game>
    11ac:	1c c0       	rjmp	.+56     	; 0x11e6 <handle_game_over+0x114>
		} else if (toupper(serial_input) == 'E') {
    11ae:	85 34       	cpi	r24, 0x45	; 69
    11b0:	91 05       	cpc	r25, r1
    11b2:	69 f4       	brne	.+26     	; 0x11ce <handle_game_over+0xfc>
			current_level = 1;
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <current_level>
			start_screen();
    11ba:	0e 94 07 08 	call	0x100e	; 0x100e <start_screen>
			new_game(current_level);
    11be:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <current_level>
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	0e 94 3b 08 	call	0x1076	; 0x1076 <new_game>
			play_game();
    11c8:	0e 94 2e 09 	call	0x125c	; 0x125c <play_game>
    11cc:	0c c0       	rjmp	.+24     	; 0x11e6 <handle_game_over+0x114>
		} else if (toupper(serial_input) == 'N') {
    11ce:	8e 34       	cpi	r24, 0x4E	; 78
    11d0:	91 05       	cpc	r25, r1
    11d2:	49 f4       	brne	.+18     	; 0x11e6 <handle_game_over+0x114>
			current_level = 2;
    11d4:	82 e0       	ldi	r24, 0x02	; 2
    11d6:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <current_level>
			new_game(current_level);
    11da:	82 e0       	ldi	r24, 0x02	; 2
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	0e 94 3b 08 	call	0x1076	; 0x1076 <new_game>
			play_game();
    11e2:	0e 94 2e 09 	call	0x125c	; 0x125c <play_game>
		}
		
		if(digit == 0) {
    11e6:	20 97       	sbiw	r28, 0x00	; 0
    11e8:	91 f4       	brne	.+36     	; 0x120e <handle_game_over+0x13c>
			value = step_counter % 10;
    11ea:	90 91 4d 03 	lds	r25, 0x034D	; 0x80034d <step_counter>
    11ee:	ed ec       	ldi	r30, 0xCD	; 205
    11f0:	9e 9f       	mul	r25, r30
    11f2:	e1 2d       	mov	r30, r1
    11f4:	11 24       	eor	r1, r1
    11f6:	e6 95       	lsr	r30
    11f8:	e6 95       	lsr	r30
    11fa:	e6 95       	lsr	r30
    11fc:	ee 0f       	add	r30, r30
    11fe:	8e 2f       	mov	r24, r30
    1200:	88 0f       	add	r24, r24
    1202:	88 0f       	add	r24, r24
    1204:	e8 0f       	add	r30, r24
    1206:	9e 1b       	sub	r25, r30
    1208:	e9 2f       	mov	r30, r25
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	17 c0       	rjmp	.+46     	; 0x123c <handle_game_over+0x16a>
			} else {
			value = (step_counter / 10) % 10;
    120e:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <step_counter>
    1212:	ed ec       	ldi	r30, 0xCD	; 205
    1214:	8e 9f       	mul	r24, r30
    1216:	81 2d       	mov	r24, r1
    1218:	11 24       	eor	r1, r1
    121a:	86 95       	lsr	r24
    121c:	86 95       	lsr	r24
    121e:	86 95       	lsr	r24
    1220:	8e 9f       	mul	r24, r30
    1222:	e1 2d       	mov	r30, r1
    1224:	11 24       	eor	r1, r1
    1226:	e6 95       	lsr	r30
    1228:	e6 95       	lsr	r30
    122a:	e6 95       	lsr	r30
    122c:	ee 0f       	add	r30, r30
    122e:	9e 2f       	mov	r25, r30
    1230:	99 0f       	add	r25, r25
    1232:	99 0f       	add	r25, r25
    1234:	e9 0f       	add	r30, r25
    1236:	8e 1b       	sub	r24, r30
    1238:	e8 2f       	mov	r30, r24
    123a:	f0 e0       	ldi	r31, 0x00	; 0
		}
		PORTC = seven_seg[value];
    123c:	ec 5f       	subi	r30, 0xFC	; 252
    123e:	fe 4f       	sbci	r31, 0xFE	; 254
    1240:	80 81       	ld	r24, Z
    1242:	88 b9       	out	0x08, r24	; 8
		PORTD = (digit << 5);
    1244:	8c 2f       	mov	r24, r28
    1246:	82 95       	swap	r24
    1248:	88 0f       	add	r24, r24
    124a:	80 7e       	andi	r24, 0xE0	; 224
    124c:	8b b9       	out	0x0b, r24	; 11
		digit = 1- digit;
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	9c 01       	movw	r18, r24
    1254:	2c 1b       	sub	r18, r28
    1256:	3d 0b       	sbc	r19, r29
    1258:	e9 01       	movw	r28, r18
	}
    125a:	8f cf       	rjmp	.-226    	; 0x117a <handle_game_over+0xa8>

0000125c <play_game>:
	//Reset step counter
	step_counter = 0;
}

void play_game(void)
{
    125c:	cf 93       	push	r28
    125e:	df 93       	push	r29
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
    1264:	69 97       	sbiw	r28, 0x19	; 25
    1266:	0f b6       	in	r0, 0x3f	; 63
    1268:	f8 94       	cli
    126a:	de bf       	out	0x3e, r29	; 62
    126c:	0f be       	out	0x3f, r0	; 63
    126e:	cd bf       	out	0x3d, r28	; 61
	//Prepare variables for joystick
	uint16_t value_x;
	uint16_t value_y;
	
	//Initialise step counter
	step_counter = 0;
    1270:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <step_counter>
	uint8_t value = 0;
	uint8_t digit = 0; /* 0 = right, 1 = left */
	DDRC = 0xFF;
    1274:	8f ef       	ldi	r24, 0xFF	; 255
    1276:	87 b9       	out	0x07, r24	; 7
	DDRD = (1 << 5);
    1278:	80 e2       	ldi	r24, 0x20	; 32
    127a:	8a b9       	out	0x0a, r24	; 10
	
	uint32_t last_flash_time = get_current_time();
    127c:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <get_current_time>
    1280:	4b 01       	movw	r8, r22
    1282:	5c 01       	movw	r10, r24
	uint32_t last_target_flash_time = get_current_time();
    1284:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <get_current_time>
    1288:	2b 01       	movw	r4, r22
    128a:	3c 01       	movw	r6, r24
	uint32_t last_animation_flash = get_current_time();
    128c:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <get_current_time>
	uint32_t last_input = 0;
	
	bool accept_input = true;
	
	play_time = 0;
    1290:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <play_time>
	uint32_t last_flash_time = get_current_time();
	uint32_t last_target_flash_time = get_current_time();
	uint32_t last_animation_flash = get_current_time();
	uint32_t last_input = 0;
	
	bool accept_input = true;
    1294:	01 e0       	ldi	r16, 0x01	; 1
	DDRD = (1 << 5);
	
	uint32_t last_flash_time = get_current_time();
	uint32_t last_target_flash_time = get_current_time();
	uint32_t last_animation_flash = get_current_time();
	uint32_t last_input = 0;
    1296:	1e 8a       	std	Y+22, r1	; 0x16
    1298:	1f 8a       	std	Y+23, r1	; 0x17
    129a:	18 8e       	std	Y+24, r1	; 0x18
    129c:	19 8e       	std	Y+25, r1	; 0x19
	uint16_t value_y;
	
	//Initialise step counter
	step_counter = 0;
	uint8_t value = 0;
	uint8_t digit = 0; /* 0 = right, 1 = left */
    129e:	10 e0       	ldi	r17, 0x00	; 0
	
	uint16_t sensitivity_diagonal = 200;
	uint16_t sensitivity_regular = 400;

	// We play the game until it's over.
	while (!is_game_over())
    12a0:	b2 c2       	rjmp	.+1380   	; 0x1806 <play_game+0x5aa>
	{
		// We need to check if any buttons have been pushed, this will
		// be NO_BUTTON_PUSHED if no button has been pushed. If button
		// 0 has been pushed, we get BUTTON0_PUSHED, and likewise, if
		// button 1 has been pushed, we get BUTTON1_PUSHED, and so on.
		ButtonState btn = button_pushed();
    12a2:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <button_pushed>
    12a6:	8d 8b       	std	Y+21, r24	; 0x15
		int serial_input = -1;

		if (serial_input_available()) {
    12a8:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <serial_input_available>
    12ac:	88 23       	and	r24, r24
    12ae:	39 f0       	breq	.+14     	; 0x12be <play_game+0x62>
			serial_input = fgetc(stdin);
    12b0:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <__iob>
    12b4:	90 91 68 04 	lds	r25, 0x0468	; 0x800468 <__iob+0x1>
    12b8:	0e 94 44 11 	call	0x2288	; 0x2288 <fgetc>
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <play_game+0x66>
		// We need to check if any buttons have been pushed, this will
		// be NO_BUTTON_PUSHED if no button has been pushed. If button
		// 0 has been pushed, we get BUTTON0_PUSHED, and likewise, if
		// button 1 has been pushed, we get BUTTON1_PUSHED, and so on.
		ButtonState btn = button_pushed();
		int serial_input = -1;
    12be:	8f ef       	ldi	r24, 0xFF	; 255
    12c0:	9f ef       	ldi	r25, 0xFF	; 255

		if (serial_input_available()) {
			serial_input = fgetc(stdin);
		}
		
		if (tolower(serial_input) == 'q') {
    12c2:	0e 94 22 11 	call	0x2244	; 0x2244 <tolower>
    12c6:	6c 01       	movw	r12, r24
    12c8:	81 37       	cpi	r24, 0x71	; 113
    12ca:	91 05       	cpc	r25, r1
    12cc:	31 f4       	brne	.+12     	; 0x12da <play_game+0x7e>
			buzzer_enabled = 1 - buzzer_enabled;
    12ce:	90 91 4f 03 	lds	r25, 0x034F	; 0x80034f <buzzer_enabled>
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	89 27       	eor	r24, r25
    12d6:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <buzzer_enabled>
		}
		
		if (tolower(serial_input) == 'p') {
    12da:	80 e7       	ldi	r24, 0x70	; 112
    12dc:	c8 16       	cp	r12, r24
    12de:	d1 04       	cpc	r13, r1
    12e0:	09 f0       	breq	.+2      	; 0x12e4 <play_game+0x88>
    12e2:	46 c0       	rjmp	.+140    	; 0x1370 <play_game+0x114>
			while (1) {
				if (serial_input_available()) {
    12e4:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <serial_input_available>
    12e8:	88 23       	and	r24, r24
    12ea:	59 f0       	breq	.+22     	; 0x1302 <play_game+0xa6>
					if (tolower(fgetc(stdin)) == 'p') {
    12ec:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <__iob>
    12f0:	90 91 68 04 	lds	r25, 0x0468	; 0x800468 <__iob+0x1>
    12f4:	0e 94 44 11 	call	0x2288	; 0x2288 <fgetc>
    12f8:	0e 94 22 11 	call	0x2244	; 0x2244 <tolower>
    12fc:	80 37       	cpi	r24, 0x70	; 112
    12fe:	91 05       	cpc	r25, r1
    1300:	b9 f1       	breq	.+110    	; 0x1370 <play_game+0x114>
						break;
					}
				}
				//Keep ssd looping
				if(digit == 0) {
    1302:	11 11       	cpse	r17, r1
    1304:	11 c0       	rjmp	.+34     	; 0x1328 <play_game+0xcc>
					value = step_counter % 10;
    1306:	90 91 4d 03 	lds	r25, 0x034D	; 0x80034d <step_counter>
    130a:	ed ec       	ldi	r30, 0xCD	; 205
    130c:	9e 9f       	mul	r25, r30
    130e:	e1 2d       	mov	r30, r1
    1310:	11 24       	eor	r1, r1
    1312:	e6 95       	lsr	r30
    1314:	e6 95       	lsr	r30
    1316:	e6 95       	lsr	r30
    1318:	ee 0f       	add	r30, r30
    131a:	8e 2f       	mov	r24, r30
    131c:	88 0f       	add	r24, r24
    131e:	88 0f       	add	r24, r24
    1320:	e8 0f       	add	r30, r24
    1322:	9e 1b       	sub	r25, r30
    1324:	e9 2f       	mov	r30, r25
    1326:	16 c0       	rjmp	.+44     	; 0x1354 <play_game+0xf8>
					} else {
					value = (step_counter / 10) % 10;
    1328:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <step_counter>
    132c:	ed ec       	ldi	r30, 0xCD	; 205
    132e:	8e 9f       	mul	r24, r30
    1330:	81 2d       	mov	r24, r1
    1332:	11 24       	eor	r1, r1
    1334:	86 95       	lsr	r24
    1336:	86 95       	lsr	r24
    1338:	86 95       	lsr	r24
    133a:	8e 9f       	mul	r24, r30
    133c:	e1 2d       	mov	r30, r1
    133e:	11 24       	eor	r1, r1
    1340:	e6 95       	lsr	r30
    1342:	e6 95       	lsr	r30
    1344:	e6 95       	lsr	r30
    1346:	ee 0f       	add	r30, r30
    1348:	9e 2f       	mov	r25, r30
    134a:	99 0f       	add	r25, r25
    134c:	99 0f       	add	r25, r25
    134e:	e9 0f       	add	r30, r25
    1350:	8e 1b       	sub	r24, r30
    1352:	e8 2f       	mov	r30, r24
				}
				PORTC = seven_seg[value];
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	ec 5f       	subi	r30, 0xFC	; 252
    1358:	fe 4f       	sbci	r31, 0xFE	; 254
    135a:	80 81       	ld	r24, Z
    135c:	88 b9       	out	0x08, r24	; 8
				PORTD = (digit << 5);
    135e:	81 2f       	mov	r24, r17
    1360:	82 95       	swap	r24
    1362:	88 0f       	add	r24, r24
    1364:	80 7e       	andi	r24, 0xE0	; 224
    1366:	8b b9       	out	0x0b, r24	; 11
				digit = 1 - digit;
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	81 1b       	sub	r24, r17
    136c:	18 2f       	mov	r17, r24
			}
    136e:	ba cf       	rjmp	.-140    	; 0x12e4 <play_game+0x88>
		}
		
		//Detect values x and y from joystick
		//value x:
		ADMUX &= ~1;
    1370:	ec e7       	ldi	r30, 0x7C	; 124
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	8e 7f       	andi	r24, 0xFE	; 254
    1378:	80 83       	st	Z, r24
		// Start the ADC conversion
		ADCSRA |= (1<<ADSC);
    137a:	ea e7       	ldi	r30, 0x7A	; 122
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	80 64       	ori	r24, 0x40	; 64
    1382:	80 83       	st	Z, r24
		while(ADCSRA & (1<<ADSC)) {
    1384:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1388:	86 fd       	sbrc	r24, 6
    138a:	fc cf       	rjmp	.-8      	; 0x1384 <play_game+0x128>
			; /* Wait until conversion finished */
		}
		value_x = ADC; // read the value
    138c:	e0 90 78 00 	lds	r14, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    1390:	f0 90 79 00 	lds	r15, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
		
		//value y:
		ADMUX |= 1;
    1394:	ec e7       	ldi	r30, 0x7C	; 124
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	81 60       	ori	r24, 0x01	; 1
    139c:	80 83       	st	Z, r24
		// Start the ADC conversion
		ADCSRA |= (1<<ADSC);
    139e:	ea e7       	ldi	r30, 0x7A	; 122
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	80 64       	ori	r24, 0x40	; 64
    13a6:	80 83       	st	Z, r24
		while(ADCSRA & (1<<ADSC)) {
    13a8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    13ac:	86 fd       	sbrc	r24, 6
    13ae:	fc cf       	rjmp	.-8      	; 0x13a8 <play_game+0x14c>
			; /* Wait until conversion finished */
		}
		value_y = ADC; // read the value
    13b0:	20 90 78 00 	lds	r2, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    13b4:	30 90 79 00 	lds	r3, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
		
		move_terminal_cursor(0,1);
    13b8:	61 e0       	ldi	r22, 0x01	; 1
    13ba:	70 e0       	ldi	r23, 0x00	; 0
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <move_terminal_cursor>
		printf("%d", value_x);
    13c4:	ff 92       	push	r15
    13c6:	ef 92       	push	r14
    13c8:	8d e9       	ldi	r24, 0x9D	; 157
    13ca:	92 e0       	ldi	r25, 0x02	; 2
    13cc:	9f 93       	push	r25
    13ce:	8f 93       	push	r24
    13d0:	0e 94 be 11 	call	0x237c	; 0x237c <printf>
		
		if ((value_x < rest_value_x-sensitivity_diagonal && value_y > rest_value_y+sensitivity_diagonal) && accept_input) {
    13d4:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <rest_value_x>
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	ac 01       	movw	r20, r24
    13dc:	48 5c       	subi	r20, 0xC8	; 200
    13de:	51 09       	sbc	r21, r1
    13e0:	0f 90       	pop	r0
    13e2:	0f 90       	pop	r0
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	e4 16       	cp	r14, r20
    13ea:	f5 06       	cpc	r15, r21
    13ec:	50 f5       	brcc	.+84     	; 0x1442 <play_game+0x1e6>
    13ee:	20 91 4e 03 	lds	r18, 0x034E	; 0x80034e <rest_value_y>
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	28 53       	subi	r18, 0x38	; 56
    13f6:	3f 4f       	sbci	r19, 0xFF	; 255
    13f8:	22 15       	cp	r18, r2
    13fa:	33 05       	cpc	r19, r3
    13fc:	10 f5       	brcc	.+68     	; 0x1442 <play_game+0x1e6>
    13fe:	00 23       	and	r16, r16
    1400:	01 f1       	breq	.+64     	; 0x1442 <play_game+0x1e6>
			if (move_diagonal(0,-1,1,0)) {
    1402:	20 e0       	ldi	r18, 0x00	; 0
    1404:	41 e0       	ldi	r20, 0x01	; 1
    1406:	6f ef       	ldi	r22, 0xFF	; 255
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	0e 94 66 06 	call	0xccc	; 0xccc <move_diagonal>
    140e:	88 23       	and	r24, r24
    1410:	99 f0       	breq	.+38     	; 0x1438 <play_game+0x1dc>
				step_counter += 2;
    1412:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <step_counter>
    1416:	8e 5f       	subi	r24, 0xFE	; 254
    1418:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <step_counter>
				DDRD |= (1 << 6);
    141c:	8a b1       	in	r24, 0x0a	; 10
    141e:	80 64       	ori	r24, 0x40	; 64
    1420:	8a b9       	out	0x0a, r24	; 10
				play_move_sound(buzzer_enabled);
    1422:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <buzzer_enabled>
    1426:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <play_move_sound>
				last_input = get_current_time();
    142a:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <get_current_time>
    142e:	6e 8b       	std	Y+22, r22	; 0x16
    1430:	7f 8b       	std	Y+23, r23	; 0x17
    1432:	88 8f       	std	Y+24, r24	; 0x18
    1434:	99 8f       	std	Y+25, r25	; 0x19
				accept_input = false;
    1436:	00 e0       	ldi	r16, 0x00	; 0
			}
			last_flash_time = get_current_time();
    1438:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <get_current_time>
    143c:	4b 01       	movw	r8, r22
    143e:	5c 01       	movw	r10, r24
    1440:	40 c1       	rjmp	.+640    	; 0x16c2 <play_game+0x466>
		} else if ((value_x < rest_value_x-sensitivity_diagonal && value_y < rest_value_y-sensitivity_diagonal) && accept_input) {
    1442:	e4 16       	cp	r14, r20
    1444:	f5 06       	cpc	r15, r21
    1446:	50 f5       	brcc	.+84     	; 0x149c <play_game+0x240>
    1448:	20 91 4e 03 	lds	r18, 0x034E	; 0x80034e <rest_value_y>
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	28 5c       	subi	r18, 0xC8	; 200
    1450:	31 09       	sbc	r19, r1
    1452:	22 16       	cp	r2, r18
    1454:	33 06       	cpc	r3, r19
    1456:	10 f5       	brcc	.+68     	; 0x149c <play_game+0x240>
    1458:	00 23       	and	r16, r16
    145a:	01 f1       	breq	.+64     	; 0x149c <play_game+0x240>
			if (move_diagonal(0,-1,-1,0)) {
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	4f ef       	ldi	r20, 0xFF	; 255
    1460:	6f ef       	ldi	r22, 0xFF	; 255
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	0e 94 66 06 	call	0xccc	; 0xccc <move_diagonal>
    1468:	88 23       	and	r24, r24
    146a:	99 f0       	breq	.+38     	; 0x1492 <play_game+0x236>
				step_counter += 2;
    146c:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <step_counter>
    1470:	8e 5f       	subi	r24, 0xFE	; 254
    1472:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <step_counter>
				DDRD |= (1 << 6);
    1476:	8a b1       	in	r24, 0x0a	; 10
    1478:	80 64       	ori	r24, 0x40	; 64
    147a:	8a b9       	out	0x0a, r24	; 10
				play_move_sound(buzzer_enabled);
    147c:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <buzzer_enabled>
    1480:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <play_move_sound>
				last_input = get_current_time();
    1484:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <get_current_time>
    1488:	6e 8b       	std	Y+22, r22	; 0x16
    148a:	7f 8b       	std	Y+23, r23	; 0x17
    148c:	88 8f       	std	Y+24, r24	; 0x18
    148e:	99 8f       	std	Y+25, r25	; 0x19
				accept_input = false;
    1490:	00 e0       	ldi	r16, 0x00	; 0
			}
			last_flash_time = get_current_time();
    1492:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <get_current_time>
    1496:	4b 01       	movw	r8, r22
    1498:	5c 01       	movw	r10, r24
    149a:	13 c1       	rjmp	.+550    	; 0x16c2 <play_game+0x466>
		} else if ((value_x > rest_value_x+sensitivity_diagonal && value_y < rest_value_y-sensitivity_diagonal) && accept_input) {
    149c:	ac 01       	movw	r20, r24
    149e:	48 53       	subi	r20, 0x38	; 56
    14a0:	5f 4f       	sbci	r21, 0xFF	; 255
    14a2:	4e 15       	cp	r20, r14
    14a4:	5f 05       	cpc	r21, r15
    14a6:	50 f5       	brcc	.+84     	; 0x14fc <play_game+0x2a0>
    14a8:	20 91 4e 03 	lds	r18, 0x034E	; 0x80034e <rest_value_y>
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	28 5c       	subi	r18, 0xC8	; 200
    14b0:	31 09       	sbc	r19, r1
    14b2:	22 16       	cp	r2, r18
    14b4:	33 06       	cpc	r3, r19
    14b6:	10 f5       	brcc	.+68     	; 0x14fc <play_game+0x2a0>
    14b8:	00 23       	and	r16, r16
    14ba:	01 f1       	breq	.+64     	; 0x14fc <play_game+0x2a0>
			if (move_diagonal(0,1,-1,0)) {
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	4f ef       	ldi	r20, 0xFF	; 255
    14c0:	61 e0       	ldi	r22, 0x01	; 1
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	0e 94 66 06 	call	0xccc	; 0xccc <move_diagonal>
    14c8:	88 23       	and	r24, r24
    14ca:	99 f0       	breq	.+38     	; 0x14f2 <play_game+0x296>
				step_counter += 2;
    14cc:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <step_counter>
    14d0:	8e 5f       	subi	r24, 0xFE	; 254
    14d2:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <step_counter>
				DDRD |= (1 << 6);
    14d6:	8a b1       	in	r24, 0x0a	; 10
    14d8:	80 64       	ori	r24, 0x40	; 64
    14da:	8a b9       	out	0x0a, r24	; 10
				play_move_sound(buzzer_enabled);
    14dc:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <buzzer_enabled>
    14e0:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <play_move_sound>
				last_input = get_current_time();
    14e4:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <get_current_time>
    14e8:	6e 8b       	std	Y+22, r22	; 0x16
    14ea:	7f 8b       	std	Y+23, r23	; 0x17
    14ec:	88 8f       	std	Y+24, r24	; 0x18
    14ee:	99 8f       	std	Y+25, r25	; 0x19
				accept_input = false;
    14f0:	00 e0       	ldi	r16, 0x00	; 0
			}
			last_flash_time = get_current_time();
    14f2:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <get_current_time>
    14f6:	4b 01       	movw	r8, r22
    14f8:	5c 01       	movw	r10, r24
    14fa:	e3 c0       	rjmp	.+454    	; 0x16c2 <play_game+0x466>
		} else if ((value_x > rest_value_x+sensitivity_diagonal && value_y > rest_value_y+sensitivity_diagonal) && accept_input) {
    14fc:	4e 15       	cp	r20, r14
    14fe:	5f 05       	cpc	r21, r15
    1500:	50 f5       	brcc	.+84     	; 0x1556 <play_game+0x2fa>
    1502:	20 91 4e 03 	lds	r18, 0x034E	; 0x80034e <rest_value_y>
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	28 53       	subi	r18, 0x38	; 56
    150a:	3f 4f       	sbci	r19, 0xFF	; 255
    150c:	22 15       	cp	r18, r2
    150e:	33 05       	cpc	r19, r3
    1510:	10 f5       	brcc	.+68     	; 0x1556 <play_game+0x2fa>
    1512:	00 23       	and	r16, r16
    1514:	01 f1       	breq	.+64     	; 0x1556 <play_game+0x2fa>
			if (move_diagonal(0,1,1,0)) {
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	41 e0       	ldi	r20, 0x01	; 1
    151a:	61 e0       	ldi	r22, 0x01	; 1
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	0e 94 66 06 	call	0xccc	; 0xccc <move_diagonal>
    1522:	88 23       	and	r24, r24
    1524:	99 f0       	breq	.+38     	; 0x154c <play_game+0x2f0>
				step_counter += 2;
    1526:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <step_counter>
    152a:	8e 5f       	subi	r24, 0xFE	; 254
    152c:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <step_counter>
				DDRD |= (1 << 6);
    1530:	8a b1       	in	r24, 0x0a	; 10
    1532:	80 64       	ori	r24, 0x40	; 64
    1534:	8a b9       	out	0x0a, r24	; 10
				play_move_sound(buzzer_enabled);
    1536:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <buzzer_enabled>
    153a:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <play_move_sound>
				last_input = get_current_time();
    153e:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <get_current_time>
    1542:	6e 8b       	std	Y+22, r22	; 0x16
    1544:	7f 8b       	std	Y+23, r23	; 0x17
    1546:	88 8f       	std	Y+24, r24	; 0x18
    1548:	99 8f       	std	Y+25, r25	; 0x19
				accept_input = false;
    154a:	00 e0       	ldi	r16, 0x00	; 0
			}
			last_flash_time = get_current_time();
    154c:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <get_current_time>
    1550:	4b 01       	movw	r8, r22
    1552:	5c 01       	movw	r10, r24
    1554:	b6 c0       	rjmp	.+364    	; 0x16c2 <play_game+0x466>
		} else if ((btn == BUTTON0_PUSHED || tolower(serial_input) == 'd' || value_x > rest_value_x+sensitivity_regular) && accept_input) {
    1556:	2d 89       	ldd	r18, Y+21	; 0x15
    1558:	22 23       	and	r18, r18
    155a:	51 f0       	breq	.+20     	; 0x1570 <play_game+0x314>
    155c:	24 e6       	ldi	r18, 0x64	; 100
    155e:	c2 16       	cp	r12, r18
    1560:	d1 04       	cpc	r13, r1
    1562:	31 f0       	breq	.+12     	; 0x1570 <play_game+0x314>
    1564:	9c 01       	movw	r18, r24
    1566:	20 57       	subi	r18, 0x70	; 112
    1568:	3e 4f       	sbci	r19, 0xFE	; 254
    156a:	2e 15       	cp	r18, r14
    156c:	3f 05       	cpc	r19, r15
    156e:	00 f5       	brcc	.+64     	; 0x15b0 <play_game+0x354>
    1570:	00 23       	and	r16, r16
    1572:	f1 f0       	breq	.+60     	; 0x15b0 <play_game+0x354>
			if (move_player(0, 1)) {
    1574:	61 e0       	ldi	r22, 0x01	; 1
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	0e 94 34 05 	call	0xa68	; 0xa68 <move_player>
    157c:	88 23       	and	r24, r24
    157e:	99 f0       	breq	.+38     	; 0x15a6 <play_game+0x34a>
				step_counter++; 
    1580:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <step_counter>
    1584:	8f 5f       	subi	r24, 0xFF	; 255
    1586:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <step_counter>
				DDRD |= (1 << 6); 
    158a:	8a b1       	in	r24, 0x0a	; 10
    158c:	80 64       	ori	r24, 0x40	; 64
    158e:	8a b9       	out	0x0a, r24	; 10
				play_move_sound(buzzer_enabled);
    1590:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <buzzer_enabled>
    1594:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <play_move_sound>
				last_input = get_current_time();
    1598:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <get_current_time>
    159c:	6e 8b       	std	Y+22, r22	; 0x16
    159e:	7f 8b       	std	Y+23, r23	; 0x17
    15a0:	88 8f       	std	Y+24, r24	; 0x18
    15a2:	99 8f       	std	Y+25, r25	; 0x19
				accept_input = false;
    15a4:	00 e0       	ldi	r16, 0x00	; 0
			}
			last_flash_time = get_current_time();
    15a6:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <get_current_time>
    15aa:	4b 01       	movw	r8, r22
    15ac:	5c 01       	movw	r10, r24
    15ae:	89 c0       	rjmp	.+274    	; 0x16c2 <play_game+0x466>
		} else if ((btn == BUTTON1_PUSHED || tolower(serial_input) == 's' || value_y < rest_value_y-sensitivity_regular) && accept_input) {
    15b0:	2d 89       	ldd	r18, Y+21	; 0x15
    15b2:	21 30       	cpi	r18, 0x01	; 1
    15b4:	61 f0       	breq	.+24     	; 0x15ce <play_game+0x372>
    15b6:	23 e7       	ldi	r18, 0x73	; 115
    15b8:	c2 16       	cp	r12, r18
    15ba:	d1 04       	cpc	r13, r1
    15bc:	41 f0       	breq	.+16     	; 0x15ce <play_game+0x372>
    15be:	20 91 4e 03 	lds	r18, 0x034E	; 0x80034e <rest_value_y>
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	20 59       	subi	r18, 0x90	; 144
    15c6:	31 40       	sbci	r19, 0x01	; 1
    15c8:	22 16       	cp	r2, r18
    15ca:	33 06       	cpc	r3, r19
    15cc:	00 f5       	brcc	.+64     	; 0x160e <play_game+0x3b2>
    15ce:	00 23       	and	r16, r16
    15d0:	f1 f0       	breq	.+60     	; 0x160e <play_game+0x3b2>
			if (move_player(-1, 0)) {
    15d2:	60 e0       	ldi	r22, 0x00	; 0
    15d4:	8f ef       	ldi	r24, 0xFF	; 255
    15d6:	0e 94 34 05 	call	0xa68	; 0xa68 <move_player>
    15da:	88 23       	and	r24, r24
    15dc:	99 f0       	breq	.+38     	; 0x1604 <play_game+0x3a8>
				step_counter++; 
    15de:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <step_counter>
    15e2:	8f 5f       	subi	r24, 0xFF	; 255
    15e4:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <step_counter>
				DDRD |= (1 << 6); 
    15e8:	8a b1       	in	r24, 0x0a	; 10
    15ea:	80 64       	ori	r24, 0x40	; 64
    15ec:	8a b9       	out	0x0a, r24	; 10
				play_move_sound(buzzer_enabled);
    15ee:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <buzzer_enabled>
    15f2:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <play_move_sound>
				last_input = get_current_time();
    15f6:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <get_current_time>
    15fa:	6e 8b       	std	Y+22, r22	; 0x16
    15fc:	7f 8b       	std	Y+23, r23	; 0x17
    15fe:	88 8f       	std	Y+24, r24	; 0x18
    1600:	99 8f       	std	Y+25, r25	; 0x19
				accept_input = false;
    1602:	00 e0       	ldi	r16, 0x00	; 0
			}
			last_flash_time = get_current_time();
    1604:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <get_current_time>
    1608:	4b 01       	movw	r8, r22
    160a:	5c 01       	movw	r10, r24
    160c:	5a c0       	rjmp	.+180    	; 0x16c2 <play_game+0x466>
		} else if ((btn == BUTTON2_PUSHED || tolower(serial_input) == 'w' || value_y > rest_value_y+sensitivity_regular) && accept_input) {
    160e:	2d 89       	ldd	r18, Y+21	; 0x15
    1610:	22 30       	cpi	r18, 0x02	; 2
    1612:	61 f0       	breq	.+24     	; 0x162c <play_game+0x3d0>
    1614:	27 e7       	ldi	r18, 0x77	; 119
    1616:	c2 16       	cp	r12, r18
    1618:	d1 04       	cpc	r13, r1
    161a:	41 f0       	breq	.+16     	; 0x162c <play_game+0x3d0>
    161c:	20 91 4e 03 	lds	r18, 0x034E	; 0x80034e <rest_value_y>
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	20 57       	subi	r18, 0x70	; 112
    1624:	3e 4f       	sbci	r19, 0xFE	; 254
    1626:	22 15       	cp	r18, r2
    1628:	33 05       	cpc	r19, r3
    162a:	00 f5       	brcc	.+64     	; 0x166c <play_game+0x410>
    162c:	00 23       	and	r16, r16
    162e:	f1 f0       	breq	.+60     	; 0x166c <play_game+0x410>
			if (move_player(1, 0)) {
    1630:	60 e0       	ldi	r22, 0x00	; 0
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	0e 94 34 05 	call	0xa68	; 0xa68 <move_player>
    1638:	88 23       	and	r24, r24
    163a:	99 f0       	breq	.+38     	; 0x1662 <play_game+0x406>
				step_counter++; 
    163c:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <step_counter>
    1640:	8f 5f       	subi	r24, 0xFF	; 255
    1642:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <step_counter>
				DDRD |= (1 << 6); 
    1646:	8a b1       	in	r24, 0x0a	; 10
    1648:	80 64       	ori	r24, 0x40	; 64
    164a:	8a b9       	out	0x0a, r24	; 10
				play_move_sound(buzzer_enabled);
    164c:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <buzzer_enabled>
    1650:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <play_move_sound>
				last_input = get_current_time();
    1654:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <get_current_time>
    1658:	6e 8b       	std	Y+22, r22	; 0x16
    165a:	7f 8b       	std	Y+23, r23	; 0x17
    165c:	88 8f       	std	Y+24, r24	; 0x18
    165e:	99 8f       	std	Y+25, r25	; 0x19
				accept_input = false;
    1660:	00 e0       	ldi	r16, 0x00	; 0
			}
			last_flash_time = get_current_time();
    1662:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <get_current_time>
    1666:	4b 01       	movw	r8, r22
    1668:	5c 01       	movw	r10, r24
    166a:	2b c0       	rjmp	.+86     	; 0x16c2 <play_game+0x466>
		} else if ((btn == BUTTON3_PUSHED || tolower(serial_input) == 'a' || value_x < rest_value_x-sensitivity_regular) && accept_input) {
    166c:	2d 89       	ldd	r18, Y+21	; 0x15
    166e:	23 30       	cpi	r18, 0x03	; 3
    1670:	49 f0       	breq	.+18     	; 0x1684 <play_game+0x428>
    1672:	21 e6       	ldi	r18, 0x61	; 97
    1674:	c2 16       	cp	r12, r18
    1676:	d1 04       	cpc	r13, r1
    1678:	29 f0       	breq	.+10     	; 0x1684 <play_game+0x428>
    167a:	80 59       	subi	r24, 0x90	; 144
    167c:	91 40       	sbci	r25, 0x01	; 1
    167e:	e8 16       	cp	r14, r24
    1680:	f9 06       	cpc	r15, r25
    1682:	f8 f4       	brcc	.+62     	; 0x16c2 <play_game+0x466>
    1684:	00 23       	and	r16, r16
    1686:	e9 f0       	breq	.+58     	; 0x16c2 <play_game+0x466>
			if (move_player(0, -1)) {
    1688:	6f ef       	ldi	r22, 0xFF	; 255
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	0e 94 34 05 	call	0xa68	; 0xa68 <move_player>
    1690:	88 23       	and	r24, r24
    1692:	99 f0       	breq	.+38     	; 0x16ba <play_game+0x45e>
				step_counter++; 
    1694:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <step_counter>
    1698:	8f 5f       	subi	r24, 0xFF	; 255
    169a:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <step_counter>
				DDRD |= (1 << 6); 
    169e:	8a b1       	in	r24, 0x0a	; 10
    16a0:	80 64       	ori	r24, 0x40	; 64
    16a2:	8a b9       	out	0x0a, r24	; 10
				play_move_sound(buzzer_enabled);
    16a4:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <buzzer_enabled>
    16a8:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <play_move_sound>
				last_input = get_current_time();
    16ac:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <get_current_time>
    16b0:	6e 8b       	std	Y+22, r22	; 0x16
    16b2:	7f 8b       	std	Y+23, r23	; 0x17
    16b4:	88 8f       	std	Y+24, r24	; 0x18
    16b6:	99 8f       	std	Y+25, r25	; 0x19
				accept_input = false;
    16b8:	00 e0       	ldi	r16, 0x00	; 0
			}
			last_flash_time = get_current_time();
    16ba:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <get_current_time>
    16be:	4b 01       	movw	r8, r22
    16c0:	5c 01       	movw	r10, r24
		}

		uint32_t current_time = get_current_time();
    16c2:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <get_current_time>
    16c6:	6b 01       	movw	r12, r22
    16c8:	7c 01       	movw	r14, r24
		if (current_time >= last_flash_time + 200)
    16ca:	d5 01       	movw	r26, r10
    16cc:	c4 01       	movw	r24, r8
    16ce:	88 53       	subi	r24, 0x38	; 56
    16d0:	9f 4f       	sbci	r25, 0xFF	; 255
    16d2:	af 4f       	sbci	r26, 0xFF	; 255
    16d4:	bf 4f       	sbci	r27, 0xFF	; 255
    16d6:	c8 16       	cp	r12, r24
    16d8:	d9 06       	cpc	r13, r25
    16da:	ea 06       	cpc	r14, r26
    16dc:	fb 06       	cpc	r15, r27
    16de:	20 f0       	brcs	.+8      	; 0x16e8 <play_game+0x48c>
		{
			// 200ms (0.2 seconds) has passed since the last time
			// we flashed the player icon, flash it now.
			flash_player();
    16e0:	0e 94 9d 03 	call	0x73a	; 0x73a <flash_player>

			// Update the most recent icon flash time.
			last_flash_time = current_time;
    16e4:	46 01       	movw	r8, r12
    16e6:	57 01       	movw	r10, r14
		}
		if (current_time >= last_target_flash_time + 500) {
    16e8:	d3 01       	movw	r26, r6
    16ea:	c2 01       	movw	r24, r4
    16ec:	8c 50       	subi	r24, 0x0C	; 12
    16ee:	9e 4f       	sbci	r25, 0xFE	; 254
    16f0:	af 4f       	sbci	r26, 0xFF	; 255
    16f2:	bf 4f       	sbci	r27, 0xFF	; 255
    16f4:	c8 16       	cp	r12, r24
    16f6:	d9 06       	cpc	r13, r25
    16f8:	ea 06       	cpc	r14, r26
    16fa:	fb 06       	cpc	r15, r27
    16fc:	20 f0       	brcs	.+8      	; 0x1706 <play_game+0x4aa>
			flash_targets();
    16fe:	0e 94 b4 03 	call	0x768	; 0x768 <flash_targets>
			last_target_flash_time = current_time;
    1702:	26 01       	movw	r4, r12
    1704:	37 01       	movw	r6, r14
		}
		if (current_time >= last_input + 100) {
    1706:	8e 89       	ldd	r24, Y+22	; 0x16
    1708:	9f 89       	ldd	r25, Y+23	; 0x17
    170a:	a8 8d       	ldd	r26, Y+24	; 0x18
    170c:	b9 8d       	ldd	r27, Y+25	; 0x19
    170e:	8c 59       	subi	r24, 0x9C	; 156
    1710:	9f 4f       	sbci	r25, 0xFF	; 255
    1712:	af 4f       	sbci	r26, 0xFF	; 255
    1714:	bf 4f       	sbci	r27, 0xFF	; 255
    1716:	c8 16       	cp	r12, r24
    1718:	d9 06       	cpc	r13, r25
    171a:	ea 06       	cpc	r14, r26
    171c:	fb 06       	cpc	r15, r27
    171e:	08 f0       	brcs	.+2      	; 0x1722 <play_game+0x4c6>
			accept_input = true;
    1720:	01 e0       	ldi	r16, 0x01	; 1
		}
		
		//Display step counter on seven segment display
		if(digit == 0) {
    1722:	11 11       	cpse	r17, r1
    1724:	11 c0       	rjmp	.+34     	; 0x1748 <play_game+0x4ec>
			value = step_counter % 10;
    1726:	90 91 4d 03 	lds	r25, 0x034D	; 0x80034d <step_counter>
    172a:	ed ec       	ldi	r30, 0xCD	; 205
    172c:	9e 9f       	mul	r25, r30
    172e:	e1 2d       	mov	r30, r1
    1730:	11 24       	eor	r1, r1
    1732:	e6 95       	lsr	r30
    1734:	e6 95       	lsr	r30
    1736:	e6 95       	lsr	r30
    1738:	ee 0f       	add	r30, r30
    173a:	8e 2f       	mov	r24, r30
    173c:	88 0f       	add	r24, r24
    173e:	88 0f       	add	r24, r24
    1740:	e8 0f       	add	r30, r24
    1742:	9e 1b       	sub	r25, r30
    1744:	e9 2f       	mov	r30, r25
    1746:	16 c0       	rjmp	.+44     	; 0x1774 <play_game+0x518>
			} else {
			value = (step_counter / 10) % 10;
    1748:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <step_counter>
    174c:	ed ec       	ldi	r30, 0xCD	; 205
    174e:	8e 9f       	mul	r24, r30
    1750:	81 2d       	mov	r24, r1
    1752:	11 24       	eor	r1, r1
    1754:	86 95       	lsr	r24
    1756:	86 95       	lsr	r24
    1758:	86 95       	lsr	r24
    175a:	8e 9f       	mul	r24, r30
    175c:	e1 2d       	mov	r30, r1
    175e:	11 24       	eor	r1, r1
    1760:	e6 95       	lsr	r30
    1762:	e6 95       	lsr	r30
    1764:	e6 95       	lsr	r30
    1766:	ee 0f       	add	r30, r30
    1768:	9e 2f       	mov	r25, r30
    176a:	99 0f       	add	r25, r25
    176c:	99 0f       	add	r25, r25
    176e:	e9 0f       	add	r30, r25
    1770:	8e 1b       	sub	r24, r30
    1772:	e8 2f       	mov	r30, r24
		}
		PORTC = seven_seg[value];
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	ec 5f       	subi	r30, 0xFC	; 252
    1778:	fe 4f       	sbci	r31, 0xFE	; 254
    177a:	80 81       	ld	r24, Z
    177c:	88 b9       	out	0x08, r24	; 8
		PORTD = (digit << 5);
    177e:	81 2f       	mov	r24, r17
    1780:	82 95       	swap	r24
    1782:	88 0f       	add	r24, r24
    1784:	80 7e       	andi	r24, 0xE0	; 224
    1786:	8b b9       	out	0x0b, r24	; 11
		/* Change the digit flag for next time. if 0 becomes 1, if 1 becomes 0. */
		digit = 1 - digit;
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	81 1b       	sub	r24, r17
    178c:	18 2f       	mov	r17, r24
		
		//Increment timer if necessary
		if (get_current_time() % 1000 == 0) {
    178e:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <get_current_time>
    1792:	28 ee       	ldi	r18, 0xE8	; 232
    1794:	33 e0       	ldi	r19, 0x03	; 3
    1796:	40 e0       	ldi	r20, 0x00	; 0
    1798:	50 e0       	ldi	r21, 0x00	; 0
    179a:	0e 94 38 10 	call	0x2070	; 0x2070 <__udivmodsi4>
    179e:	67 2b       	or	r22, r23
    17a0:	68 2b       	or	r22, r24
    17a2:	69 2b       	or	r22, r25
    17a4:	69 f5       	brne	.+90     	; 0x1800 <play_game+0x5a4>
			move_terminal_cursor(22, 1);
    17a6:	61 e0       	ldi	r22, 0x01	; 1
    17a8:	70 e0       	ldi	r23, 0x00	; 0
    17aa:	86 e1       	ldi	r24, 0x16	; 22
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <move_terminal_cursor>
			sprintf(play_time_str, "%d", play_time);
    17b2:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <play_time>
    17b6:	1f 92       	push	r1
    17b8:	8f 93       	push	r24
    17ba:	8d e9       	ldi	r24, 0x9D	; 157
    17bc:	92 e0       	ldi	r25, 0x02	; 2
    17be:	9f 93       	push	r25
    17c0:	8f 93       	push	r24
    17c2:	ce 01       	movw	r24, r28
    17c4:	01 96       	adiw	r24, 0x01	; 1
    17c6:	7c 01       	movw	r14, r24
    17c8:	9f 93       	push	r25
    17ca:	8f 93       	push	r24
    17cc:	0e 94 01 12 	call	0x2402	; 0x2402 <sprintf>
			printf("%s", play_time_str);
    17d0:	ff 92       	push	r15
    17d2:	ef 92       	push	r14
    17d4:	80 ea       	ldi	r24, 0xA0	; 160
    17d6:	92 e0       	ldi	r25, 0x02	; 2
    17d8:	9f 93       	push	r25
    17da:	8f 93       	push	r24
    17dc:	0e 94 be 11 	call	0x237c	; 0x237c <printf>
			play_time++;
    17e0:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <play_time>
    17e4:	8f 5f       	subi	r24, 0xFF	; 255
    17e6:	80 93 51 03 	sts	0x0351, r24	; 0x800351 <play_time>
    17ea:	8f e1       	ldi	r24, 0x1F	; 31
    17ec:	9e e4       	ldi	r25, 0x4E	; 78
    17ee:	01 97       	sbiw	r24, 0x01	; 1
    17f0:	f1 f7       	brne	.-4      	; 0x17ee <play_game+0x592>
    17f2:	00 c0       	rjmp	.+0      	; 0x17f4 <play_game+0x598>
    17f4:	00 00       	nop
    17f6:	0f b6       	in	r0, 0x3f	; 63
    17f8:	f8 94       	cli
    17fa:	de bf       	out	0x3e, r29	; 62
    17fc:	0f be       	out	0x3f, r0	; 63
    17fe:	cd bf       	out	0x3d, r28	; 61
			_delay_ms(10);
		}
		DDRD &= (11111101);
    1800:	8a b1       	in	r24, 0x0a	; 10
    1802:	8d 7b       	andi	r24, 0xBD	; 189
    1804:	8a b9       	out	0x0a, r24	; 10
	
	uint16_t sensitivity_diagonal = 200;
	uint16_t sensitivity_regular = 400;

	// We play the game until it's over.
	while (!is_game_over())
    1806:	0e 94 aa 04 	call	0x954	; 0x954 <is_game_over>
    180a:	88 23       	and	r24, r24
    180c:	09 f4       	brne	.+2      	; 0x1810 <play_game+0x5b4>
    180e:	49 cd       	rjmp	.-1390   	; 0x12a2 <play_game+0x46>
			play_time++;
			_delay_ms(10);
		}
		DDRD &= (11111101);
	}
	DDRD |= (1 << 6); 
    1810:	8a b1       	in	r24, 0x0a	; 10
    1812:	80 64       	ori	r24, 0x40	; 64
    1814:	8a b9       	out	0x0a, r24	; 10
	play_victory_sound(buzzer_enabled);
    1816:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <buzzer_enabled>
    181a:	0e 94 b4 02 	call	0x568	; 0x568 <play_victory_sound>
	DDRD &= (11111101);
    181e:	8a b1       	in	r24, 0x0a	; 10
    1820:	8d 7b       	andi	r24, 0xBD	; 189
    1822:	8a b9       	out	0x0a, r24	; 10
	handle_game_over();
    1824:	0e 94 69 08 	call	0x10d2	; 0x10d2 <handle_game_over>

00001828 <main>:

/////////////////////////////// main //////////////////////////////////
int main(void)
{
	//Set a seed for the random number generator
	srand(get_current_time());
    1828:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <get_current_time>
    182c:	cb 01       	movw	r24, r22
    182e:	0e 94 17 11 	call	0x222e	; 0x222e <srand>
	
	// Setup hardware and callbacks. This will turn on interrupts.
	initialise_hardware();
    1832:	0e 94 c0 07 	call	0xf80	; 0xf80 <initialise_hardware>

	// Show the start screen. Returns when the player starts the game.
	start_screen();
    1836:	0e 94 07 08 	call	0x100e	; 0x100e <start_screen>
	
	//Set the level to 1
	current_level = 1;
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <current_level>
	
	//Enable buzzer sounds
	buzzer_enabled = true;
    1840:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <buzzer_enabled>

	// Loop forever and continuously play the game.
	while (1)
	{
		new_game(current_level);
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	0e 94 3b 08 	call	0x1076	; 0x1076 <new_game>
		play_game();
    184c:	0e 94 2e 09 	call	0x125c	; 0x125c <play_game>

00001850 <uart_put_char>:
// Variable to keep track of whether incoming characters are to be echoed
// back or not.
static bool do_echo;

static int uart_put_char(char c, FILE *stream)
{
    1850:	cf 93       	push	r28
    1852:	c8 2f       	mov	r28, r24
	// Add the character to the buffer for transmission (if there is space
	// to do so). If not we wait until the buffer has space.

	// If the character is linefeed, we output carriage return.
	if (c == '\n')
    1854:	8a 30       	cpi	r24, 0x0A	; 10
    1856:	19 f4       	brne	.+6      	; 0x185e <uart_put_char+0xe>
	{
		uart_put_char('\r', stream);
    1858:	8d e0       	ldi	r24, 0x0D	; 13
    185a:	0e 94 28 0c 	call	0x1850	; 0x1850 <uart_put_char>
	// we don't output the character since the buffer will never be
	// emptied if interrupts are disabled. If the buffer is full and
	// interrupts are enabled, then we loop until the buffer has enough
	// space. The bytes_in_buffer variable will get modified by the ISR
	// which extracts bytes from the buffer.
	bool interrupts_enabled = bit_is_set(SREG, SREG_I);
    185e:	9f b7       	in	r25, 0x3f	; 63
    1860:	90 78       	andi	r25, 0x80	; 128
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
    1862:	02 c0       	rjmp	.+4      	; 0x1868 <uart_put_char+0x18>
	{
		if (!interrupts_enabled)
    1864:	99 23       	and	r25, r25
    1866:	29 f1       	breq	.+74     	; 0x18b2 <uart_put_char+0x62>
	// emptied if interrupts are disabled. If the buffer is full and
	// interrupts are enabled, then we loop until the buffer has enough
	// space. The bytes_in_buffer variable will get modified by the ISR
	// which extracts bytes from the buffer.
	bool interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
    1868:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <bytes_in_out_buffer>
    186c:	8f 3f       	cpi	r24, 0xFF	; 255
    186e:	d1 f3       	breq	.-12     	; 0x1864 <uart_put_char+0x14>
	// If this is beyond the end of the buffer, we wrap around back to the
	// beginning of the buffer. NOTE: We disable interrupts before
	// modifying the buffer. This prevents the ISR from modifying the
	// buffer at the same time. We reenable them if they were enabled when
	// we entered the function.
	cli();
    1870:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    1872:	e0 91 53 03 	lds	r30, 0x0353	; 0x800353 <out_insert_pos>
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	8e 0f       	add	r24, r30
    187a:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <out_insert_pos>
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	eb 5a       	subi	r30, 0xAB	; 171
    1882:	fc 4f       	sbci	r31, 0xFC	; 252
    1884:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    1886:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <bytes_in_out_buffer>
    188a:	8f 5f       	subi	r24, 0xFF	; 255
    188c:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <bytes_in_out_buffer>
	if (out_insert_pos == OUTPUT_BUFFER_SIZE)
    1890:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <out_insert_pos>
    1894:	8f 3f       	cpi	r24, 0xFF	; 255
    1896:	11 f4       	brne	.+4      	; 0x189c <uart_put_char+0x4c>
	{
		// Wrap around buffer pointer if necessary.
		out_insert_pos = 0;
    1898:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <out_insert_pos>
	}

	// Reenable interrupts (UDR Empty interrupt may have been disabled) -
	// we ensure it is now enabled so that it will fire and deal with the
	// next character in the buffer.
	UCSR0B |= (1 << UDRIE0);
    189c:	e1 ec       	ldi	r30, 0xC1	; 193
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	80 62       	ori	r24, 0x20	; 32
    18a4:	80 83       	st	Z, r24
	if (interrupts_enabled)
    18a6:	99 23       	and	r25, r25
    18a8:	39 f0       	breq	.+14     	; 0x18b8 <uart_put_char+0x68>
	{
		sei();
    18aa:	78 94       	sei
	}
	return 0;
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	05 c0       	rjmp	.+10     	; 0x18bc <uart_put_char+0x6c>
	bool interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
	{
		if (!interrupts_enabled)
		{
			return 1;
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	02 c0       	rjmp	.+4      	; 0x18bc <uart_put_char+0x6c>
	UCSR0B |= (1 << UDRIE0);
	if (interrupts_enabled)
	{
		sei();
	}
	return 0;
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	90 e0       	ldi	r25, 0x00	; 0
}
    18bc:	cf 91       	pop	r28
    18be:	08 95       	ret

000018c0 <uart_get_char>:

static int uart_get_char(FILE *stream)
{
	// Wait until we've received a character.
	while (bytes_in_input_buffer == 0)
    18c0:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <bytes_in_input_buffer>
    18c4:	88 23       	and	r24, r24
    18c6:	e1 f3       	breq	.-8      	; 0x18c0 <uart_get_char>

	// Turn interrupts off and remove a character from the input buffer.
	// We reenable interrupts if they were on. The pending character is
	// the one which is byte_in_input_buffer characters before the insert
	// position (taking into account that we may need to wrap around).
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    18c8:	2f b7       	in	r18, 0x3f	; 63
    18ca:	20 78       	andi	r18, 0x80	; 128
	cli();
    18cc:	f8 94       	cli
	char c;
	if (input_insert_pos - bytes_in_input_buffer < 0)
    18ce:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <input_insert_pos>
    18d2:	30 91 66 04 	lds	r19, 0x0466	; 0x800466 <bytes_in_input_buffer>
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	83 1b       	sub	r24, r19
    18da:	91 09       	sbc	r25, r1
    18dc:	5a f4       	brpl	.+22     	; 0x18f4 <uart_get_char+0x34>
	{
		// Need to wrap around.
		c = input_buffer[input_insert_pos - bytes_in_input_buffer +
    18de:	e0 91 54 04 	lds	r30, 0x0454	; 0x800454 <input_insert_pos>
    18e2:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <bytes_in_input_buffer>
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	e8 1b       	sub	r30, r24
    18ea:	f1 09       	sbc	r31, r1
    18ec:	eb 59       	subi	r30, 0x9B	; 155
    18ee:	fb 4f       	sbci	r31, 0xFB	; 251
    18f0:	80 81       	ld	r24, Z
    18f2:	0a c0       	rjmp	.+20     	; 0x1908 <uart_get_char+0x48>
			INPUT_BUFFER_SIZE];
	}
	else
	{
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    18f4:	e0 91 54 04 	lds	r30, 0x0454	; 0x800454 <input_insert_pos>
    18f8:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <bytes_in_input_buffer>
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	e8 1b       	sub	r30, r24
    1900:	f1 09       	sbc	r31, r1
    1902:	eb 5a       	subi	r30, 0xAB	; 171
    1904:	fb 4f       	sbci	r31, 0xFB	; 251
    1906:	80 81       	ld	r24, Z
	}

	// Decrement our count of bytes in the input buffer.
	bytes_in_input_buffer--;
    1908:	90 91 66 04 	lds	r25, 0x0466	; 0x800466 <bytes_in_input_buffer>
    190c:	91 50       	subi	r25, 0x01	; 1
    190e:	90 93 66 04 	sts	0x0466, r25	; 0x800466 <bytes_in_input_buffer>
	if (interrupts_enabled)
    1912:	22 23       	and	r18, r18
    1914:	09 f0       	breq	.+2      	; 0x1918 <uart_get_char+0x58>
	{
		sei();
    1916:	78 94       	sei
	// as WASD. If you're a student reading this, pretend you didn't see
	// it XD. Honestly, you cannot rely on the arrow keys to work like
	// WASD, this is what we call undocumented behaviour.
	static char first = 0;
	static char second = 0;
	if (first == 0x1B && second == '[')
    1918:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <first.1835>
    191c:	9b 31       	cpi	r25, 0x1B	; 27
    191e:	b1 f4       	brne	.+44     	; 0x194c <uart_get_char+0x8c>
    1920:	90 91 3c 03 	lds	r25, 0x033C	; 0x80033c <second.1836>
    1924:	9b 35       	cpi	r25, 0x5B	; 91
    1926:	91 f4       	brne	.+36     	; 0x194c <uart_get_char+0x8c>
	{
		switch (c)
    1928:	82 34       	cpi	r24, 0x42	; 66
    192a:	49 f0       	breq	.+18     	; 0x193e <uart_get_char+0x7e>
    192c:	18 f4       	brcc	.+6      	; 0x1934 <uart_get_char+0x74>
    192e:	81 34       	cpi	r24, 0x41	; 65
    1930:	61 f0       	breq	.+24     	; 0x194a <uart_get_char+0x8a>
    1932:	0c c0       	rjmp	.+24     	; 0x194c <uart_get_char+0x8c>
    1934:	83 34       	cpi	r24, 0x43	; 67
    1936:	29 f0       	breq	.+10     	; 0x1942 <uart_get_char+0x82>
    1938:	84 34       	cpi	r24, 0x44	; 68
    193a:	29 f0       	breq	.+10     	; 0x1946 <uart_get_char+0x86>
    193c:	07 c0       	rjmp	.+14     	; 0x194c <uart_get_char+0x8c>
		{
			case 'A':
				c = 'w';
				break;
			case 'B':
				c = 's';
    193e:	83 e7       	ldi	r24, 0x73	; 115
				break;
    1940:	05 c0       	rjmp	.+10     	; 0x194c <uart_get_char+0x8c>
			case 'C':
				c = 'd';
    1942:	84 e6       	ldi	r24, 0x64	; 100
				break;
    1944:	03 c0       	rjmp	.+6      	; 0x194c <uart_get_char+0x8c>
			case 'D':
				c = 'a';
    1946:	81 e6       	ldi	r24, 0x61	; 97
				break;
    1948:	01 c0       	rjmp	.+2      	; 0x194c <uart_get_char+0x8c>
	if (first == 0x1B && second == '[')
	{
		switch (c)
		{
			case 'A':
				c = 'w';
    194a:	87 e7       	ldi	r24, 0x77	; 119
				break;
			default:
				break;
		}
	}
	first = second;
    194c:	90 91 3c 03 	lds	r25, 0x033C	; 0x80033c <second.1836>
    1950:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <first.1835>
	second = c;
    1954:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <second.1836>

	return c;
}
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	08 95       	ret

0000195c <__vector_21>:
	_FDEV_SETUP_RW);

// Interrupt handler for UART Data Register Empty (i.e., another character
// can be taken from our buffer and written out).
ISR(USART0_UDRE_vect)
{
    195c:	1f 92       	push	r1
    195e:	0f 92       	push	r0
    1960:	0f b6       	in	r0, 0x3f	; 63
    1962:	0f 92       	push	r0
    1964:	11 24       	eor	r1, r1
    1966:	2f 93       	push	r18
    1968:	8f 93       	push	r24
    196a:	9f 93       	push	r25
    196c:	ef 93       	push	r30
    196e:	ff 93       	push	r31
	// Check if we have data in our buffer.
	if (bytes_in_out_buffer > 0)
    1970:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <bytes_in_out_buffer>
    1974:	88 23       	and	r24, r24
    1976:	29 f1       	breq	.+74     	; 0x19c2 <__vector_21+0x66>
		// UART. The pending byte (character) is the one which is
		// bytes_in_buffer characters before the insert_pos (taking
		// into account that we may need to wrap around to the end of
		// the buffer).
		char c;
		if (out_insert_pos - bytes_in_out_buffer < 0)
    1978:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <out_insert_pos>
    197c:	20 91 54 03 	lds	r18, 0x0354	; 0x800354 <bytes_in_out_buffer>
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	82 1b       	sub	r24, r18
    1984:	91 09       	sbc	r25, r1
    1986:	5a f4       	brpl	.+22     	; 0x199e <__vector_21+0x42>
		{
			// Need to wrap around.
			c = out_buffer[out_insert_pos - bytes_in_out_buffer +
    1988:	e0 91 53 03 	lds	r30, 0x0353	; 0x800353 <out_insert_pos>
    198c:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <bytes_in_out_buffer>
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	e8 1b       	sub	r30, r24
    1994:	f1 09       	sbc	r31, r1
    1996:	ec 5a       	subi	r30, 0xAC	; 172
    1998:	fb 4f       	sbci	r31, 0xFB	; 251
    199a:	90 81       	ld	r25, Z
    199c:	0a c0       	rjmp	.+20     	; 0x19b2 <__vector_21+0x56>
				OUTPUT_BUFFER_SIZE];
		}
		else
		{
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    199e:	e0 91 53 03 	lds	r30, 0x0353	; 0x800353 <out_insert_pos>
    19a2:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <bytes_in_out_buffer>
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	e8 1b       	sub	r30, r24
    19aa:	f1 09       	sbc	r31, r1
    19ac:	eb 5a       	subi	r30, 0xAB	; 171
    19ae:	fc 4f       	sbci	r31, 0xFC	; 252
    19b0:	90 81       	ld	r25, Z
		}

		// Decrement our count of the number of bytes in the buffer.
		bytes_in_out_buffer--;
    19b2:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <bytes_in_out_buffer>
    19b6:	81 50       	subi	r24, 0x01	; 1
    19b8:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <bytes_in_out_buffer>

		// Output the character via the UART.
		UDR0 = c;
    19bc:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    19c0:	05 c0       	rjmp	.+10     	; 0x19cc <__vector_21+0x70>
	{
		// No data in the buffer. We disable the UART Data Register
		// Empty interrupt because otherwise it will trigger again
		// immediately when this ISR exits. The interrupt is reenabled
		// when a character is placed in the buffer.
		UCSR0B &= ~(1 << UDRIE0);
    19c2:	e1 ec       	ldi	r30, 0xC1	; 193
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	8f 7d       	andi	r24, 0xDF	; 223
    19ca:	80 83       	st	Z, r24
	}
}
    19cc:	ff 91       	pop	r31
    19ce:	ef 91       	pop	r30
    19d0:	9f 91       	pop	r25
    19d2:	8f 91       	pop	r24
    19d4:	2f 91       	pop	r18
    19d6:	0f 90       	pop	r0
    19d8:	0f be       	out	0x3f, r0	; 63
    19da:	0f 90       	pop	r0
    19dc:	1f 90       	pop	r1
    19de:	18 95       	reti

000019e0 <__vector_20>:

// Interrupt handler for UART Receive Complete (i.e., can read a character).
// The character is read and placed in the input buffer.
ISR(USART0_RX_vect)
{
    19e0:	1f 92       	push	r1
    19e2:	0f 92       	push	r0
    19e4:	0f b6       	in	r0, 0x3f	; 63
    19e6:	0f 92       	push	r0
    19e8:	11 24       	eor	r1, r1
    19ea:	2f 93       	push	r18
    19ec:	3f 93       	push	r19
    19ee:	4f 93       	push	r20
    19f0:	5f 93       	push	r21
    19f2:	6f 93       	push	r22
    19f4:	7f 93       	push	r23
    19f6:	8f 93       	push	r24
    19f8:	9f 93       	push	r25
    19fa:	af 93       	push	r26
    19fc:	bf 93       	push	r27
    19fe:	cf 93       	push	r28
    1a00:	ef 93       	push	r30
    1a02:	ff 93       	push	r31
	// Read the character - we ignore the possibility of overrun.
	char c = UDR0;
    1a04:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

	if (do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE)
    1a08:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <do_echo>
    1a0c:	88 23       	and	r24, r24
    1a0e:	49 f0       	breq	.+18     	; 0x1a22 <__vector_20+0x42>
    1a10:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <bytes_in_out_buffer>
    1a14:	8f 3f       	cpi	r24, 0xFF	; 255
    1a16:	29 f0       	breq	.+10     	; 0x1a22 <__vector_20+0x42>
	{
		// If echoing is enabled and there is output buffer space,
		// echo the received character back to the UART. If there
		// is no output buffer space, characters will be lost.
		uart_put_char(c, 0);
    1a18:	60 e0       	ldi	r22, 0x00	; 0
    1a1a:	70 e0       	ldi	r23, 0x00	; 0
    1a1c:	8c 2f       	mov	r24, r28
    1a1e:	0e 94 28 0c 	call	0x1850	; 0x1850 <uart_put_char>
	}

	// Check if we have space in our buffer. If not, set the overrun flag
	// and throw away the character. We never clear the overrun flag -
	// it's up to the programmer to check/clear this flag if desired.
	if (bytes_in_input_buffer >= INPUT_BUFFER_SIZE)
    1a22:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <bytes_in_input_buffer>
    1a26:	80 31       	cpi	r24, 0x10	; 16
    1a28:	20 f0       	brcs	.+8      	; 0x1a32 <__vector_20+0x52>
	{
		input_overrun = 1;
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <input_overrun>
    1a30:	18 c0       	rjmp	.+48     	; 0x1a62 <__vector_20+0x82>
	}
	else
	{
		// If the character is carriage return, turn it into linefeed.
		if (c == '\r')
    1a32:	cd 30       	cpi	r28, 0x0D	; 13
    1a34:	09 f4       	brne	.+2      	; 0x1a38 <__vector_20+0x58>
		{
			c = '\n';
    1a36:	ca e0       	ldi	r28, 0x0A	; 10
		}

		// There is room in the input buffer.
		input_buffer[input_insert_pos++] = c;
    1a38:	e0 91 54 04 	lds	r30, 0x0454	; 0x800454 <input_insert_pos>
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	8e 0f       	add	r24, r30
    1a40:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <input_insert_pos>
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	eb 5a       	subi	r30, 0xAB	; 171
    1a48:	fb 4f       	sbci	r31, 0xFB	; 251
    1a4a:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    1a4c:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <bytes_in_input_buffer>
    1a50:	8f 5f       	subi	r24, 0xFF	; 255
    1a52:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <bytes_in_input_buffer>
		if (input_insert_pos == INPUT_BUFFER_SIZE)
    1a56:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <input_insert_pos>
    1a5a:	80 31       	cpi	r24, 0x10	; 16
    1a5c:	11 f4       	brne	.+4      	; 0x1a62 <__vector_20+0x82>
		{
			// Wrap around buffer pointer if necessary.
			input_insert_pos = 0;
    1a5e:	10 92 54 04 	sts	0x0454, r1	; 0x800454 <input_insert_pos>
		}
	}
}
    1a62:	ff 91       	pop	r31
    1a64:	ef 91       	pop	r30
    1a66:	cf 91       	pop	r28
    1a68:	bf 91       	pop	r27
    1a6a:	af 91       	pop	r26
    1a6c:	9f 91       	pop	r25
    1a6e:	8f 91       	pop	r24
    1a70:	7f 91       	pop	r23
    1a72:	6f 91       	pop	r22
    1a74:	5f 91       	pop	r21
    1a76:	4f 91       	pop	r20
    1a78:	3f 91       	pop	r19
    1a7a:	2f 91       	pop	r18
    1a7c:	0f 90       	pop	r0
    1a7e:	0f be       	out	0x3f, r0	; 63
    1a80:	0f 90       	pop	r0
    1a82:	1f 90       	pop	r1
    1a84:	18 95       	reti

00001a86 <init_serial_stdio>:

void init_serial_stdio(long baudrate, bool echo)
{
	// Initialise our buffers.
	out_insert_pos = 0;
    1a86:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <out_insert_pos>
	bytes_in_out_buffer = 0;
    1a8a:	10 92 54 03 	sts	0x0354, r1	; 0x800354 <bytes_in_out_buffer>
	input_insert_pos = 0;
    1a8e:	10 92 54 04 	sts	0x0454, r1	; 0x800454 <input_insert_pos>
	bytes_in_input_buffer = 0;
    1a92:	10 92 66 04 	sts	0x0466, r1	; 0x800466 <bytes_in_input_buffer>
	input_overrun = 0;
    1a96:	10 92 65 04 	sts	0x0465, r1	; 0x800465 <input_overrun>

	// Record whether we're going to echo characters or not.
	do_echo = echo;
    1a9a:	40 93 3e 03 	sts	0x033E, r20	; 0x80033e <do_echo>

	// Configure the baud rate. This differs from the datasheet formula so
	// that we get rounding to the nearest integer while using integer
	// division (which truncates).
	UBRR0 = (uint16_t)((((SYSCLK / (8 * baudrate)) + 1) / 2) - 1);
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	88 0f       	add	r24, r24
    1aa4:	99 1f       	adc	r25, r25
    1aa6:	aa 1f       	adc	r26, r26
    1aa8:	bb 1f       	adc	r27, r27
    1aaa:	88 0f       	add	r24, r24
    1aac:	99 1f       	adc	r25, r25
    1aae:	aa 1f       	adc	r26, r26
    1ab0:	bb 1f       	adc	r27, r27
    1ab2:	9c 01       	movw	r18, r24
    1ab4:	ad 01       	movw	r20, r26
    1ab6:	22 0f       	add	r18, r18
    1ab8:	33 1f       	adc	r19, r19
    1aba:	44 1f       	adc	r20, r20
    1abc:	55 1f       	adc	r21, r21
    1abe:	60 e0       	ldi	r22, 0x00	; 0
    1ac0:	72 e1       	ldi	r23, 0x12	; 18
    1ac2:	8a e7       	ldi	r24, 0x7A	; 122
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <__divmodsi4>
    1aca:	ba 01       	movw	r22, r20
    1acc:	a9 01       	movw	r20, r18
    1ace:	4f 5f       	subi	r20, 0xFF	; 255
    1ad0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ad2:	6f 4f       	sbci	r22, 0xFF	; 255
    1ad4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad6:	db 01       	movw	r26, r22
    1ad8:	ca 01       	movw	r24, r20
    1ada:	1a f4       	brpl	.+6      	; 0x1ae2 <init_serial_stdio+0x5c>
    1adc:	01 96       	adiw	r24, 0x01	; 1
    1ade:	a1 1d       	adc	r26, r1
    1ae0:	b1 1d       	adc	r27, r1
    1ae2:	b5 95       	asr	r27
    1ae4:	a7 95       	ror	r26
    1ae6:	97 95       	ror	r25
    1ae8:	87 95       	ror	r24
    1aea:	01 97       	sbiw	r24, 0x01	; 1
    1aec:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    1af0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Enable transmission and receiving via UART. We don't enable the UDR
	// empty interrupt here (we wait until we've got a character to
	// transmit). NOTE: Interrupts must be enabled globally for this
	// module to work, but we do not do this here.
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
    1af4:	e1 ec       	ldi	r30, 0xC1	; 193
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	88 e1       	ldi	r24, 0x18	; 24
    1afa:	80 83       	st	Z, r24

	// Enable receive complete interrupt.
	UCSR0B |= (1 << RXCIE0);
    1afc:	80 81       	ld	r24, Z
    1afe:	80 68       	ori	r24, 0x80	; 128
    1b00:	80 83       	st	Z, r24

	// Set up our stream so the get and put functions are used to
	// read/write characters via the serial port when we use stdio
	// functions.
	stdout = &serialio;
    1b02:	e7 e6       	ldi	r30, 0x67	; 103
    1b04:	f4 e0       	ldi	r31, 0x04	; 4
    1b06:	8e e0       	ldi	r24, 0x0E	; 14
    1b08:	91 e0       	ldi	r25, 0x01	; 1
    1b0a:	93 83       	std	Z+3, r25	; 0x03
    1b0c:	82 83       	std	Z+2, r24	; 0x02
	stdin = &serialio;
    1b0e:	91 83       	std	Z+1, r25	; 0x01
    1b10:	80 83       	st	Z, r24
    1b12:	08 95       	ret

00001b14 <serial_input_available>:
}

bool serial_input_available(void)
{
	return bytes_in_input_buffer != 0;
    1b14:	90 91 66 04 	lds	r25, 0x0466	; 0x800466 <bytes_in_input_buffer>
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	91 11       	cpse	r25, r1
    1b1c:	01 c0       	rjmp	.+2      	; 0x1b20 <serial_input_available+0xc>
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
}
    1b20:	08 95       	ret

00001b22 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void)
{
	// Just adjust our buffer data so it looks empty.
	input_insert_pos = 0;
    1b22:	10 92 54 04 	sts	0x0454, r1	; 0x800454 <input_insert_pos>
	bytes_in_input_buffer = 0;
    1b26:	10 92 66 04 	sts	0x0466, r1	; 0x800466 <bytes_in_input_buffer>
    1b2a:	08 95       	ret

00001b2c <spi_setup_master>:

void spi_setup_master(uint8_t clockdivider)
{
	// Make the SS, MOSI and SCK pins outputs. These are pins 4, 5 and 7
	// of port B on the ATmega324A.
	DDRB |= (1 << DDB7) | (1 << DDB5) | (1 << DDB4);
    1b2c:	94 b1       	in	r25, 0x04	; 4
    1b2e:	90 6b       	ori	r25, 0xB0	; 176
    1b30:	94 b9       	out	0x04, r25	; 4

	// Set the slave select (SS) line high.
	PORTB |= (1 << PORTB4);
    1b32:	95 b1       	in	r25, 0x05	; 5
    1b34:	90 61       	ori	r25, 0x10	; 16
    1b36:	95 b9       	out	0x05, r25	; 5
	
	// Set up the SPI control registers SPCR and SPSR. Enable SPI as use
	// Master Mode by setting the SPE and MSTR bits of SPCR0.
	SPCR0 = (1 << SPE0) | (1 << MSTR0);
    1b38:	90 e5       	ldi	r25, 0x50	; 80
    1b3a:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR based on the
	// given clock divider. Invalid values default to the slowest speed.
	// We consider each bit in turn.
	switch (clockdivider)
    1b3c:	88 30       	cpi	r24, 0x08	; 8
    1b3e:	21 f0       	breq	.+8      	; 0x1b48 <spi_setup_master+0x1c>
    1b40:	80 32       	cpi	r24, 0x20	; 32
    1b42:	11 f0       	breq	.+4      	; 0x1b48 <spi_setup_master+0x1c>
    1b44:	82 30       	cpi	r24, 0x02	; 2
    1b46:	19 f4       	brne	.+6      	; 0x1b4e <spi_setup_master+0x22>
	{
		case 2: // Fallthrough.
		case 8: // Fallthrough.
		case 32:
			SPSR0 = (1 << SPI2X0);
    1b48:	91 e0       	ldi	r25, 0x01	; 1
    1b4a:	9d bd       	out	0x2d, r25	; 45
			break;
    1b4c:	01 c0       	rjmp	.+2      	; 0x1b50 <spi_setup_master+0x24>
		default:
			SPSR0 = 0;
    1b4e:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch (clockdivider)
    1b50:	80 32       	cpi	r24, 0x20	; 32
    1b52:	69 f0       	breq	.+26     	; 0x1b6e <spi_setup_master+0x42>
    1b54:	28 f4       	brcc	.+10     	; 0x1b60 <spi_setup_master+0x34>
    1b56:	88 30       	cpi	r24, 0x08	; 8
    1b58:	71 f0       	breq	.+28     	; 0x1b76 <spi_setup_master+0x4a>
    1b5a:	80 31       	cpi	r24, 0x10	; 16
    1b5c:	61 f0       	breq	.+24     	; 0x1b76 <spi_setup_master+0x4a>
    1b5e:	0e c0       	rjmp	.+28     	; 0x1b7c <spi_setup_master+0x50>
    1b60:	80 34       	cpi	r24, 0x40	; 64
    1b62:	29 f0       	breq	.+10     	; 0x1b6e <spi_setup_master+0x42>
    1b64:	80 38       	cpi	r24, 0x80	; 128
    1b66:	51 f4       	brne	.+20     	; 0x1b7c <spi_setup_master+0x50>
	{
		case 128:
			SPCR0 |= (1 << SPR00);
    1b68:	8c b5       	in	r24, 0x2c	; 44
    1b6a:	81 60       	ori	r24, 0x01	; 1
    1b6c:	8c bd       	out	0x2c, r24	; 44
			// Fallthrough.
		case 32: // Fallthrough.
		case 64:
			SPCR0 |= (1 << SPR10);
    1b6e:	8c b5       	in	r24, 0x2c	; 44
    1b70:	82 60       	ori	r24, 0x02	; 2
    1b72:	8c bd       	out	0x2c, r24	; 44
			break;
    1b74:	03 c0       	rjmp	.+6      	; 0x1b7c <spi_setup_master+0x50>
		case 8: // Fallthrough.
		case 16:
			SPCR0 |= (1 << SPR00);
    1b76:	8c b5       	in	r24, 0x2c	; 44
    1b78:	81 60       	ori	r24, 0x01	; 1
    1b7a:	8c bd       	out	0x2c, r24	; 44
			break;
	}

	// Take SS (slave select) line low.
	PORTB &= ~(1 << PORTB4);
    1b7c:	85 b1       	in	r24, 0x05	; 5
    1b7e:	8f 7e       	andi	r24, 0xEF	; 239
    1b80:	85 b9       	out	0x05, r24	; 5
    1b82:	08 95       	ret

00001b84 <spi_send_byte>:
	// transfer. We then wait until the most significant bit of SPSR0
	// (SPIF0) is set - this indicates that the transfer is complete. The
	// final read of SPSR0 followed by a read of SPDR0 will cause the SPIF
	// bit to be reset to 0. See page 173 of the ATmega324A datasheet for
	// more info.
	SPDR0 = byte;
    1b84:	8e bd       	out	0x2e, r24	; 46
	while ((SPSR0 & (1 << SPIF0)) == 0)
    1b86:	0d b4       	in	r0, 0x2d	; 45
    1b88:	07 fe       	sbrs	r0, 7
    1b8a:	fd cf       	rjmp	.-6      	; 0x1b86 <spi_send_byte+0x2>
	{
		; // Wait.
	}
	return SPDR0;
    1b8c:	8e b5       	in	r24, 0x2e	; 46
}
    1b8e:	08 95       	ret

00001b90 <display_initial_image>:
// Macro for getting next column number.
#define GET_NEXT_COLUMN(x, d) (((x) + 1) % countof((d)))

// Displays the initial image of the start screen.
static void display_initial_image(void)
{
    1b90:	1f 93       	push	r17
    1b92:	cf 93       	push	r28
    1b94:	df 93       	push	r29
    1b96:	cd b7       	in	r28, 0x3d	; 61
    1b98:	de b7       	in	r29, 0x3e	; 62
    1b9a:	28 97       	sbiw	r28, 0x08	; 8
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	f8 94       	cli
    1ba0:	de bf       	out	0x3e, r29	; 62
    1ba2:	0f be       	out	0x3f, r0	; 63
    1ba4:	cd bf       	out	0x3d, r28	; 61
	for (uint8_t col = 0; col < min(MATRIX_NUM_COLUMNS,
    1ba6:	10 e0       	ldi	r17, 0x00	; 0
    1ba8:	17 c0       	rjmp	.+46     	; 0x1bd8 <display_initial_image+0x48>
		countof(anim_data)); col++)
	{
		MatrixColumn column_data;
		memcpy_P(column_data, &anim_data[col], sizeof(column_data));
    1baa:	61 2f       	mov	r22, r17
    1bac:	70 e0       	ldi	r23, 0x00	; 0
    1bae:	66 0f       	add	r22, r22
    1bb0:	77 1f       	adc	r23, r23
    1bb2:	66 0f       	add	r22, r22
    1bb4:	77 1f       	adc	r23, r23
    1bb6:	66 0f       	add	r22, r22
    1bb8:	77 1f       	adc	r23, r23
    1bba:	60 53       	subi	r22, 0x30	; 48
    1bbc:	7e 4f       	sbci	r23, 0xFE	; 254
    1bbe:	48 e0       	ldi	r20, 0x08	; 8
    1bc0:	50 e0       	ldi	r21, 0x00	; 0
    1bc2:	ce 01       	movw	r24, r28
    1bc4:	01 96       	adiw	r24, 0x01	; 1
    1bc6:	0e 94 32 11 	call	0x2264	; 0x2264 <memcpy_P>
		ledmatrix_update_column(col, column_data);
    1bca:	be 01       	movw	r22, r28
    1bcc:	6f 5f       	subi	r22, 0xFF	; 255
    1bce:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd0:	81 2f       	mov	r24, r17
    1bd2:	0e 94 98 07 	call	0xf30	; 0xf30 <ledmatrix_update_column>

// Displays the initial image of the start screen.
static void display_initial_image(void)
{
	for (uint8_t col = 0; col < min(MATRIX_NUM_COLUMNS,
		countof(anim_data)); col++)
    1bd6:	1f 5f       	subi	r17, 0xFF	; 255
#define GET_NEXT_COLUMN(x, d) (((x) + 1) % countof((d)))

// Displays the initial image of the start screen.
static void display_initial_image(void)
{
	for (uint8_t col = 0; col < min(MATRIX_NUM_COLUMNS,
    1bd8:	10 31       	cpi	r17, 0x10	; 16
    1bda:	38 f3       	brcs	.-50     	; 0x1baa <display_initial_image+0x1a>
	{
		MatrixColumn column_data;
		memcpy_P(column_data, &anim_data[col], sizeof(column_data));
		ledmatrix_update_column(col, column_data);
	}
}
    1bdc:	28 96       	adiw	r28, 0x08	; 8
    1bde:	0f b6       	in	r0, 0x3f	; 63
    1be0:	f8 94       	cli
    1be2:	de bf       	out	0x3e, r29	; 62
    1be4:	0f be       	out	0x3f, r0	; 63
    1be6:	cd bf       	out	0x3d, r28	; 61
    1be8:	df 91       	pop	r29
    1bea:	cf 91       	pop	r28
    1bec:	1f 91       	pop	r17
    1bee:	08 95       	ret

00001bf0 <display_next_column>:

// Displays the next column of the start screen.
static void display_next_column(void)
{
    1bf0:	cf 93       	push	r28
    1bf2:	df 93       	push	r29
    1bf4:	cd b7       	in	r28, 0x3d	; 61
    1bf6:	de b7       	in	r29, 0x3e	; 62
    1bf8:	28 97       	sbiw	r28, 0x08	; 8
    1bfa:	0f b6       	in	r0, 0x3f	; 63
    1bfc:	f8 94       	cli
    1bfe:	de bf       	out	0x3e, r29	; 62
    1c00:	0f be       	out	0x3f, r0	; 63
    1c02:	cd bf       	out	0x3d, r28	; 61
	ledmatrix_shift_display_left();
    1c04:	0e 94 b5 07 	call	0xf6a	; 0xf6a <ledmatrix_shift_display_left>
	MatrixColumn column_data;
	memcpy_P(column_data, &anim_data[next_column], sizeof(column_data));
    1c08:	60 91 3f 03 	lds	r22, 0x033F	; 0x80033f <next_column>
    1c0c:	70 e0       	ldi	r23, 0x00	; 0
    1c0e:	66 0f       	add	r22, r22
    1c10:	77 1f       	adc	r23, r23
    1c12:	66 0f       	add	r22, r22
    1c14:	77 1f       	adc	r23, r23
    1c16:	66 0f       	add	r22, r22
    1c18:	77 1f       	adc	r23, r23
    1c1a:	60 53       	subi	r22, 0x30	; 48
    1c1c:	7e 4f       	sbci	r23, 0xFE	; 254
    1c1e:	48 e0       	ldi	r20, 0x08	; 8
    1c20:	50 e0       	ldi	r21, 0x00	; 0
    1c22:	ce 01       	movw	r24, r28
    1c24:	01 96       	adiw	r24, 0x01	; 1
    1c26:	0e 94 32 11 	call	0x2264	; 0x2264 <memcpy_P>
	ledmatrix_update_column(MATRIX_NUM_COLUMNS - 1, column_data);
    1c2a:	be 01       	movw	r22, r28
    1c2c:	6f 5f       	subi	r22, 0xFF	; 255
    1c2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c30:	8f e0       	ldi	r24, 0x0F	; 15
    1c32:	0e 94 98 07 	call	0xf30	; 0xf30 <ledmatrix_update_column>
	next_column = GET_NEXT_COLUMN(next_column, anim_data);
    1c36:	40 91 3f 03 	lds	r20, 0x033F	; 0x80033f <next_column>
    1c3a:	50 e0       	ldi	r21, 0x00	; 0
    1c3c:	4f 5f       	subi	r20, 0xFF	; 255
    1c3e:	5f 4f       	sbci	r21, 0xFF	; 255
    1c40:	9a 01       	movw	r18, r20
    1c42:	36 95       	lsr	r19
    1c44:	27 95       	ror	r18
    1c46:	ab e7       	ldi	r26, 0x7B	; 123
    1c48:	b4 e1       	ldi	r27, 0x14	; 20
    1c4a:	0e 94 79 10 	call	0x20f2	; 0x20f2 <__umulhisi3>
    1c4e:	96 95       	lsr	r25
    1c50:	87 95       	ror	r24
    1c52:	62 e3       	ldi	r22, 0x32	; 50
    1c54:	68 9f       	mul	r22, r24
    1c56:	90 01       	movw	r18, r0
    1c58:	69 9f       	mul	r22, r25
    1c5a:	30 0d       	add	r19, r0
    1c5c:	11 24       	eor	r1, r1
    1c5e:	ca 01       	movw	r24, r20
    1c60:	82 1b       	sub	r24, r18
    1c62:	93 0b       	sbc	r25, r19
    1c64:	80 93 3f 03 	sts	0x033F, r24	; 0x80033f <next_column>
	if (next_column == MATRIX_NUM_COLUMNS)
    1c68:	80 31       	cpi	r24, 0x10	; 16
    1c6a:	29 f4       	brne	.+10     	; 0x1c76 <display_next_column+0x86>
	{
		flags |= FLG_IS_NEW_CYCLE;
    1c6c:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <flags>
    1c70:	81 60       	ori	r24, 0x01	; 1
    1c72:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <flags>
	}
}
    1c76:	28 96       	adiw	r28, 0x08	; 8
    1c78:	0f b6       	in	r0, 0x3f	; 63
    1c7a:	f8 94       	cli
    1c7c:	de bf       	out	0x3e, r29	; 62
    1c7e:	0f be       	out	0x3f, r0	; 63
    1c80:	cd bf       	out	0x3d, r28	; 61
    1c82:	df 91       	pop	r29
    1c84:	cf 91       	pop	r28
    1c86:	08 95       	ret

00001c88 <display_title_pixel>:
		}
	}
}

static bool display_title_pixel(uint8_t line, uint8_t col, bool coloured)
{
    1c88:	ef 92       	push	r14
    1c8a:	ff 92       	push	r15
    1c8c:	0f 93       	push	r16
    1c8e:	1f 93       	push	r17
    1c90:	cf 93       	push	r28
    1c92:	df 93       	push	r29
    1c94:	cd b7       	in	r28, 0x3d	; 61
    1c96:	de b7       	in	r29, 0x3e	; 62
    1c98:	28 97       	sbiw	r28, 0x08	; 8
    1c9a:	0f b6       	in	r0, 0x3f	; 63
    1c9c:	f8 94       	cli
    1c9e:	de bf       	out	0x3e, r29	; 62
    1ca0:	0f be       	out	0x3f, r0	; 63
    1ca2:	cd bf       	out	0x3d, r28	; 61
    1ca4:	f6 2e       	mov	r15, r22
    1ca6:	e4 2e       	mov	r14, r20
	uint64_t data;
	memcpy_P(&data, &title_data[line], sizeof(data));
    1ca8:	68 2f       	mov	r22, r24
    1caa:	70 e0       	ldi	r23, 0x00	; 0
    1cac:	66 0f       	add	r22, r22
    1cae:	77 1f       	adc	r23, r23
    1cb0:	66 0f       	add	r22, r22
    1cb2:	77 1f       	adc	r23, r23
    1cb4:	66 0f       	add	r22, r22
    1cb6:	77 1f       	adc	r23, r23
    1cb8:	68 55       	subi	r22, 0x58	; 88
    1cba:	7e 4f       	sbci	r23, 0xFE	; 254
    1cbc:	48 e0       	ldi	r20, 0x08	; 8
    1cbe:	50 e0       	ldi	r21, 0x00	; 0
    1cc0:	ce 01       	movw	r24, r28
    1cc2:	01 96       	adiw	r24, 0x01	; 1
    1cc4:	0e 94 32 11 	call	0x2264	; 0x2264 <memcpy_P>
	if (data & ((uint64_t)1U << (63 - col)))
    1cc8:	0f e3       	ldi	r16, 0x3F	; 63
    1cca:	10 e0       	ldi	r17, 0x00	; 0
    1ccc:	0f 19       	sub	r16, r15
    1cce:	11 09       	sbc	r17, r1
    1cd0:	29 81       	ldd	r18, Y+1	; 0x01
    1cd2:	3a 81       	ldd	r19, Y+2	; 0x02
    1cd4:	4b 81       	ldd	r20, Y+3	; 0x03
    1cd6:	5c 81       	ldd	r21, Y+4	; 0x04
    1cd8:	6d 81       	ldd	r22, Y+5	; 0x05
    1cda:	7e 81       	ldd	r23, Y+6	; 0x06
    1cdc:	8f 81       	ldd	r24, Y+7	; 0x07
    1cde:	98 85       	ldd	r25, Y+8	; 0x08
    1ce0:	0e 94 8a 10 	call	0x2114	; 0x2114 <__lshrdi3>
    1ce4:	21 70       	andi	r18, 0x01	; 1
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	40 e0       	ldi	r20, 0x00	; 0
    1cea:	50 e0       	ldi	r21, 0x00	; 0
    1cec:	60 e0       	ldi	r22, 0x00	; 0
    1cee:	70 e0       	ldi	r23, 0x00	; 0
    1cf0:	80 e0       	ldi	r24, 0x00	; 0
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	a0 e0       	ldi	r26, 0x00	; 0
    1cf6:	0e 94 a6 10 	call	0x214c	; 0x214c <__cmpdi2_s8>
    1cfa:	c1 f0       	breq	.+48     	; 0x1d2c <display_title_pixel+0xa4>
	{
		if (!coloured)
    1cfc:	e1 10       	cpse	r14, r1
    1cfe:	1b c0       	rjmp	.+54     	; 0x1d36 <display_title_pixel+0xae>
    1d00:	10 e0       	ldi	r17, 0x00	; 0
    1d02:	0f c0       	rjmp	.+30     	; 0x1d22 <display_title_pixel+0x9a>
		{
			for (uint8_t j = 0; j < countof(title_pos); j++)
			{
				if (col <= title_pos[j])
    1d04:	81 2f       	mov	r24, r17
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	fc 01       	movw	r30, r24
    1d0a:	e6 55       	subi	r30, 0x56	; 86
    1d0c:	fd 4f       	sbci	r31, 0xFD	; 253
    1d0e:	20 81       	ld	r18, Z
    1d10:	2f 15       	cp	r18, r15
    1d12:	30 f0       	brcs	.+12     	; 0x1d20 <display_title_pixel+0x98>
				{
					set_display_attribute(title_attr[j]);
    1d14:	fc 01       	movw	r30, r24
    1d16:	ed 55       	subi	r30, 0x5D	; 93
    1d18:	fd 4f       	sbci	r31, 0xFD	; 253
    1d1a:	80 81       	ld	r24, Z
    1d1c:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <set_display_attribute>
	memcpy_P(&data, &title_data[line], sizeof(data));
	if (data & ((uint64_t)1U << (63 - col)))
	{
		if (!coloured)
		{
			for (uint8_t j = 0; j < countof(title_pos); j++)
    1d20:	1f 5f       	subi	r17, 0xFF	; 255
    1d22:	17 30       	cpi	r17, 0x07	; 7
    1d24:	78 f3       	brcs	.-34     	; 0x1d04 <display_title_pixel+0x7c>
				if (col <= title_pos[j])
				{
					set_display_attribute(title_attr[j]);
				}
			}
			coloured = true;
    1d26:	ee 24       	eor	r14, r14
    1d28:	e3 94       	inc	r14
    1d2a:	05 c0       	rjmp	.+10     	; 0x1d36 <display_title_pixel+0xae>
		}
	}
	else
	{
		if (coloured)
    1d2c:	ee 20       	and	r14, r14
    1d2e:	19 f0       	breq	.+6      	; 0x1d36 <display_title_pixel+0xae>
		{
			normal_display_mode();
    1d30:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <normal_display_mode>
			coloured = false;
    1d34:	e1 2c       	mov	r14, r1
		}
		
	}
	putchar(' ');
    1d36:	60 91 69 04 	lds	r22, 0x0469	; 0x800469 <__iob+0x2>
    1d3a:	70 91 6a 04 	lds	r23, 0x046A	; 0x80046a <__iob+0x3>
    1d3e:	80 e2       	ldi	r24, 0x20	; 32
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	0e 94 82 11 	call	0x2304	; 0x2304 <fputc>
	return coloured;
}
    1d46:	8e 2d       	mov	r24, r14
    1d48:	28 96       	adiw	r28, 0x08	; 8
    1d4a:	0f b6       	in	r0, 0x3f	; 63
    1d4c:	f8 94       	cli
    1d4e:	de bf       	out	0x3e, r29	; 62
    1d50:	0f be       	out	0x3f, r0	; 63
    1d52:	cd bf       	out	0x3d, r28	; 61
    1d54:	df 91       	pop	r29
    1d56:	cf 91       	pop	r28
    1d58:	1f 91       	pop	r17
    1d5a:	0f 91       	pop	r16
    1d5c:	ff 90       	pop	r15
    1d5e:	ef 90       	pop	r14
    1d60:	08 95       	ret

00001d62 <setup_start_screen>:
	}
}

void setup_start_screen(void)
{
	ledmatrix_clear();
    1d62:	0e 94 bc 07 	call	0xf78	; 0xf78 <ledmatrix_clear>
	display_initial_image();
    1d66:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <display_initial_image>
	flags |= FLG_IS_NEW_CYCLE;
    1d6a:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <flags>
    1d6e:	81 60       	ori	r24, 0x01	; 1
    1d70:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <flags>
    1d74:	08 95       	ret

00001d76 <update_start_screen>:
}

void update_start_screen(void)
{
    1d76:	cf 92       	push	r12
    1d78:	df 92       	push	r13
    1d7a:	ef 92       	push	r14
    1d7c:	ff 92       	push	r15
	uint32_t time = get_current_time();
    1d7e:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <get_current_time>
    1d82:	6b 01       	movw	r12, r22
    1d84:	7c 01       	movw	r14, r24

	if (flags & FLG_IS_NEW_CYCLE)
    1d86:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <flags>
    1d8a:	80 ff       	sbrs	r24, 0
    1d8c:	16 c0       	rjmp	.+44     	; 0x1dba <update_start_screen+0x44>
	{
		flashing_start_time = time;
    1d8e:	c0 92 44 03 	sts	0x0344, r12	; 0x800344 <flashing_start_time>
    1d92:	d0 92 45 03 	sts	0x0345, r13	; 0x800345 <flashing_start_time+0x1>
    1d96:	e0 92 46 03 	sts	0x0346, r14	; 0x800346 <flashing_start_time+0x2>
    1d9a:	f0 92 47 03 	sts	0x0347, r15	; 0x800347 <flashing_start_time+0x3>
		last_update_time = time;
    1d9e:	c0 92 40 03 	sts	0x0340, r12	; 0x800340 <last_update_time>
    1da2:	d0 92 41 03 	sts	0x0341, r13	; 0x800341 <last_update_time+0x1>
    1da6:	e0 92 42 03 	sts	0x0342, r14	; 0x800342 <last_update_time+0x2>
    1daa:	f0 92 43 03 	sts	0x0343, r15	; 0x800343 <last_update_time+0x3>
		next_column = MATRIX_NUM_COLUMNS;
    1dae:	90 e1       	ldi	r25, 0x10	; 16
    1db0:	90 93 3f 03 	sts	0x033F, r25	; 0x80033f <next_column>
		flags &= ((~FLG_IS_NEW_CYCLE) & (~FLG_IS_FLASH_DONE) &
    1db4:	88 7f       	andi	r24, 0xF8	; 248
    1db6:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <flags>
			(~FLG_TOGGLE_ON));
	}

	if (next_column == MATRIX_NUM_COLUMNS)
    1dba:	80 91 3f 03 	lds	r24, 0x033F	; 0x80033f <next_column>
    1dbe:	80 31       	cpi	r24, 0x10	; 16
    1dc0:	09 f0       	breq	.+2      	; 0x1dc4 <update_start_screen+0x4e>
    1dc2:	64 c0       	rjmp	.+200    	; 0x1e8c <update_start_screen+0x116>
	{
		if (time > flashing_start_time + FLASH_TIME + STATIC_TIME)
    1dc4:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <flashing_start_time>
    1dc8:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <flashing_start_time+0x1>
    1dcc:	a0 91 46 03 	lds	r26, 0x0346	; 0x800346 <flashing_start_time+0x2>
    1dd0:	b0 91 47 03 	lds	r27, 0x0347	; 0x800347 <flashing_start_time+0x3>
    1dd4:	ac 01       	movw	r20, r24
    1dd6:	bd 01       	movw	r22, r26
    1dd8:	40 53       	subi	r20, 0x30	; 48
    1dda:	58 4f       	sbci	r21, 0xF8	; 248
    1ddc:	6f 4f       	sbci	r22, 0xFF	; 255
    1dde:	7f 4f       	sbci	r23, 0xFF	; 255
    1de0:	4c 15       	cp	r20, r12
    1de2:	5d 05       	cpc	r21, r13
    1de4:	6e 05       	cpc	r22, r14
    1de6:	7f 05       	cpc	r23, r15
    1de8:	58 f4       	brcc	.+22     	; 0x1e00 <update_start_screen+0x8a>
		{
			// Two seconds have passed since start of flashing,
			// display next column.
			display_next_column();
    1dea:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <display_next_column>
			last_update_time = time;
    1dee:	c0 92 40 03 	sts	0x0340, r12	; 0x800340 <last_update_time>
    1df2:	d0 92 41 03 	sts	0x0341, r13	; 0x800341 <last_update_time+0x1>
    1df6:	e0 92 42 03 	sts	0x0342, r14	; 0x800342 <last_update_time+0x2>
    1dfa:	f0 92 43 03 	sts	0x0343, r15	; 0x800343 <last_update_time+0x3>
    1dfe:	61 c0       	rjmp	.+194    	; 0x1ec2 <update_start_screen+0x14c>
		}
		else if (!(flags & FLG_IS_FLASH_DONE) && time >
    1e00:	20 91 48 03 	lds	r18, 0x0348	; 0x800348 <flags>
    1e04:	32 2f       	mov	r19, r18
    1e06:	32 70       	andi	r19, 0x02	; 2
    1e08:	21 fd       	sbrc	r18, 1
    1e0a:	19 c0       	rjmp	.+50     	; 0x1e3e <update_start_screen+0xc8>
			flashing_start_time + FLASH_TIME)
    1e0c:	88 51       	subi	r24, 0x18	; 24
    1e0e:	9c 4f       	sbci	r25, 0xFC	; 252
    1e10:	af 4f       	sbci	r26, 0xFF	; 255
    1e12:	bf 4f       	sbci	r27, 0xFF	; 255
			// Two seconds have passed since start of flashing,
			// display next column.
			display_next_column();
			last_update_time = time;
		}
		else if (!(flags & FLG_IS_FLASH_DONE) && time >
    1e14:	8c 15       	cp	r24, r12
    1e16:	9d 05       	cpc	r25, r13
    1e18:	ae 05       	cpc	r26, r14
    1e1a:	bf 05       	cpc	r27, r15
    1e1c:	80 f4       	brcc	.+32     	; 0x1e3e <update_start_screen+0xc8>
			flashing_start_time + FLASH_TIME)
		{
			// One second has passed since the start of flashing,
			// turn off flashing.
			display_initial_image();
    1e1e:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <display_initial_image>
			flags |= FLG_IS_FLASH_DONE;
    1e22:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <flags>
    1e26:	82 60       	ori	r24, 0x02	; 2
    1e28:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <flags>
			last_update_time = time;
    1e2c:	c0 92 40 03 	sts	0x0340, r12	; 0x800340 <last_update_time>
    1e30:	d0 92 41 03 	sts	0x0341, r13	; 0x800341 <last_update_time+0x1>
    1e34:	e0 92 42 03 	sts	0x0342, r14	; 0x800342 <last_update_time+0x2>
    1e38:	f0 92 43 03 	sts	0x0343, r15	; 0x800343 <last_update_time+0x3>
    1e3c:	42 c0       	rjmp	.+132    	; 0x1ec2 <update_start_screen+0x14c>
		}
		else if (!(flags & FLG_IS_FLASH_DONE) && time >
    1e3e:	31 11       	cpse	r19, r1
    1e40:	40 c0       	rjmp	.+128    	; 0x1ec2 <update_start_screen+0x14c>
			last_update_time + FLASH_SPEED)
    1e42:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <last_update_time>
    1e46:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <last_update_time+0x1>
    1e4a:	a0 91 42 03 	lds	r26, 0x0342	; 0x800342 <last_update_time+0x2>
    1e4e:	b0 91 43 03 	lds	r27, 0x0343	; 0x800343 <last_update_time+0x3>
    1e52:	8c 59       	subi	r24, 0x9C	; 156
    1e54:	9f 4f       	sbci	r25, 0xFF	; 255
    1e56:	af 4f       	sbci	r26, 0xFF	; 255
    1e58:	bf 4f       	sbci	r27, 0xFF	; 255
			// turn off flashing.
			display_initial_image();
			flags |= FLG_IS_FLASH_DONE;
			last_update_time = time;
		}
		else if (!(flags & FLG_IS_FLASH_DONE) && time >
    1e5a:	8c 15       	cp	r24, r12
    1e5c:	9d 05       	cpc	r25, r13
    1e5e:	ae 05       	cpc	r26, r14
    1e60:	bf 05       	cpc	r27, r15
    1e62:	78 f5       	brcc	.+94     	; 0x1ec2 <update_start_screen+0x14c>
			last_update_time + FLASH_SPEED)
		{
			// 0.1 seconds passed since last flash, flash the LED
			// matrix.
			if ((flags ^= FLG_TOGGLE_ON) & FLG_TOGGLE_ON)
    1e64:	84 e0       	ldi	r24, 0x04	; 4
    1e66:	28 27       	eor	r18, r24
    1e68:	20 93 48 03 	sts	0x0348, r18	; 0x800348 <flags>
    1e6c:	22 ff       	sbrs	r18, 2
    1e6e:	03 c0       	rjmp	.+6      	; 0x1e76 <update_start_screen+0x100>
			{
				ledmatrix_clear();
    1e70:	0e 94 bc 07 	call	0xf78	; 0xf78 <ledmatrix_clear>
    1e74:	02 c0       	rjmp	.+4      	; 0x1e7a <update_start_screen+0x104>
			}
			else
			{
				display_initial_image();
    1e76:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <display_initial_image>
			}
			last_update_time = time;
    1e7a:	c0 92 40 03 	sts	0x0340, r12	; 0x800340 <last_update_time>
    1e7e:	d0 92 41 03 	sts	0x0341, r13	; 0x800341 <last_update_time+0x1>
    1e82:	e0 92 42 03 	sts	0x0342, r14	; 0x800342 <last_update_time+0x2>
    1e86:	f0 92 43 03 	sts	0x0343, r15	; 0x800343 <last_update_time+0x3>
    1e8a:	1b c0       	rjmp	.+54     	; 0x1ec2 <update_start_screen+0x14c>
		}
	}
	else
	{
		if (time > last_update_time + SCROLL_SPEED)
    1e8c:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <last_update_time>
    1e90:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <last_update_time+0x1>
    1e94:	a0 91 42 03 	lds	r26, 0x0342	; 0x800342 <last_update_time+0x2>
    1e98:	b0 91 43 03 	lds	r27, 0x0343	; 0x800343 <last_update_time+0x3>
    1e9c:	88 53       	subi	r24, 0x38	; 56
    1e9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1ea0:	af 4f       	sbci	r26, 0xFF	; 255
    1ea2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ea4:	8c 15       	cp	r24, r12
    1ea6:	9d 05       	cpc	r25, r13
    1ea8:	ae 05       	cpc	r26, r14
    1eaa:	bf 05       	cpc	r27, r15
    1eac:	50 f4       	brcc	.+20     	; 0x1ec2 <update_start_screen+0x14c>
		{
			display_next_column();
    1eae:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <display_next_column>
			last_update_time = time;
    1eb2:	c0 92 40 03 	sts	0x0340, r12	; 0x800340 <last_update_time>
    1eb6:	d0 92 41 03 	sts	0x0341, r13	; 0x800341 <last_update_time+0x1>
    1eba:	e0 92 42 03 	sts	0x0342, r14	; 0x800342 <last_update_time+0x2>
    1ebe:	f0 92 43 03 	sts	0x0343, r15	; 0x800343 <last_update_time+0x3>
		}
	}
}
    1ec2:	ff 90       	pop	r15
    1ec4:	ef 90       	pop	r14
    1ec6:	df 90       	pop	r13
    1ec8:	cf 90       	pop	r12
    1eca:	08 95       	ret

00001ecc <display_terminal_title>:
	putchar(' ');
	return coloured;
}

void display_terminal_title(uint8_t row, uint8_t col)
{
    1ecc:	ff 92       	push	r15
    1ece:	0f 93       	push	r16
    1ed0:	1f 93       	push	r17
    1ed2:	cf 93       	push	r28
    1ed4:	df 93       	push	r29
    1ed6:	f8 2e       	mov	r15, r24
    1ed8:	06 2f       	mov	r16, r22
	bool coloured = false;
	for (uint8_t line = 0; line < countof(title_data); line++)
    1eda:	10 e0       	ldi	r17, 0x00	; 0
	return coloured;
}

void display_terminal_title(uint8_t row, uint8_t col)
{
	bool coloured = false;
    1edc:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t line = 0; line < countof(title_data); line++)
    1ede:	14 c0       	rjmp	.+40     	; 0x1f08 <display_terminal_title+0x3c>
	{
		move_terminal_cursor(line + row, col);
    1ee0:	60 2f       	mov	r22, r16
    1ee2:	70 e0       	ldi	r23, 0x00	; 0
    1ee4:	8f 2d       	mov	r24, r15
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	81 0f       	add	r24, r17
    1eea:	91 1d       	adc	r25, r1
    1eec:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <move_terminal_cursor>
		for (uint8_t i = 0; i < 64; i++)
    1ef0:	c0 e0       	ldi	r28, 0x00	; 0
    1ef2:	07 c0       	rjmp	.+14     	; 0x1f02 <display_terminal_title+0x36>
		{
			coloured = display_title_pixel(line, i, coloured);
    1ef4:	4d 2f       	mov	r20, r29
    1ef6:	6c 2f       	mov	r22, r28
    1ef8:	81 2f       	mov	r24, r17
    1efa:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <display_title_pixel>
    1efe:	d8 2f       	mov	r29, r24
{
	bool coloured = false;
	for (uint8_t line = 0; line < countof(title_data); line++)
	{
		move_terminal_cursor(line + row, col);
		for (uint8_t i = 0; i < 64; i++)
    1f00:	cf 5f       	subi	r28, 0xFF	; 255
    1f02:	c0 34       	cpi	r28, 0x40	; 64
    1f04:	b8 f3       	brcs	.-18     	; 0x1ef4 <display_terminal_title+0x28>
}

void display_terminal_title(uint8_t row, uint8_t col)
{
	bool coloured = false;
	for (uint8_t line = 0; line < countof(title_data); line++)
    1f06:	1f 5f       	subi	r17, 0xFF	; 255
    1f08:	15 30       	cpi	r17, 0x05	; 5
    1f0a:	50 f3       	brcs	.-44     	; 0x1ee0 <display_terminal_title+0x14>
		for (uint8_t i = 0; i < 64; i++)
		{
			coloured = display_title_pixel(line, i, coloured);
		}
	}
}
    1f0c:	df 91       	pop	r29
    1f0e:	cf 91       	pop	r28
    1f10:	1f 91       	pop	r17
    1f12:	0f 91       	pop	r16
    1f14:	ff 90       	pop	r15
    1f16:	08 95       	ret

00001f18 <move_terminal_cursor>:
}

void reverse_video(void)
{
	printf_P(PSTR("\x1b[7m"));
}
    1f18:	6f 5f       	subi	r22, 0xFF	; 255
    1f1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f1c:	7f 93       	push	r23
    1f1e:	6f 93       	push	r22
    1f20:	01 96       	adiw	r24, 0x01	; 1
    1f22:	9f 93       	push	r25
    1f24:	8f 93       	push	r24
    1f26:	8b e7       	ldi	r24, 0x7B	; 123
    1f28:	93 e0       	ldi	r25, 0x03	; 3
    1f2a:	9f 93       	push	r25
    1f2c:	8f 93       	push	r24
    1f2e:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <printf_P>
    1f32:	0f 90       	pop	r0
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	0f 90       	pop	r0
    1f3a:	0f 90       	pop	r0
    1f3c:	0f 90       	pop	r0
    1f3e:	08 95       	ret

00001f40 <normal_display_mode>:
    1f40:	86 e7       	ldi	r24, 0x76	; 118
    1f42:	93 e0       	ldi	r25, 0x03	; 3
    1f44:	9f 93       	push	r25
    1f46:	8f 93       	push	r24
    1f48:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <printf_P>
    1f4c:	0f 90       	pop	r0
    1f4e:	0f 90       	pop	r0
    1f50:	08 95       	ret

00001f52 <clear_terminal>:

void clear_terminal(void)
{
	printf_P(PSTR("\x1b[2J"));
    1f52:	81 e7       	ldi	r24, 0x71	; 113
    1f54:	93 e0       	ldi	r25, 0x03	; 3
    1f56:	9f 93       	push	r25
    1f58:	8f 93       	push	r24
    1f5a:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <printf_P>
}
    1f5e:	0f 90       	pop	r0
    1f60:	0f 90       	pop	r0
    1f62:	08 95       	ret

00001f64 <clear_to_end_of_line>:

void clear_to_end_of_line(void)
{
	printf_P(PSTR("\x1b[K"));
    1f64:	8d e6       	ldi	r24, 0x6D	; 109
    1f66:	93 e0       	ldi	r25, 0x03	; 3
    1f68:	9f 93       	push	r25
    1f6a:	8f 93       	push	r24
    1f6c:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <printf_P>
}
    1f70:	0f 90       	pop	r0
    1f72:	0f 90       	pop	r0
    1f74:	08 95       	ret

00001f76 <set_display_attribute>:

void set_display_attribute(DisplayParameter parameter)
{
	printf_P(PSTR("\x1b[%dm"), parameter);
    1f76:	1f 92       	push	r1
    1f78:	8f 93       	push	r24
    1f7a:	87 e6       	ldi	r24, 0x67	; 103
    1f7c:	93 e0       	ldi	r25, 0x03	; 3
    1f7e:	9f 93       	push	r25
    1f80:	8f 93       	push	r24
    1f82:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <printf_P>
}
    1f86:	0f 90       	pop	r0
    1f88:	0f 90       	pop	r0
    1f8a:	0f 90       	pop	r0
    1f8c:	0f 90       	pop	r0
    1f8e:	08 95       	ret

00001f90 <hide_cursor>:

void hide_cursor(void)
{
	printf_P(PSTR("\x1b[?25l"));
    1f90:	80 e6       	ldi	r24, 0x60	; 96
    1f92:	93 e0       	ldi	r25, 0x03	; 3
    1f94:	9f 93       	push	r25
    1f96:	8f 93       	push	r24
    1f98:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <printf_P>
}
    1f9c:	0f 90       	pop	r0
    1f9e:	0f 90       	pop	r0
    1fa0:	08 95       	ret

00001fa2 <init_timer0>:
static volatile uint32_t clock_ticks_ms;

void init_timer0(void)
{
	// Reset clock tick count. L indicates a long (32 bit) constant.
	clock_ticks_ms = 0L;
    1fa2:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <clock_ticks_ms>
    1fa6:	10 92 4a 03 	sts	0x034A, r1	; 0x80034a <clock_ticks_ms+0x1>
    1faa:	10 92 4b 03 	sts	0x034B, r1	; 0x80034b <clock_ticks_ms+0x2>
    1fae:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <clock_ticks_ms+0x3>
	// interrupt every 64 x 125 clock cycles, i.e. every 1 milliseconds
	// with an 8MHz clock. The counter will be reset to 0 when it reaches
	// it's output compare value.

	// Clear the timer.
	TCNT0 = 0;
    1fb2:	16 bc       	out	0x26, r1	; 38

	// Set the output compare value to be 124.
	OCR0A = 124;
    1fb4:	8c e7       	ldi	r24, 0x7C	; 124
    1fb6:	87 bd       	out	0x27, r24	; 39

	// Set the timer to clear on compare match (CTC mode) and to
	// divide the clock by 64. This starts the timer running.
	TCCR0A = (1 << WGM01);
    1fb8:	92 e0       	ldi	r25, 0x02	; 2
    1fba:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1 << CS01) | (1 << CS00);
    1fbc:	83 e0       	ldi	r24, 0x03	; 3
    1fbe:	85 bd       	out	0x25, r24	; 37

	// Enable an interrupt on output compare match. Note that
	// interrupts have to be enabled globally before the interrupts
	// will fire.
	TIMSK0 |= (1 << OCIE0A);
    1fc0:	ee e6       	ldi	r30, 0x6E	; 110
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 81       	ld	r24, Z
    1fc6:	82 60       	ori	r24, 0x02	; 2
    1fc8:	80 83       	st	Z, r24

	// Make sure the interrupt flag is cleared by writing a 1 to it.
	TIFR0 = (1 << OCF0A);
    1fca:	95 bb       	out	0x15, r25	; 21
    1fcc:	08 95       	ret

00001fce <get_current_time>:
uint32_t get_current_time(void)
{
	// Disable interrupts so we can be sure that the interrupt doesn't
	// fire when we've copied just a couple of bytes of the value.
	// Interrupts are re-enabled if they were enabled at the start.
	uint8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
    1fce:	8f b7       	in	r24, 0x3f	; 63
    1fd0:	28 2f       	mov	r18, r24
    1fd2:	20 78       	andi	r18, 0x80	; 128
	cli();
    1fd4:	f8 94       	cli
	uint32_t result = clock_ticks_ms;
    1fd6:	60 91 49 03 	lds	r22, 0x0349	; 0x800349 <clock_ticks_ms>
    1fda:	70 91 4a 03 	lds	r23, 0x034A	; 0x80034a <clock_ticks_ms+0x1>
    1fde:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <clock_ticks_ms+0x2>
    1fe2:	90 91 4c 03 	lds	r25, 0x034C	; 0x80034c <clock_ticks_ms+0x3>
	if (interrupts_were_enabled)
    1fe6:	22 23       	and	r18, r18
    1fe8:	09 f0       	breq	.+2      	; 0x1fec <get_current_time+0x1e>
	{
		sei();
    1fea:	78 94       	sei
	}
	return result;
}
    1fec:	08 95       	ret

00001fee <__vector_16>:

// Interrupt handler for clock tick.
ISR(TIMER0_COMPA_vect)
{
    1fee:	1f 92       	push	r1
    1ff0:	0f 92       	push	r0
    1ff2:	0f b6       	in	r0, 0x3f	; 63
    1ff4:	0f 92       	push	r0
    1ff6:	11 24       	eor	r1, r1
    1ff8:	8f 93       	push	r24
    1ffa:	9f 93       	push	r25
    1ffc:	af 93       	push	r26
    1ffe:	bf 93       	push	r27
	// Increment our clock tick count.
	clock_ticks_ms++;
    2000:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <clock_ticks_ms>
    2004:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <clock_ticks_ms+0x1>
    2008:	a0 91 4b 03 	lds	r26, 0x034B	; 0x80034b <clock_ticks_ms+0x2>
    200c:	b0 91 4c 03 	lds	r27, 0x034C	; 0x80034c <clock_ticks_ms+0x3>
    2010:	01 96       	adiw	r24, 0x01	; 1
    2012:	a1 1d       	adc	r26, r1
    2014:	b1 1d       	adc	r27, r1
    2016:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <clock_ticks_ms>
    201a:	90 93 4a 03 	sts	0x034A, r25	; 0x80034a <clock_ticks_ms+0x1>
    201e:	a0 93 4b 03 	sts	0x034B, r26	; 0x80034b <clock_ticks_ms+0x2>
    2022:	b0 93 4c 03 	sts	0x034C, r27	; 0x80034c <clock_ticks_ms+0x3>
}
    2026:	bf 91       	pop	r27
    2028:	af 91       	pop	r26
    202a:	9f 91       	pop	r25
    202c:	8f 91       	pop	r24
    202e:	0f 90       	pop	r0
    2030:	0f be       	out	0x3f, r0	; 63
    2032:	0f 90       	pop	r0
    2034:	1f 90       	pop	r1
    2036:	18 95       	reti

00002038 <init_timer1>:
#include <avr/interrupt.h>

void init_timer1(void)
{
	// Setup timer 1.
	TCNT1 = 0;
    2038:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    203c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    2040:	08 95       	ret

00002042 <init_timer2>:
#include <avr/interrupt.h>

void init_timer2(void)
{
	// Setup timer 2.
	TCNT2 = 0;
    2042:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    2046:	08 95       	ret

00002048 <__divmodhi4>:
    2048:	97 fb       	bst	r25, 7
    204a:	07 2e       	mov	r0, r23
    204c:	16 f4       	brtc	.+4      	; 0x2052 <__divmodhi4+0xa>
    204e:	00 94       	com	r0
    2050:	07 d0       	rcall	.+14     	; 0x2060 <__divmodhi4_neg1>
    2052:	77 fd       	sbrc	r23, 7
    2054:	09 d0       	rcall	.+18     	; 0x2068 <__divmodhi4_neg2>
    2056:	0e 94 b2 10 	call	0x2164	; 0x2164 <__udivmodhi4>
    205a:	07 fc       	sbrc	r0, 7
    205c:	05 d0       	rcall	.+10     	; 0x2068 <__divmodhi4_neg2>
    205e:	3e f4       	brtc	.+14     	; 0x206e <__divmodhi4_exit>

00002060 <__divmodhi4_neg1>:
    2060:	90 95       	com	r25
    2062:	81 95       	neg	r24
    2064:	9f 4f       	sbci	r25, 0xFF	; 255
    2066:	08 95       	ret

00002068 <__divmodhi4_neg2>:
    2068:	70 95       	com	r23
    206a:	61 95       	neg	r22
    206c:	7f 4f       	sbci	r23, 0xFF	; 255

0000206e <__divmodhi4_exit>:
    206e:	08 95       	ret

00002070 <__udivmodsi4>:
    2070:	a1 e2       	ldi	r26, 0x21	; 33
    2072:	1a 2e       	mov	r1, r26
    2074:	aa 1b       	sub	r26, r26
    2076:	bb 1b       	sub	r27, r27
    2078:	fd 01       	movw	r30, r26
    207a:	0d c0       	rjmp	.+26     	; 0x2096 <__udivmodsi4_ep>

0000207c <__udivmodsi4_loop>:
    207c:	aa 1f       	adc	r26, r26
    207e:	bb 1f       	adc	r27, r27
    2080:	ee 1f       	adc	r30, r30
    2082:	ff 1f       	adc	r31, r31
    2084:	a2 17       	cp	r26, r18
    2086:	b3 07       	cpc	r27, r19
    2088:	e4 07       	cpc	r30, r20
    208a:	f5 07       	cpc	r31, r21
    208c:	20 f0       	brcs	.+8      	; 0x2096 <__udivmodsi4_ep>
    208e:	a2 1b       	sub	r26, r18
    2090:	b3 0b       	sbc	r27, r19
    2092:	e4 0b       	sbc	r30, r20
    2094:	f5 0b       	sbc	r31, r21

00002096 <__udivmodsi4_ep>:
    2096:	66 1f       	adc	r22, r22
    2098:	77 1f       	adc	r23, r23
    209a:	88 1f       	adc	r24, r24
    209c:	99 1f       	adc	r25, r25
    209e:	1a 94       	dec	r1
    20a0:	69 f7       	brne	.-38     	; 0x207c <__udivmodsi4_loop>
    20a2:	60 95       	com	r22
    20a4:	70 95       	com	r23
    20a6:	80 95       	com	r24
    20a8:	90 95       	com	r25
    20aa:	9b 01       	movw	r18, r22
    20ac:	ac 01       	movw	r20, r24
    20ae:	bd 01       	movw	r22, r26
    20b0:	cf 01       	movw	r24, r30
    20b2:	08 95       	ret

000020b4 <__divmodsi4>:
    20b4:	05 2e       	mov	r0, r21
    20b6:	97 fb       	bst	r25, 7
    20b8:	1e f4       	brtc	.+6      	; 0x20c0 <__divmodsi4+0xc>
    20ba:	00 94       	com	r0
    20bc:	0e 94 71 10 	call	0x20e2	; 0x20e2 <__negsi2>
    20c0:	57 fd       	sbrc	r21, 7
    20c2:	07 d0       	rcall	.+14     	; 0x20d2 <__divmodsi4_neg2>
    20c4:	0e 94 38 10 	call	0x2070	; 0x2070 <__udivmodsi4>
    20c8:	07 fc       	sbrc	r0, 7
    20ca:	03 d0       	rcall	.+6      	; 0x20d2 <__divmodsi4_neg2>
    20cc:	4e f4       	brtc	.+18     	; 0x20e0 <__divmodsi4_exit>
    20ce:	0c 94 71 10 	jmp	0x20e2	; 0x20e2 <__negsi2>

000020d2 <__divmodsi4_neg2>:
    20d2:	50 95       	com	r21
    20d4:	40 95       	com	r20
    20d6:	30 95       	com	r19
    20d8:	21 95       	neg	r18
    20da:	3f 4f       	sbci	r19, 0xFF	; 255
    20dc:	4f 4f       	sbci	r20, 0xFF	; 255
    20de:	5f 4f       	sbci	r21, 0xFF	; 255

000020e0 <__divmodsi4_exit>:
    20e0:	08 95       	ret

000020e2 <__negsi2>:
    20e2:	90 95       	com	r25
    20e4:	80 95       	com	r24
    20e6:	70 95       	com	r23
    20e8:	61 95       	neg	r22
    20ea:	7f 4f       	sbci	r23, 0xFF	; 255
    20ec:	8f 4f       	sbci	r24, 0xFF	; 255
    20ee:	9f 4f       	sbci	r25, 0xFF	; 255
    20f0:	08 95       	ret

000020f2 <__umulhisi3>:
    20f2:	a2 9f       	mul	r26, r18
    20f4:	b0 01       	movw	r22, r0
    20f6:	b3 9f       	mul	r27, r19
    20f8:	c0 01       	movw	r24, r0
    20fa:	a3 9f       	mul	r26, r19
    20fc:	70 0d       	add	r23, r0
    20fe:	81 1d       	adc	r24, r1
    2100:	11 24       	eor	r1, r1
    2102:	91 1d       	adc	r25, r1
    2104:	b2 9f       	mul	r27, r18
    2106:	70 0d       	add	r23, r0
    2108:	81 1d       	adc	r24, r1
    210a:	11 24       	eor	r1, r1
    210c:	91 1d       	adc	r25, r1
    210e:	08 95       	ret

00002110 <__ashrdi3>:
    2110:	97 fb       	bst	r25, 7
    2112:	10 f8       	bld	r1, 0

00002114 <__lshrdi3>:
    2114:	16 94       	lsr	r1
    2116:	00 08       	sbc	r0, r0
    2118:	0f 93       	push	r16
    211a:	08 30       	cpi	r16, 0x08	; 8
    211c:	98 f0       	brcs	.+38     	; 0x2144 <__lshrdi3+0x30>
    211e:	08 50       	subi	r16, 0x08	; 8
    2120:	23 2f       	mov	r18, r19
    2122:	34 2f       	mov	r19, r20
    2124:	45 2f       	mov	r20, r21
    2126:	56 2f       	mov	r21, r22
    2128:	67 2f       	mov	r22, r23
    212a:	78 2f       	mov	r23, r24
    212c:	89 2f       	mov	r24, r25
    212e:	90 2d       	mov	r25, r0
    2130:	f4 cf       	rjmp	.-24     	; 0x211a <__lshrdi3+0x6>
    2132:	05 94       	asr	r0
    2134:	97 95       	ror	r25
    2136:	87 95       	ror	r24
    2138:	77 95       	ror	r23
    213a:	67 95       	ror	r22
    213c:	57 95       	ror	r21
    213e:	47 95       	ror	r20
    2140:	37 95       	ror	r19
    2142:	27 95       	ror	r18
    2144:	0a 95       	dec	r16
    2146:	aa f7       	brpl	.-22     	; 0x2132 <__lshrdi3+0x1e>
    2148:	0f 91       	pop	r16
    214a:	08 95       	ret

0000214c <__cmpdi2_s8>:
    214c:	00 24       	eor	r0, r0
    214e:	a7 fd       	sbrc	r26, 7
    2150:	00 94       	com	r0
    2152:	2a 17       	cp	r18, r26
    2154:	30 05       	cpc	r19, r0
    2156:	40 05       	cpc	r20, r0
    2158:	50 05       	cpc	r21, r0
    215a:	60 05       	cpc	r22, r0
    215c:	70 05       	cpc	r23, r0
    215e:	80 05       	cpc	r24, r0
    2160:	90 05       	cpc	r25, r0
    2162:	08 95       	ret

00002164 <__udivmodhi4>:
    2164:	aa 1b       	sub	r26, r26
    2166:	bb 1b       	sub	r27, r27
    2168:	51 e1       	ldi	r21, 0x11	; 17
    216a:	07 c0       	rjmp	.+14     	; 0x217a <__udivmodhi4_ep>

0000216c <__udivmodhi4_loop>:
    216c:	aa 1f       	adc	r26, r26
    216e:	bb 1f       	adc	r27, r27
    2170:	a6 17       	cp	r26, r22
    2172:	b7 07       	cpc	r27, r23
    2174:	10 f0       	brcs	.+4      	; 0x217a <__udivmodhi4_ep>
    2176:	a6 1b       	sub	r26, r22
    2178:	b7 0b       	sbc	r27, r23

0000217a <__udivmodhi4_ep>:
    217a:	88 1f       	adc	r24, r24
    217c:	99 1f       	adc	r25, r25
    217e:	5a 95       	dec	r21
    2180:	a9 f7       	brne	.-22     	; 0x216c <__udivmodhi4_loop>
    2182:	80 95       	com	r24
    2184:	90 95       	com	r25
    2186:	bc 01       	movw	r22, r24
    2188:	cd 01       	movw	r24, r26
    218a:	08 95       	ret

0000218c <do_rand>:
    218c:	8f 92       	push	r8
    218e:	9f 92       	push	r9
    2190:	af 92       	push	r10
    2192:	bf 92       	push	r11
    2194:	cf 92       	push	r12
    2196:	df 92       	push	r13
    2198:	ef 92       	push	r14
    219a:	ff 92       	push	r15
    219c:	cf 93       	push	r28
    219e:	df 93       	push	r29
    21a0:	ec 01       	movw	r28, r24
    21a2:	68 81       	ld	r22, Y
    21a4:	79 81       	ldd	r23, Y+1	; 0x01
    21a6:	8a 81       	ldd	r24, Y+2	; 0x02
    21a8:	9b 81       	ldd	r25, Y+3	; 0x03
    21aa:	61 15       	cp	r22, r1
    21ac:	71 05       	cpc	r23, r1
    21ae:	81 05       	cpc	r24, r1
    21b0:	91 05       	cpc	r25, r1
    21b2:	21 f4       	brne	.+8      	; 0x21bc <do_rand+0x30>
    21b4:	64 e2       	ldi	r22, 0x24	; 36
    21b6:	79 ed       	ldi	r23, 0xD9	; 217
    21b8:	8b e5       	ldi	r24, 0x5B	; 91
    21ba:	97 e0       	ldi	r25, 0x07	; 7
    21bc:	2d e1       	ldi	r18, 0x1D	; 29
    21be:	33 ef       	ldi	r19, 0xF3	; 243
    21c0:	41 e0       	ldi	r20, 0x01	; 1
    21c2:	50 e0       	ldi	r21, 0x00	; 0
    21c4:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <__divmodsi4>
    21c8:	49 01       	movw	r8, r18
    21ca:	5a 01       	movw	r10, r20
    21cc:	9b 01       	movw	r18, r22
    21ce:	ac 01       	movw	r20, r24
    21d0:	a7 ea       	ldi	r26, 0xA7	; 167
    21d2:	b1 e4       	ldi	r27, 0x41	; 65
    21d4:	0e 94 78 14 	call	0x28f0	; 0x28f0 <__muluhisi3>
    21d8:	6b 01       	movw	r12, r22
    21da:	7c 01       	movw	r14, r24
    21dc:	ac ee       	ldi	r26, 0xEC	; 236
    21de:	b4 ef       	ldi	r27, 0xF4	; 244
    21e0:	a5 01       	movw	r20, r10
    21e2:	94 01       	movw	r18, r8
    21e4:	0e 94 86 14 	call	0x290c	; 0x290c <__mulohisi3>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	8c 0d       	add	r24, r12
    21ee:	9d 1d       	adc	r25, r13
    21f0:	ae 1d       	adc	r26, r14
    21f2:	bf 1d       	adc	r27, r15
    21f4:	b7 ff       	sbrs	r27, 7
    21f6:	03 c0       	rjmp	.+6      	; 0x21fe <do_rand+0x72>
    21f8:	01 97       	sbiw	r24, 0x01	; 1
    21fa:	a1 09       	sbc	r26, r1
    21fc:	b0 48       	sbci	r27, 0x80	; 128
    21fe:	88 83       	st	Y, r24
    2200:	99 83       	std	Y+1, r25	; 0x01
    2202:	aa 83       	std	Y+2, r26	; 0x02
    2204:	bb 83       	std	Y+3, r27	; 0x03
    2206:	9f 77       	andi	r25, 0x7F	; 127
    2208:	df 91       	pop	r29
    220a:	cf 91       	pop	r28
    220c:	ff 90       	pop	r15
    220e:	ef 90       	pop	r14
    2210:	df 90       	pop	r13
    2212:	cf 90       	pop	r12
    2214:	bf 90       	pop	r11
    2216:	af 90       	pop	r10
    2218:	9f 90       	pop	r9
    221a:	8f 90       	pop	r8
    221c:	08 95       	ret

0000221e <rand_r>:
    221e:	0e 94 c6 10 	call	0x218c	; 0x218c <do_rand>
    2222:	08 95       	ret

00002224 <rand>:
    2224:	80 e0       	ldi	r24, 0x00	; 0
    2226:	91 e0       	ldi	r25, 0x01	; 1
    2228:	0e 94 c6 10 	call	0x218c	; 0x218c <do_rand>
    222c:	08 95       	ret

0000222e <srand>:
    222e:	a0 e0       	ldi	r26, 0x00	; 0
    2230:	b0 e0       	ldi	r27, 0x00	; 0
    2232:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    2236:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    223a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    223e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    2242:	08 95       	ret

00002244 <tolower>:
    2244:	91 11       	cpse	r25, r1
    2246:	08 95       	ret
    2248:	81 54       	subi	r24, 0x41	; 65
    224a:	8a 51       	subi	r24, 0x1A	; 26
    224c:	08 f4       	brcc	.+2      	; 0x2250 <tolower+0xc>
    224e:	80 5e       	subi	r24, 0xE0	; 224
    2250:	85 5a       	subi	r24, 0xA5	; 165
    2252:	08 95       	ret

00002254 <toupper>:
    2254:	91 11       	cpse	r25, r1
    2256:	08 95       	ret
    2258:	81 56       	subi	r24, 0x61	; 97
    225a:	8a 51       	subi	r24, 0x1A	; 26
    225c:	08 f4       	brcc	.+2      	; 0x2260 <toupper+0xc>
    225e:	80 52       	subi	r24, 0x20	; 32
    2260:	85 58       	subi	r24, 0x85	; 133
    2262:	08 95       	ret

00002264 <memcpy_P>:
    2264:	fb 01       	movw	r30, r22
    2266:	dc 01       	movw	r26, r24
    2268:	02 c0       	rjmp	.+4      	; 0x226e <memcpy_P+0xa>
    226a:	05 90       	lpm	r0, Z+
    226c:	0d 92       	st	X+, r0
    226e:	41 50       	subi	r20, 0x01	; 1
    2270:	50 40       	sbci	r21, 0x00	; 0
    2272:	d8 f7       	brcc	.-10     	; 0x226a <memcpy_P+0x6>
    2274:	08 95       	ret

00002276 <strcmp>:
    2276:	fb 01       	movw	r30, r22
    2278:	dc 01       	movw	r26, r24
    227a:	8d 91       	ld	r24, X+
    227c:	01 90       	ld	r0, Z+
    227e:	80 19       	sub	r24, r0
    2280:	01 10       	cpse	r0, r1
    2282:	d9 f3       	breq	.-10     	; 0x227a <strcmp+0x4>
    2284:	99 0b       	sbc	r25, r25
    2286:	08 95       	ret

00002288 <fgetc>:
    2288:	cf 93       	push	r28
    228a:	df 93       	push	r29
    228c:	ec 01       	movw	r28, r24
    228e:	2b 81       	ldd	r18, Y+3	; 0x03
    2290:	20 ff       	sbrs	r18, 0
    2292:	33 c0       	rjmp	.+102    	; 0x22fa <fgetc+0x72>
    2294:	26 ff       	sbrs	r18, 6
    2296:	0a c0       	rjmp	.+20     	; 0x22ac <fgetc+0x24>
    2298:	2f 7b       	andi	r18, 0xBF	; 191
    229a:	2b 83       	std	Y+3, r18	; 0x03
    229c:	8e 81       	ldd	r24, Y+6	; 0x06
    229e:	9f 81       	ldd	r25, Y+7	; 0x07
    22a0:	01 96       	adiw	r24, 0x01	; 1
    22a2:	9f 83       	std	Y+7, r25	; 0x07
    22a4:	8e 83       	std	Y+6, r24	; 0x06
    22a6:	8a 81       	ldd	r24, Y+2	; 0x02
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	29 c0       	rjmp	.+82     	; 0x22fe <fgetc+0x76>
    22ac:	22 ff       	sbrs	r18, 2
    22ae:	0f c0       	rjmp	.+30     	; 0x22ce <fgetc+0x46>
    22b0:	e8 81       	ld	r30, Y
    22b2:	f9 81       	ldd	r31, Y+1	; 0x01
    22b4:	80 81       	ld	r24, Z
    22b6:	08 2e       	mov	r0, r24
    22b8:	00 0c       	add	r0, r0
    22ba:	99 0b       	sbc	r25, r25
    22bc:	00 97       	sbiw	r24, 0x00	; 0
    22be:	19 f4       	brne	.+6      	; 0x22c6 <fgetc+0x3e>
    22c0:	20 62       	ori	r18, 0x20	; 32
    22c2:	2b 83       	std	Y+3, r18	; 0x03
    22c4:	1a c0       	rjmp	.+52     	; 0x22fa <fgetc+0x72>
    22c6:	31 96       	adiw	r30, 0x01	; 1
    22c8:	f9 83       	std	Y+1, r31	; 0x01
    22ca:	e8 83       	st	Y, r30
    22cc:	0e c0       	rjmp	.+28     	; 0x22ea <fgetc+0x62>
    22ce:	ea 85       	ldd	r30, Y+10	; 0x0a
    22d0:	fb 85       	ldd	r31, Y+11	; 0x0b
    22d2:	09 95       	icall
    22d4:	97 ff       	sbrs	r25, 7
    22d6:	09 c0       	rjmp	.+18     	; 0x22ea <fgetc+0x62>
    22d8:	2b 81       	ldd	r18, Y+3	; 0x03
    22da:	01 96       	adiw	r24, 0x01	; 1
    22dc:	11 f0       	breq	.+4      	; 0x22e2 <fgetc+0x5a>
    22de:	80 e2       	ldi	r24, 0x20	; 32
    22e0:	01 c0       	rjmp	.+2      	; 0x22e4 <fgetc+0x5c>
    22e2:	80 e1       	ldi	r24, 0x10	; 16
    22e4:	82 2b       	or	r24, r18
    22e6:	8b 83       	std	Y+3, r24	; 0x03
    22e8:	08 c0       	rjmp	.+16     	; 0x22fa <fgetc+0x72>
    22ea:	2e 81       	ldd	r18, Y+6	; 0x06
    22ec:	3f 81       	ldd	r19, Y+7	; 0x07
    22ee:	2f 5f       	subi	r18, 0xFF	; 255
    22f0:	3f 4f       	sbci	r19, 0xFF	; 255
    22f2:	3f 83       	std	Y+7, r19	; 0x07
    22f4:	2e 83       	std	Y+6, r18	; 0x06
    22f6:	99 27       	eor	r25, r25
    22f8:	02 c0       	rjmp	.+4      	; 0x22fe <fgetc+0x76>
    22fa:	8f ef       	ldi	r24, 0xFF	; 255
    22fc:	9f ef       	ldi	r25, 0xFF	; 255
    22fe:	df 91       	pop	r29
    2300:	cf 91       	pop	r28
    2302:	08 95       	ret

00002304 <fputc>:
    2304:	0f 93       	push	r16
    2306:	1f 93       	push	r17
    2308:	cf 93       	push	r28
    230a:	df 93       	push	r29
    230c:	fb 01       	movw	r30, r22
    230e:	23 81       	ldd	r18, Z+3	; 0x03
    2310:	21 fd       	sbrc	r18, 1
    2312:	03 c0       	rjmp	.+6      	; 0x231a <fputc+0x16>
    2314:	8f ef       	ldi	r24, 0xFF	; 255
    2316:	9f ef       	ldi	r25, 0xFF	; 255
    2318:	2c c0       	rjmp	.+88     	; 0x2372 <fputc+0x6e>
    231a:	22 ff       	sbrs	r18, 2
    231c:	16 c0       	rjmp	.+44     	; 0x234a <fputc+0x46>
    231e:	46 81       	ldd	r20, Z+6	; 0x06
    2320:	57 81       	ldd	r21, Z+7	; 0x07
    2322:	24 81       	ldd	r18, Z+4	; 0x04
    2324:	35 81       	ldd	r19, Z+5	; 0x05
    2326:	42 17       	cp	r20, r18
    2328:	53 07       	cpc	r21, r19
    232a:	44 f4       	brge	.+16     	; 0x233c <fputc+0x38>
    232c:	a0 81       	ld	r26, Z
    232e:	b1 81       	ldd	r27, Z+1	; 0x01
    2330:	9d 01       	movw	r18, r26
    2332:	2f 5f       	subi	r18, 0xFF	; 255
    2334:	3f 4f       	sbci	r19, 0xFF	; 255
    2336:	31 83       	std	Z+1, r19	; 0x01
    2338:	20 83       	st	Z, r18
    233a:	8c 93       	st	X, r24
    233c:	26 81       	ldd	r18, Z+6	; 0x06
    233e:	37 81       	ldd	r19, Z+7	; 0x07
    2340:	2f 5f       	subi	r18, 0xFF	; 255
    2342:	3f 4f       	sbci	r19, 0xFF	; 255
    2344:	37 83       	std	Z+7, r19	; 0x07
    2346:	26 83       	std	Z+6, r18	; 0x06
    2348:	14 c0       	rjmp	.+40     	; 0x2372 <fputc+0x6e>
    234a:	8b 01       	movw	r16, r22
    234c:	ec 01       	movw	r28, r24
    234e:	fb 01       	movw	r30, r22
    2350:	00 84       	ldd	r0, Z+8	; 0x08
    2352:	f1 85       	ldd	r31, Z+9	; 0x09
    2354:	e0 2d       	mov	r30, r0
    2356:	09 95       	icall
    2358:	89 2b       	or	r24, r25
    235a:	e1 f6       	brne	.-72     	; 0x2314 <fputc+0x10>
    235c:	d8 01       	movw	r26, r16
    235e:	16 96       	adiw	r26, 0x06	; 6
    2360:	8d 91       	ld	r24, X+
    2362:	9c 91       	ld	r25, X
    2364:	17 97       	sbiw	r26, 0x07	; 7
    2366:	01 96       	adiw	r24, 0x01	; 1
    2368:	17 96       	adiw	r26, 0x07	; 7
    236a:	9c 93       	st	X, r25
    236c:	8e 93       	st	-X, r24
    236e:	16 97       	sbiw	r26, 0x06	; 6
    2370:	ce 01       	movw	r24, r28
    2372:	df 91       	pop	r29
    2374:	cf 91       	pop	r28
    2376:	1f 91       	pop	r17
    2378:	0f 91       	pop	r16
    237a:	08 95       	ret

0000237c <printf>:
    237c:	a0 e0       	ldi	r26, 0x00	; 0
    237e:	b0 e0       	ldi	r27, 0x00	; 0
    2380:	e4 ec       	ldi	r30, 0xC4	; 196
    2382:	f1 e1       	ldi	r31, 0x11	; 17
    2384:	0c 94 9b 14 	jmp	0x2936	; 0x2936 <__prologue_saves__+0x20>
    2388:	ae 01       	movw	r20, r28
    238a:	4b 5f       	subi	r20, 0xFB	; 251
    238c:	5f 4f       	sbci	r21, 0xFF	; 255
    238e:	fa 01       	movw	r30, r20
    2390:	61 91       	ld	r22, Z+
    2392:	71 91       	ld	r23, Z+
    2394:	af 01       	movw	r20, r30
    2396:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <__iob+0x2>
    239a:	90 91 6a 04 	lds	r25, 0x046A	; 0x80046a <__iob+0x3>
    239e:	0e 94 23 12 	call	0x2446	; 0x2446 <vfprintf>
    23a2:	e2 e0       	ldi	r30, 0x02	; 2
    23a4:	0c 94 b7 14 	jmp	0x296e	; 0x296e <__epilogue_restores__+0x20>

000023a8 <printf_P>:
    23a8:	a0 e0       	ldi	r26, 0x00	; 0
    23aa:	b0 e0       	ldi	r27, 0x00	; 0
    23ac:	ea ed       	ldi	r30, 0xDA	; 218
    23ae:	f1 e1       	ldi	r31, 0x11	; 17
    23b0:	0c 94 99 14 	jmp	0x2932	; 0x2932 <__prologue_saves__+0x1c>
    23b4:	ae 01       	movw	r20, r28
    23b6:	49 5f       	subi	r20, 0xF9	; 249
    23b8:	5f 4f       	sbci	r21, 0xFF	; 255
    23ba:	da 01       	movw	r26, r20
    23bc:	6d 91       	ld	r22, X+
    23be:	7d 91       	ld	r23, X+
    23c0:	ad 01       	movw	r20, r26
    23c2:	07 e6       	ldi	r16, 0x67	; 103
    23c4:	14 e0       	ldi	r17, 0x04	; 4
    23c6:	f8 01       	movw	r30, r16
    23c8:	82 81       	ldd	r24, Z+2	; 0x02
    23ca:	93 81       	ldd	r25, Z+3	; 0x03
    23cc:	dc 01       	movw	r26, r24
    23ce:	13 96       	adiw	r26, 0x03	; 3
    23d0:	2c 91       	ld	r18, X
    23d2:	13 97       	sbiw	r26, 0x03	; 3
    23d4:	28 60       	ori	r18, 0x08	; 8
    23d6:	13 96       	adiw	r26, 0x03	; 3
    23d8:	2c 93       	st	X, r18
    23da:	0e 94 23 12 	call	0x2446	; 0x2446 <vfprintf>
    23de:	d8 01       	movw	r26, r16
    23e0:	12 96       	adiw	r26, 0x02	; 2
    23e2:	ed 91       	ld	r30, X+
    23e4:	fc 91       	ld	r31, X
    23e6:	13 97       	sbiw	r26, 0x03	; 3
    23e8:	23 81       	ldd	r18, Z+3	; 0x03
    23ea:	27 7f       	andi	r18, 0xF7	; 247
    23ec:	23 83       	std	Z+3, r18	; 0x03
    23ee:	e4 e0       	ldi	r30, 0x04	; 4
    23f0:	0c 94 b5 14 	jmp	0x296a	; 0x296a <__epilogue_restores__+0x1c>

000023f4 <putchar>:
    23f4:	60 91 69 04 	lds	r22, 0x0469	; 0x800469 <__iob+0x2>
    23f8:	70 91 6a 04 	lds	r23, 0x046A	; 0x80046a <__iob+0x3>
    23fc:	0e 94 82 11 	call	0x2304	; 0x2304 <fputc>
    2400:	08 95       	ret

00002402 <sprintf>:
    2402:	ae e0       	ldi	r26, 0x0E	; 14
    2404:	b0 e0       	ldi	r27, 0x00	; 0
    2406:	e7 e0       	ldi	r30, 0x07	; 7
    2408:	f2 e1       	ldi	r31, 0x12	; 18
    240a:	0c 94 99 14 	jmp	0x2932	; 0x2932 <__prologue_saves__+0x1c>
    240e:	0d 89       	ldd	r16, Y+21	; 0x15
    2410:	1e 89       	ldd	r17, Y+22	; 0x16
    2412:	86 e0       	ldi	r24, 0x06	; 6
    2414:	8c 83       	std	Y+4, r24	; 0x04
    2416:	1a 83       	std	Y+2, r17	; 0x02
    2418:	09 83       	std	Y+1, r16	; 0x01
    241a:	8f ef       	ldi	r24, 0xFF	; 255
    241c:	9f e7       	ldi	r25, 0x7F	; 127
    241e:	9e 83       	std	Y+6, r25	; 0x06
    2420:	8d 83       	std	Y+5, r24	; 0x05
    2422:	ae 01       	movw	r20, r28
    2424:	47 5e       	subi	r20, 0xE7	; 231
    2426:	5f 4f       	sbci	r21, 0xFF	; 255
    2428:	6f 89       	ldd	r22, Y+23	; 0x17
    242a:	78 8d       	ldd	r23, Y+24	; 0x18
    242c:	ce 01       	movw	r24, r28
    242e:	01 96       	adiw	r24, 0x01	; 1
    2430:	0e 94 23 12 	call	0x2446	; 0x2446 <vfprintf>
    2434:	ef 81       	ldd	r30, Y+7	; 0x07
    2436:	f8 85       	ldd	r31, Y+8	; 0x08
    2438:	e0 0f       	add	r30, r16
    243a:	f1 1f       	adc	r31, r17
    243c:	10 82       	st	Z, r1
    243e:	2e 96       	adiw	r28, 0x0e	; 14
    2440:	e4 e0       	ldi	r30, 0x04	; 4
    2442:	0c 94 b5 14 	jmp	0x296a	; 0x296a <__epilogue_restores__+0x1c>

00002446 <vfprintf>:
    2446:	ab e0       	ldi	r26, 0x0B	; 11
    2448:	b0 e0       	ldi	r27, 0x00	; 0
    244a:	e9 e2       	ldi	r30, 0x29	; 41
    244c:	f2 e1       	ldi	r31, 0x12	; 18
    244e:	0c 94 8b 14 	jmp	0x2916	; 0x2916 <__prologue_saves__>
    2452:	6c 01       	movw	r12, r24
    2454:	7b 01       	movw	r14, r22
    2456:	8a 01       	movw	r16, r20
    2458:	fc 01       	movw	r30, r24
    245a:	17 82       	std	Z+7, r1	; 0x07
    245c:	16 82       	std	Z+6, r1	; 0x06
    245e:	83 81       	ldd	r24, Z+3	; 0x03
    2460:	81 ff       	sbrs	r24, 1
    2462:	cc c1       	rjmp	.+920    	; 0x27fc <vfprintf+0x3b6>
    2464:	ce 01       	movw	r24, r28
    2466:	01 96       	adiw	r24, 0x01	; 1
    2468:	3c 01       	movw	r6, r24
    246a:	f6 01       	movw	r30, r12
    246c:	93 81       	ldd	r25, Z+3	; 0x03
    246e:	f7 01       	movw	r30, r14
    2470:	93 fd       	sbrc	r25, 3
    2472:	85 91       	lpm	r24, Z+
    2474:	93 ff       	sbrs	r25, 3
    2476:	81 91       	ld	r24, Z+
    2478:	7f 01       	movw	r14, r30
    247a:	88 23       	and	r24, r24
    247c:	09 f4       	brne	.+2      	; 0x2480 <vfprintf+0x3a>
    247e:	ba c1       	rjmp	.+884    	; 0x27f4 <vfprintf+0x3ae>
    2480:	85 32       	cpi	r24, 0x25	; 37
    2482:	39 f4       	brne	.+14     	; 0x2492 <vfprintf+0x4c>
    2484:	93 fd       	sbrc	r25, 3
    2486:	85 91       	lpm	r24, Z+
    2488:	93 ff       	sbrs	r25, 3
    248a:	81 91       	ld	r24, Z+
    248c:	7f 01       	movw	r14, r30
    248e:	85 32       	cpi	r24, 0x25	; 37
    2490:	29 f4       	brne	.+10     	; 0x249c <vfprintf+0x56>
    2492:	b6 01       	movw	r22, r12
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	0e 94 82 11 	call	0x2304	; 0x2304 <fputc>
    249a:	e7 cf       	rjmp	.-50     	; 0x246a <vfprintf+0x24>
    249c:	91 2c       	mov	r9, r1
    249e:	21 2c       	mov	r2, r1
    24a0:	31 2c       	mov	r3, r1
    24a2:	ff e1       	ldi	r31, 0x1F	; 31
    24a4:	f3 15       	cp	r31, r3
    24a6:	d8 f0       	brcs	.+54     	; 0x24de <vfprintf+0x98>
    24a8:	8b 32       	cpi	r24, 0x2B	; 43
    24aa:	79 f0       	breq	.+30     	; 0x24ca <vfprintf+0x84>
    24ac:	38 f4       	brcc	.+14     	; 0x24bc <vfprintf+0x76>
    24ae:	80 32       	cpi	r24, 0x20	; 32
    24b0:	79 f0       	breq	.+30     	; 0x24d0 <vfprintf+0x8a>
    24b2:	83 32       	cpi	r24, 0x23	; 35
    24b4:	a1 f4       	brne	.+40     	; 0x24de <vfprintf+0x98>
    24b6:	23 2d       	mov	r18, r3
    24b8:	20 61       	ori	r18, 0x10	; 16
    24ba:	1d c0       	rjmp	.+58     	; 0x24f6 <vfprintf+0xb0>
    24bc:	8d 32       	cpi	r24, 0x2D	; 45
    24be:	61 f0       	breq	.+24     	; 0x24d8 <vfprintf+0x92>
    24c0:	80 33       	cpi	r24, 0x30	; 48
    24c2:	69 f4       	brne	.+26     	; 0x24de <vfprintf+0x98>
    24c4:	23 2d       	mov	r18, r3
    24c6:	21 60       	ori	r18, 0x01	; 1
    24c8:	16 c0       	rjmp	.+44     	; 0x24f6 <vfprintf+0xb0>
    24ca:	83 2d       	mov	r24, r3
    24cc:	82 60       	ori	r24, 0x02	; 2
    24ce:	38 2e       	mov	r3, r24
    24d0:	e3 2d       	mov	r30, r3
    24d2:	e4 60       	ori	r30, 0x04	; 4
    24d4:	3e 2e       	mov	r3, r30
    24d6:	2a c0       	rjmp	.+84     	; 0x252c <vfprintf+0xe6>
    24d8:	f3 2d       	mov	r31, r3
    24da:	f8 60       	ori	r31, 0x08	; 8
    24dc:	1d c0       	rjmp	.+58     	; 0x2518 <vfprintf+0xd2>
    24de:	37 fc       	sbrc	r3, 7
    24e0:	2d c0       	rjmp	.+90     	; 0x253c <vfprintf+0xf6>
    24e2:	20 ed       	ldi	r18, 0xD0	; 208
    24e4:	28 0f       	add	r18, r24
    24e6:	2a 30       	cpi	r18, 0x0A	; 10
    24e8:	40 f0       	brcs	.+16     	; 0x24fa <vfprintf+0xb4>
    24ea:	8e 32       	cpi	r24, 0x2E	; 46
    24ec:	b9 f4       	brne	.+46     	; 0x251c <vfprintf+0xd6>
    24ee:	36 fc       	sbrc	r3, 6
    24f0:	81 c1       	rjmp	.+770    	; 0x27f4 <vfprintf+0x3ae>
    24f2:	23 2d       	mov	r18, r3
    24f4:	20 64       	ori	r18, 0x40	; 64
    24f6:	32 2e       	mov	r3, r18
    24f8:	19 c0       	rjmp	.+50     	; 0x252c <vfprintf+0xe6>
    24fa:	36 fe       	sbrs	r3, 6
    24fc:	06 c0       	rjmp	.+12     	; 0x250a <vfprintf+0xc4>
    24fe:	8a e0       	ldi	r24, 0x0A	; 10
    2500:	98 9e       	mul	r9, r24
    2502:	20 0d       	add	r18, r0
    2504:	11 24       	eor	r1, r1
    2506:	92 2e       	mov	r9, r18
    2508:	11 c0       	rjmp	.+34     	; 0x252c <vfprintf+0xe6>
    250a:	ea e0       	ldi	r30, 0x0A	; 10
    250c:	2e 9e       	mul	r2, r30
    250e:	20 0d       	add	r18, r0
    2510:	11 24       	eor	r1, r1
    2512:	22 2e       	mov	r2, r18
    2514:	f3 2d       	mov	r31, r3
    2516:	f0 62       	ori	r31, 0x20	; 32
    2518:	3f 2e       	mov	r3, r31
    251a:	08 c0       	rjmp	.+16     	; 0x252c <vfprintf+0xe6>
    251c:	8c 36       	cpi	r24, 0x6C	; 108
    251e:	21 f4       	brne	.+8      	; 0x2528 <vfprintf+0xe2>
    2520:	83 2d       	mov	r24, r3
    2522:	80 68       	ori	r24, 0x80	; 128
    2524:	38 2e       	mov	r3, r24
    2526:	02 c0       	rjmp	.+4      	; 0x252c <vfprintf+0xe6>
    2528:	88 36       	cpi	r24, 0x68	; 104
    252a:	41 f4       	brne	.+16     	; 0x253c <vfprintf+0xf6>
    252c:	f7 01       	movw	r30, r14
    252e:	93 fd       	sbrc	r25, 3
    2530:	85 91       	lpm	r24, Z+
    2532:	93 ff       	sbrs	r25, 3
    2534:	81 91       	ld	r24, Z+
    2536:	7f 01       	movw	r14, r30
    2538:	81 11       	cpse	r24, r1
    253a:	b3 cf       	rjmp	.-154    	; 0x24a2 <vfprintf+0x5c>
    253c:	98 2f       	mov	r25, r24
    253e:	9f 7d       	andi	r25, 0xDF	; 223
    2540:	95 54       	subi	r25, 0x45	; 69
    2542:	93 30       	cpi	r25, 0x03	; 3
    2544:	28 f4       	brcc	.+10     	; 0x2550 <vfprintf+0x10a>
    2546:	0c 5f       	subi	r16, 0xFC	; 252
    2548:	1f 4f       	sbci	r17, 0xFF	; 255
    254a:	9f e3       	ldi	r25, 0x3F	; 63
    254c:	99 83       	std	Y+1, r25	; 0x01
    254e:	0d c0       	rjmp	.+26     	; 0x256a <vfprintf+0x124>
    2550:	83 36       	cpi	r24, 0x63	; 99
    2552:	31 f0       	breq	.+12     	; 0x2560 <vfprintf+0x11a>
    2554:	83 37       	cpi	r24, 0x73	; 115
    2556:	71 f0       	breq	.+28     	; 0x2574 <vfprintf+0x12e>
    2558:	83 35       	cpi	r24, 0x53	; 83
    255a:	09 f0       	breq	.+2      	; 0x255e <vfprintf+0x118>
    255c:	59 c0       	rjmp	.+178    	; 0x2610 <vfprintf+0x1ca>
    255e:	21 c0       	rjmp	.+66     	; 0x25a2 <vfprintf+0x15c>
    2560:	f8 01       	movw	r30, r16
    2562:	80 81       	ld	r24, Z
    2564:	89 83       	std	Y+1, r24	; 0x01
    2566:	0e 5f       	subi	r16, 0xFE	; 254
    2568:	1f 4f       	sbci	r17, 0xFF	; 255
    256a:	88 24       	eor	r8, r8
    256c:	83 94       	inc	r8
    256e:	91 2c       	mov	r9, r1
    2570:	53 01       	movw	r10, r6
    2572:	13 c0       	rjmp	.+38     	; 0x259a <vfprintf+0x154>
    2574:	28 01       	movw	r4, r16
    2576:	f2 e0       	ldi	r31, 0x02	; 2
    2578:	4f 0e       	add	r4, r31
    257a:	51 1c       	adc	r5, r1
    257c:	f8 01       	movw	r30, r16
    257e:	a0 80       	ld	r10, Z
    2580:	b1 80       	ldd	r11, Z+1	; 0x01
    2582:	36 fe       	sbrs	r3, 6
    2584:	03 c0       	rjmp	.+6      	; 0x258c <vfprintf+0x146>
    2586:	69 2d       	mov	r22, r9
    2588:	70 e0       	ldi	r23, 0x00	; 0
    258a:	02 c0       	rjmp	.+4      	; 0x2590 <vfprintf+0x14a>
    258c:	6f ef       	ldi	r22, 0xFF	; 255
    258e:	7f ef       	ldi	r23, 0xFF	; 255
    2590:	c5 01       	movw	r24, r10
    2592:	0e 94 0f 14 	call	0x281e	; 0x281e <strnlen>
    2596:	4c 01       	movw	r8, r24
    2598:	82 01       	movw	r16, r4
    259a:	f3 2d       	mov	r31, r3
    259c:	ff 77       	andi	r31, 0x7F	; 127
    259e:	3f 2e       	mov	r3, r31
    25a0:	16 c0       	rjmp	.+44     	; 0x25ce <vfprintf+0x188>
    25a2:	28 01       	movw	r4, r16
    25a4:	22 e0       	ldi	r18, 0x02	; 2
    25a6:	42 0e       	add	r4, r18
    25a8:	51 1c       	adc	r5, r1
    25aa:	f8 01       	movw	r30, r16
    25ac:	a0 80       	ld	r10, Z
    25ae:	b1 80       	ldd	r11, Z+1	; 0x01
    25b0:	36 fe       	sbrs	r3, 6
    25b2:	03 c0       	rjmp	.+6      	; 0x25ba <vfprintf+0x174>
    25b4:	69 2d       	mov	r22, r9
    25b6:	70 e0       	ldi	r23, 0x00	; 0
    25b8:	02 c0       	rjmp	.+4      	; 0x25be <vfprintf+0x178>
    25ba:	6f ef       	ldi	r22, 0xFF	; 255
    25bc:	7f ef       	ldi	r23, 0xFF	; 255
    25be:	c5 01       	movw	r24, r10
    25c0:	0e 94 04 14 	call	0x2808	; 0x2808 <strnlen_P>
    25c4:	4c 01       	movw	r8, r24
    25c6:	f3 2d       	mov	r31, r3
    25c8:	f0 68       	ori	r31, 0x80	; 128
    25ca:	3f 2e       	mov	r3, r31
    25cc:	82 01       	movw	r16, r4
    25ce:	33 fc       	sbrc	r3, 3
    25d0:	1b c0       	rjmp	.+54     	; 0x2608 <vfprintf+0x1c2>
    25d2:	82 2d       	mov	r24, r2
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	88 16       	cp	r8, r24
    25d8:	99 06       	cpc	r9, r25
    25da:	b0 f4       	brcc	.+44     	; 0x2608 <vfprintf+0x1c2>
    25dc:	b6 01       	movw	r22, r12
    25de:	80 e2       	ldi	r24, 0x20	; 32
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	0e 94 82 11 	call	0x2304	; 0x2304 <fputc>
    25e6:	2a 94       	dec	r2
    25e8:	f4 cf       	rjmp	.-24     	; 0x25d2 <vfprintf+0x18c>
    25ea:	f5 01       	movw	r30, r10
    25ec:	37 fc       	sbrc	r3, 7
    25ee:	85 91       	lpm	r24, Z+
    25f0:	37 fe       	sbrs	r3, 7
    25f2:	81 91       	ld	r24, Z+
    25f4:	5f 01       	movw	r10, r30
    25f6:	b6 01       	movw	r22, r12
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	0e 94 82 11 	call	0x2304	; 0x2304 <fputc>
    25fe:	21 10       	cpse	r2, r1
    2600:	2a 94       	dec	r2
    2602:	21 e0       	ldi	r18, 0x01	; 1
    2604:	82 1a       	sub	r8, r18
    2606:	91 08       	sbc	r9, r1
    2608:	81 14       	cp	r8, r1
    260a:	91 04       	cpc	r9, r1
    260c:	71 f7       	brne	.-36     	; 0x25ea <vfprintf+0x1a4>
    260e:	e8 c0       	rjmp	.+464    	; 0x27e0 <vfprintf+0x39a>
    2610:	84 36       	cpi	r24, 0x64	; 100
    2612:	11 f0       	breq	.+4      	; 0x2618 <vfprintf+0x1d2>
    2614:	89 36       	cpi	r24, 0x69	; 105
    2616:	41 f5       	brne	.+80     	; 0x2668 <vfprintf+0x222>
    2618:	f8 01       	movw	r30, r16
    261a:	37 fe       	sbrs	r3, 7
    261c:	07 c0       	rjmp	.+14     	; 0x262c <vfprintf+0x1e6>
    261e:	60 81       	ld	r22, Z
    2620:	71 81       	ldd	r23, Z+1	; 0x01
    2622:	82 81       	ldd	r24, Z+2	; 0x02
    2624:	93 81       	ldd	r25, Z+3	; 0x03
    2626:	0c 5f       	subi	r16, 0xFC	; 252
    2628:	1f 4f       	sbci	r17, 0xFF	; 255
    262a:	08 c0       	rjmp	.+16     	; 0x263c <vfprintf+0x1f6>
    262c:	60 81       	ld	r22, Z
    262e:	71 81       	ldd	r23, Z+1	; 0x01
    2630:	07 2e       	mov	r0, r23
    2632:	00 0c       	add	r0, r0
    2634:	88 0b       	sbc	r24, r24
    2636:	99 0b       	sbc	r25, r25
    2638:	0e 5f       	subi	r16, 0xFE	; 254
    263a:	1f 4f       	sbci	r17, 0xFF	; 255
    263c:	f3 2d       	mov	r31, r3
    263e:	ff 76       	andi	r31, 0x6F	; 111
    2640:	3f 2e       	mov	r3, r31
    2642:	97 ff       	sbrs	r25, 7
    2644:	09 c0       	rjmp	.+18     	; 0x2658 <vfprintf+0x212>
    2646:	90 95       	com	r25
    2648:	80 95       	com	r24
    264a:	70 95       	com	r23
    264c:	61 95       	neg	r22
    264e:	7f 4f       	sbci	r23, 0xFF	; 255
    2650:	8f 4f       	sbci	r24, 0xFF	; 255
    2652:	9f 4f       	sbci	r25, 0xFF	; 255
    2654:	f0 68       	ori	r31, 0x80	; 128
    2656:	3f 2e       	mov	r3, r31
    2658:	2a e0       	ldi	r18, 0x0A	; 10
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	a3 01       	movw	r20, r6
    265e:	0e 94 1a 14 	call	0x2834	; 0x2834 <__ultoa_invert>
    2662:	88 2e       	mov	r8, r24
    2664:	86 18       	sub	r8, r6
    2666:	45 c0       	rjmp	.+138    	; 0x26f2 <vfprintf+0x2ac>
    2668:	85 37       	cpi	r24, 0x75	; 117
    266a:	31 f4       	brne	.+12     	; 0x2678 <vfprintf+0x232>
    266c:	23 2d       	mov	r18, r3
    266e:	2f 7e       	andi	r18, 0xEF	; 239
    2670:	b2 2e       	mov	r11, r18
    2672:	2a e0       	ldi	r18, 0x0A	; 10
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	25 c0       	rjmp	.+74     	; 0x26c2 <vfprintf+0x27c>
    2678:	93 2d       	mov	r25, r3
    267a:	99 7f       	andi	r25, 0xF9	; 249
    267c:	b9 2e       	mov	r11, r25
    267e:	8f 36       	cpi	r24, 0x6F	; 111
    2680:	c1 f0       	breq	.+48     	; 0x26b2 <vfprintf+0x26c>
    2682:	18 f4       	brcc	.+6      	; 0x268a <vfprintf+0x244>
    2684:	88 35       	cpi	r24, 0x58	; 88
    2686:	79 f0       	breq	.+30     	; 0x26a6 <vfprintf+0x260>
    2688:	b5 c0       	rjmp	.+362    	; 0x27f4 <vfprintf+0x3ae>
    268a:	80 37       	cpi	r24, 0x70	; 112
    268c:	19 f0       	breq	.+6      	; 0x2694 <vfprintf+0x24e>
    268e:	88 37       	cpi	r24, 0x78	; 120
    2690:	21 f0       	breq	.+8      	; 0x269a <vfprintf+0x254>
    2692:	b0 c0       	rjmp	.+352    	; 0x27f4 <vfprintf+0x3ae>
    2694:	e9 2f       	mov	r30, r25
    2696:	e0 61       	ori	r30, 0x10	; 16
    2698:	be 2e       	mov	r11, r30
    269a:	b4 fe       	sbrs	r11, 4
    269c:	0d c0       	rjmp	.+26     	; 0x26b8 <vfprintf+0x272>
    269e:	fb 2d       	mov	r31, r11
    26a0:	f4 60       	ori	r31, 0x04	; 4
    26a2:	bf 2e       	mov	r11, r31
    26a4:	09 c0       	rjmp	.+18     	; 0x26b8 <vfprintf+0x272>
    26a6:	34 fe       	sbrs	r3, 4
    26a8:	0a c0       	rjmp	.+20     	; 0x26be <vfprintf+0x278>
    26aa:	29 2f       	mov	r18, r25
    26ac:	26 60       	ori	r18, 0x06	; 6
    26ae:	b2 2e       	mov	r11, r18
    26b0:	06 c0       	rjmp	.+12     	; 0x26be <vfprintf+0x278>
    26b2:	28 e0       	ldi	r18, 0x08	; 8
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	05 c0       	rjmp	.+10     	; 0x26c2 <vfprintf+0x27c>
    26b8:	20 e1       	ldi	r18, 0x10	; 16
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	02 c0       	rjmp	.+4      	; 0x26c2 <vfprintf+0x27c>
    26be:	20 e1       	ldi	r18, 0x10	; 16
    26c0:	32 e0       	ldi	r19, 0x02	; 2
    26c2:	f8 01       	movw	r30, r16
    26c4:	b7 fe       	sbrs	r11, 7
    26c6:	07 c0       	rjmp	.+14     	; 0x26d6 <vfprintf+0x290>
    26c8:	60 81       	ld	r22, Z
    26ca:	71 81       	ldd	r23, Z+1	; 0x01
    26cc:	82 81       	ldd	r24, Z+2	; 0x02
    26ce:	93 81       	ldd	r25, Z+3	; 0x03
    26d0:	0c 5f       	subi	r16, 0xFC	; 252
    26d2:	1f 4f       	sbci	r17, 0xFF	; 255
    26d4:	06 c0       	rjmp	.+12     	; 0x26e2 <vfprintf+0x29c>
    26d6:	60 81       	ld	r22, Z
    26d8:	71 81       	ldd	r23, Z+1	; 0x01
    26da:	80 e0       	ldi	r24, 0x00	; 0
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	0e 5f       	subi	r16, 0xFE	; 254
    26e0:	1f 4f       	sbci	r17, 0xFF	; 255
    26e2:	a3 01       	movw	r20, r6
    26e4:	0e 94 1a 14 	call	0x2834	; 0x2834 <__ultoa_invert>
    26e8:	88 2e       	mov	r8, r24
    26ea:	86 18       	sub	r8, r6
    26ec:	fb 2d       	mov	r31, r11
    26ee:	ff 77       	andi	r31, 0x7F	; 127
    26f0:	3f 2e       	mov	r3, r31
    26f2:	36 fe       	sbrs	r3, 6
    26f4:	0d c0       	rjmp	.+26     	; 0x2710 <vfprintf+0x2ca>
    26f6:	23 2d       	mov	r18, r3
    26f8:	2e 7f       	andi	r18, 0xFE	; 254
    26fa:	a2 2e       	mov	r10, r18
    26fc:	89 14       	cp	r8, r9
    26fe:	58 f4       	brcc	.+22     	; 0x2716 <vfprintf+0x2d0>
    2700:	34 fe       	sbrs	r3, 4
    2702:	0b c0       	rjmp	.+22     	; 0x271a <vfprintf+0x2d4>
    2704:	32 fc       	sbrc	r3, 2
    2706:	09 c0       	rjmp	.+18     	; 0x271a <vfprintf+0x2d4>
    2708:	83 2d       	mov	r24, r3
    270a:	8e 7e       	andi	r24, 0xEE	; 238
    270c:	a8 2e       	mov	r10, r24
    270e:	05 c0       	rjmp	.+10     	; 0x271a <vfprintf+0x2d4>
    2710:	b8 2c       	mov	r11, r8
    2712:	a3 2c       	mov	r10, r3
    2714:	03 c0       	rjmp	.+6      	; 0x271c <vfprintf+0x2d6>
    2716:	b8 2c       	mov	r11, r8
    2718:	01 c0       	rjmp	.+2      	; 0x271c <vfprintf+0x2d6>
    271a:	b9 2c       	mov	r11, r9
    271c:	a4 fe       	sbrs	r10, 4
    271e:	0f c0       	rjmp	.+30     	; 0x273e <vfprintf+0x2f8>
    2720:	fe 01       	movw	r30, r28
    2722:	e8 0d       	add	r30, r8
    2724:	f1 1d       	adc	r31, r1
    2726:	80 81       	ld	r24, Z
    2728:	80 33       	cpi	r24, 0x30	; 48
    272a:	21 f4       	brne	.+8      	; 0x2734 <vfprintf+0x2ee>
    272c:	9a 2d       	mov	r25, r10
    272e:	99 7e       	andi	r25, 0xE9	; 233
    2730:	a9 2e       	mov	r10, r25
    2732:	09 c0       	rjmp	.+18     	; 0x2746 <vfprintf+0x300>
    2734:	a2 fe       	sbrs	r10, 2
    2736:	06 c0       	rjmp	.+12     	; 0x2744 <vfprintf+0x2fe>
    2738:	b3 94       	inc	r11
    273a:	b3 94       	inc	r11
    273c:	04 c0       	rjmp	.+8      	; 0x2746 <vfprintf+0x300>
    273e:	8a 2d       	mov	r24, r10
    2740:	86 78       	andi	r24, 0x86	; 134
    2742:	09 f0       	breq	.+2      	; 0x2746 <vfprintf+0x300>
    2744:	b3 94       	inc	r11
    2746:	a3 fc       	sbrc	r10, 3
    2748:	11 c0       	rjmp	.+34     	; 0x276c <vfprintf+0x326>
    274a:	a0 fe       	sbrs	r10, 0
    274c:	06 c0       	rjmp	.+12     	; 0x275a <vfprintf+0x314>
    274e:	b2 14       	cp	r11, r2
    2750:	88 f4       	brcc	.+34     	; 0x2774 <vfprintf+0x32e>
    2752:	28 0c       	add	r2, r8
    2754:	92 2c       	mov	r9, r2
    2756:	9b 18       	sub	r9, r11
    2758:	0e c0       	rjmp	.+28     	; 0x2776 <vfprintf+0x330>
    275a:	b2 14       	cp	r11, r2
    275c:	60 f4       	brcc	.+24     	; 0x2776 <vfprintf+0x330>
    275e:	b6 01       	movw	r22, r12
    2760:	80 e2       	ldi	r24, 0x20	; 32
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	0e 94 82 11 	call	0x2304	; 0x2304 <fputc>
    2768:	b3 94       	inc	r11
    276a:	f7 cf       	rjmp	.-18     	; 0x275a <vfprintf+0x314>
    276c:	b2 14       	cp	r11, r2
    276e:	18 f4       	brcc	.+6      	; 0x2776 <vfprintf+0x330>
    2770:	2b 18       	sub	r2, r11
    2772:	02 c0       	rjmp	.+4      	; 0x2778 <vfprintf+0x332>
    2774:	98 2c       	mov	r9, r8
    2776:	21 2c       	mov	r2, r1
    2778:	a4 fe       	sbrs	r10, 4
    277a:	10 c0       	rjmp	.+32     	; 0x279c <vfprintf+0x356>
    277c:	b6 01       	movw	r22, r12
    277e:	80 e3       	ldi	r24, 0x30	; 48
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	0e 94 82 11 	call	0x2304	; 0x2304 <fputc>
    2786:	a2 fe       	sbrs	r10, 2
    2788:	17 c0       	rjmp	.+46     	; 0x27b8 <vfprintf+0x372>
    278a:	a1 fc       	sbrc	r10, 1
    278c:	03 c0       	rjmp	.+6      	; 0x2794 <vfprintf+0x34e>
    278e:	88 e7       	ldi	r24, 0x78	; 120
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	02 c0       	rjmp	.+4      	; 0x2798 <vfprintf+0x352>
    2794:	88 e5       	ldi	r24, 0x58	; 88
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	b6 01       	movw	r22, r12
    279a:	0c c0       	rjmp	.+24     	; 0x27b4 <vfprintf+0x36e>
    279c:	8a 2d       	mov	r24, r10
    279e:	86 78       	andi	r24, 0x86	; 134
    27a0:	59 f0       	breq	.+22     	; 0x27b8 <vfprintf+0x372>
    27a2:	a1 fe       	sbrs	r10, 1
    27a4:	02 c0       	rjmp	.+4      	; 0x27aa <vfprintf+0x364>
    27a6:	8b e2       	ldi	r24, 0x2B	; 43
    27a8:	01 c0       	rjmp	.+2      	; 0x27ac <vfprintf+0x366>
    27aa:	80 e2       	ldi	r24, 0x20	; 32
    27ac:	a7 fc       	sbrc	r10, 7
    27ae:	8d e2       	ldi	r24, 0x2D	; 45
    27b0:	b6 01       	movw	r22, r12
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	0e 94 82 11 	call	0x2304	; 0x2304 <fputc>
    27b8:	89 14       	cp	r8, r9
    27ba:	38 f4       	brcc	.+14     	; 0x27ca <vfprintf+0x384>
    27bc:	b6 01       	movw	r22, r12
    27be:	80 e3       	ldi	r24, 0x30	; 48
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	0e 94 82 11 	call	0x2304	; 0x2304 <fputc>
    27c6:	9a 94       	dec	r9
    27c8:	f7 cf       	rjmp	.-18     	; 0x27b8 <vfprintf+0x372>
    27ca:	8a 94       	dec	r8
    27cc:	f3 01       	movw	r30, r6
    27ce:	e8 0d       	add	r30, r8
    27d0:	f1 1d       	adc	r31, r1
    27d2:	80 81       	ld	r24, Z
    27d4:	b6 01       	movw	r22, r12
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	0e 94 82 11 	call	0x2304	; 0x2304 <fputc>
    27dc:	81 10       	cpse	r8, r1
    27de:	f5 cf       	rjmp	.-22     	; 0x27ca <vfprintf+0x384>
    27e0:	22 20       	and	r2, r2
    27e2:	09 f4       	brne	.+2      	; 0x27e6 <vfprintf+0x3a0>
    27e4:	42 ce       	rjmp	.-892    	; 0x246a <vfprintf+0x24>
    27e6:	b6 01       	movw	r22, r12
    27e8:	80 e2       	ldi	r24, 0x20	; 32
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	0e 94 82 11 	call	0x2304	; 0x2304 <fputc>
    27f0:	2a 94       	dec	r2
    27f2:	f6 cf       	rjmp	.-20     	; 0x27e0 <vfprintf+0x39a>
    27f4:	f6 01       	movw	r30, r12
    27f6:	86 81       	ldd	r24, Z+6	; 0x06
    27f8:	97 81       	ldd	r25, Z+7	; 0x07
    27fa:	02 c0       	rjmp	.+4      	; 0x2800 <vfprintf+0x3ba>
    27fc:	8f ef       	ldi	r24, 0xFF	; 255
    27fe:	9f ef       	ldi	r25, 0xFF	; 255
    2800:	2b 96       	adiw	r28, 0x0b	; 11
    2802:	e2 e1       	ldi	r30, 0x12	; 18
    2804:	0c 94 a7 14 	jmp	0x294e	; 0x294e <__epilogue_restores__>

00002808 <strnlen_P>:
    2808:	fc 01       	movw	r30, r24
    280a:	05 90       	lpm	r0, Z+
    280c:	61 50       	subi	r22, 0x01	; 1
    280e:	70 40       	sbci	r23, 0x00	; 0
    2810:	01 10       	cpse	r0, r1
    2812:	d8 f7       	brcc	.-10     	; 0x280a <strnlen_P+0x2>
    2814:	80 95       	com	r24
    2816:	90 95       	com	r25
    2818:	8e 0f       	add	r24, r30
    281a:	9f 1f       	adc	r25, r31
    281c:	08 95       	ret

0000281e <strnlen>:
    281e:	fc 01       	movw	r30, r24
    2820:	61 50       	subi	r22, 0x01	; 1
    2822:	70 40       	sbci	r23, 0x00	; 0
    2824:	01 90       	ld	r0, Z+
    2826:	01 10       	cpse	r0, r1
    2828:	d8 f7       	brcc	.-10     	; 0x2820 <strnlen+0x2>
    282a:	80 95       	com	r24
    282c:	90 95       	com	r25
    282e:	8e 0f       	add	r24, r30
    2830:	9f 1f       	adc	r25, r31
    2832:	08 95       	ret

00002834 <__ultoa_invert>:
    2834:	fa 01       	movw	r30, r20
    2836:	aa 27       	eor	r26, r26
    2838:	28 30       	cpi	r18, 0x08	; 8
    283a:	51 f1       	breq	.+84     	; 0x2890 <__ultoa_invert+0x5c>
    283c:	20 31       	cpi	r18, 0x10	; 16
    283e:	81 f1       	breq	.+96     	; 0x28a0 <__ultoa_invert+0x6c>
    2840:	e8 94       	clt
    2842:	6f 93       	push	r22
    2844:	6e 7f       	andi	r22, 0xFE	; 254
    2846:	6e 5f       	subi	r22, 0xFE	; 254
    2848:	7f 4f       	sbci	r23, 0xFF	; 255
    284a:	8f 4f       	sbci	r24, 0xFF	; 255
    284c:	9f 4f       	sbci	r25, 0xFF	; 255
    284e:	af 4f       	sbci	r26, 0xFF	; 255
    2850:	b1 e0       	ldi	r27, 0x01	; 1
    2852:	3e d0       	rcall	.+124    	; 0x28d0 <__ultoa_invert+0x9c>
    2854:	b4 e0       	ldi	r27, 0x04	; 4
    2856:	3c d0       	rcall	.+120    	; 0x28d0 <__ultoa_invert+0x9c>
    2858:	67 0f       	add	r22, r23
    285a:	78 1f       	adc	r23, r24
    285c:	89 1f       	adc	r24, r25
    285e:	9a 1f       	adc	r25, r26
    2860:	a1 1d       	adc	r26, r1
    2862:	68 0f       	add	r22, r24
    2864:	79 1f       	adc	r23, r25
    2866:	8a 1f       	adc	r24, r26
    2868:	91 1d       	adc	r25, r1
    286a:	a1 1d       	adc	r26, r1
    286c:	6a 0f       	add	r22, r26
    286e:	71 1d       	adc	r23, r1
    2870:	81 1d       	adc	r24, r1
    2872:	91 1d       	adc	r25, r1
    2874:	a1 1d       	adc	r26, r1
    2876:	20 d0       	rcall	.+64     	; 0x28b8 <__ultoa_invert+0x84>
    2878:	09 f4       	brne	.+2      	; 0x287c <__ultoa_invert+0x48>
    287a:	68 94       	set
    287c:	3f 91       	pop	r19
    287e:	2a e0       	ldi	r18, 0x0A	; 10
    2880:	26 9f       	mul	r18, r22
    2882:	11 24       	eor	r1, r1
    2884:	30 19       	sub	r19, r0
    2886:	30 5d       	subi	r19, 0xD0	; 208
    2888:	31 93       	st	Z+, r19
    288a:	de f6       	brtc	.-74     	; 0x2842 <__ultoa_invert+0xe>
    288c:	cf 01       	movw	r24, r30
    288e:	08 95       	ret
    2890:	46 2f       	mov	r20, r22
    2892:	47 70       	andi	r20, 0x07	; 7
    2894:	40 5d       	subi	r20, 0xD0	; 208
    2896:	41 93       	st	Z+, r20
    2898:	b3 e0       	ldi	r27, 0x03	; 3
    289a:	0f d0       	rcall	.+30     	; 0x28ba <__ultoa_invert+0x86>
    289c:	c9 f7       	brne	.-14     	; 0x2890 <__ultoa_invert+0x5c>
    289e:	f6 cf       	rjmp	.-20     	; 0x288c <__ultoa_invert+0x58>
    28a0:	46 2f       	mov	r20, r22
    28a2:	4f 70       	andi	r20, 0x0F	; 15
    28a4:	40 5d       	subi	r20, 0xD0	; 208
    28a6:	4a 33       	cpi	r20, 0x3A	; 58
    28a8:	18 f0       	brcs	.+6      	; 0x28b0 <__ultoa_invert+0x7c>
    28aa:	49 5d       	subi	r20, 0xD9	; 217
    28ac:	31 fd       	sbrc	r19, 1
    28ae:	40 52       	subi	r20, 0x20	; 32
    28b0:	41 93       	st	Z+, r20
    28b2:	02 d0       	rcall	.+4      	; 0x28b8 <__ultoa_invert+0x84>
    28b4:	a9 f7       	brne	.-22     	; 0x28a0 <__ultoa_invert+0x6c>
    28b6:	ea cf       	rjmp	.-44     	; 0x288c <__ultoa_invert+0x58>
    28b8:	b4 e0       	ldi	r27, 0x04	; 4
    28ba:	a6 95       	lsr	r26
    28bc:	97 95       	ror	r25
    28be:	87 95       	ror	r24
    28c0:	77 95       	ror	r23
    28c2:	67 95       	ror	r22
    28c4:	ba 95       	dec	r27
    28c6:	c9 f7       	brne	.-14     	; 0x28ba <__ultoa_invert+0x86>
    28c8:	00 97       	sbiw	r24, 0x00	; 0
    28ca:	61 05       	cpc	r22, r1
    28cc:	71 05       	cpc	r23, r1
    28ce:	08 95       	ret
    28d0:	9b 01       	movw	r18, r22
    28d2:	ac 01       	movw	r20, r24
    28d4:	0a 2e       	mov	r0, r26
    28d6:	06 94       	lsr	r0
    28d8:	57 95       	ror	r21
    28da:	47 95       	ror	r20
    28dc:	37 95       	ror	r19
    28de:	27 95       	ror	r18
    28e0:	ba 95       	dec	r27
    28e2:	c9 f7       	brne	.-14     	; 0x28d6 <__ultoa_invert+0xa2>
    28e4:	62 0f       	add	r22, r18
    28e6:	73 1f       	adc	r23, r19
    28e8:	84 1f       	adc	r24, r20
    28ea:	95 1f       	adc	r25, r21
    28ec:	a0 1d       	adc	r26, r0
    28ee:	08 95       	ret

000028f0 <__muluhisi3>:
    28f0:	0e 94 79 10 	call	0x20f2	; 0x20f2 <__umulhisi3>
    28f4:	a5 9f       	mul	r26, r21
    28f6:	90 0d       	add	r25, r0
    28f8:	b4 9f       	mul	r27, r20
    28fa:	90 0d       	add	r25, r0
    28fc:	a4 9f       	mul	r26, r20
    28fe:	80 0d       	add	r24, r0
    2900:	91 1d       	adc	r25, r1
    2902:	11 24       	eor	r1, r1
    2904:	08 95       	ret

00002906 <__mulshisi3>:
    2906:	b7 ff       	sbrs	r27, 7
    2908:	0c 94 78 14 	jmp	0x28f0	; 0x28f0 <__muluhisi3>

0000290c <__mulohisi3>:
    290c:	0e 94 78 14 	call	0x28f0	; 0x28f0 <__muluhisi3>
    2910:	82 1b       	sub	r24, r18
    2912:	93 0b       	sbc	r25, r19
    2914:	08 95       	ret

00002916 <__prologue_saves__>:
    2916:	2f 92       	push	r2
    2918:	3f 92       	push	r3
    291a:	4f 92       	push	r4
    291c:	5f 92       	push	r5
    291e:	6f 92       	push	r6
    2920:	7f 92       	push	r7
    2922:	8f 92       	push	r8
    2924:	9f 92       	push	r9
    2926:	af 92       	push	r10
    2928:	bf 92       	push	r11
    292a:	cf 92       	push	r12
    292c:	df 92       	push	r13
    292e:	ef 92       	push	r14
    2930:	ff 92       	push	r15
    2932:	0f 93       	push	r16
    2934:	1f 93       	push	r17
    2936:	cf 93       	push	r28
    2938:	df 93       	push	r29
    293a:	cd b7       	in	r28, 0x3d	; 61
    293c:	de b7       	in	r29, 0x3e	; 62
    293e:	ca 1b       	sub	r28, r26
    2940:	db 0b       	sbc	r29, r27
    2942:	0f b6       	in	r0, 0x3f	; 63
    2944:	f8 94       	cli
    2946:	de bf       	out	0x3e, r29	; 62
    2948:	0f be       	out	0x3f, r0	; 63
    294a:	cd bf       	out	0x3d, r28	; 61
    294c:	09 94       	ijmp

0000294e <__epilogue_restores__>:
    294e:	2a 88       	ldd	r2, Y+18	; 0x12
    2950:	39 88       	ldd	r3, Y+17	; 0x11
    2952:	48 88       	ldd	r4, Y+16	; 0x10
    2954:	5f 84       	ldd	r5, Y+15	; 0x0f
    2956:	6e 84       	ldd	r6, Y+14	; 0x0e
    2958:	7d 84       	ldd	r7, Y+13	; 0x0d
    295a:	8c 84       	ldd	r8, Y+12	; 0x0c
    295c:	9b 84       	ldd	r9, Y+11	; 0x0b
    295e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2960:	b9 84       	ldd	r11, Y+9	; 0x09
    2962:	c8 84       	ldd	r12, Y+8	; 0x08
    2964:	df 80       	ldd	r13, Y+7	; 0x07
    2966:	ee 80       	ldd	r14, Y+6	; 0x06
    2968:	fd 80       	ldd	r15, Y+5	; 0x05
    296a:	0c 81       	ldd	r16, Y+4	; 0x04
    296c:	1b 81       	ldd	r17, Y+3	; 0x03
    296e:	aa 81       	ldd	r26, Y+2	; 0x02
    2970:	b9 81       	ldd	r27, Y+1	; 0x01
    2972:	ce 0f       	add	r28, r30
    2974:	d1 1d       	adc	r29, r1
    2976:	0f b6       	in	r0, 0x3f	; 63
    2978:	f8 94       	cli
    297a:	de bf       	out	0x3e, r29	; 62
    297c:	0f be       	out	0x3f, r0	; 63
    297e:	cd bf       	out	0x3d, r28	; 61
    2980:	ed 01       	movw	r28, r26
    2982:	08 95       	ret

00002984 <_exit>:
    2984:	f8 94       	cli

00002986 <__stop_program>:
    2986:	ff cf       	rjmp	.-2      	; 0x2986 <__stop_program>
