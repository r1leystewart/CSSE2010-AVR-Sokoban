
AVRAssignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001fe  00800100  00002d04  00002d98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b9  008002fe  008002fe  00002f96  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002f96  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002ff4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003d0  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004224  00000000  00000000  00003404  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001785  00000000  00000000  00007628  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002705  00000000  00000000  00008dad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a8c  00000000  00000000  0000b4b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001072  00000000  00000000  0000bf40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002be3  00000000  00000000  0000cfb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f8  00000000  00000000  0000fb95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c2 01 	jmp	0x384	; 0x384 <__ctors_end>
       4:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
       8:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
       c:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      10:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      14:	0c 94 22 02 	jmp	0x444	; 0x444 <__vector_5>
      18:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      1c:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      20:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      24:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      28:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      2c:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      30:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      34:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      38:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      3c:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      40:	0c 94 b5 11 	jmp	0x236a	; 0x236a <__vector_16>
      44:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      48:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      4c:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      50:	0c 94 ae 0e 	jmp	0x1d5c	; 0x1d5c <__vector_20>
      54:	0c 94 6c 0e 	jmp	0x1cd8	; 0x1cd8 <__vector_21>
      58:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      5c:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      60:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      64:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      68:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      6c:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      70:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      74:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      78:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	43 61       	ori	r20, 0x13	; 19
      7e:	6e 6e       	ori	r22, 0xEE	; 238
      80:	6f 74       	andi	r22, 0x4F	; 79
      82:	20 6d       	ori	r18, 0xD0	; 208
      84:	6f 76       	andi	r22, 0x6F	; 111
      86:	65 20       	and	r6, r5
      88:	62 6f       	ori	r22, 0xF2	; 242
      8a:	78 65       	ori	r23, 0x58	; 88
      8c:	73 20       	and	r7, r3
      8e:	64 69       	ori	r22, 0x94	; 148
      90:	61 67       	ori	r22, 0x71	; 113
      92:	6f 6e       	ori	r22, 0xEF	; 239
      94:	61 6c       	ori	r22, 0xC1	; 193
      96:	6c 79       	andi	r22, 0x9C	; 156
	...

00000099 <__c.2528>:
      99:	44 69 61 67 6f 6e 61 6c 20 6d 6f 76 65 20 63 61     Diagonal move ca
      a9:	6e 6e 6f 74 20 62 65 20 6d 61 64 65 00              nnot be made.

000000b6 <__c.2526>:
      b6:	43 61 6e 6e 6f 74 20 73 74 61 63 6b 20 62 6f 78     Cannot stack box
      c6:	65 73 00                                            es.

000000c9 <__c.2524>:
      c9:	43 61 6e 6e 6f 74 20 70 75 73 68 20 62 6f 78 20     Cannot push box 
      d9:	6f 6e 74 6f 20 77 61 6c 6c 00                       onto wall.

000000e3 <__c.2522>:
      e3:	54 68 65 72 65 20 69 73 20 61 20 77 61 6c 6c 20     There is a wall 
      f3:	69 6e 20 74 68 65 20 77 61 79 00                    in the way.

000000fe <__c.2520>:
      fe:	57 61 6c 6c 20 68 69 74 00                          Wall hit.

00000107 <__c.2518>:
     107:	50 6c 61 79 65 72 20 68 69 74 20 61 20 77 61 6c     Player hit a wal
     117:	6c 00                                               l.

00000119 <__c.2679>:
     119:	6f 72 20 70 72 65 73 73 20 27 6e 27 2f 27 4e 27     or press 'n'/'N'
     129:	20 74 6f 20 70 72 6f 67 72 65 73 73 20 74 6f 20      to progress to 
     139:	6c 65 76 65 6c 20 32 00                             level 2.

00000141 <__c.2677>:
     141:	50 72 65 73 73 20 27 72 27 2f 27 52 27 20 74 6f     Press 'r'/'R' to
     151:	20 72 65 73 74 61 72 74 2c 20 27 65 27 2f 27 45      restart, 'e'/'E
     161:	27 20 74 6f 20 65 78 69 74 2c 00                    ' to exit,.

0000016c <__c.2675>:
     16c:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

00000176 <__c.2624>:
     176:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 50 72     CSSE2010/7201 Pr
     186:	6f 6a 65 63 74 20 62 79 20 52 69 6c 65 79 20 53     oject by Riley S
     196:	74 65 77 61 72 74 20 2d 20 34 38 38 32 38 36 36     tewart - 4882866
     1a6:	32 00                                               2.

000001a8 <title_data>:
     1a8:	60 38 1f 3f 3f 63 7e fe 60 bc b1 b1 61 66 c3 c0     `8.??c~.`...af..
     1b8:	60 b6 3f bf 61 7c c3 fe 60 b3 b1 b1 61 66 c3 06     `.?.a|..`...af..
     1c8:	e0 b1 31 3f 3f 63 7e fe                             ..1??c~.

000001d0 <anim_data>:
     1d0:	f0 f0 00 f0 f0 f0 f0 00 f0 00 00 f0 00 00 f0 00     ................
     1e0:	f0 00 00 f0 00 00 f0 00 f0 f0 f0 f0 00 f0 f0 00     ................
	...
     1f8:	f0 f0 f0 f0 f0 00 00 00 f0 00 00 00 f0 00 00 00     ................
     208:	f0 00 00 00 f0 00 00 00 f0 f0 f0 f0 f0 00 00 00     ................
	...
     220:	f0 f0 f0 f0 f0 f0 f0 00 00 00 00 f0 00 00 00 00     ................
     230:	00 00 f0 00 f0 00 00 00 f0 f0 00 00 00 f0 00 00     ................
	...
     248:	f0 f0 f0 f0 f0 00 00 00 f0 00 00 00 f0 00 00 00     ................
     258:	f0 00 00 00 f0 00 00 00 f0 f0 f0 f0 f0 00 00 00     ................
	...
     270:	f0 f0 f0 f0 f0 f0 f0 00 f0 00 00 f0 00 00 00 00     ................
     280:	f0 00 00 f0 00 00 00 00 f0 f0 f0 f0 00 00 00 00     ................
	...
     298:	f0 f0 f0 00 f0 00 00 00 f0 00 f0 00 f0 00 00 00     ................
     2a8:	f0 00 f0 00 f0 00 00 00 f0 f0 f0 f0 f0 00 00 00     ................
	...
     2c0:	f0 f0 f0 f0 f0 00 00 00 00 00 00 00 f0 00 00 00     ................
     2d0:	00 00 00 00 f0 00 00 00 f0 f0 f0 f0 f0 00 00 00     ................
	...
     2f0:	3c 3c 3c 3c 3c 3c 00 00 3c 3c 00 00 3c 3c 00 00     <<<<<<..<<..<<..
     300:	3c 00 3c 3c 00 3c 00 00 3c 00 3c 3c 00 3c 00 00     <.<<.<..<.<<.<..
     310:	3c 3c 00 00 3c 3c 00 00 3c 3c 3c 3c 3c 3c 00 00     <<..<<..<<<<<<..
     320:	00 00 00 10 00 10 00 00 10 00 00 10 00 10 00 00     ................
     330:	00 10 00 00 10 00 10 10 00 00 10 10 00 10 10 10     ................
     340:	00 10 00 00 00 00 10 10 10 00 00 00 00 00 00 00     ................
	...

00000360 <__c.2187>:
     360:	1b 5b 3f 32 35 6c 00                                .[?25l.

00000367 <__c.2182>:
     367:	1b 5b 25 64 6d 00                                   .[%dm.

0000036d <__c.2177>:
     36d:	1b 5b 4b 00                                         .[K.

00000371 <__c.2172>:
     371:	1b 5b 32 4a 00                                      .[2J.

00000376 <__c.2162>:
     376:	1b 5b 30 6d 00                                      .[0m.

0000037b <__c.2157>:
     37b:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

00000384 <__ctors_end>:
     384:	11 24       	eor	r1, r1
     386:	1f be       	out	0x3f, r1	; 63
     388:	cf ef       	ldi	r28, 0xFF	; 255
     38a:	d8 e0       	ldi	r29, 0x08	; 8
     38c:	de bf       	out	0x3e, r29	; 62
     38e:	cd bf       	out	0x3d, r28	; 61

00000390 <__do_copy_data>:
     390:	12 e0       	ldi	r17, 0x02	; 2
     392:	a0 e0       	ldi	r26, 0x00	; 0
     394:	b1 e0       	ldi	r27, 0x01	; 1
     396:	e4 e0       	ldi	r30, 0x04	; 4
     398:	fd e2       	ldi	r31, 0x2D	; 45
     39a:	02 c0       	rjmp	.+4      	; 0x3a0 <__do_copy_data+0x10>
     39c:	05 90       	lpm	r0, Z+
     39e:	0d 92       	st	X+, r0
     3a0:	ae 3f       	cpi	r26, 0xFE	; 254
     3a2:	b1 07       	cpc	r27, r17
     3a4:	d9 f7       	brne	.-10     	; 0x39c <__do_copy_data+0xc>

000003a6 <__do_clear_bss>:
     3a6:	24 e0       	ldi	r18, 0x04	; 4
     3a8:	ae ef       	ldi	r26, 0xFE	; 254
     3aa:	b2 e0       	ldi	r27, 0x02	; 2
     3ac:	01 c0       	rjmp	.+2      	; 0x3b0 <.do_clear_bss_start>

000003ae <.do_clear_bss_loop>:
     3ae:	1d 92       	st	X+, r1

000003b0 <.do_clear_bss_start>:
     3b0:	a7 3b       	cpi	r26, 0xB7	; 183
     3b2:	b2 07       	cpc	r27, r18
     3b4:	e1 f7       	brne	.-8      	; 0x3ae <.do_clear_bss_loop>
     3b6:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <main>
     3ba:	0c 94 80 16 	jmp	0x2d00	; 0x2d00 <_exit>

000003be <__bad_interrupt>:
     3be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003c2 <init_buttons>:
	// using a pin change interrupt. These pins correspond to pin
	// change interrupts PCINT8 to PCINT11 which are covered by
	// pin change interrupt 1.

	// Empty the button push queue and reset last state.
	queue_length = 0;
     3c2:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <__data_end>
	last_button_state = 0;
     3c6:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <last_button_state>

	// Enable the interrupt (see datasheet page 77).
	PCICR |= (1 << PCIE1);
     3ca:	e8 e6       	ldi	r30, 0x68	; 104
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	80 81       	ld	r24, Z
     3d0:	82 60       	ori	r24, 0x02	; 2
     3d2:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78).
	PCIFR |= (1 << PCIF1);
     3d4:	8b b3       	in	r24, 0x1b	; 27
     3d6:	82 60       	ori	r24, 0x02	; 2
     3d8:	8b bb       	out	0x1b, r24	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78).
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT10) |
     3da:	ec e6       	ldi	r30, 0x6C	; 108
     3dc:	f0 e0       	ldi	r31, 0x00	; 0
     3de:	80 81       	ld	r24, Z
     3e0:	8f 60       	ori	r24, 0x0F	; 15
     3e2:	80 83       	st	Z, r24
     3e4:	08 95       	ret

000003e6 <button_pushed>:

ButtonState button_pushed(void)
{
	ButtonState result = NO_BUTTON_PUSHED; // Default result.

	if (queue_length > 0)
     3e6:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <__data_end>
     3ea:	88 23       	and	r24, r24
     3ec:	f9 f0       	breq	.+62     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
	{
		// Remove the first element off the queue and move all the
		// other entries closer to the front of the queue. We turn off
		// interrupts (if on) before we make any changes to the queue.
		// If interrupts were on, we turn them back on when done.
		result = button_queue[0];
     3ee:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <button_queue>

		// Save whether interrupts were enabled and turn them off.
		bool interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     3f2:	5f b7       	in	r21, 0x3f	; 63
     3f4:	50 78       	andi	r21, 0x80	; 128
		cli();
     3f6:	f8 94       	cli
		
		for (uint8_t i = 1; i < queue_length; i++)
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	0b c0       	rjmp	.+22     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
		{
			button_queue[i - 1] = button_queue[i];
     3fc:	29 2f       	mov	r18, r25
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	f9 01       	movw	r30, r18
     402:	e1 50       	subi	r30, 0x01	; 1
     404:	fd 4f       	sbci	r31, 0xFD	; 253
     406:	40 81       	ld	r20, Z
     408:	f9 01       	movw	r30, r18
     40a:	e2 50       	subi	r30, 0x02	; 2
     40c:	fd 4f       	sbci	r31, 0xFD	; 253
     40e:	40 83       	st	Z, r20

		// Save whether interrupts were enabled and turn them off.
		bool interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for (uint8_t i = 1; i < queue_length; i++)
     410:	9f 5f       	subi	r25, 0xFF	; 255
     412:	20 91 fe 02 	lds	r18, 0x02FE	; 0x8002fe <__data_end>
     416:	92 17       	cp	r25, r18
     418:	88 f3       	brcs	.-30     	; 0x3fc <button_pushed+0x16>
		{
			button_queue[i - 1] = button_queue[i];
		}
		queue_length--;
     41a:	90 91 fe 02 	lds	r25, 0x02FE	; 0x8002fe <__data_end>
     41e:	91 50       	subi	r25, 0x01	; 1
     420:	90 93 fe 02 	sts	0x02FE, r25	; 0x8002fe <__data_end>

		if (interrupts_were_enabled)
     424:	55 23       	and	r21, r21
     426:	19 f0       	breq	.+6      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
		{
			// Turn them back on again.
			sei();
     428:	78 94       	sei
     42a:	08 95       	ret
		(1 << PCINT11);
}

ButtonState button_pushed(void)
{
	ButtonState result = NO_BUTTON_PUSHED; // Default result.
     42c:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again.
			sei();
		}
	}
	return result;
}
     42e:	08 95       	ret

00000430 <clear_button_presses>:

void clear_button_presses(void)
{
	// Save whether interrupts were enabled and turn them off.
	bool interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     430:	8f b7       	in	r24, 0x3f	; 63
	cli();
     432:	f8 94       	cli
	queue_length = 0;
     434:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <__data_end>
	last_button_state = 0;
     438:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <last_button_state>
	if (interrupts_were_enabled)
     43c:	88 23       	and	r24, r24
     43e:	0c f4       	brge	.+2      	; 0x442 <clear_button_presses+0x12>
	{
		// Turn them back on again.
		sei();
     440:	78 94       	sei
     442:	08 95       	ret

00000444 <__vector_5>:
	}
}

// Interrupt handler for a change on buttons.
ISR(PCINT1_vect)
{
     444:	1f 92       	push	r1
     446:	0f 92       	push	r0
     448:	0f b6       	in	r0, 0x3f	; 63
     44a:	0f 92       	push	r0
     44c:	11 24       	eor	r1, r1
     44e:	2f 93       	push	r18
     450:	3f 93       	push	r19
     452:	4f 93       	push	r20
     454:	8f 93       	push	r24
     456:	9f 93       	push	r25
     458:	ef 93       	push	r30
     45a:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     45c:	43 b1       	in	r20, 0x03	; 3
     45e:	4f 70       	andi	r20, 0x0F	; 15
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++)
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	24 c0       	rjmp	.+72     	; 0x4ac <__vector_5+0x68>
	{
		if (queue_length < BUTTON_QUEUE_SIZE
     464:	90 91 fe 02 	lds	r25, 0x02FE	; 0x8002fe <__data_end>
     468:	94 30       	cpi	r25, 0x04	; 4
     46a:	f8 f4       	brcc	.+62     	; 0x4aa <__vector_5+0x66>
				&& (button_state & (1 << pin))
     46c:	24 2f       	mov	r18, r20
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	08 2e       	mov	r0, r24
     472:	02 c0       	rjmp	.+4      	; 0x478 <__vector_5+0x34>
     474:	35 95       	asr	r19
     476:	27 95       	ror	r18
     478:	0a 94       	dec	r0
     47a:	e2 f7       	brpl	.-8      	; 0x474 <__vector_5+0x30>
     47c:	20 ff       	sbrs	r18, 0
     47e:	15 c0       	rjmp	.+42     	; 0x4aa <__vector_5+0x66>
				&& !(last_button_state & (1 << pin)))
     480:	20 91 03 03 	lds	r18, 0x0303	; 0x800303 <last_button_state>
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	08 2e       	mov	r0, r24
     488:	02 c0       	rjmp	.+4      	; 0x48e <__vector_5+0x4a>
     48a:	35 95       	asr	r19
     48c:	27 95       	ror	r18
     48e:	0a 94       	dec	r0
     490:	e2 f7       	brpl	.-8      	; 0x48a <__vector_5+0x46>
     492:	20 fd       	sbrc	r18, 0
     494:	0a c0       	rjmp	.+20     	; 0x4aa <__vector_5+0x66>
				{
			// Add the button push to the queue (and update the
			// length of the queue).
			button_queue[queue_length++] = pin;
     496:	e0 91 fe 02 	lds	r30, 0x02FE	; 0x8002fe <__data_end>
     49a:	91 e0       	ldi	r25, 0x01	; 1
     49c:	9e 0f       	add	r25, r30
     49e:	90 93 fe 02 	sts	0x02FE, r25	; 0x8002fe <__data_end>
     4a2:	f0 e0       	ldi	r31, 0x00	; 0
     4a4:	e1 50       	subi	r30, 0x01	; 1
     4a6:	fd 4f       	sbci	r31, 0xFD	; 253
     4a8:	80 83       	st	Z, r24
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++)
     4aa:	8f 5f       	subi	r24, 0xFF	; 255
     4ac:	84 30       	cpi	r24, 0x04	; 4
     4ae:	d0 f2       	brcs	.-76     	; 0x464 <__vector_5+0x20>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state.
	last_button_state = button_state;
     4b0:	40 93 03 03 	sts	0x0303, r20	; 0x800303 <last_button_state>
}
     4b4:	ff 91       	pop	r31
     4b6:	ef 91       	pop	r30
     4b8:	9f 91       	pop	r25
     4ba:	8f 91       	pop	r24
     4bc:	4f 91       	pop	r20
     4be:	3f 91       	pop	r19
     4c0:	2f 91       	pop	r18
     4c2:	0f 90       	pop	r0
     4c4:	0f be       	out	0x3f, r0	; 63
     4c6:	0f 90       	pop	r0
     4c8:	1f 90       	pop	r1
     4ca:	18 95       	reti

000004cc <freq_to_clock_period>:

// Return the width of a pulse (in clock cycles) given a duty cycle (%) and
// the period of the clock (measured in clock cycles)
uint16_t duty_cycle_to_pulse_width(float dutycycle, uint16_t clockperiod) {
	return (dutycycle * clockperiod) / 100;
}
     4cc:	9c 01       	movw	r18, r24
     4ce:	40 e0       	ldi	r20, 0x00	; 0
     4d0:	50 e0       	ldi	r21, 0x00	; 0
     4d2:	60 e4       	ldi	r22, 0x40	; 64
     4d4:	72 e4       	ldi	r23, 0x42	; 66
     4d6:	8f e0       	ldi	r24, 0x0F	; 15
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__udivmodsi4>
     4de:	c9 01       	movw	r24, r18
     4e0:	08 95       	ret

000004e2 <init_buzzer>:
	// Make pin OC2B be an output
	//DDRD = (1 << 6);
	//Done by project.c

	// Set the maximum count value for timer/counter 2 to be one less than the clockperiod
	OCR2A = 0;
     4e2:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>

	// Set up timer/counter 2 for Fast PWM, counting from 0 to the value in OCR2A
	// before reseting to 0. Count at 1MHz (CLK/8).
	// Configure output OC2B to be clear on compare match and set on timer/counter
	// overflow (non-inverting mode).
	TCCR2A = (1 << COM2A1) | (1 << COM2B1) | (1 << WGM21) | (1 << WGM20);
     4e6:	83 ea       	ldi	r24, 0xA3	; 163
     4e8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (1 << WGM22) | (1 << CS21);
     4ec:	8a e0       	ldi	r24, 0x0A	; 10
     4ee:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     4f2:	08 95       	ret

000004f4 <play_move_sound>:
}

void play_move_sound(bool enabled) {
	if (enabled) {
     4f4:	88 23       	and	r24, r24
     4f6:	89 f0       	breq	.+34     	; 0x51a <play_move_sound+0x26>
		OCR2A = freq_to_clock_period(2000);
     4f8:	80 ed       	ldi	r24, 0xD0	; 208
     4fa:	97 e0       	ldi	r25, 0x07	; 7
     4fc:	0e 94 66 02 	call	0x4cc	; 0x4cc <freq_to_clock_period>
     500:	e3 eb       	ldi	r30, 0xB3	; 179
     502:	f0 e0       	ldi	r31, 0x00	; 0
     504:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     506:	2f ef       	ldi	r18, 0xFF	; 255
     508:	83 ef       	ldi	r24, 0xF3	; 243
     50a:	91 e0       	ldi	r25, 0x01	; 1
     50c:	21 50       	subi	r18, 0x01	; 1
     50e:	80 40       	sbci	r24, 0x00	; 0
     510:	90 40       	sbci	r25, 0x00	; 0
     512:	e1 f7       	brne	.-8      	; 0x50c <play_move_sound+0x18>
     514:	00 c0       	rjmp	.+0      	; 0x516 <play_move_sound+0x22>
     516:	00 00       	nop
		_delay_ms(80);
		OCR2A = 0;
     518:	10 82       	st	Z, r1
     51a:	08 95       	ret

0000051c <play_start_sound>:
	}
}

void play_start_sound(bool enabled) {
     51c:	cf 93       	push	r28
     51e:	df 93       	push	r29
	if (enabled) {
     520:	88 23       	and	r24, r24
     522:	f9 f0       	breq	.+62     	; 0x562 <play_start_sound+0x46>
		OCR2A = freq_to_clock_period(2000);
     524:	80 ed       	ldi	r24, 0xD0	; 208
     526:	97 e0       	ldi	r25, 0x07	; 7
     528:	0e 94 66 02 	call	0x4cc	; 0x4cc <freq_to_clock_period>
     52c:	c3 eb       	ldi	r28, 0xB3	; 179
     52e:	d0 e0       	ldi	r29, 0x00	; 0
     530:	88 83       	st	Y, r24
     532:	2f ef       	ldi	r18, 0xFF	; 255
     534:	82 e5       	ldi	r24, 0x52	; 82
     536:	97 e0       	ldi	r25, 0x07	; 7
     538:	21 50       	subi	r18, 0x01	; 1
     53a:	80 40       	sbci	r24, 0x00	; 0
     53c:	90 40       	sbci	r25, 0x00	; 0
     53e:	e1 f7       	brne	.-8      	; 0x538 <play_start_sound+0x1c>
     540:	00 c0       	rjmp	.+0      	; 0x542 <play_start_sound+0x26>
     542:	00 00       	nop
		_delay_ms(300);
		OCR2A = freq_to_clock_period(400);
     544:	80 e9       	ldi	r24, 0x90	; 144
     546:	91 e0       	ldi	r25, 0x01	; 1
     548:	0e 94 66 02 	call	0x4cc	; 0x4cc <freq_to_clock_period>
     54c:	88 83       	st	Y, r24
     54e:	2f ef       	ldi	r18, 0xFF	; 255
     550:	82 e5       	ldi	r24, 0x52	; 82
     552:	97 e0       	ldi	r25, 0x07	; 7
     554:	21 50       	subi	r18, 0x01	; 1
     556:	80 40       	sbci	r24, 0x00	; 0
     558:	90 40       	sbci	r25, 0x00	; 0
     55a:	e1 f7       	brne	.-8      	; 0x554 <play_start_sound+0x38>
     55c:	00 c0       	rjmp	.+0      	; 0x55e <play_start_sound+0x42>
     55e:	00 00       	nop
		_delay_ms(300);
		OCR2A = 0;
     560:	18 82       	st	Y, r1
	}
}
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	08 95       	ret

00000568 <play_victory_sound>:

void play_victory_sound(bool enabled) {
     568:	1f 93       	push	r17
     56a:	cf 93       	push	r28
     56c:	df 93       	push	r29
	if (enabled) {
     56e:	88 23       	and	r24, r24
     570:	c1 f1       	breq	.+112    	; 0x5e2 <play_victory_sound+0x7a>
		OCR2A = freq_to_clock_period(2000);
     572:	80 ed       	ldi	r24, 0xD0	; 208
     574:	97 e0       	ldi	r25, 0x07	; 7
     576:	0e 94 66 02 	call	0x4cc	; 0x4cc <freq_to_clock_period>
     57a:	18 2f       	mov	r17, r24
     57c:	c3 eb       	ldi	r28, 0xB3	; 179
     57e:	d0 e0       	ldi	r29, 0x00	; 0
     580:	88 83       	st	Y, r24
     582:	2f ef       	ldi	r18, 0xFF	; 255
     584:	82 e5       	ldi	r24, 0x52	; 82
     586:	97 e0       	ldi	r25, 0x07	; 7
     588:	21 50       	subi	r18, 0x01	; 1
     58a:	80 40       	sbci	r24, 0x00	; 0
     58c:	90 40       	sbci	r25, 0x00	; 0
     58e:	e1 f7       	brne	.-8      	; 0x588 <play_victory_sound+0x20>
     590:	00 c0       	rjmp	.+0      	; 0x592 <play_victory_sound+0x2a>
     592:	00 00       	nop
		_delay_ms(300);
		OCR2A = freq_to_clock_period(5000);
     594:	88 e8       	ldi	r24, 0x88	; 136
     596:	93 e1       	ldi	r25, 0x13	; 19
     598:	0e 94 66 02 	call	0x4cc	; 0x4cc <freq_to_clock_period>
     59c:	88 83       	st	Y, r24
     59e:	2f ef       	ldi	r18, 0xFF	; 255
     5a0:	82 e5       	ldi	r24, 0x52	; 82
     5a2:	97 e0       	ldi	r25, 0x07	; 7
     5a4:	21 50       	subi	r18, 0x01	; 1
     5a6:	80 40       	sbci	r24, 0x00	; 0
     5a8:	90 40       	sbci	r25, 0x00	; 0
     5aa:	e1 f7       	brne	.-8      	; 0x5a4 <play_victory_sound+0x3c>
     5ac:	00 c0       	rjmp	.+0      	; 0x5ae <play_victory_sound+0x46>
     5ae:	00 00       	nop
		_delay_ms(300);
		OCR2A = freq_to_clock_period(2000);
     5b0:	18 83       	st	Y, r17
     5b2:	2f ef       	ldi	r18, 0xFF	; 255
     5b4:	82 e5       	ldi	r24, 0x52	; 82
     5b6:	97 e0       	ldi	r25, 0x07	; 7
     5b8:	21 50       	subi	r18, 0x01	; 1
     5ba:	80 40       	sbci	r24, 0x00	; 0
     5bc:	90 40       	sbci	r25, 0x00	; 0
     5be:	e1 f7       	brne	.-8      	; 0x5b8 <play_victory_sound+0x50>
     5c0:	00 c0       	rjmp	.+0      	; 0x5c2 <play_victory_sound+0x5a>
     5c2:	00 00       	nop
		_delay_ms(300);
		OCR2A = freq_to_clock_period(2500);
     5c4:	84 ec       	ldi	r24, 0xC4	; 196
     5c6:	99 e0       	ldi	r25, 0x09	; 9
     5c8:	0e 94 66 02 	call	0x4cc	; 0x4cc <freq_to_clock_period>
     5cc:	88 83       	st	Y, r24
     5ce:	2f ef       	ldi	r18, 0xFF	; 255
     5d0:	82 e5       	ldi	r24, 0x52	; 82
     5d2:	97 e0       	ldi	r25, 0x07	; 7
     5d4:	21 50       	subi	r18, 0x01	; 1
     5d6:	80 40       	sbci	r24, 0x00	; 0
     5d8:	90 40       	sbci	r25, 0x00	; 0
     5da:	e1 f7       	brne	.-8      	; 0x5d4 <play_victory_sound+0x6c>
     5dc:	00 c0       	rjmp	.+0      	; 0x5de <play_victory_sound+0x76>
     5de:	00 00       	nop
		_delay_ms(300);
		OCR2A = 0;
     5e0:	18 82       	st	Y, r1
	}
     5e2:	df 91       	pop	r29
     5e4:	cf 91       	pop	r28
     5e6:	1f 91       	pop	r17
     5e8:	08 95       	ret

000005ea <paint_square>:
// ========================== GAME LOGIC FUNCTIONS ===========================

// This function paints a square based on the object(s) currently on it.
static void paint_square(uint8_t row, uint8_t col)
{
	switch (board[row][col] & OBJECT_MASK)
     5ea:	90 e1       	ldi	r25, 0x10	; 16
     5ec:	89 9f       	mul	r24, r25
     5ee:	f0 01       	movw	r30, r0
     5f0:	11 24       	eor	r1, r1
     5f2:	e8 5f       	subi	r30, 0xF8	; 248
     5f4:	fc 4f       	sbci	r31, 0xFC	; 252
     5f6:	e6 0f       	add	r30, r22
     5f8:	f1 1d       	adc	r31, r1
     5fa:	90 81       	ld	r25, Z
     5fc:	97 70       	andi	r25, 0x07	; 7
     5fe:	92 30       	cpi	r25, 0x02	; 2
     600:	99 f0       	breq	.+38     	; 0x628 <paint_square+0x3e>
     602:	28 f4       	brcc	.+10     	; 0x60e <paint_square+0x24>
     604:	99 23       	and	r25, r25
     606:	41 f0       	breq	.+16     	; 0x618 <paint_square+0x2e>
     608:	91 30       	cpi	r25, 0x01	; 1
     60a:	51 f0       	breq	.+20     	; 0x620 <paint_square+0x36>
     60c:	08 95       	ret
     60e:	94 30       	cpi	r25, 0x04	; 4
     610:	79 f0       	breq	.+30     	; 0x630 <paint_square+0x46>
     612:	96 30       	cpi	r25, 0x06	; 6
     614:	89 f0       	breq	.+34     	; 0x638 <paint_square+0x4e>
     616:	08 95       	ret
	{
		case ROOM:
			ledmatrix_update_pixel(row, col, COLOUR_BLACK);
     618:	40 e0       	ldi	r20, 0x00	; 0
     61a:	0e 94 3e 09 	call	0x127c	; 0x127c <ledmatrix_update_pixel>
			break;
     61e:	08 95       	ret
		case WALL:
			ledmatrix_update_pixel(row, col, COLOUR_WALL);
     620:	4f ef       	ldi	r20, 0xFF	; 255
     622:	0e 94 3e 09 	call	0x127c	; 0x127c <ledmatrix_update_pixel>
			break;
     626:	08 95       	ret
		case BOX:
			ledmatrix_update_pixel(row, col, COLOUR_BOX);
     628:	4c e3       	ldi	r20, 0x3C	; 60
     62a:	0e 94 3e 09 	call	0x127c	; 0x127c <ledmatrix_update_pixel>
			break;
     62e:	08 95       	ret
		case TARGET:
			ledmatrix_update_pixel(row, col, COLOUR_TARGET);
     630:	4f e0       	ldi	r20, 0x0F	; 15
     632:	0e 94 3e 09 	call	0x127c	; 0x127c <ledmatrix_update_pixel>
			break;
     636:	08 95       	ret
		case BOX | TARGET:
			ledmatrix_update_pixel(row, col, COLOUR_DONE);
     638:	40 ef       	ldi	r20, 0xF0	; 240
     63a:	0e 94 3e 09 	call	0x127c	; 0x127c <ledmatrix_update_pixel>
     63e:	08 95       	ret

00000640 <initialise_level>:
		default:
			break;
	}
}

void initialise_level(int level) {
     640:	cf 93       	push	r28
     642:	df 93       	push	r29
     644:	cd b7       	in	r28, 0x3d	; 61
     646:	de b7       	in	r29, 0x3e	; 62
     648:	da 95       	dec	r29
     64a:	0f b6       	in	r0, 0x3f	; 63
     64c:	f8 94       	cli
     64e:	de bf       	out	0x3e, r29	; 62
     650:	0f be       	out	0x3f, r0	; 63
     652:	cd bf       	out	0x3d, r28	; 61
	// identical to how the pixels are oriented on the LED matrix, however
	// the LED matrix treats row 0 as the bottom row and row 7 as the top
	// row.
	
	uint8_t level_layout[MATRIX_NUM_ROWS][MATRIX_NUM_COLUMNS];
	switch (level) {
     654:	81 30       	cpi	r24, 0x01	; 1
     656:	91 05       	cpc	r25, r1
     658:	19 f0       	breq	.+6      	; 0x660 <initialise_level+0x20>
     65a:	02 97       	sbiw	r24, 0x02	; 2
     65c:	e1 f0       	breq	.+56     	; 0x696 <initialise_level+0x56>
     65e:	35 c0       	rjmp	.+106    	; 0x6ca <initialise_level+0x8a>
			case 1:
			{
			uint8_t temp_layout[MATRIX_NUM_ROWS][MATRIX_NUM_COLUMNS] = {
     660:	80 e8       	ldi	r24, 0x80	; 128
     662:	e8 e6       	ldi	r30, 0x68	; 104
     664:	f1 e0       	ldi	r31, 0x01	; 1
     666:	de 01       	movw	r26, r28
     668:	af 57       	subi	r26, 0x7F	; 127
     66a:	bf 4f       	sbci	r27, 0xFF	; 255
     66c:	01 90       	ld	r0, Z+
     66e:	0d 92       	st	X+, r0
     670:	8a 95       	dec	r24
     672:	e1 f7       	brne	.-8      	; 0x66c <initialise_level+0x2c>
				{ W, _, _, _, W, _, B, _, _, _, _, _, _, _, _, _ },
				{ _, _, _, _, _, _, T, _, _, _, _, _, _, _, _, _ },
				{ _, _, _, W, W, W, W, W, W, T, _, _, _, _, _, W },
				{ W, W, _, _, _, _, _, _, W, W, _, _, W, W, W, W }
			};
			memcpy(level_layout, temp_layout, sizeof(level_layout));
     674:	80 e8       	ldi	r24, 0x80	; 128
     676:	fe 01       	movw	r30, r28
     678:	ef 57       	subi	r30, 0x7F	; 127
     67a:	ff 4f       	sbci	r31, 0xFF	; 255
     67c:	de 01       	movw	r26, r28
     67e:	11 96       	adiw	r26, 0x01	; 1
     680:	01 90       	ld	r0, Z+
     682:	0d 92       	st	X+, r0
     684:	8a 95       	dec	r24
     686:	e1 f7       	brne	.-8      	; 0x680 <initialise_level+0x40>
			player_row = 5;
     688:	85 e0       	ldi	r24, 0x05	; 5
     68a:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <player_row>
			player_col = 2;
     68e:	82 e0       	ldi	r24, 0x02	; 2
     690:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <player_col>
			}
			break;
     694:	1a c0       	rjmp	.+52     	; 0x6ca <initialise_level+0x8a>
		case 2:
			{
			uint8_t temp_layout[MATRIX_NUM_ROWS][MATRIX_NUM_COLUMNS] = {
     696:	80 e8       	ldi	r24, 0x80	; 128
     698:	e8 ee       	ldi	r30, 0xE8	; 232
     69a:	f1 e0       	ldi	r31, 0x01	; 1
     69c:	de 01       	movw	r26, r28
     69e:	af 57       	subi	r26, 0x7F	; 127
     6a0:	bf 4f       	sbci	r27, 0xFF	; 255
     6a2:	01 90       	ld	r0, Z+
     6a4:	0d 92       	st	X+, r0
     6a6:	8a 95       	dec	r24
     6a8:	e1 f7       	brne	.-8      	; 0x6a2 <initialise_level+0x62>
				{W, W, W, W, _, W, _, _, _, _, _, W, _, W, W, _ },
				{W, T, B, _, _, _, _, B, _, _, _, W, W, _, W, W },
				{W, _, _, _, T, _, _, _, _, _, _, B, T, _, _, _ },
				{W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W }
			};
			memcpy(level_layout, temp_layout, sizeof(level_layout));
     6aa:	80 e8       	ldi	r24, 0x80	; 128
     6ac:	fe 01       	movw	r30, r28
     6ae:	ef 57       	subi	r30, 0x7F	; 127
     6b0:	ff 4f       	sbci	r31, 0xFF	; 255
     6b2:	de 01       	movw	r26, r28
     6b4:	11 96       	adiw	r26, 0x01	; 1
     6b6:	01 90       	ld	r0, Z+
     6b8:	0d 92       	st	X+, r0
     6ba:	8a 95       	dec	r24
     6bc:	e1 f7       	brne	.-8      	; 0x6b6 <initialise_level+0x76>
			player_row = 6;
     6be:	86 e0       	ldi	r24, 0x06	; 6
     6c0:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <player_row>
			player_col = 15;
     6c4:	8f e0       	ldi	r24, 0x0F	; 15
     6c6:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <player_col>
     6ca:	a0 e0       	ldi	r26, 0x00	; 0
     6cc:	2b c0       	rjmp	.+86     	; 0x724 <initialise_level+0xe4>
	// all the rows.
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
	{
		for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
		{
			board[MATRIX_NUM_ROWS - 1 - row][col] =
     6ce:	8a 2f       	mov	r24, r26
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	27 e0       	ldi	r18, 0x07	; 7
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	28 1b       	sub	r18, r24
     6d8:	39 0b       	sbc	r19, r25
			level_layout[row][col];
     6da:	46 2f       	mov	r20, r22
     6dc:	50 e0       	ldi	r21, 0x00	; 0
     6de:	fc 01       	movw	r30, r24
     6e0:	e2 95       	swap	r30
     6e2:	f2 95       	swap	r31
     6e4:	f0 7f       	andi	r31, 0xF0	; 240
     6e6:	fe 27       	eor	r31, r30
     6e8:	e0 7f       	andi	r30, 0xF0	; 240
     6ea:	fe 27       	eor	r31, r30
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	8c 0f       	add	r24, r28
     6f2:	9d 1f       	adc	r25, r29
     6f4:	e8 0f       	add	r30, r24
     6f6:	f9 1f       	adc	r31, r25
     6f8:	e4 0f       	add	r30, r20
     6fa:	f5 1f       	adc	r31, r21
     6fc:	70 81       	ld	r23, Z
	// all the rows.
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
	{
		for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
		{
			board[MATRIX_NUM_ROWS - 1 - row][col] =
     6fe:	c9 01       	movw	r24, r18
     700:	82 95       	swap	r24
     702:	92 95       	swap	r25
     704:	90 7f       	andi	r25, 0xF0	; 240
     706:	98 27       	eor	r25, r24
     708:	80 7f       	andi	r24, 0xF0	; 240
     70a:	98 27       	eor	r25, r24
     70c:	88 5f       	subi	r24, 0xF8	; 248
     70e:	9c 4f       	sbci	r25, 0xFC	; 252
     710:	fc 01       	movw	r30, r24
     712:	e4 0f       	add	r30, r20
     714:	f5 1f       	adc	r31, r21
     716:	70 83       	st	Z, r23
	
	// Copy the starting layout (level map) to the board array, and flip
	// all the rows.
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
	{
		for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
     718:	6f 5f       	subi	r22, 0xFF	; 255
     71a:	01 c0       	rjmp	.+2      	; 0x71e <initialise_level+0xde>
     71c:	60 e0       	ldi	r22, 0x00	; 0
     71e:	60 31       	cpi	r22, 0x10	; 16
     720:	b0 f2       	brcs	.-84     	; 0x6ce <initialise_level+0x8e>
	#undef T
	#undef B
	
	// Copy the starting layout (level map) to the board array, and flip
	// all the rows.
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     722:	af 5f       	subi	r26, 0xFF	; 255
     724:	a8 30       	cpi	r26, 0x08	; 8
     726:	d0 f3       	brcs	.-12     	; 0x71c <initialise_level+0xdc>
		{
			board[MATRIX_NUM_ROWS - 1 - row][col] =
			level_layout[row][col];
		}
	}
}
     728:	d3 95       	inc	r29
     72a:	0f b6       	in	r0, 0x3f	; 63
     72c:	f8 94       	cli
     72e:	de bf       	out	0x3e, r29	; 62
     730:	0f be       	out	0x3f, r0	; 63
     732:	cd bf       	out	0x3d, r28	; 61
     734:	df 91       	pop	r29
     736:	cf 91       	pop	r28
     738:	08 95       	ret

0000073a <flash_player>:
// currently not visible, it is set to visible and rendered on the display.
// The static global variable "player_visible" indicates whether the player
// icon is currently visible.
void flash_player(void)
{
	player_visible = !player_visible;
     73a:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <player_visible>
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	89 27       	eor	r24, r25
     742:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <player_visible>
	if (player_visible)
     746:	88 23       	and	r24, r24
     748:	41 f0       	breq	.+16     	; 0x75a <flash_player+0x20>
	{
		// The player is visible, paint it with COLOUR_PLAYER.
		ledmatrix_update_pixel(player_row, player_col, COLOUR_PLAYER);
     74a:	40 e1       	ldi	r20, 0x10	; 16
     74c:	60 91 06 03 	lds	r22, 0x0306	; 0x800306 <player_col>
     750:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <player_row>
     754:	0e 94 3e 09 	call	0x127c	; 0x127c <ledmatrix_update_pixel>
     758:	08 95       	ret
	}
	else
	{
		// The player is not visible, paint the underlying square.
		paint_square(player_row, player_col);
     75a:	60 91 06 03 	lds	r22, 0x0306	; 0x800306 <player_col>
     75e:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <player_row>
     762:	0e 94 f5 02 	call	0x5ea	; 0x5ea <paint_square>
     766:	08 95       	ret

00000768 <flash_targets>:
	}
}

void flash_targets(void) {
     768:	0f 93       	push	r16
     76a:	1f 93       	push	r17
     76c:	cf 93       	push	r28
     76e:	df 93       	push	r29
	targets_visible = !targets_visible;
     770:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <targets_visible>
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	89 27       	eor	r24, r25
     778:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <targets_visible>
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
     77c:	00 e0       	ldi	r16, 0x00	; 0
     77e:	10 e0       	ldi	r17, 0x00	; 0
     780:	26 c0       	rjmp	.+76     	; 0x7ce <flash_targets+0x66>
		for (int col = 0; col < MATRIX_NUM_COLUMNS; col++) {
			if (board[row][col] == TARGET) {
     782:	f8 01       	movw	r30, r16
     784:	e2 95       	swap	r30
     786:	f2 95       	swap	r31
     788:	f0 7f       	andi	r31, 0xF0	; 240
     78a:	fe 27       	eor	r31, r30
     78c:	e0 7f       	andi	r30, 0xF0	; 240
     78e:	fe 27       	eor	r31, r30
     790:	e8 5f       	subi	r30, 0xF8	; 248
     792:	fc 4f       	sbci	r31, 0xFC	; 252
     794:	ec 0f       	add	r30, r28
     796:	fd 1f       	adc	r31, r29
     798:	80 81       	ld	r24, Z
     79a:	84 30       	cpi	r24, 0x04	; 4
     79c:	79 f4       	brne	.+30     	; 0x7bc <flash_targets+0x54>
				if (targets_visible) {
     79e:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <targets_visible>
     7a2:	88 23       	and	r24, r24
     7a4:	31 f0       	breq	.+12     	; 0x7b2 <flash_targets+0x4a>
					ledmatrix_update_pixel(row, col, COLOUR_TARGET);
     7a6:	4f e0       	ldi	r20, 0x0F	; 15
     7a8:	6c 2f       	mov	r22, r28
     7aa:	80 2f       	mov	r24, r16
     7ac:	0e 94 3e 09 	call	0x127c	; 0x127c <ledmatrix_update_pixel>
     7b0:	05 c0       	rjmp	.+10     	; 0x7bc <flash_targets+0x54>
				} else {
					ledmatrix_update_pixel(row, col, COLOUR_BLACK);
     7b2:	40 e0       	ldi	r20, 0x00	; 0
     7b4:	6c 2f       	mov	r22, r28
     7b6:	80 2f       	mov	r24, r16
     7b8:	0e 94 3e 09 	call	0x127c	; 0x127c <ledmatrix_update_pixel>
}

void flash_targets(void) {
	targets_visible = !targets_visible;
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
		for (int col = 0; col < MATRIX_NUM_COLUMNS; col++) {
     7bc:	21 96       	adiw	r28, 0x01	; 1
     7be:	02 c0       	rjmp	.+4      	; 0x7c4 <flash_targets+0x5c>
     7c0:	c0 e0       	ldi	r28, 0x00	; 0
     7c2:	d0 e0       	ldi	r29, 0x00	; 0
     7c4:	c0 31       	cpi	r28, 0x10	; 16
     7c6:	d1 05       	cpc	r29, r1
     7c8:	e4 f2       	brlt	.-72     	; 0x782 <flash_targets+0x1a>
	}
}

void flash_targets(void) {
	targets_visible = !targets_visible;
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
     7ca:	0f 5f       	subi	r16, 0xFF	; 255
     7cc:	1f 4f       	sbci	r17, 0xFF	; 255
     7ce:	08 30       	cpi	r16, 0x08	; 8
     7d0:	11 05       	cpc	r17, r1
     7d2:	b4 f3       	brlt	.-20     	; 0x7c0 <flash_targets+0x58>
					ledmatrix_update_pixel(row, col, COLOUR_BLACK);
				}
			}
		}
	}
}
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	1f 91       	pop	r17
     7da:	0f 91       	pop	r16
     7dc:	08 95       	ret

000007de <add_to_move_list>:
		}
	}
	return true;
}

void add_to_move_list(uint8_t row, uint8_t col) {
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
	if (list_top < 5) {
     7e2:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <list_top>
     7e6:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <list_top+0x1>
     7ea:	25 30       	cpi	r18, 0x05	; 5
     7ec:	31 05       	cpc	r19, r1
     7ee:	94 f5       	brge	.+100    	; 0x854 <__DATA_REGION_LENGTH__+0x54>
		list_top++;
     7f0:	2f 5f       	subi	r18, 0xFF	; 255
     7f2:	3f 4f       	sbci	r19, 0xFF	; 255
     7f4:	30 93 37 01 	sts	0x0137, r19	; 0x800137 <list_top+0x1>
     7f8:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <list_top>
		move_list[list_top][0] = row;
     7fc:	22 0f       	add	r18, r18
     7fe:	33 1f       	adc	r19, r19
     800:	22 0f       	add	r18, r18
     802:	33 1f       	adc	r19, r19
     804:	f9 01       	movw	r30, r18
     806:	e8 5c       	subi	r30, 0xC8	; 200
     808:	fe 4f       	sbci	r31, 0xFE	; 254
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	91 83       	std	Z+1, r25	; 0x01
     80e:	80 83       	st	Z, r24
		move_list[list_top][1] = col;
     810:	70 e0       	ldi	r23, 0x00	; 0
     812:	73 83       	std	Z+3, r23	; 0x03
     814:	62 83       	std	Z+2, r22	; 0x02
     816:	2b c0       	rjmp	.+86     	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
	} else {
		for (int i = 0; i < 5; i++) {
			move_list[i][0] = move_list[i+1][0];
     818:	a9 01       	movw	r20, r18
     81a:	4f 5f       	subi	r20, 0xFF	; 255
     81c:	5f 4f       	sbci	r21, 0xFF	; 255
     81e:	da 01       	movw	r26, r20
     820:	aa 0f       	add	r26, r26
     822:	bb 1f       	adc	r27, r27
     824:	aa 0f       	add	r26, r26
     826:	bb 1f       	adc	r27, r27
     828:	a8 5c       	subi	r26, 0xC8	; 200
     82a:	be 4f       	sbci	r27, 0xFE	; 254
     82c:	cd 91       	ld	r28, X+
     82e:	dc 91       	ld	r29, X
     830:	11 97       	sbiw	r26, 0x01	; 1
     832:	22 0f       	add	r18, r18
     834:	33 1f       	adc	r19, r19
     836:	22 0f       	add	r18, r18
     838:	33 1f       	adc	r19, r19
     83a:	f9 01       	movw	r30, r18
     83c:	e8 5c       	subi	r30, 0xC8	; 200
     83e:	fe 4f       	sbci	r31, 0xFE	; 254
     840:	d1 83       	std	Z+1, r29	; 0x01
     842:	c0 83       	st	Z, r28
			move_list[i][1] = move_list[i+1][1];
     844:	12 96       	adiw	r26, 0x02	; 2
     846:	2d 91       	ld	r18, X+
     848:	3c 91       	ld	r19, X
     84a:	13 97       	sbiw	r26, 0x03	; 3
     84c:	33 83       	std	Z+3, r19	; 0x03
     84e:	22 83       	std	Z+2, r18	; 0x02
	if (list_top < 5) {
		list_top++;
		move_list[list_top][0] = row;
		move_list[list_top][1] = col;
	} else {
		for (int i = 0; i < 5; i++) {
     850:	9a 01       	movw	r18, r20
     852:	02 c0       	rjmp	.+4      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
     854:	20 e0       	ldi	r18, 0x00	; 0
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	25 30       	cpi	r18, 0x05	; 5
     85a:	31 05       	cpc	r19, r1
     85c:	ec f2       	brlt	.-70     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
			move_list[i][0] = move_list[i+1][0];
			move_list[i][1] = move_list[i+1][1];
		}
		move_list[5][0] = row;
     85e:	e8 e3       	ldi	r30, 0x38	; 56
     860:	f1 e0       	ldi	r31, 0x01	; 1
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	95 8b       	std	Z+21, r25	; 0x15
     866:	84 8b       	std	Z+20, r24	; 0x14
		move_list[5][1] = col;
     868:	70 e0       	ldi	r23, 0x00	; 0
     86a:	77 8b       	std	Z+23, r23	; 0x17
     86c:	66 8b       	std	Z+22, r22	; 0x16
	}
}
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	08 95       	ret

00000874 <add_previous_box_location>:

void add_previous_box_location(uint8_t row, uint8_t col, uint8_t current_row, uint8_t current_col) {
     874:	0f 93       	push	r16
     876:	1f 93       	push	r17
     878:	cf 93       	push	r28
     87a:	df 93       	push	r29
	if (box_list_top < 5) {
     87c:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <box_list_top>
     880:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <box_list_top+0x1>
     884:	e5 30       	cpi	r30, 0x05	; 5
     886:	f1 05       	cpc	r31, r1
     888:	0c f0       	brlt	.+2      	; 0x88c <add_previous_box_location+0x18>
     88a:	45 c0       	rjmp	.+138    	; 0x916 <__stack+0x17>
		box_list_top++;
     88c:	31 96       	adiw	r30, 0x01	; 1
     88e:	f0 93 05 01 	sts	0x0105, r31	; 0x800105 <box_list_top+0x1>
     892:	e0 93 04 01 	sts	0x0104, r30	; 0x800104 <box_list_top>
		box_list[box_list_top][0] = row;
     896:	ee 0f       	add	r30, r30
     898:	ff 1f       	adc	r31, r31
     89a:	ee 0f       	add	r30, r30
     89c:	ff 1f       	adc	r31, r31
     89e:	ee 0f       	add	r30, r30
     8a0:	ff 1f       	adc	r31, r31
     8a2:	ea 5f       	subi	r30, 0xFA	; 250
     8a4:	fe 4f       	sbci	r31, 0xFE	; 254
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	91 83       	std	Z+1, r25	; 0x01
     8aa:	80 83       	st	Z, r24
		box_list[box_list_top][1] = col;
     8ac:	70 e0       	ldi	r23, 0x00	; 0
     8ae:	73 83       	std	Z+3, r23	; 0x03
     8b0:	62 83       	std	Z+2, r22	; 0x02
		box_list[box_list_top][2] = current_row;
     8b2:	50 e0       	ldi	r21, 0x00	; 0
     8b4:	55 83       	std	Z+5, r21	; 0x05
     8b6:	44 83       	std	Z+4, r20	; 0x04
		box_list[box_list_top][3] = current_row;
     8b8:	57 83       	std	Z+7, r21	; 0x07
     8ba:	46 83       	std	Z+6, r20	; 0x06
     8bc:	3f c0       	rjmp	.+126    	; 0x93c <__stack+0x3d>
	} else {
		for (int i = 0; i < 5; i++) {
			box_list[i][0] = box_list[i+1][0];
     8be:	ef 01       	movw	r28, r30
     8c0:	21 96       	adiw	r28, 0x01	; 1
     8c2:	de 01       	movw	r26, r28
     8c4:	aa 0f       	add	r26, r26
     8c6:	bb 1f       	adc	r27, r27
     8c8:	aa 0f       	add	r26, r26
     8ca:	bb 1f       	adc	r27, r27
     8cc:	aa 0f       	add	r26, r26
     8ce:	bb 1f       	adc	r27, r27
     8d0:	aa 5f       	subi	r26, 0xFA	; 250
     8d2:	be 4f       	sbci	r27, 0xFE	; 254
     8d4:	0d 91       	ld	r16, X+
     8d6:	1c 91       	ld	r17, X
     8d8:	11 97       	sbiw	r26, 0x01	; 1
     8da:	ee 0f       	add	r30, r30
     8dc:	ff 1f       	adc	r31, r31
     8de:	ee 0f       	add	r30, r30
     8e0:	ff 1f       	adc	r31, r31
     8e2:	ee 0f       	add	r30, r30
     8e4:	ff 1f       	adc	r31, r31
     8e6:	ea 5f       	subi	r30, 0xFA	; 250
     8e8:	fe 4f       	sbci	r31, 0xFE	; 254
     8ea:	11 83       	std	Z+1, r17	; 0x01
     8ec:	00 83       	st	Z, r16
			box_list[i][1] = box_list[i+1][1];
     8ee:	12 96       	adiw	r26, 0x02	; 2
     8f0:	0d 91       	ld	r16, X+
     8f2:	1c 91       	ld	r17, X
     8f4:	13 97       	sbiw	r26, 0x03	; 3
     8f6:	13 83       	std	Z+3, r17	; 0x03
     8f8:	02 83       	std	Z+2, r16	; 0x02
			box_list[i][2] = box_list[i+1][2];
     8fa:	14 96       	adiw	r26, 0x04	; 4
     8fc:	0d 91       	ld	r16, X+
     8fe:	1c 91       	ld	r17, X
     900:	15 97       	sbiw	r26, 0x05	; 5
     902:	15 83       	std	Z+5, r17	; 0x05
     904:	04 83       	std	Z+4, r16	; 0x04
			box_list[i][3] = box_list[i+1][3];
     906:	16 96       	adiw	r26, 0x06	; 6
     908:	0d 90       	ld	r0, X+
     90a:	bc 91       	ld	r27, X
     90c:	a0 2d       	mov	r26, r0
     90e:	b7 83       	std	Z+7, r27	; 0x07
     910:	a6 83       	std	Z+6, r26	; 0x06
		box_list[box_list_top][0] = row;
		box_list[box_list_top][1] = col;
		box_list[box_list_top][2] = current_row;
		box_list[box_list_top][3] = current_row;
	} else {
		for (int i = 0; i < 5; i++) {
     912:	fe 01       	movw	r30, r28
     914:	02 c0       	rjmp	.+4      	; 0x91a <__stack+0x1b>
     916:	e0 e0       	ldi	r30, 0x00	; 0
     918:	f0 e0       	ldi	r31, 0x00	; 0
     91a:	e5 30       	cpi	r30, 0x05	; 5
     91c:	f1 05       	cpc	r31, r1
     91e:	7c f2       	brlt	.-98     	; 0x8be <add_previous_box_location+0x4a>
			box_list[i][0] = box_list[i+1][0];
			box_list[i][1] = box_list[i+1][1];
			box_list[i][2] = box_list[i+1][2];
			box_list[i][3] = box_list[i+1][3];
		}
		box_list[5][0] = row;
     920:	e6 e0       	ldi	r30, 0x06	; 6
     922:	f1 e0       	ldi	r31, 0x01	; 1
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	91 a7       	std	Z+41, r25	; 0x29
     928:	80 a7       	std	Z+40, r24	; 0x28
		box_list[5][1] = col;
     92a:	70 e0       	ldi	r23, 0x00	; 0
     92c:	73 a7       	std	Z+43, r23	; 0x2b
     92e:	62 a7       	std	Z+42, r22	; 0x2a
		box_list[5][2] = current_row;
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	55 a7       	std	Z+45, r21	; 0x2d
     934:	44 a7       	std	Z+44, r20	; 0x2c
		box_list[5][3] = current_col;
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	37 a7       	std	Z+47, r19	; 0x2f
     93a:	26 a7       	std	Z+46, r18	; 0x2e
	}
}
     93c:	df 91       	pop	r29
     93e:	cf 91       	pop	r28
     940:	1f 91       	pop	r17
     942:	0f 91       	pop	r16
     944:	08 95       	ret

00000946 <move_box>:

void move_box(void) {
	board[box_list[box_list_top][0]][box_list[box_list_top][1]] = BOX;
     946:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <box_list_top>
     94a:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <box_list_top+0x1>
     94e:	ee 0f       	add	r30, r30
     950:	ff 1f       	adc	r31, r31
     952:	ee 0f       	add	r30, r30
     954:	ff 1f       	adc	r31, r31
     956:	ee 0f       	add	r30, r30
     958:	ff 1f       	adc	r31, r31
     95a:	ea 5f       	subi	r30, 0xFA	; 250
     95c:	fe 4f       	sbci	r31, 0xFE	; 254
     95e:	80 81       	ld	r24, Z
     960:	91 81       	ldd	r25, Z+1	; 0x01
     962:	62 81       	ldd	r22, Z+2	; 0x02
     964:	73 81       	ldd	r23, Z+3	; 0x03
     966:	dc 01       	movw	r26, r24
     968:	a2 95       	swap	r26
     96a:	b2 95       	swap	r27
     96c:	b0 7f       	andi	r27, 0xF0	; 240
     96e:	ba 27       	eor	r27, r26
     970:	a0 7f       	andi	r26, 0xF0	; 240
     972:	ba 27       	eor	r27, r26
     974:	a8 5f       	subi	r26, 0xF8	; 248
     976:	bc 4f       	sbci	r27, 0xFC	; 252
     978:	a6 0f       	add	r26, r22
     97a:	b7 1f       	adc	r27, r23
     97c:	92 e0       	ldi	r25, 0x02	; 2
     97e:	9c 93       	st	X, r25
	board[box_list[box_list_top][2]][box_list[box_list_top][3]] = ROOM;
     980:	24 81       	ldd	r18, Z+4	; 0x04
     982:	35 81       	ldd	r19, Z+5	; 0x05
     984:	46 81       	ldd	r20, Z+6	; 0x06
     986:	57 81       	ldd	r21, Z+7	; 0x07
     988:	22 95       	swap	r18
     98a:	32 95       	swap	r19
     98c:	30 7f       	andi	r19, 0xF0	; 240
     98e:	32 27       	eor	r19, r18
     990:	20 7f       	andi	r18, 0xF0	; 240
     992:	32 27       	eor	r19, r18
     994:	28 5f       	subi	r18, 0xF8	; 248
     996:	3c 4f       	sbci	r19, 0xFC	; 252
     998:	f9 01       	movw	r30, r18
     99a:	e4 0f       	add	r30, r20
     99c:	f5 1f       	adc	r31, r21
     99e:	10 82       	st	Z, r1
	paint_square(box_list[box_list_top][0], box_list[box_list_top][1]);
     9a0:	0e 94 f5 02 	call	0x5ea	; 0x5ea <paint_square>
	paint_square(box_list[box_list_top][2], box_list[box_list_top][3]);
     9a4:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <box_list_top>
     9a8:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <box_list_top+0x1>
     9ac:	ee 0f       	add	r30, r30
     9ae:	ff 1f       	adc	r31, r31
     9b0:	ee 0f       	add	r30, r30
     9b2:	ff 1f       	adc	r31, r31
     9b4:	ee 0f       	add	r30, r30
     9b6:	ff 1f       	adc	r31, r31
     9b8:	ea 5f       	subi	r30, 0xFA	; 250
     9ba:	fe 4f       	sbci	r31, 0xFE	; 254
     9bc:	66 81       	ldd	r22, Z+6	; 0x06
     9be:	84 81       	ldd	r24, Z+4	; 0x04
     9c0:	0e 94 f5 02 	call	0x5ea	; 0x5ea <paint_square>
     9c4:	08 95       	ret

000009c6 <undo_move>:
	}
	return false;  //both directions failed, move cannot be made
}

bool undo_move(void) {
	if (list_top < 0 || move_list[list_top][0] == -1 || move_list[list_top][1] == -1) {
     9c6:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <list_top>
     9ca:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <list_top+0x1>
     9ce:	99 23       	and	r25, r25
     9d0:	0c f4       	brge	.+2      	; 0x9d4 <undo_move+0xe>
     9d2:	69 c0       	rjmp	.+210    	; 0xaa6 <undo_move+0xe0>
     9d4:	fc 01       	movw	r30, r24
     9d6:	ee 0f       	add	r30, r30
     9d8:	ff 1f       	adc	r31, r31
     9da:	ee 0f       	add	r30, r30
     9dc:	ff 1f       	adc	r31, r31
     9de:	e8 5c       	subi	r30, 0xC8	; 200
     9e0:	fe 4f       	sbci	r31, 0xFE	; 254
     9e2:	20 81       	ld	r18, Z
     9e4:	31 81       	ldd	r19, Z+1	; 0x01
     9e6:	2f 3f       	cpi	r18, 0xFF	; 255
     9e8:	3f 4f       	sbci	r19, 0xFF	; 255
     9ea:	09 f4       	brne	.+2      	; 0x9ee <undo_move+0x28>
     9ec:	5e c0       	rjmp	.+188    	; 0xaaa <undo_move+0xe4>
     9ee:	fc 01       	movw	r30, r24
     9f0:	ee 0f       	add	r30, r30
     9f2:	ff 1f       	adc	r31, r31
     9f4:	ee 0f       	add	r30, r30
     9f6:	ff 1f       	adc	r31, r31
     9f8:	e8 5c       	subi	r30, 0xC8	; 200
     9fa:	fe 4f       	sbci	r31, 0xFE	; 254
     9fc:	22 81       	ldd	r18, Z+2	; 0x02
     9fe:	33 81       	ldd	r19, Z+3	; 0x03
     a00:	2f 3f       	cpi	r18, 0xFF	; 255
     a02:	3f 4f       	sbci	r19, 0xFF	; 255
     a04:	09 f4       	brne	.+2      	; 0xa08 <undo_move+0x42>
     a06:	53 c0       	rjmp	.+166    	; 0xaae <undo_move+0xe8>
		return false;
	}
	if (list_top >= 0) {
     a08:	99 23       	and	r25, r25
     a0a:	e4 f0       	brlt	.+56     	; 0xa44 <undo_move+0x7e>
		paint_square(player_row, player_col);
     a0c:	60 91 06 03 	lds	r22, 0x0306	; 0x800306 <player_col>
     a10:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <player_row>
     a14:	0e 94 f5 02 	call	0x5ea	; 0x5ea <paint_square>
		player_row = move_list[list_top][0];
     a18:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <list_top>
     a1c:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <list_top+0x1>
     a20:	fc 01       	movw	r30, r24
     a22:	ee 0f       	add	r30, r30
     a24:	ff 1f       	adc	r31, r31
     a26:	ee 0f       	add	r30, r30
     a28:	ff 1f       	adc	r31, r31
     a2a:	e8 5c       	subi	r30, 0xC8	; 200
     a2c:	fe 4f       	sbci	r31, 0xFE	; 254
     a2e:	20 81       	ld	r18, Z
     a30:	20 93 07 03 	sts	0x0307, r18	; 0x800307 <player_row>
		player_col = move_list[list_top][1];
     a34:	22 81       	ldd	r18, Z+2	; 0x02
     a36:	20 93 06 03 	sts	0x0306, r18	; 0x800306 <player_col>
		list_top--;
     a3a:	01 97       	sbiw	r24, 0x01	; 1
     a3c:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <list_top+0x1>
     a40:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <list_top>
	}
	
	if (!(box_list_top < 0 || box_list[box_list_top][0] == -1 || box_list[box_list_top][1] == -1)) {
     a44:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <box_list_top>
     a48:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <box_list_top+0x1>
     a4c:	99 23       	and	r25, r25
     a4e:	8c f1       	brlt	.+98     	; 0xab2 <undo_move+0xec>
     a50:	fc 01       	movw	r30, r24
     a52:	ee 0f       	add	r30, r30
     a54:	ff 1f       	adc	r31, r31
     a56:	ee 0f       	add	r30, r30
     a58:	ff 1f       	adc	r31, r31
     a5a:	ee 0f       	add	r30, r30
     a5c:	ff 1f       	adc	r31, r31
     a5e:	ea 5f       	subi	r30, 0xFA	; 250
     a60:	fe 4f       	sbci	r31, 0xFE	; 254
     a62:	20 81       	ld	r18, Z
     a64:	31 81       	ldd	r19, Z+1	; 0x01
     a66:	2f 3f       	cpi	r18, 0xFF	; 255
     a68:	3f 4f       	sbci	r19, 0xFF	; 255
     a6a:	29 f1       	breq	.+74     	; 0xab6 <undo_move+0xf0>
     a6c:	fc 01       	movw	r30, r24
     a6e:	ee 0f       	add	r30, r30
     a70:	ff 1f       	adc	r31, r31
     a72:	ee 0f       	add	r30, r30
     a74:	ff 1f       	adc	r31, r31
     a76:	ee 0f       	add	r30, r30
     a78:	ff 1f       	adc	r31, r31
     a7a:	ea 5f       	subi	r30, 0xFA	; 250
     a7c:	fe 4f       	sbci	r31, 0xFE	; 254
     a7e:	22 81       	ldd	r18, Z+2	; 0x02
     a80:	33 81       	ldd	r19, Z+3	; 0x03
     a82:	2f 3f       	cpi	r18, 0xFF	; 255
     a84:	3f 4f       	sbci	r19, 0xFF	; 255
     a86:	c9 f0       	breq	.+50     	; 0xaba <undo_move+0xf4>
		if (box_list_top >= 0) {
     a88:	99 23       	and	r25, r25
     a8a:	cc f0       	brlt	.+50     	; 0xabe <undo_move+0xf8>
			move_box();
     a8c:	0e 94 a3 04 	call	0x946	; 0x946 <move_box>
			box_list_top--;
     a90:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <box_list_top>
     a94:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <box_list_top+0x1>
     a98:	01 97       	sbiw	r24, 0x01	; 1
     a9a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <box_list_top+0x1>
     a9e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <box_list_top>
		}
	}
	return true;
     aa2:	81 e0       	ldi	r24, 0x01	; 1
     aa4:	08 95       	ret
	return false;  //both directions failed, move cannot be made
}

bool undo_move(void) {
	if (list_top < 0 || move_list[list_top][0] == -1 || move_list[list_top][1] == -1) {
		return false;
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	08 95       	ret
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	08 95       	ret
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	08 95       	ret
		if (box_list_top >= 0) {
			move_box();
			box_list_top--;
		}
	}
	return true;
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	08 95       	ret
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	08 95       	ret
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	08 95       	ret
     abe:	81 e0       	ldi	r24, 0x01	; 1
}
     ac0:	08 95       	ret

00000ac2 <display_terminal_message>:
		return false;
	}
	return true; 
}

void display_terminal_message(char type[]) {
     ac2:	cf 93       	push	r28
     ac4:	df 93       	push	r29
     ac6:	ec 01       	movw	r28, r24
	if (strcmp(type, "wall") == 0) {
     ac8:	6c e6       	ldi	r22, 0x6C	; 108
     aca:	72 e0       	ldi	r23, 0x02	; 2
     acc:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <strcmp>
     ad0:	89 2b       	or	r24, r25
     ad2:	91 f5       	brne	.+100    	; 0xb38 <display_terminal_message+0x76>
		int rand_num;
		int lb = 1;
		int ub = 3;
		rand_num = (rand() % (ub - lb + 1)) + lb;
     ad4:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <rand>
     ad8:	63 e0       	ldi	r22, 0x03	; 3
     ada:	70 e0       	ldi	r23, 0x00	; 0
     adc:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__divmodhi4>
     ae0:	ec 01       	movw	r28, r24
     ae2:	21 96       	adiw	r28, 0x01	; 1
		move_terminal_cursor(20, 1);
     ae4:	61 e0       	ldi	r22, 0x01	; 1
     ae6:	70 e0       	ldi	r23, 0x00	; 0
     ae8:	84 e1       	ldi	r24, 0x14	; 20
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	0e 94 4a 11 	call	0x2294	; 0x2294 <move_terminal_cursor>
		if (rand_num == 1) {
     af0:	c1 30       	cpi	r28, 0x01	; 1
     af2:	d1 05       	cpc	r29, r1
     af4:	49 f4       	brne	.+18     	; 0xb08 <display_terminal_message+0x46>
			printf_P(PSTR("Player hit a wall"));
     af6:	87 e0       	ldi	r24, 0x07	; 7
     af8:	91 e0       	ldi	r25, 0x01	; 1
     afa:	9f 93       	push	r25
     afc:	8f 93       	push	r24
     afe:	0e 94 92 13 	call	0x2724	; 0x2724 <printf_P>
     b02:	0f 90       	pop	r0
     b04:	0f 90       	pop	r0
     b06:	6f c0       	rjmp	.+222    	; 0xbe6 <display_terminal_message+0x124>
		} else if (rand_num == 2) {
     b08:	c2 30       	cpi	r28, 0x02	; 2
     b0a:	d1 05       	cpc	r29, r1
     b0c:	49 f4       	brne	.+18     	; 0xb20 <display_terminal_message+0x5e>
			printf_P(PSTR("Wall hit"));
     b0e:	8e ef       	ldi	r24, 0xFE	; 254
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	9f 93       	push	r25
     b14:	8f 93       	push	r24
     b16:	0e 94 92 13 	call	0x2724	; 0x2724 <printf_P>
     b1a:	0f 90       	pop	r0
     b1c:	0f 90       	pop	r0
     b1e:	63 c0       	rjmp	.+198    	; 0xbe6 <display_terminal_message+0x124>
		} else if (rand_num == 3) {
     b20:	23 97       	sbiw	r28, 0x03	; 3
     b22:	09 f0       	breq	.+2      	; 0xb26 <display_terminal_message+0x64>
     b24:	60 c0       	rjmp	.+192    	; 0xbe6 <display_terminal_message+0x124>
			printf_P(PSTR("There is a wall in the way"));
     b26:	83 ee       	ldi	r24, 0xE3	; 227
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	9f 93       	push	r25
     b2c:	8f 93       	push	r24
     b2e:	0e 94 92 13 	call	0x2724	; 0x2724 <printf_P>
     b32:	0f 90       	pop	r0
     b34:	0f 90       	pop	r0
     b36:	57 c0       	rjmp	.+174    	; 0xbe6 <display_terminal_message+0x124>
		}
	} else if (strcmp(type, "box_wall") == 0) {
     b38:	68 e6       	ldi	r22, 0x68	; 104
     b3a:	72 e0       	ldi	r23, 0x02	; 2
     b3c:	ce 01       	movw	r24, r28
     b3e:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <strcmp>
     b42:	89 2b       	or	r24, r25
     b44:	79 f4       	brne	.+30     	; 0xb64 <display_terminal_message+0xa2>
		move_terminal_cursor(20, 1);
     b46:	61 e0       	ldi	r22, 0x01	; 1
     b48:	70 e0       	ldi	r23, 0x00	; 0
     b4a:	84 e1       	ldi	r24, 0x14	; 20
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	0e 94 4a 11 	call	0x2294	; 0x2294 <move_terminal_cursor>
		printf_P(PSTR("Cannot push box onto wall"));
     b52:	89 ec       	ldi	r24, 0xC9	; 201
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	9f 93       	push	r25
     b58:	8f 93       	push	r24
     b5a:	0e 94 92 13 	call	0x2724	; 0x2724 <printf_P>
     b5e:	0f 90       	pop	r0
     b60:	0f 90       	pop	r0
     b62:	41 c0       	rjmp	.+130    	; 0xbe6 <display_terminal_message+0x124>
	} else if (strcmp(type, "box_box") == 0) {
     b64:	61 e7       	ldi	r22, 0x71	; 113
     b66:	72 e0       	ldi	r23, 0x02	; 2
     b68:	ce 01       	movw	r24, r28
     b6a:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <strcmp>
     b6e:	89 2b       	or	r24, r25
     b70:	79 f4       	brne	.+30     	; 0xb90 <display_terminal_message+0xce>
		move_terminal_cursor(20, 1);
     b72:	61 e0       	ldi	r22, 0x01	; 1
     b74:	70 e0       	ldi	r23, 0x00	; 0
     b76:	84 e1       	ldi	r24, 0x14	; 20
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	0e 94 4a 11 	call	0x2294	; 0x2294 <move_terminal_cursor>
		printf_P(PSTR("Cannot stack boxes"));
     b7e:	86 eb       	ldi	r24, 0xB6	; 182
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	9f 93       	push	r25
     b84:	8f 93       	push	r24
     b86:	0e 94 92 13 	call	0x2724	; 0x2724 <printf_P>
     b8a:	0f 90       	pop	r0
     b8c:	0f 90       	pop	r0
     b8e:	2b c0       	rjmp	.+86     	; 0xbe6 <display_terminal_message+0x124>
	} else if (strcmp(type, "wall_diagonal") == 0) {
     b90:	69 e7       	ldi	r22, 0x79	; 121
     b92:	72 e0       	ldi	r23, 0x02	; 2
     b94:	ce 01       	movw	r24, r28
     b96:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <strcmp>
     b9a:	89 2b       	or	r24, r25
     b9c:	79 f4       	brne	.+30     	; 0xbbc <display_terminal_message+0xfa>
		move_terminal_cursor(20, 1);
     b9e:	61 e0       	ldi	r22, 0x01	; 1
     ba0:	70 e0       	ldi	r23, 0x00	; 0
     ba2:	84 e1       	ldi	r24, 0x14	; 20
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	0e 94 4a 11 	call	0x2294	; 0x2294 <move_terminal_cursor>
		printf_P(PSTR("Diagonal move cannot be made"));
     baa:	89 e9       	ldi	r24, 0x99	; 153
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	9f 93       	push	r25
     bb0:	8f 93       	push	r24
     bb2:	0e 94 92 13 	call	0x2724	; 0x2724 <printf_P>
     bb6:	0f 90       	pop	r0
     bb8:	0f 90       	pop	r0
     bba:	15 c0       	rjmp	.+42     	; 0xbe6 <display_terminal_message+0x124>
	} else if (strcmp(type, "box_diagonal") == 0) {
     bbc:	67 e8       	ldi	r22, 0x87	; 135
     bbe:	72 e0       	ldi	r23, 0x02	; 2
     bc0:	ce 01       	movw	r24, r28
     bc2:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <strcmp>
     bc6:	89 2b       	or	r24, r25
     bc8:	71 f4       	brne	.+28     	; 0xbe6 <display_terminal_message+0x124>
		move_terminal_cursor(20, 1);
     bca:	61 e0       	ldi	r22, 0x01	; 1
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	84 e1       	ldi	r24, 0x14	; 20
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	0e 94 4a 11 	call	0x2294	; 0x2294 <move_terminal_cursor>
		printf_P(PSTR("Cannot move boxes diagonally"));
     bd6:	8c e7       	ldi	r24, 0x7C	; 124
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	9f 93       	push	r25
     bdc:	8f 93       	push	r24
     bde:	0e 94 92 13 	call	0x2724	; 0x2724 <printf_P>
     be2:	0f 90       	pop	r0
     be4:	0f 90       	pop	r0
}
	return;
}
     be6:	df 91       	pop	r29
     be8:	cf 91       	pop	r28
     bea:	08 95       	ret

00000bec <check_wall_or_box>:
	paint_square(box_list[box_list_top][0], box_list[box_list_top][1]);
	paint_square(box_list[box_list_top][2], box_list[box_list_top][3]);
}

bool check_wall_or_box(int row, int col) {
	if (board[row][col] == WALL) {
     bec:	82 95       	swap	r24
     bee:	92 95       	swap	r25
     bf0:	90 7f       	andi	r25, 0xF0	; 240
     bf2:	98 27       	eor	r25, r24
     bf4:	80 7f       	andi	r24, 0xF0	; 240
     bf6:	98 27       	eor	r25, r24
     bf8:	88 5f       	subi	r24, 0xF8	; 248
     bfa:	9c 4f       	sbci	r25, 0xFC	; 252
     bfc:	fc 01       	movw	r30, r24
     bfe:	e6 0f       	add	r30, r22
     c00:	f7 1f       	adc	r31, r23
     c02:	80 81       	ld	r24, Z
     c04:	81 30       	cpi	r24, 0x01	; 1
     c06:	31 f4       	brne	.+12     	; 0xc14 <check_wall_or_box+0x28>
		display_terminal_message("wall_diagonal");
     c08:	89 e7       	ldi	r24, 0x79	; 121
     c0a:	92 e0       	ldi	r25, 0x02	; 2
     c0c:	0e 94 61 05 	call	0xac2	; 0xac2 <display_terminal_message>
		return false;
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	08 95       	ret
	} else if (board[row][col] == BOX) {
     c14:	82 30       	cpi	r24, 0x02	; 2
     c16:	31 f4       	brne	.+12     	; 0xc24 <check_wall_or_box+0x38>
		display_terminal_message("box_diagonal");
     c18:	87 e8       	ldi	r24, 0x87	; 135
     c1a:	92 e0       	ldi	r25, 0x02	; 2
     c1c:	0e 94 61 05 	call	0xac2	; 0xac2 <display_terminal_message>
		return false;
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	08 95       	ret
	} else if (board[row][col] == (BOX | TARGET)) {
     c24:	86 30       	cpi	r24, 0x06	; 6
     c26:	31 f4       	brne	.+12     	; 0xc34 <check_wall_or_box+0x48>
		display_terminal_message("box_diagonal");
     c28:	87 e8       	ldi	r24, 0x87	; 135
     c2a:	92 e0       	ldi	r25, 0x02	; 2
     c2c:	0e 94 61 05 	call	0xac2	; 0xac2 <display_terminal_message>
		return false;
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	08 95       	ret
	}
	return true; 
     c34:	81 e0       	ldi	r24, 0x01	; 1
}
     c36:	08 95       	ret

00000c38 <is_game_over>:

// This function checks if the game is over (i.e., the level is solved), and
// returns true iff (if and only if) the game is over.
bool is_game_over(void)
{
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
     c38:	40 e0       	ldi	r20, 0x00	; 0
     c3a:	50 e0       	ldi	r21, 0x00	; 0
     c3c:	17 c0       	rjmp	.+46     	; 0xc6c <is_game_over+0x34>
		for (int col = 0; col < MATRIX_NUM_COLUMNS; col++) {
			if (board[row][col] == TARGET) {
     c3e:	fa 01       	movw	r30, r20
     c40:	e2 95       	swap	r30
     c42:	f2 95       	swap	r31
     c44:	f0 7f       	andi	r31, 0xF0	; 240
     c46:	fe 27       	eor	r31, r30
     c48:	e0 7f       	andi	r30, 0xF0	; 240
     c4a:	fe 27       	eor	r31, r30
     c4c:	e8 5f       	subi	r30, 0xF8	; 248
     c4e:	fc 4f       	sbci	r31, 0xFC	; 252
     c50:	e8 0f       	add	r30, r24
     c52:	f9 1f       	adc	r31, r25
     c54:	20 81       	ld	r18, Z
     c56:	24 30       	cpi	r18, 0x04	; 4
     c58:	a1 f0       	breq	.+40     	; 0xc82 <is_game_over+0x4a>
// This function checks if the game is over (i.e., the level is solved), and
// returns true iff (if and only if) the game is over.
bool is_game_over(void)
{
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
		for (int col = 0; col < MATRIX_NUM_COLUMNS; col++) {
     c5a:	01 96       	adiw	r24, 0x01	; 1
     c5c:	02 c0       	rjmp	.+4      	; 0xc62 <is_game_over+0x2a>
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	80 31       	cpi	r24, 0x10	; 16
     c64:	91 05       	cpc	r25, r1
     c66:	5c f3       	brlt	.-42     	; 0xc3e <is_game_over+0x6>

// This function checks if the game is over (i.e., the level is solved), and
// returns true iff (if and only if) the game is over.
bool is_game_over(void)
{
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
     c68:	4f 5f       	subi	r20, 0xFF	; 255
     c6a:	5f 4f       	sbci	r21, 0xFF	; 255
     c6c:	48 30       	cpi	r20, 0x08	; 8
     c6e:	51 05       	cpc	r21, r1
     c70:	b4 f3       	brlt	.-20     	; 0xc5e <is_game_over+0x26>
			if (board[row][col] == TARGET) {
				return false;
			}
		}
	}
	paint_square(player_row, player_col);
     c72:	60 91 06 03 	lds	r22, 0x0306	; 0x800306 <player_col>
     c76:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <player_row>
     c7a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <paint_square>
	return true;
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	08 95       	ret
bool is_game_over(void)
{
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
		for (int col = 0; col < MATRIX_NUM_COLUMNS; col++) {
			if (board[row][col] == TARGET) {
				return false;
     c82:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}
	paint_square(player_row, player_col);
	return true;
}
     c84:	08 95       	ret

00000c86 <modulo>:

//Calculates the modulus of a number for player movement
int modulo(int x,int y){
     c86:	9b 01       	movw	r18, r22
	return (x % y + y) % y;
     c88:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__divmodhi4>
     c8c:	82 0f       	add	r24, r18
     c8e:	93 1f       	adc	r25, r19
     c90:	b9 01       	movw	r22, r18
     c92:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__divmodhi4>
}
     c96:	08 95       	ret

00000c98 <update_terminal_display>:
		printf("\n");
		GAME_BOARD_ROW++;
	}
}

void update_terminal_display(int board_row, int terminal_row, int terminal_col) {
     c98:	0f 93       	push	r16
     c9a:	1f 93       	push	r17
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
     ca0:	8c 01       	movw	r16, r24
     ca2:	cb 01       	movw	r24, r22
	move_terminal_cursor(terminal_row, terminal_col);
     ca4:	ba 01       	movw	r22, r20
     ca6:	0e 94 4a 11 	call	0x2294	; 0x2294 <move_terminal_cursor>
	clear_to_end_of_line();
     caa:	0e 94 70 11 	call	0x22e0	; 0x22e0 <clear_to_end_of_line>
	for (int column = 1; column <= MATRIX_NUM_COLUMNS-1; column++) {
     cae:	c1 e0       	ldi	r28, 0x01	; 1
     cb0:	d0 e0       	ldi	r29, 0x00	; 0
     cb2:	43 c0       	rjmp	.+134    	; 0xd3a <update_terminal_display+0xa2>
		if (board[board_row][column] == ROOM) {
     cb4:	f8 01       	movw	r30, r16
     cb6:	e2 95       	swap	r30
     cb8:	f2 95       	swap	r31
     cba:	f0 7f       	andi	r31, 0xF0	; 240
     cbc:	fe 27       	eor	r31, r30
     cbe:	e0 7f       	andi	r30, 0xF0	; 240
     cc0:	fe 27       	eor	r31, r30
     cc2:	e8 5f       	subi	r30, 0xF8	; 248
     cc4:	fc 4f       	sbci	r31, 0xFC	; 252
     cc6:	ec 0f       	add	r30, r28
     cc8:	fd 1f       	adc	r31, r29
     cca:	80 81       	ld	r24, Z
     ccc:	81 11       	cpse	r24, r1
     cce:	09 c0       	rjmp	.+18     	; 0xce2 <update_terminal_display+0x4a>
			printf("\033[100m   \033[0m");
     cd0:	84 e9       	ldi	r24, 0x94	; 148
     cd2:	92 e0       	ldi	r25, 0x02	; 2
     cd4:	9f 93       	push	r25
     cd6:	8f 93       	push	r24
     cd8:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <printf>
     cdc:	0f 90       	pop	r0
     cde:	0f 90       	pop	r0
     ce0:	2b c0       	rjmp	.+86     	; 0xd38 <update_terminal_display+0xa0>
		} else if (board[board_row][column] == WALL) {
     ce2:	81 30       	cpi	r24, 0x01	; 1
     ce4:	49 f4       	brne	.+18     	; 0xcf8 <update_terminal_display+0x60>
			printf("\033[103m   \033[0m");
     ce6:	82 ea       	ldi	r24, 0xA2	; 162
     ce8:	92 e0       	ldi	r25, 0x02	; 2
     cea:	9f 93       	push	r25
     cec:	8f 93       	push	r24
     cee:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <printf>
     cf2:	0f 90       	pop	r0
     cf4:	0f 90       	pop	r0
     cf6:	20 c0       	rjmp	.+64     	; 0xd38 <update_terminal_display+0xa0>
		} else if (board[board_row][column] == BOX) {
     cf8:	82 30       	cpi	r24, 0x02	; 2
     cfa:	49 f4       	brne	.+18     	; 0xd0e <update_terminal_display+0x76>
			printf("\033[43m   \033[0m");
     cfc:	80 eb       	ldi	r24, 0xB0	; 176
     cfe:	92 e0       	ldi	r25, 0x02	; 2
     d00:	9f 93       	push	r25
     d02:	8f 93       	push	r24
     d04:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <printf>
     d08:	0f 90       	pop	r0
     d0a:	0f 90       	pop	r0
     d0c:	15 c0       	rjmp	.+42     	; 0xd38 <update_terminal_display+0xa0>
		} else if (board[board_row][column] == TARGET) {
     d0e:	84 30       	cpi	r24, 0x04	; 4
     d10:	49 f4       	brne	.+18     	; 0xd24 <update_terminal_display+0x8c>
			printf("\033[41m   \033[0m");
     d12:	8d eb       	ldi	r24, 0xBD	; 189
     d14:	92 e0       	ldi	r25, 0x02	; 2
     d16:	9f 93       	push	r25
     d18:	8f 93       	push	r24
     d1a:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <printf>
     d1e:	0f 90       	pop	r0
     d20:	0f 90       	pop	r0
     d22:	0a c0       	rjmp	.+20     	; 0xd38 <update_terminal_display+0xa0>
		} else if (board[board_row][column] == (BOX | TARGET)) {
     d24:	86 30       	cpi	r24, 0x06	; 6
     d26:	41 f4       	brne	.+16     	; 0xd38 <update_terminal_display+0xa0>
			printf("\033[102m   \033[0m");
     d28:	8a ec       	ldi	r24, 0xCA	; 202
     d2a:	92 e0       	ldi	r25, 0x02	; 2
     d2c:	9f 93       	push	r25
     d2e:	8f 93       	push	r24
     d30:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <printf>
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
}

void update_terminal_display(int board_row, int terminal_row, int terminal_col) {
	move_terminal_cursor(terminal_row, terminal_col);
	clear_to_end_of_line();
	for (int column = 1; column <= MATRIX_NUM_COLUMNS-1; column++) {
     d38:	21 96       	adiw	r28, 0x01	; 1
     d3a:	c0 31       	cpi	r28, 0x10	; 16
     d3c:	d1 05       	cpc	r29, r1
     d3e:	0c f4       	brge	.+2      	; 0xd42 <update_terminal_display+0xaa>
     d40:	b9 cf       	rjmp	.-142    	; 0xcb4 <update_terminal_display+0x1c>
			printf("\033[41m   \033[0m");
		} else if (board[board_row][column] == (BOX | TARGET)) {
			printf("\033[102m   \033[0m");
		}
	}
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	1f 91       	pop	r17
     d48:	0f 91       	pop	r16
     d4a:	08 95       	ret

00000d4c <move_player>:
	}
}

// This function handles player movements.
bool move_player(int8_t delta_row, int8_t delta_col)
{
     d4c:	af 92       	push	r10
     d4e:	bf 92       	push	r11
     d50:	cf 92       	push	r12
     d52:	df 92       	push	r13
     d54:	ef 92       	push	r14
     d56:	ff 92       	push	r15
     d58:	0f 93       	push	r16
     d5a:	1f 93       	push	r17
     d5c:	cf 93       	push	r28
     d5e:	df 93       	push	r29
     d60:	e6 2e       	mov	r14, r22
	// +-----------------------------------------------------------------+
	
	bool box_moved = false;
	
	//Calculate next positions
	int next_row = modulo((player_row+delta_row), 8);
     d62:	b0 90 07 03 	lds	r11, 0x0307	; 0x800307 <player_row>
     d66:	c8 2e       	mov	r12, r24
     d68:	88 0f       	add	r24, r24
     d6a:	dd 08       	sbc	r13, r13
     d6c:	68 e0       	ldi	r22, 0x08	; 8
     d6e:	70 e0       	ldi	r23, 0x00	; 0
     d70:	c6 01       	movw	r24, r12
     d72:	8b 0d       	add	r24, r11
     d74:	91 1d       	adc	r25, r1
     d76:	0e 94 43 06 	call	0xc86	; 0xc86 <modulo>
     d7a:	ec 01       	movw	r28, r24
	int next_col = modulo((player_col+delta_col), 16);
     d7c:	a0 90 06 03 	lds	r10, 0x0306	; 0x800306 <player_col>
     d80:	0e 2c       	mov	r0, r14
     d82:	00 0c       	add	r0, r0
     d84:	ff 08       	sbc	r15, r15
     d86:	60 e1       	ldi	r22, 0x10	; 16
     d88:	70 e0       	ldi	r23, 0x00	; 0
     d8a:	c7 01       	movw	r24, r14
     d8c:	8a 0d       	add	r24, r10
     d8e:	91 1d       	adc	r25, r1
     d90:	0e 94 43 06 	call	0xc86	; 0xc86 <modulo>
     d94:	8c 01       	movw	r16, r24
	int next_next_row = modulo((next_row+delta_row), 8);
     d96:	68 e0       	ldi	r22, 0x08	; 8
     d98:	70 e0       	ldi	r23, 0x00	; 0
     d9a:	c6 01       	movw	r24, r12
     d9c:	8c 0f       	add	r24, r28
     d9e:	9d 1f       	adc	r25, r29
     da0:	0e 94 43 06 	call	0xc86	; 0xc86 <modulo>
     da4:	6c 01       	movw	r12, r24
	int next_next_col = modulo((next_col+delta_col), 16);
     da6:	60 e1       	ldi	r22, 0x10	; 16
     da8:	70 e0       	ldi	r23, 0x00	; 0
     daa:	c7 01       	movw	r24, r14
     dac:	80 0f       	add	r24, r16
     dae:	91 1f       	adc	r25, r17
     db0:	0e 94 43 06 	call	0xc86	; 0xc86 <modulo>
     db4:	7c 01       	movw	r14, r24

	paint_square(player_row, player_col);
     db6:	6a 2d       	mov	r22, r10
     db8:	8b 2d       	mov	r24, r11
     dba:	0e 94 f5 02 	call	0x5ea	; 0x5ea <paint_square>
	move_terminal_cursor(20,0);
     dbe:	60 e0       	ldi	r22, 0x00	; 0
     dc0:	70 e0       	ldi	r23, 0x00	; 0
     dc2:	84 e1       	ldi	r24, 0x14	; 20
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	0e 94 4a 11 	call	0x2294	; 0x2294 <move_terminal_cursor>
	clear_to_end_of_line();
     dca:	0e 94 70 11 	call	0x22e0	; 0x22e0 <clear_to_end_of_line>
	
	//checks for wall in front of player
	if (board[next_row][next_col] == WALL) {
     dce:	fe 01       	movw	r30, r28
     dd0:	e2 95       	swap	r30
     dd2:	f2 95       	swap	r31
     dd4:	f0 7f       	andi	r31, 0xF0	; 240
     dd6:	fe 27       	eor	r31, r30
     dd8:	e0 7f       	andi	r30, 0xF0	; 240
     dda:	fe 27       	eor	r31, r30
     ddc:	e8 5f       	subi	r30, 0xF8	; 248
     dde:	fc 4f       	sbci	r31, 0xFC	; 252
     de0:	e0 0f       	add	r30, r16
     de2:	f1 1f       	adc	r31, r17
     de4:	80 81       	ld	r24, Z
     de6:	81 30       	cpi	r24, 0x01	; 1
     de8:	31 f4       	brne	.+12     	; 0xdf6 <move_player+0xaa>
		display_terminal_message("wall");
     dea:	8c e6       	ldi	r24, 0x6C	; 108
     dec:	92 e0       	ldi	r25, 0x02	; 2
     dee:	0e 94 61 05 	call	0xac2	; 0xac2 <display_terminal_message>
		return false;
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	18 c1       	rjmp	.+560    	; 0x1026 <move_player+0x2da>
		
	//checks for filled target in front of player
	} else if (board[next_row][next_col] == (BOX | TARGET)) {
     df6:	86 30       	cpi	r24, 0x06	; 6
     df8:	09 f0       	breq	.+2      	; 0xdfc <move_player+0xb0>
     dfa:	4c c0       	rjmp	.+152    	; 0xe94 <move_player+0x148>
		if (board[next_next_row][next_next_col] == WALL) {
     dfc:	f6 01       	movw	r30, r12
     dfe:	e2 95       	swap	r30
     e00:	f2 95       	swap	r31
     e02:	f0 7f       	andi	r31, 0xF0	; 240
     e04:	fe 27       	eor	r31, r30
     e06:	e0 7f       	andi	r30, 0xF0	; 240
     e08:	fe 27       	eor	r31, r30
     e0a:	e8 5f       	subi	r30, 0xF8	; 248
     e0c:	fc 4f       	sbci	r31, 0xFC	; 252
     e0e:	ee 0d       	add	r30, r14
     e10:	ff 1d       	adc	r31, r15
     e12:	80 81       	ld	r24, Z
     e14:	81 30       	cpi	r24, 0x01	; 1
     e16:	31 f4       	brne	.+12     	; 0xe24 <move_player+0xd8>
			display_terminal_message("box_wall");
     e18:	88 e6       	ldi	r24, 0x68	; 104
     e1a:	92 e0       	ldi	r25, 0x02	; 2
     e1c:	0e 94 61 05 	call	0xac2	; 0xac2 <display_terminal_message>
			return false;
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	01 c1       	rjmp	.+514    	; 0x1026 <move_player+0x2da>
		}
		board[next_row][next_col] = TARGET;
     e24:	fe 01       	movw	r30, r28
     e26:	e2 95       	swap	r30
     e28:	f2 95       	swap	r31
     e2a:	f0 7f       	andi	r31, 0xF0	; 240
     e2c:	fe 27       	eor	r31, r30
     e2e:	e0 7f       	andi	r30, 0xF0	; 240
     e30:	fe 27       	eor	r31, r30
     e32:	e8 5f       	subi	r30, 0xF8	; 248
     e34:	fc 4f       	sbci	r31, 0xFC	; 252
     e36:	e0 0f       	add	r30, r16
     e38:	f1 1f       	adc	r31, r17
     e3a:	84 e0       	ldi	r24, 0x04	; 4
     e3c:	80 83       	st	Z, r24
		paint_square(next_row, next_col);
     e3e:	60 2f       	mov	r22, r16
     e40:	8c 2f       	mov	r24, r28
     e42:	0e 94 f5 02 	call	0x5ea	; 0x5ea <paint_square>
		update_terminal_display(next_row, MATRIX_NUM_ROWS-next_row, 1);
     e46:	68 94       	set
     e48:	aa 24       	eor	r10, r10
     e4a:	a3 f8       	bld	r10, 3
     e4c:	b1 2c       	mov	r11, r1
     e4e:	b5 01       	movw	r22, r10
     e50:	6c 1b       	sub	r22, r28
     e52:	7d 0b       	sbc	r23, r29
     e54:	41 e0       	ldi	r20, 0x01	; 1
     e56:	50 e0       	ldi	r21, 0x00	; 0
     e58:	ce 01       	movw	r24, r28
     e5a:	0e 94 4c 06 	call	0xc98	; 0xc98 <update_terminal_display>
		board[next_next_row][next_next_col] = BOX;
     e5e:	f6 01       	movw	r30, r12
     e60:	e2 95       	swap	r30
     e62:	f2 95       	swap	r31
     e64:	f0 7f       	andi	r31, 0xF0	; 240
     e66:	fe 27       	eor	r31, r30
     e68:	e0 7f       	andi	r30, 0xF0	; 240
     e6a:	fe 27       	eor	r31, r30
     e6c:	e8 5f       	subi	r30, 0xF8	; 248
     e6e:	fc 4f       	sbci	r31, 0xFC	; 252
     e70:	ee 0d       	add	r30, r14
     e72:	ff 1d       	adc	r31, r15
     e74:	82 e0       	ldi	r24, 0x02	; 2
     e76:	80 83       	st	Z, r24
		paint_square(next_next_row, next_next_col);
     e78:	6e 2d       	mov	r22, r14
     e7a:	8c 2d       	mov	r24, r12
     e7c:	0e 94 f5 02 	call	0x5ea	; 0x5ea <paint_square>
		update_terminal_display(next_next_row, MATRIX_NUM_ROWS-next_next_row, 1);
     e80:	b5 01       	movw	r22, r10
     e82:	6c 19       	sub	r22, r12
     e84:	7d 09       	sbc	r23, r13
     e86:	41 e0       	ldi	r20, 0x01	; 1
     e88:	50 e0       	ldi	r21, 0x00	; 0
     e8a:	c6 01       	movw	r24, r12
     e8c:	0e 94 4c 06 	call	0xc98	; 0xc98 <update_terminal_display>
		box_moved = true;
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	72 c0       	rjmp	.+228    	; 0xf78 <move_player+0x22c>
		
	//checks for box in front of player
	} else if (board[next_row][next_col] == BOX) {
     e94:	82 30       	cpi	r24, 0x02	; 2
     e96:	09 f0       	breq	.+2      	; 0xe9a <move_player+0x14e>
     e98:	6e c0       	rjmp	.+220    	; 0xf76 <move_player+0x22a>
		if (board[next_next_row][next_next_col] == WALL) {
     e9a:	f6 01       	movw	r30, r12
     e9c:	e2 95       	swap	r30
     e9e:	f2 95       	swap	r31
     ea0:	f0 7f       	andi	r31, 0xF0	; 240
     ea2:	fe 27       	eor	r31, r30
     ea4:	e0 7f       	andi	r30, 0xF0	; 240
     ea6:	fe 27       	eor	r31, r30
     ea8:	e8 5f       	subi	r30, 0xF8	; 248
     eaa:	fc 4f       	sbci	r31, 0xFC	; 252
     eac:	ee 0d       	add	r30, r14
     eae:	ff 1d       	adc	r31, r15
     eb0:	80 81       	ld	r24, Z
     eb2:	81 30       	cpi	r24, 0x01	; 1
     eb4:	31 f4       	brne	.+12     	; 0xec2 <move_player+0x176>
			display_terminal_message("box_wall");
     eb6:	88 e6       	ldi	r24, 0x68	; 104
     eb8:	92 e0       	ldi	r25, 0x02	; 2
     eba:	0e 94 61 05 	call	0xac2	; 0xac2 <display_terminal_message>
			return false;
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	b2 c0       	rjmp	.+356    	; 0x1026 <move_player+0x2da>
		} else if (board[next_next_row][next_next_col] == BOX) {
     ec2:	82 30       	cpi	r24, 0x02	; 2
     ec4:	31 f4       	brne	.+12     	; 0xed2 <move_player+0x186>
			display_terminal_message("box_box");
     ec6:	81 e7       	ldi	r24, 0x71	; 113
     ec8:	92 e0       	ldi	r25, 0x02	; 2
     eca:	0e 94 61 05 	call	0xac2	; 0xac2 <display_terminal_message>
			return false;
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	aa c0       	rjmp	.+340    	; 0x1026 <move_player+0x2da>
		} else {
			box_moved = true;
			board[next_row][next_col] = ROOM;
     ed2:	fe 01       	movw	r30, r28
     ed4:	e2 95       	swap	r30
     ed6:	f2 95       	swap	r31
     ed8:	f0 7f       	andi	r31, 0xF0	; 240
     eda:	fe 27       	eor	r31, r30
     edc:	e0 7f       	andi	r30, 0xF0	; 240
     ede:	fe 27       	eor	r31, r30
     ee0:	e8 5f       	subi	r30, 0xF8	; 248
     ee2:	fc 4f       	sbci	r31, 0xFC	; 252
     ee4:	e0 0f       	add	r30, r16
     ee6:	f1 1f       	adc	r31, r17
     ee8:	10 82       	st	Z, r1
			if (board[next_next_row][next_next_col] == TARGET) {
     eea:	f6 01       	movw	r30, r12
     eec:	e2 95       	swap	r30
     eee:	f2 95       	swap	r31
     ef0:	f0 7f       	andi	r31, 0xF0	; 240
     ef2:	fe 27       	eor	r31, r30
     ef4:	e0 7f       	andi	r30, 0xF0	; 240
     ef6:	fe 27       	eor	r31, r30
     ef8:	e8 5f       	subi	r30, 0xF8	; 248
     efa:	fc 4f       	sbci	r31, 0xFC	; 252
     efc:	ee 0d       	add	r30, r14
     efe:	ff 1d       	adc	r31, r15
     f00:	80 81       	ld	r24, Z
     f02:	84 30       	cpi	r24, 0x04	; 4
     f04:	e1 f4       	brne	.+56     	; 0xf3e <move_player+0x1f2>
				board[next_next_row][next_next_col] = (TARGET | BOX);
     f06:	f6 01       	movw	r30, r12
     f08:	e2 95       	swap	r30
     f0a:	f2 95       	swap	r31
     f0c:	f0 7f       	andi	r31, 0xF0	; 240
     f0e:	fe 27       	eor	r31, r30
     f10:	e0 7f       	andi	r30, 0xF0	; 240
     f12:	fe 27       	eor	r31, r30
     f14:	e8 5f       	subi	r30, 0xF8	; 248
     f16:	fc 4f       	sbci	r31, 0xFC	; 252
     f18:	ee 0d       	add	r30, r14
     f1a:	ff 1d       	adc	r31, r15
     f1c:	86 e0       	ldi	r24, 0x06	; 6
     f1e:	80 83       	st	Z, r24
				paint_square(next_next_row, next_next_col);
     f20:	6e 2d       	mov	r22, r14
     f22:	8c 2d       	mov	r24, r12
     f24:	0e 94 f5 02 	call	0x5ea	; 0x5ea <paint_square>
				update_terminal_display(next_next_row, MATRIX_NUM_ROWS-next_next_row, 1);
     f28:	68 e0       	ldi	r22, 0x08	; 8
     f2a:	70 e0       	ldi	r23, 0x00	; 0
     f2c:	6c 19       	sub	r22, r12
     f2e:	7d 09       	sbc	r23, r13
     f30:	41 e0       	ldi	r20, 0x01	; 1
     f32:	50 e0       	ldi	r21, 0x00	; 0
     f34:	c6 01       	movw	r24, r12
     f36:	0e 94 4c 06 	call	0xc98	; 0xc98 <update_terminal_display>
			return false;
		} else if (board[next_next_row][next_next_col] == BOX) {
			display_terminal_message("box_box");
			return false;
		} else {
			box_moved = true;
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	1d c0       	rjmp	.+58     	; 0xf78 <move_player+0x22c>
			if (board[next_next_row][next_next_col] == TARGET) {
				board[next_next_row][next_next_col] = (TARGET | BOX);
				paint_square(next_next_row, next_next_col);
				update_terminal_display(next_next_row, MATRIX_NUM_ROWS-next_next_row, 1);
			} else {
				board[next_next_row][next_next_col] = BOX;
     f3e:	f6 01       	movw	r30, r12
     f40:	e2 95       	swap	r30
     f42:	f2 95       	swap	r31
     f44:	f0 7f       	andi	r31, 0xF0	; 240
     f46:	fe 27       	eor	r31, r30
     f48:	e0 7f       	andi	r30, 0xF0	; 240
     f4a:	fe 27       	eor	r31, r30
     f4c:	e8 5f       	subi	r30, 0xF8	; 248
     f4e:	fc 4f       	sbci	r31, 0xFC	; 252
     f50:	ee 0d       	add	r30, r14
     f52:	ff 1d       	adc	r31, r15
     f54:	82 e0       	ldi	r24, 0x02	; 2
     f56:	80 83       	st	Z, r24
				paint_square(next_next_row, next_next_col);
     f58:	6e 2d       	mov	r22, r14
     f5a:	8c 2d       	mov	r24, r12
     f5c:	0e 94 f5 02 	call	0x5ea	; 0x5ea <paint_square>
				update_terminal_display(next_next_row, MATRIX_NUM_ROWS-next_next_row, 1);
     f60:	68 e0       	ldi	r22, 0x08	; 8
     f62:	70 e0       	ldi	r23, 0x00	; 0
     f64:	6c 19       	sub	r22, r12
     f66:	7d 09       	sbc	r23, r13
     f68:	41 e0       	ldi	r20, 0x01	; 1
     f6a:	50 e0       	ldi	r21, 0x00	; 0
     f6c:	c6 01       	movw	r24, r12
     f6e:	0e 94 4c 06 	call	0xc98	; 0xc98 <update_terminal_display>
			return false;
		} else if (board[next_next_row][next_next_col] == BOX) {
			display_terminal_message("box_box");
			return false;
		} else {
			box_moved = true;
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	01 c0       	rjmp	.+2      	; 0xf78 <move_player+0x22c>
	// | 3. Otherwise push the box and move the player, then clear the   |
	// |    message area of the terminal and return a valid indicating a |
	// |    valid move.                                                  |
	// +-----------------------------------------------------------------+
	
	bool box_moved = false;
     f76:	80 e0       	ldi	r24, 0x00	; 0
				update_terminal_display(next_next_row, MATRIX_NUM_ROWS-next_next_row, 1);
			}
		}
	}
	
	if (box_moved) {
     f78:	88 23       	and	r24, r24
     f7a:	39 f0       	breq	.+14     	; 0xf8a <move_player+0x23e>
		add_previous_box_location(next_row, next_col, next_next_row, next_next_col);
     f7c:	2e 2d       	mov	r18, r14
     f7e:	4c 2d       	mov	r20, r12
     f80:	60 2f       	mov	r22, r16
     f82:	8c 2f       	mov	r24, r28
     f84:	0e 94 3a 04 	call	0x874	; 0x874 <add_previous_box_location>
     f88:	06 c0       	rjmp	.+12     	; 0xf96 <move_player+0x24a>
		box_moved = false;
	} else {
		add_previous_box_location(-1,-1,-1,-1);
     f8a:	2f ef       	ldi	r18, 0xFF	; 255
     f8c:	4f ef       	ldi	r20, 0xFF	; 255
     f8e:	6f ef       	ldi	r22, 0xFF	; 255
     f90:	8f ef       	ldi	r24, 0xFF	; 255
     f92:	0e 94 3a 04 	call	0x874	; 0x874 <add_previous_box_location>
	}
	
	add_to_move_list(player_row, player_col);
     f96:	60 91 06 03 	lds	r22, 0x0306	; 0x800306 <player_col>
     f9a:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <player_row>
     f9e:	0e 94 ef 03 	call	0x7de	; 0x7de <add_to_move_list>
	player_row = next_row;
     fa2:	8c 2f       	mov	r24, r28
     fa4:	c0 93 07 03 	sts	0x0307, r28	; 0x800307 <player_row>
	player_col = next_col;
     fa8:	00 93 06 03 	sts	0x0306, r16	; 0x800306 <player_col>
	paint_square(player_row, player_col);
     fac:	60 2f       	mov	r22, r16
     fae:	0e 94 f5 02 	call	0x5ea	; 0x5ea <paint_square>
	update_terminal_display(player_row, MATRIX_NUM_ROWS-player_row, 1);
     fb2:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <player_row>
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	68 e0       	ldi	r22, 0x08	; 8
     fba:	70 e0       	ldi	r23, 0x00	; 0
     fbc:	68 1b       	sub	r22, r24
     fbe:	79 0b       	sbc	r23, r25
     fc0:	41 e0       	ldi	r20, 0x01	; 1
     fc2:	50 e0       	ldi	r21, 0x00	; 0
     fc4:	0e 94 4c 06 	call	0xc98	; 0xc98 <update_terminal_display>
	flash_player();
     fc8:	0e 94 9d 03 	call	0x73a	; 0x73a <flash_player>
	
	if (list_top == 0) {
     fcc:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <list_top>
     fd0:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <list_top+0x1>
     fd4:	00 97       	sbiw	r24, 0x00	; 0
     fd6:	21 f4       	brne	.+8      	; 0xfe0 <move_player+0x294>
		PORTD = 0b00100000;
     fd8:	80 e2       	ldi	r24, 0x20	; 32
     fda:	8b b9       	out	0x0b, r24	; 11
		PORTD = 0b00111001;
	} else if (list_top == 5) {
		PORTD = 0b00111001;
	}
	
	return true;
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	23 c0       	rjmp	.+70     	; 0x1026 <move_player+0x2da>
	update_terminal_display(player_row, MATRIX_NUM_ROWS-player_row, 1);
	flash_player();
	
	if (list_top == 0) {
		PORTD = 0b00100000;
	} else if (list_top == 1) {
     fe0:	81 30       	cpi	r24, 0x01	; 1
     fe2:	91 05       	cpc	r25, r1
     fe4:	21 f4       	brne	.+8      	; 0xfee <move_player+0x2a2>
		PORTD = 0b00110000;
     fe6:	80 e3       	ldi	r24, 0x30	; 48
     fe8:	8b b9       	out	0x0b, r24	; 11
		PORTD = 0b00111001;
	} else if (list_top == 5) {
		PORTD = 0b00111001;
	}
	
	return true;
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	1c c0       	rjmp	.+56     	; 0x1026 <move_player+0x2da>
	
	if (list_top == 0) {
		PORTD = 0b00100000;
	} else if (list_top == 1) {
		PORTD = 0b00110000;
	} else if (list_top == 2) {
     fee:	82 30       	cpi	r24, 0x02	; 2
     ff0:	91 05       	cpc	r25, r1
     ff2:	21 f4       	brne	.+8      	; 0xffc <move_player+0x2b0>
		PORTD = 0b00111000;
     ff4:	88 e3       	ldi	r24, 0x38	; 56
     ff6:	8b b9       	out	0x0b, r24	; 11
		PORTD = 0b00111001;
	} else if (list_top == 5) {
		PORTD = 0b00111001;
	}
	
	return true;
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	15 c0       	rjmp	.+42     	; 0x1026 <move_player+0x2da>
		PORTD = 0b00100000;
	} else if (list_top == 1) {
		PORTD = 0b00110000;
	} else if (list_top == 2) {
		PORTD = 0b00111000;
	} else if (list_top == 3) {
     ffc:	83 30       	cpi	r24, 0x03	; 3
     ffe:	91 05       	cpc	r25, r1
    1000:	21 f4       	brne	.+8      	; 0x100a <move_player+0x2be>
		PORTD = 0b00111001;
    1002:	89 e3       	ldi	r24, 0x39	; 57
    1004:	8b b9       	out	0x0b, r24	; 11
		PORTD = 0b00111001;
	} else if (list_top == 5) {
		PORTD = 0b00111001;
	}
	
	return true;
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	0e c0       	rjmp	.+28     	; 0x1026 <move_player+0x2da>
		PORTD = 0b00110000;
	} else if (list_top == 2) {
		PORTD = 0b00111000;
	} else if (list_top == 3) {
		PORTD = 0b00111001;
	} else if (list_top == 4) {
    100a:	84 30       	cpi	r24, 0x04	; 4
    100c:	91 05       	cpc	r25, r1
    100e:	21 f4       	brne	.+8      	; 0x1018 <move_player+0x2cc>
		PORTD = 0b00111001;
    1010:	89 e3       	ldi	r24, 0x39	; 57
    1012:	8b b9       	out	0x0b, r24	; 11
	} else if (list_top == 5) {
		PORTD = 0b00111001;
	}
	
	return true;
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	07 c0       	rjmp	.+14     	; 0x1026 <move_player+0x2da>
		PORTD = 0b00111000;
	} else if (list_top == 3) {
		PORTD = 0b00111001;
	} else if (list_top == 4) {
		PORTD = 0b00111001;
	} else if (list_top == 5) {
    1018:	05 97       	sbiw	r24, 0x05	; 5
    101a:	21 f4       	brne	.+8      	; 0x1024 <move_player+0x2d8>
		PORTD = 0b00111001;
    101c:	89 e3       	ldi	r24, 0x39	; 57
    101e:	8b b9       	out	0x0b, r24	; 11
	}
	
	return true;
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	01 c0       	rjmp	.+2      	; 0x1026 <move_player+0x2da>
    1024:	81 e0       	ldi	r24, 0x01	; 1
}
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	1f 91       	pop	r17
    102c:	0f 91       	pop	r16
    102e:	ff 90       	pop	r15
    1030:	ef 90       	pop	r14
    1032:	df 90       	pop	r13
    1034:	cf 90       	pop	r12
    1036:	bf 90       	pop	r11
    1038:	af 90       	pop	r10
    103a:	08 95       	ret

0000103c <move_diagonal>:

bool move_diagonal(int8_t delta_row_1, int8_t delta_col_1, int8_t delta_row_2, int8_t delta_col_2) {
    103c:	8f 92       	push	r8
    103e:	9f 92       	push	r9
    1040:	af 92       	push	r10
    1042:	bf 92       	push	r11
    1044:	df 92       	push	r13
    1046:	ef 92       	push	r14
    1048:	ff 92       	push	r15
    104a:	0f 93       	push	r16
    104c:	1f 93       	push	r17
    104e:	cf 93       	push	r28
    1050:	df 93       	push	r29
    1052:	06 2f       	mov	r16, r22
    1054:	d4 2e       	mov	r13, r20
    1056:	d2 2f       	mov	r29, r18
	int first_move_row;
	int first_move_col;
	int second_move_row;
	int second_move_col;
	first_move_row = modulo((player_row+delta_row_1), 8);  //try moving in the first direction first
    1058:	e8 2e       	mov	r14, r24
    105a:	88 0f       	add	r24, r24
    105c:	ff 08       	sbc	r15, r15
    105e:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <player_row>
    1062:	68 e0       	ldi	r22, 0x08	; 8
    1064:	70 e0       	ldi	r23, 0x00	; 0
    1066:	97 01       	movw	r18, r14
    1068:	28 0f       	add	r18, r24
    106a:	31 1d       	adc	r19, r1
    106c:	c9 01       	movw	r24, r18
    106e:	0e 94 43 06 	call	0xc86	; 0xc86 <modulo>
    1072:	4c 01       	movw	r8, r24
	first_move_col = modulo((player_col+delta_col_1), 16);
    1074:	00 2e       	mov	r0, r16
    1076:	00 0c       	add	r0, r0
    1078:	11 0b       	sbc	r17, r17
    107a:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <player_col>
    107e:	60 e1       	ldi	r22, 0x10	; 16
    1080:	70 e0       	ldi	r23, 0x00	; 0
    1082:	98 01       	movw	r18, r16
    1084:	28 0f       	add	r18, r24
    1086:	31 1d       	adc	r19, r1
    1088:	c9 01       	movw	r24, r18
    108a:	0e 94 43 06 	call	0xc86	; 0xc86 <modulo>
    108e:	5c 01       	movw	r10, r24
	if (check_wall_or_box(first_move_row, first_move_col)) {  //try first move
    1090:	bc 01       	movw	r22, r24
    1092:	c4 01       	movw	r24, r8
    1094:	0e 94 f6 05 	call	0xbec	; 0xbec <check_wall_or_box>
    1098:	88 23       	and	r24, r24
    109a:	09 f4       	brne	.+2      	; 0x109e <move_diagonal+0x62>
    109c:	40 c0       	rjmp	.+128    	; 0x111e <move_diagonal+0xe2>
		second_move_row = modulo((first_move_row+delta_row_2), 8);
    109e:	68 e0       	ldi	r22, 0x08	; 8
    10a0:	70 e0       	ldi	r23, 0x00	; 0
    10a2:	c4 01       	movw	r24, r8
    10a4:	8d 0d       	add	r24, r13
    10a6:	91 1d       	adc	r25, r1
    10a8:	d7 fc       	sbrc	r13, 7
    10aa:	9a 95       	dec	r25
    10ac:	0e 94 43 06 	call	0xc86	; 0xc86 <modulo>
    10b0:	98 2e       	mov	r9, r24
    10b2:	c9 2f       	mov	r28, r25
		second_move_col = modulo((first_move_col+delta_col_2), 16);
    10b4:	60 e1       	ldi	r22, 0x10	; 16
    10b6:	70 e0       	ldi	r23, 0x00	; 0
    10b8:	c5 01       	movw	r24, r10
    10ba:	8d 0f       	add	r24, r29
    10bc:	91 1d       	adc	r25, r1
    10be:	d7 fd       	sbrc	r29, 7
    10c0:	9a 95       	dec	r25
    10c2:	0e 94 43 06 	call	0xc86	; 0xc86 <modulo>
    10c6:	b8 2e       	mov	r11, r24
		if (check_wall_or_box(second_move_row, second_move_col)) {  //try second move
    10c8:	68 2f       	mov	r22, r24
    10ca:	79 2f       	mov	r23, r25
    10cc:	89 2d       	mov	r24, r9
    10ce:	9c 2f       	mov	r25, r28
    10d0:	0e 94 f6 05 	call	0xbec	; 0xbec <check_wall_or_box>
    10d4:	c8 2f       	mov	r28, r24
    10d6:	88 23       	and	r24, r24
    10d8:	11 f1       	breq	.+68     	; 0x111e <move_diagonal+0xe2>
			paint_square(player_row, player_col);  //second move successful
    10da:	60 91 06 03 	lds	r22, 0x0306	; 0x800306 <player_col>
    10de:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <player_row>
    10e2:	0e 94 f5 02 	call	0x5ea	; 0x5ea <paint_square>
			add_to_move_list(player_row, player_col);
    10e6:	60 91 06 03 	lds	r22, 0x0306	; 0x800306 <player_col>
    10ea:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <player_row>
    10ee:	0e 94 ef 03 	call	0x7de	; 0x7de <add_to_move_list>
			player_row = second_move_row;
    10f2:	90 92 07 03 	sts	0x0307, r9	; 0x800307 <player_row>
			player_col = second_move_col;
    10f6:	b0 92 06 03 	sts	0x0306, r11	; 0x800306 <player_col>
			paint_square(player_row, player_col);
    10fa:	6b 2d       	mov	r22, r11
    10fc:	89 2d       	mov	r24, r9
    10fe:	0e 94 f5 02 	call	0x5ea	; 0x5ea <paint_square>
			update_terminal_display(player_row, MATRIX_NUM_ROWS-player_row, 1);
    1102:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <player_row>
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	68 e0       	ldi	r22, 0x08	; 8
    110a:	70 e0       	ldi	r23, 0x00	; 0
    110c:	68 1b       	sub	r22, r24
    110e:	79 0b       	sbc	r23, r25
    1110:	41 e0       	ldi	r20, 0x01	; 1
    1112:	50 e0       	ldi	r21, 0x00	; 0
    1114:	0e 94 4c 06 	call	0xc98	; 0xc98 <update_terminal_display>
			flash_player();
    1118:	0e 94 9d 03 	call	0x73a	; 0x73a <flash_player>
			return true;
    111c:	5a c0       	rjmp	.+180    	; 0x11d2 <move_diagonal+0x196>
		}
	} 
	first_move_row = modulo((player_row+delta_row_2), 8);  //try moving in the second direction first
    111e:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <player_row>
    1122:	8d 2d       	mov	r24, r13
    1124:	dd 0c       	add	r13, r13
    1126:	99 0b       	sbc	r25, r25
    1128:	68 e0       	ldi	r22, 0x08	; 8
    112a:	70 e0       	ldi	r23, 0x00	; 0
    112c:	82 0f       	add	r24, r18
    112e:	91 1d       	adc	r25, r1
    1130:	0e 94 43 06 	call	0xc86	; 0xc86 <modulo>
    1134:	5c 01       	movw	r10, r24
	first_move_col = modulo((player_col+delta_col_2), 16);
    1136:	20 91 06 03 	lds	r18, 0x0306	; 0x800306 <player_col>
    113a:	8d 2f       	mov	r24, r29
    113c:	dd 0f       	add	r29, r29
    113e:	99 0b       	sbc	r25, r25
    1140:	60 e1       	ldi	r22, 0x10	; 16
    1142:	70 e0       	ldi	r23, 0x00	; 0
    1144:	82 0f       	add	r24, r18
    1146:	91 1d       	adc	r25, r1
    1148:	0e 94 43 06 	call	0xc86	; 0xc86 <modulo>
    114c:	4c 01       	movw	r8, r24
	if (check_wall_or_box(first_move_row, first_move_col)) {  //try first move
    114e:	bc 01       	movw	r22, r24
    1150:	c5 01       	movw	r24, r10
    1152:	0e 94 f6 05 	call	0xbec	; 0xbec <check_wall_or_box>
    1156:	c8 2f       	mov	r28, r24
    1158:	88 23       	and	r24, r24
    115a:	d9 f1       	breq	.+118    	; 0x11d2 <move_diagonal+0x196>
		second_move_row = modulo((first_move_row+delta_row_1), 8);
    115c:	68 e0       	ldi	r22, 0x08	; 8
    115e:	70 e0       	ldi	r23, 0x00	; 0
    1160:	c7 01       	movw	r24, r14
    1162:	8a 0d       	add	r24, r10
    1164:	9b 1d       	adc	r25, r11
    1166:	0e 94 43 06 	call	0xc86	; 0xc86 <modulo>
    116a:	d8 2f       	mov	r29, r24
    116c:	c9 2f       	mov	r28, r25
		second_move_col = modulo((first_move_col+delta_col_1), 16);
    116e:	60 e1       	ldi	r22, 0x10	; 16
    1170:	70 e0       	ldi	r23, 0x00	; 0
    1172:	c8 01       	movw	r24, r16
    1174:	88 0d       	add	r24, r8
    1176:	99 1d       	adc	r25, r9
    1178:	0e 94 43 06 	call	0xc86	; 0xc86 <modulo>
    117c:	18 2f       	mov	r17, r24
		if (check_wall_or_box(second_move_row, second_move_col)) {  //try second move
    117e:	68 2f       	mov	r22, r24
    1180:	79 2f       	mov	r23, r25
    1182:	8d 2f       	mov	r24, r29
    1184:	9c 2f       	mov	r25, r28
    1186:	0e 94 f6 05 	call	0xbec	; 0xbec <check_wall_or_box>
    118a:	c8 2f       	mov	r28, r24
    118c:	88 23       	and	r24, r24
    118e:	09 f1       	breq	.+66     	; 0x11d2 <move_diagonal+0x196>
			paint_square(player_row, player_col);  //second move successful
    1190:	60 91 06 03 	lds	r22, 0x0306	; 0x800306 <player_col>
    1194:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <player_row>
    1198:	0e 94 f5 02 	call	0x5ea	; 0x5ea <paint_square>
			add_to_move_list(player_row, player_col);
    119c:	60 91 06 03 	lds	r22, 0x0306	; 0x800306 <player_col>
    11a0:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <player_row>
    11a4:	0e 94 ef 03 	call	0x7de	; 0x7de <add_to_move_list>
			player_row = second_move_row;
    11a8:	d0 93 07 03 	sts	0x0307, r29	; 0x800307 <player_row>
			player_col = second_move_col;
    11ac:	10 93 06 03 	sts	0x0306, r17	; 0x800306 <player_col>
			paint_square(player_row, player_col);
    11b0:	61 2f       	mov	r22, r17
    11b2:	8d 2f       	mov	r24, r29
    11b4:	0e 94 f5 02 	call	0x5ea	; 0x5ea <paint_square>
			update_terminal_display(player_row, MATRIX_NUM_ROWS-player_row, 1);
    11b8:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <player_row>
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	68 e0       	ldi	r22, 0x08	; 8
    11c0:	70 e0       	ldi	r23, 0x00	; 0
    11c2:	68 1b       	sub	r22, r24
    11c4:	79 0b       	sbc	r23, r25
    11c6:	41 e0       	ldi	r20, 0x01	; 1
    11c8:	50 e0       	ldi	r21, 0x00	; 0
    11ca:	0e 94 4c 06 	call	0xc98	; 0xc98 <update_terminal_display>
			flash_player();
    11ce:	0e 94 9d 03 	call	0x73a	; 0x73a <flash_player>
			return true;
		}
	}
	return false;  //both directions failed, move cannot be made
}
    11d2:	8c 2f       	mov	r24, r28
    11d4:	df 91       	pop	r29
    11d6:	cf 91       	pop	r28
    11d8:	1f 91       	pop	r17
    11da:	0f 91       	pop	r16
    11dc:	ff 90       	pop	r15
    11de:	ef 90       	pop	r14
    11e0:	df 90       	pop	r13
    11e2:	bf 90       	pop	r11
    11e4:	af 90       	pop	r10
    11e6:	9f 90       	pop	r9
    11e8:	8f 90       	pop	r8
    11ea:	08 95       	ret

000011ec <draw_terminal_board>:
int modulo(int x,int y){
	return (x % y + y) % y;
}

//Paints the current board on the terminal display
void draw_terminal_board(void) {
    11ec:	0f 93       	push	r16
    11ee:	1f 93       	push	r17
    11f0:	cf 93       	push	r28
    11f2:	df 93       	push	r29
	int GAME_BOARD_ROW = 1;
	int GAME_BOARD_COL = 1;
	for (int row = MATRIX_NUM_ROWS-1; row >= 0; row--) {
    11f4:	c7 e0       	ldi	r28, 0x07	; 7
    11f6:	d0 e0       	ldi	r29, 0x00	; 0
	return (x % y + y) % y;
}

//Paints the current board on the terminal display
void draw_terminal_board(void) {
	int GAME_BOARD_ROW = 1;
    11f8:	01 e0       	ldi	r16, 0x01	; 1
    11fa:	10 e0       	ldi	r17, 0x00	; 0
	int GAME_BOARD_COL = 1;
	for (int row = MATRIX_NUM_ROWS-1; row >= 0; row--) {
    11fc:	0d c0       	rjmp	.+26     	; 0x1218 <draw_terminal_board+0x2c>
		update_terminal_display(row, GAME_BOARD_ROW, GAME_BOARD_COL);
    11fe:	41 e0       	ldi	r20, 0x01	; 1
    1200:	50 e0       	ldi	r21, 0x00	; 0
    1202:	b8 01       	movw	r22, r16
    1204:	ce 01       	movw	r24, r28
    1206:	0e 94 4c 06 	call	0xc98	; 0xc98 <update_terminal_display>
		printf("\n");
    120a:	8a e0       	ldi	r24, 0x0A	; 10
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	0e 94 b8 13 	call	0x2770	; 0x2770 <putchar>
		GAME_BOARD_ROW++;
    1212:	0f 5f       	subi	r16, 0xFF	; 255
    1214:	1f 4f       	sbci	r17, 0xFF	; 255

//Paints the current board on the terminal display
void draw_terminal_board(void) {
	int GAME_BOARD_ROW = 1;
	int GAME_BOARD_COL = 1;
	for (int row = MATRIX_NUM_ROWS-1; row >= 0; row--) {
    1216:	21 97       	sbiw	r28, 0x01	; 1
    1218:	dd 23       	and	r29, r29
    121a:	8c f7       	brge	.-30     	; 0x11fe <draw_terminal_board+0x12>
		update_terminal_display(row, GAME_BOARD_ROW, GAME_BOARD_COL);
		printf("\n");
		GAME_BOARD_ROW++;
	}
}
    121c:	df 91       	pop	r29
    121e:	cf 91       	pop	r28
    1220:	1f 91       	pop	r17
    1222:	0f 91       	pop	r16
    1224:	08 95       	ret

00001226 <initialise_game>:
	}
}

// This function initialises the global variables used to store the game
// state, and renders the initial game display.
void initialise_game(int level) {
    1226:	cf 93       	push	r28
    1228:	df 93       	push	r29
	
	initialise_level(level);
    122a:	0e 94 20 03 	call	0x640	; 0x640 <initialise_level>

	// Make the player icon initially invisible.
	player_visible = false;
    122e:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <player_visible>

	// Draw the game board (map).
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
    1232:	d0 e0       	ldi	r29, 0x00	; 0
    1234:	0a c0       	rjmp	.+20     	; 0x124a <initialise_game+0x24>
	{
		for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
		{
			paint_square(row, col);
    1236:	6c 2f       	mov	r22, r28
    1238:	8d 2f       	mov	r24, r29
    123a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <paint_square>
	player_visible = false;

	// Draw the game board (map).
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
	{
		for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
    123e:	cf 5f       	subi	r28, 0xFF	; 255
    1240:	01 c0       	rjmp	.+2      	; 0x1244 <initialise_game+0x1e>
    1242:	c0 e0       	ldi	r28, 0x00	; 0
    1244:	c0 31       	cpi	r28, 0x10	; 16
    1246:	b8 f3       	brcs	.-18     	; 0x1236 <initialise_game+0x10>

	// Make the player icon initially invisible.
	player_visible = false;

	// Draw the game board (map).
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
    1248:	df 5f       	subi	r29, 0xFF	; 255
    124a:	d8 30       	cpi	r29, 0x08	; 8
    124c:	d0 f3       	brcs	.-12     	; 0x1242 <initialise_game+0x1c>
			paint_square(row, col);
		}
	}
	
	//Draw the game board on the terminal
	draw_terminal_board();
    124e:	0e 94 f6 08 	call	0x11ec	; 0x11ec <draw_terminal_board>
}
    1252:	df 91       	pop	r29
    1254:	cf 91       	pop	r28
    1256:	08 95       	ret

00001258 <init_joystick>:

#include <stdio.h>
#include <avr/interrupt.h>

void init_joystick(void) {
	init_serial_stdio(19200,0);
    1258:	40 e0       	ldi	r20, 0x00	; 0
    125a:	60 e0       	ldi	r22, 0x00	; 0
    125c:	7b e4       	ldi	r23, 0x4B	; 75
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <init_serial_stdio>

	// Set up ADC - AVCC reference, right adjust
	// loop below.
	ADMUX = (1<<REFS0);
    1266:	80 e4       	ldi	r24, 0x40	; 64
    1268:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	// Turn on the ADC (but don't start a conversion yet). Choose a clock
	// divider of 64. (The ADC clock must be somewhere
	// between 50kHz and 200kHz. We will divide our 8MHz clock by 64
	// to give us 125kHz.)
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1);
    126c:	86 e8       	ldi	r24, 0x86	; 134
    126e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1272:	08 95       	ret

00001274 <init_ledmatrix>:
}

void ledmatrix_shift_display_down(void)
{
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
    1274:	80 e8       	ldi	r24, 0x80	; 128
    1276:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <spi_setup_master>
    127a:	08 95       	ret

0000127c <ledmatrix_update_pixel>:
    127c:	1f 93       	push	r17
    127e:	cf 93       	push	r28
    1280:	df 93       	push	r29
    1282:	60 31       	cpi	r22, 0x10	; 16
    1284:	b0 f4       	brcc	.+44     	; 0x12b2 <ledmatrix_update_pixel+0x36>
    1286:	88 30       	cpi	r24, 0x08	; 8
    1288:	a0 f4       	brcc	.+40     	; 0x12b2 <ledmatrix_update_pixel+0x36>
    128a:	14 2f       	mov	r17, r20
    128c:	d6 2f       	mov	r29, r22
    128e:	c8 2f       	mov	r28, r24
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <spi_send_byte>
    1296:	8c 2f       	mov	r24, r28
    1298:	87 70       	andi	r24, 0x07	; 7
    129a:	20 e1       	ldi	r18, 0x10	; 16
    129c:	82 9f       	mul	r24, r18
    129e:	c0 01       	movw	r24, r0
    12a0:	11 24       	eor	r1, r1
    12a2:	6d 2f       	mov	r22, r29
    12a4:	6f 70       	andi	r22, 0x0F	; 15
    12a6:	86 2b       	or	r24, r22
    12a8:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <spi_send_byte>
    12ac:	81 2f       	mov	r24, r17
    12ae:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <spi_send_byte>
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
    12b6:	1f 91       	pop	r17
    12b8:	08 95       	ret

000012ba <ledmatrix_update_column>:
    12ba:	0f 93       	push	r16
    12bc:	1f 93       	push	r17
    12be:	cf 93       	push	r28
    12c0:	80 31       	cpi	r24, 0x10	; 16
    12c2:	a0 f4       	brcc	.+40     	; 0x12ec <ledmatrix_update_column+0x32>
    12c4:	8b 01       	movw	r16, r22
    12c6:	c8 2f       	mov	r28, r24
    12c8:	83 e0       	ldi	r24, 0x03	; 3
    12ca:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <spi_send_byte>
    12ce:	8c 2f       	mov	r24, r28
    12d0:	8f 70       	andi	r24, 0x0F	; 15
    12d2:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <spi_send_byte>
    12d6:	c0 e0       	ldi	r28, 0x00	; 0
    12d8:	07 c0       	rjmp	.+14     	; 0x12e8 <ledmatrix_update_column+0x2e>
    12da:	f8 01       	movw	r30, r16
    12dc:	ec 0f       	add	r30, r28
    12de:	f1 1d       	adc	r31, r1
    12e0:	80 81       	ld	r24, Z
    12e2:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <spi_send_byte>
    12e6:	cf 5f       	subi	r28, 0xFF	; 255
    12e8:	c8 30       	cpi	r28, 0x08	; 8
    12ea:	b8 f3       	brcs	.-18     	; 0x12da <ledmatrix_update_column+0x20>
    12ec:	cf 91       	pop	r28
    12ee:	1f 91       	pop	r17
    12f0:	0f 91       	pop	r16
    12f2:	08 95       	ret

000012f4 <ledmatrix_shift_display_left>:
    12f4:	84 e0       	ldi	r24, 0x04	; 4
    12f6:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <spi_send_byte>
    12fa:	82 e0       	ldi	r24, 0x02	; 2
    12fc:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <spi_send_byte>
    1300:	08 95       	ret

00001302 <ledmatrix_clear>:
}

void ledmatrix_clear(void)
{
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
    1302:	8f e0       	ldi	r24, 0x0F	; 15
    1304:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <spi_send_byte>
    1308:	08 95       	ret

0000130a <initialise_hardware>:
	DDRD &= (11111101);
	handle_game_over();
}

void increment_step_counter(void) {
	step_counter++;
    130a:	0e 94 3a 09 	call	0x1274	; 0x1274 <init_ledmatrix>
    130e:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <init_buttons>
    1312:	40 e0       	ldi	r20, 0x00	; 0
    1314:	60 e0       	ldi	r22, 0x00	; 0
    1316:	7b e4       	ldi	r23, 0x4B	; 75
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <init_serial_stdio>
    1320:	0e 94 8f 11 	call	0x231e	; 0x231e <init_timer0>
    1324:	0e 94 da 11 	call	0x23b4	; 0x23b4 <init_timer1>
    1328:	0e 94 df 11 	call	0x23be	; 0x23be <init_timer2>
    132c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <init_buzzer>
    1330:	0e 94 2c 09 	call	0x1258	; 0x1258 <init_joystick>
    1334:	8a b1       	in	r24, 0x0a	; 10
    1336:	89 63       	ori	r24, 0x39	; 57
    1338:	8a b9       	out	0x0a, r24	; 10
    133a:	78 94       	sei
    133c:	08 95       	ret

0000133e <start_screen>:
    133e:	0e 94 86 11 	call	0x230c	; 0x230c <hide_cursor>
    1342:	0e 94 5e 11 	call	0x22bc	; 0x22bc <normal_display_mode>
    1346:	0e 94 67 11 	call	0x22ce	; 0x22ce <clear_terminal>
    134a:	65 e0       	ldi	r22, 0x05	; 5
    134c:	83 e0       	ldi	r24, 0x03	; 3
    134e:	0e 94 24 11 	call	0x2248	; 0x2248 <display_terminal_title>
    1352:	65 e0       	ldi	r22, 0x05	; 5
    1354:	70 e0       	ldi	r23, 0x00	; 0
    1356:	8b e0       	ldi	r24, 0x0B	; 11
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	0e 94 4a 11 	call	0x2294	; 0x2294 <move_terminal_cursor>
    135e:	86 e7       	ldi	r24, 0x76	; 118
    1360:	91 e0       	ldi	r25, 0x01	; 1
    1362:	9f 93       	push	r25
    1364:	8f 93       	push	r24
    1366:	0e 94 92 13 	call	0x2724	; 0x2724 <printf_P>
    136a:	0e 94 6f 10 	call	0x20de	; 0x20de <setup_start_screen>
    136e:	0e 94 18 02 	call	0x430	; 0x430 <clear_button_presses>
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <button_pushed>
    137a:	8f 3f       	cpi	r24, 0xFF	; 255
    137c:	99 f4       	brne	.+38     	; 0x13a4 <start_screen+0x66>
    137e:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <serial_input_available>
    1382:	88 23       	and	r24, r24
    1384:	61 f0       	breq	.+24     	; 0x139e <start_screen+0x60>
    1386:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <__iob>
    138a:	90 91 b2 04 	lds	r25, 0x04B2	; 0x8004b2 <__iob+0x1>
    138e:	0e 94 02 13 	call	0x2604	; 0x2604 <fgetc>
    1392:	83 37       	cpi	r24, 0x73	; 115
    1394:	91 05       	cpc	r25, r1
    1396:	31 f0       	breq	.+12     	; 0x13a4 <start_screen+0x66>
    1398:	83 35       	cpi	r24, 0x53	; 83
    139a:	91 05       	cpc	r25, r1
    139c:	19 f0       	breq	.+6      	; 0x13a4 <start_screen+0x66>
    139e:	0e 94 79 10 	call	0x20f2	; 0x20f2 <update_start_screen>
    13a2:	e9 cf       	rjmp	.-46     	; 0x1376 <start_screen+0x38>
    13a4:	08 95       	ret

000013a6 <new_game>:
    13a6:	cf 93       	push	r28
    13a8:	df 93       	push	r29
    13aa:	ec 01       	movw	r28, r24
    13ac:	0e 94 86 11 	call	0x230c	; 0x230c <hide_cursor>
    13b0:	0e 94 67 11 	call	0x22ce	; 0x22ce <clear_terminal>
    13b4:	ce 01       	movw	r24, r28
    13b6:	0e 94 13 09 	call	0x1226	; 0x1226 <initialise_game>
    13ba:	61 e0       	ldi	r22, 0x01	; 1
    13bc:	70 e0       	ldi	r23, 0x00	; 0
    13be:	8a e0       	ldi	r24, 0x0A	; 10
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	0e 94 4a 11 	call	0x2294	; 0x2294 <move_terminal_cursor>
    13c6:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <current_level>
    13ca:	1f 92       	push	r1
    13cc:	8f 93       	push	r24
    13ce:	88 ed       	ldi	r24, 0xD8	; 216
    13d0:	92 e0       	ldi	r25, 0x02	; 2
    13d2:	9f 93       	push	r25
    13d4:	8f 93       	push	r24
    13d6:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <printf>
    13da:	8a b1       	in	r24, 0x0a	; 10
    13dc:	80 64       	ori	r24, 0x40	; 64
    13de:	8a b9       	out	0x0a, r24	; 10
    13e0:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <buzzer_enabled>
    13e4:	0e 94 8e 02 	call	0x51c	; 0x51c <play_start_sound>
    13e8:	0e 94 18 02 	call	0x430	; 0x430 <clear_button_presses>
    13ec:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <clear_serial_input_buffer>
    13f0:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <step_counter>
    13f4:	0f 90       	pop	r0
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	df 91       	pop	r29
    13fe:	cf 91       	pop	r28
    1400:	08 95       	ret

00001402 <handle_game_over>:
}

void handle_game_over(void)
{
	move_terminal_cursor(14, 10);
    1402:	6a e0       	ldi	r22, 0x0A	; 10
    1404:	70 e0       	ldi	r23, 0x00	; 0
    1406:	8e e0       	ldi	r24, 0x0E	; 14
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	0e 94 4a 11 	call	0x2294	; 0x2294 <move_terminal_cursor>
	printf_P(PSTR("GAME OVER"));
    140e:	8c e6       	ldi	r24, 0x6C	; 108
    1410:	91 e0       	ldi	r25, 0x01	; 1
    1412:	9f 93       	push	r25
    1414:	8f 93       	push	r24
    1416:	0e 94 92 13 	call	0x2724	; 0x2724 <printf_P>
	move_terminal_cursor(15, 10);
    141a:	6a e0       	ldi	r22, 0x0A	; 10
    141c:	70 e0       	ldi	r23, 0x00	; 0
    141e:	8f e0       	ldi	r24, 0x0F	; 15
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	0e 94 4a 11 	call	0x2294	; 0x2294 <move_terminal_cursor>
	printf_P(PSTR("Press 'r'/'R' to restart, 'e'/'E' to exit,"));
    1426:	81 e4       	ldi	r24, 0x41	; 65
    1428:	91 e0       	ldi	r25, 0x01	; 1
    142a:	9f 93       	push	r25
    142c:	8f 93       	push	r24
    142e:	0e 94 92 13 	call	0x2724	; 0x2724 <printf_P>
	move_terminal_cursor(16, 10);
    1432:	6a e0       	ldi	r22, 0x0A	; 10
    1434:	70 e0       	ldi	r23, 0x00	; 0
    1436:	80 e1       	ldi	r24, 0x10	; 16
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	0e 94 4a 11 	call	0x2294	; 0x2294 <move_terminal_cursor>
	printf_P(PSTR("or press 'n'/'N' to progress to level 2"));
    143e:	89 e1       	ldi	r24, 0x19	; 25
    1440:	91 e0       	ldi	r25, 0x01	; 1
    1442:	9f 93       	push	r25
    1444:	8f 93       	push	r24
    1446:	0e 94 92 13 	call	0x2724	; 0x2724 <printf_P>
	
	//calculate and print score
	int score = 0;
	if (200-step_counter > 0) {
    144a:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <step_counter>
    144e:	c8 ec       	ldi	r28, 0xC8	; 200
    1450:	d0 e0       	ldi	r29, 0x00	; 0
    1452:	c8 1b       	sub	r28, r24
    1454:	d1 09       	sbc	r29, r1
    1456:	0f 90       	pop	r0
    1458:	0f 90       	pop	r0
    145a:	0f 90       	pop	r0
    145c:	0f 90       	pop	r0
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	1c 16       	cp	r1, r28
    1464:	1d 06       	cpc	r1, r29
    1466:	14 f0       	brlt	.+4      	; 0x146c <handle_game_over+0x6a>
	printf_P(PSTR("Press 'r'/'R' to restart, 'e'/'E' to exit,"));
	move_terminal_cursor(16, 10);
	printf_P(PSTR("or press 'n'/'N' to progress to level 2"));
	
	//calculate and print score
	int score = 0;
    1468:	c0 e0       	ldi	r28, 0x00	; 0
    146a:	d0 e0       	ldi	r29, 0x00	; 0
	if (200-step_counter > 0) {
		score += 200-step_counter;
	}
	if (1200-play_time > 0) {
    146c:	20 91 9c 03 	lds	r18, 0x039C	; 0x80039c <play_time>
    1470:	80 eb       	ldi	r24, 0xB0	; 176
    1472:	94 e0       	ldi	r25, 0x04	; 4
    1474:	82 1b       	sub	r24, r18
    1476:	91 09       	sbc	r25, r1
    1478:	18 16       	cp	r1, r24
    147a:	19 06       	cpc	r1, r25
    147c:	14 f4       	brge	.+4      	; 0x1482 <handle_game_over+0x80>
		score += 1200-play_time;
    147e:	c8 0f       	add	r28, r24
    1480:	d9 1f       	adc	r29, r25
	}
	move_terminal_cursor(18, 10);
    1482:	6a e0       	ldi	r22, 0x0A	; 10
    1484:	70 e0       	ldi	r23, 0x00	; 0
    1486:	82 e1       	ldi	r24, 0x12	; 18
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	0e 94 4a 11 	call	0x2294	; 0x2294 <move_terminal_cursor>
	printf("Score: %d", score);
    148e:	df 93       	push	r29
    1490:	cf 93       	push	r28
    1492:	82 ee       	ldi	r24, 0xE2	; 226
    1494:	92 e0       	ldi	r25, 0x02	; 2
    1496:	9f 93       	push	r25
    1498:	8f 93       	push	r24
    149a:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <printf>
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0

	//For ssd
	int digit = 0;
    14a6:	c0 e0       	ldi	r28, 0x00	; 0
    14a8:	d0 e0       	ldi	r29, 0x00	; 0
	while (1)
	{
		// Get serial input. If no serial input is ready, serial_input
		// would be -1 (not a valid character).
		int serial_input = -1;
		if (serial_input_available())
    14aa:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <serial_input_available>
    14ae:	88 23       	and	r24, r24
    14b0:	39 f0       	breq	.+14     	; 0x14c0 <handle_game_over+0xbe>
		{
			serial_input = fgetc(stdin);
    14b2:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <__iob>
    14b6:	90 91 b2 04 	lds	r25, 0x04B2	; 0x8004b2 <__iob+0x1>
    14ba:	0e 94 02 13 	call	0x2604	; 0x2604 <fgetc>
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <handle_game_over+0xc2>
	// Do nothing until a valid input is made.
	while (1)
	{
		// Get serial input. If no serial input is ready, serial_input
		// would be -1 (not a valid character).
		int serial_input = -1;
    14c0:	8f ef       	ldi	r24, 0xFF	; 255
    14c2:	9f ef       	ldi	r25, 0xFF	; 255
		{
			serial_input = fgetc(stdin);
		}

		// Check serial input.
		if (toupper(serial_input) == 'R') {
    14c4:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <toupper>
    14c8:	82 35       	cpi	r24, 0x52	; 82
    14ca:	91 05       	cpc	r25, r1
    14cc:	41 f4       	brne	.+16     	; 0x14de <handle_game_over+0xdc>
			new_game(current_level);
    14ce:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <current_level>
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <new_game>
			play_game();
    14d8:	0e 94 c6 0a 	call	0x158c	; 0x158c <play_game>
    14dc:	1c c0       	rjmp	.+56     	; 0x1516 <handle_game_over+0x114>
		} else if (toupper(serial_input) == 'E') {
    14de:	85 34       	cpi	r24, 0x45	; 69
    14e0:	91 05       	cpc	r25, r1
    14e2:	69 f4       	brne	.+26     	; 0x14fe <handle_game_over+0xfc>
			current_level = 1;
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <current_level>
			start_screen();
    14ea:	0e 94 9f 09 	call	0x133e	; 0x133e <start_screen>
			new_game(current_level);
    14ee:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <current_level>
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <new_game>
			play_game();
    14f8:	0e 94 c6 0a 	call	0x158c	; 0x158c <play_game>
    14fc:	0c c0       	rjmp	.+24     	; 0x1516 <handle_game_over+0x114>
		} else if (toupper(serial_input) == 'N') {
    14fe:	8e 34       	cpi	r24, 0x4E	; 78
    1500:	91 05       	cpc	r25, r1
    1502:	49 f4       	brne	.+18     	; 0x1516 <handle_game_over+0x114>
			current_level = 2;
    1504:	82 e0       	ldi	r24, 0x02	; 2
    1506:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <current_level>
			new_game(current_level);
    150a:	82 e0       	ldi	r24, 0x02	; 2
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <new_game>
			play_game();
    1512:	0e 94 c6 0a 	call	0x158c	; 0x158c <play_game>
		}
		
		if(digit == 0) {
    1516:	20 97       	sbiw	r28, 0x00	; 0
    1518:	91 f4       	brne	.+36     	; 0x153e <handle_game_over+0x13c>
			value = step_counter % 10;
    151a:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <step_counter>
    151e:	ed ec       	ldi	r30, 0xCD	; 205
    1520:	9e 9f       	mul	r25, r30
    1522:	e1 2d       	mov	r30, r1
    1524:	11 24       	eor	r1, r1
    1526:	e6 95       	lsr	r30
    1528:	e6 95       	lsr	r30
    152a:	e6 95       	lsr	r30
    152c:	ee 0f       	add	r30, r30
    152e:	8e 2f       	mov	r24, r30
    1530:	88 0f       	add	r24, r24
    1532:	88 0f       	add	r24, r24
    1534:	e8 0f       	add	r30, r24
    1536:	9e 1b       	sub	r25, r30
    1538:	e9 2f       	mov	r30, r25
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	17 c0       	rjmp	.+46     	; 0x156c <handle_game_over+0x16a>
			} else {
			value = (step_counter / 10) % 10;
    153e:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <step_counter>
    1542:	ed ec       	ldi	r30, 0xCD	; 205
    1544:	8e 9f       	mul	r24, r30
    1546:	81 2d       	mov	r24, r1
    1548:	11 24       	eor	r1, r1
    154a:	86 95       	lsr	r24
    154c:	86 95       	lsr	r24
    154e:	86 95       	lsr	r24
    1550:	8e 9f       	mul	r24, r30
    1552:	e1 2d       	mov	r30, r1
    1554:	11 24       	eor	r1, r1
    1556:	e6 95       	lsr	r30
    1558:	e6 95       	lsr	r30
    155a:	e6 95       	lsr	r30
    155c:	ee 0f       	add	r30, r30
    155e:	9e 2f       	mov	r25, r30
    1560:	99 0f       	add	r25, r25
    1562:	99 0f       	add	r25, r25
    1564:	e9 0f       	add	r30, r25
    1566:	8e 1b       	sub	r24, r30
    1568:	e8 2f       	mov	r30, r24
    156a:	f0 e0       	ldi	r31, 0x00	; 0
		}
		PORTC = seven_seg[value];
    156c:	e0 5b       	subi	r30, 0xB0	; 176
    156e:	fe 4f       	sbci	r31, 0xFE	; 254
    1570:	80 81       	ld	r24, Z
    1572:	88 b9       	out	0x08, r24	; 8
		PORTD = (digit << 5);
    1574:	8c 2f       	mov	r24, r28
    1576:	82 95       	swap	r24
    1578:	88 0f       	add	r24, r24
    157a:	80 7e       	andi	r24, 0xE0	; 224
    157c:	8b b9       	out	0x0b, r24	; 11
		digit = 1- digit;
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	9c 01       	movw	r18, r24
    1584:	2c 1b       	sub	r18, r28
    1586:	3d 0b       	sbc	r19, r29
    1588:	e9 01       	movw	r28, r18
	}
    158a:	8f cf       	rjmp	.-226    	; 0x14aa <handle_game_over+0xa8>

0000158c <play_game>:
	//Reset step counter
	step_counter = 0;
}

void play_game(void)
{
    158c:	cf 93       	push	r28
    158e:	df 93       	push	r29
    1590:	cd b7       	in	r28, 0x3d	; 61
    1592:	de b7       	in	r29, 0x3e	; 62
    1594:	6c 97       	sbiw	r28, 0x1c	; 28
    1596:	0f b6       	in	r0, 0x3f	; 63
    1598:	f8 94       	cli
    159a:	de bf       	out	0x3e, r29	; 62
    159c:	0f be       	out	0x3f, r0	; 63
    159e:	cd bf       	out	0x3d, r28	; 61
	//Prepare variables for joystick
	uint16_t value_x;
	uint16_t value_y;
	
	//Initialise step counter
	step_counter = 0;
    15a0:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <step_counter>
	uint8_t value = 0;
	uint8_t digit = 0; /* 0 = right, 1 = left */
	DDRC = 0xFF;
    15a4:	8f ef       	ldi	r24, 0xFF	; 255
    15a6:	87 b9       	out	0x07, r24	; 7
	DDRD = (1 << 5);
    15a8:	80 e2       	ldi	r24, 0x20	; 32
    15aa:	8a b9       	out	0x0a, r24	; 10
	
	uint32_t last_flash_time = get_current_time();
    15ac:	0e 94 a5 11 	call	0x234a	; 0x234a <get_current_time>
    15b0:	6d 8b       	std	Y+21, r22	; 0x15
    15b2:	7e 8b       	std	Y+22, r23	; 0x16
    15b4:	8f 8b       	std	Y+23, r24	; 0x17
    15b6:	98 8f       	std	Y+24, r25	; 0x18
	uint32_t last_target_flash_time = get_current_time();
    15b8:	0e 94 a5 11 	call	0x234a	; 0x234a <get_current_time>
    15bc:	4b 01       	movw	r8, r22
    15be:	5c 01       	movw	r10, r24
	uint32_t last_animation_flash = get_current_time();
    15c0:	0e 94 a5 11 	call	0x234a	; 0x234a <get_current_time>
	uint32_t last_input = 0;
	
	bool accept_input = true;
	
	play_time = 0;
    15c4:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <play_time>
	
	uint16_t sensitivity_diagonal = 200;
	uint16_t sensitivity_regular = 400;
	
	//Set rest values for joystick (ensure joystick is at rest when starting game)
	ADMUX &= ~1;
    15c8:	ec e7       	ldi	r30, 0x7C	; 124
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	8e 7f       	andi	r24, 0xFE	; 254
    15d0:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
    15d2:	ea e7       	ldi	r30, 0x7A	; 122
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	80 64       	ori	r24, 0x40	; 64
    15da:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC)) {;}
    15dc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    15e0:	86 fd       	sbrc	r24, 6
    15e2:	fc cf       	rjmp	.-8      	; 0x15dc <play_game+0x50>
	uint16_t rest_value_x = ADC;
    15e4:	20 90 78 00 	lds	r2, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    15e8:	30 90 79 00 	lds	r3, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	
	ADMUX |= 1;
    15ec:	ec e7       	ldi	r30, 0x7C	; 124
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	81 60       	ori	r24, 0x01	; 1
    15f4:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
    15f6:	ea e7       	ldi	r30, 0x7A	; 122
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	80 64       	ori	r24, 0x40	; 64
    15fe:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC)) {;}
    1600:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1604:	86 fd       	sbrc	r24, 6
    1606:	fc cf       	rjmp	.-8      	; 0x1600 <play_game+0x74>
	uint16_t rest_value_y = ADC;
    1608:	60 90 78 00 	lds	r6, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    160c:	70 90 79 00 	lds	r7, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	uint32_t last_flash_time = get_current_time();
	uint32_t last_target_flash_time = get_current_time();
	uint32_t last_animation_flash = get_current_time();
	uint32_t last_input = 0;
	
	bool accept_input = true;
    1610:	01 e0       	ldi	r16, 0x01	; 1
	DDRD = (1 << 5);
	
	uint32_t last_flash_time = get_current_time();
	uint32_t last_target_flash_time = get_current_time();
	uint32_t last_animation_flash = get_current_time();
	uint32_t last_input = 0;
    1612:	19 8e       	std	Y+25, r1	; 0x19
    1614:	1a 8e       	std	Y+26, r1	; 0x1a
    1616:	1b 8e       	std	Y+27, r1	; 0x1b
    1618:	1c 8e       	std	Y+28, r1	; 0x1c
	uint16_t value_y;
	
	//Initialise step counter
	step_counter = 0;
	uint8_t value = 0;
	uint8_t digit = 0; /* 0 = right, 1 = left */
    161a:	10 e0       	ldi	r17, 0x00	; 0
	ADCSRA |= (1<<ADSC);
	while(ADCSRA & (1<<ADSC)) {;}
	uint16_t rest_value_y = ADC;

	// We play the game until it's over.
	while (!is_game_over())
    161c:	b2 c2       	rjmp	.+1380   	; 0x1b82 <play_game+0x5f6>
	{
		// We need to check if any buttons have been pushed, this will
		// be NO_BUTTON_PUSHED if no button has been pushed. If button
		// 0 has been pushed, we get BUTTON0_PUSHED, and likewise, if
		// button 1 has been pushed, we get BUTTON1_PUSHED, and so on.
		ButtonState btn = button_pushed();
    161e:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <button_pushed>
    1622:	d8 2e       	mov	r13, r24
		int serial_input = -1;

		if (serial_input_available()) {
    1624:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <serial_input_available>
    1628:	88 23       	and	r24, r24
    162a:	39 f0       	breq	.+14     	; 0x163a <play_game+0xae>
			serial_input = fgetc(stdin);
    162c:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <__iob>
    1630:	90 91 b2 04 	lds	r25, 0x04B2	; 0x8004b2 <__iob+0x1>
    1634:	0e 94 02 13 	call	0x2604	; 0x2604 <fgetc>
    1638:	02 c0       	rjmp	.+4      	; 0x163e <play_game+0xb2>
		// We need to check if any buttons have been pushed, this will
		// be NO_BUTTON_PUSHED if no button has been pushed. If button
		// 0 has been pushed, we get BUTTON0_PUSHED, and likewise, if
		// button 1 has been pushed, we get BUTTON1_PUSHED, and so on.
		ButtonState btn = button_pushed();
		int serial_input = -1;
    163a:	8f ef       	ldi	r24, 0xFF	; 255
    163c:	9f ef       	ldi	r25, 0xFF	; 255

		if (serial_input_available()) {
			serial_input = fgetc(stdin);
		}
		
		if (tolower(serial_input) == 'z') {
    163e:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <tolower>
    1642:	7c 01       	movw	r14, r24
    1644:	8a 37       	cpi	r24, 0x7A	; 122
    1646:	91 05       	cpc	r25, r1
    1648:	49 f4       	brne	.+18     	; 0x165c <play_game+0xd0>
			if (undo_move()) {
    164a:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <undo_move>
    164e:	88 23       	and	r24, r24
    1650:	29 f0       	breq	.+10     	; 0x165c <play_game+0xd0>
				step_counter--;
    1652:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <step_counter>
    1656:	81 50       	subi	r24, 0x01	; 1
    1658:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <step_counter>
			}
		}
		
		if (tolower(serial_input) == 'q') {
    165c:	81 e7       	ldi	r24, 0x71	; 113
    165e:	e8 16       	cp	r14, r24
    1660:	f1 04       	cpc	r15, r1
    1662:	31 f4       	brne	.+12     	; 0x1670 <play_game+0xe4>
			buzzer_enabled = 1 - buzzer_enabled;
    1664:	90 91 9a 03 	lds	r25, 0x039A	; 0x80039a <buzzer_enabled>
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	89 27       	eor	r24, r25
    166c:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <buzzer_enabled>
		}
		
		if (tolower(serial_input) == 'p') {
    1670:	90 e7       	ldi	r25, 0x70	; 112
    1672:	e9 16       	cp	r14, r25
    1674:	f1 04       	cpc	r15, r1
    1676:	09 f0       	breq	.+2      	; 0x167a <play_game+0xee>
    1678:	46 c0       	rjmp	.+140    	; 0x1706 <play_game+0x17a>
			while (1) {
				if (serial_input_available()) {
    167a:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <serial_input_available>
    167e:	88 23       	and	r24, r24
    1680:	59 f0       	breq	.+22     	; 0x1698 <play_game+0x10c>
					if (tolower(fgetc(stdin)) == 'p') {
    1682:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <__iob>
    1686:	90 91 b2 04 	lds	r25, 0x04B2	; 0x8004b2 <__iob+0x1>
    168a:	0e 94 02 13 	call	0x2604	; 0x2604 <fgetc>
    168e:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <tolower>
    1692:	80 37       	cpi	r24, 0x70	; 112
    1694:	91 05       	cpc	r25, r1
    1696:	b9 f1       	breq	.+110    	; 0x1706 <play_game+0x17a>
						break;
					}
				}
				//Keep ssd looping
				if(digit == 0) {
    1698:	11 11       	cpse	r17, r1
    169a:	11 c0       	rjmp	.+34     	; 0x16be <play_game+0x132>
					value = step_counter % 10;
    169c:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <step_counter>
    16a0:	ed ec       	ldi	r30, 0xCD	; 205
    16a2:	9e 9f       	mul	r25, r30
    16a4:	e1 2d       	mov	r30, r1
    16a6:	11 24       	eor	r1, r1
    16a8:	e6 95       	lsr	r30
    16aa:	e6 95       	lsr	r30
    16ac:	e6 95       	lsr	r30
    16ae:	ee 0f       	add	r30, r30
    16b0:	8e 2f       	mov	r24, r30
    16b2:	88 0f       	add	r24, r24
    16b4:	88 0f       	add	r24, r24
    16b6:	e8 0f       	add	r30, r24
    16b8:	9e 1b       	sub	r25, r30
    16ba:	e9 2f       	mov	r30, r25
    16bc:	16 c0       	rjmp	.+44     	; 0x16ea <play_game+0x15e>
					} else {
					value = (step_counter / 10) % 10;
    16be:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <step_counter>
    16c2:	ed ec       	ldi	r30, 0xCD	; 205
    16c4:	8e 9f       	mul	r24, r30
    16c6:	81 2d       	mov	r24, r1
    16c8:	11 24       	eor	r1, r1
    16ca:	86 95       	lsr	r24
    16cc:	86 95       	lsr	r24
    16ce:	86 95       	lsr	r24
    16d0:	8e 9f       	mul	r24, r30
    16d2:	e1 2d       	mov	r30, r1
    16d4:	11 24       	eor	r1, r1
    16d6:	e6 95       	lsr	r30
    16d8:	e6 95       	lsr	r30
    16da:	e6 95       	lsr	r30
    16dc:	ee 0f       	add	r30, r30
    16de:	9e 2f       	mov	r25, r30
    16e0:	99 0f       	add	r25, r25
    16e2:	99 0f       	add	r25, r25
    16e4:	e9 0f       	add	r30, r25
    16e6:	8e 1b       	sub	r24, r30
    16e8:	e8 2f       	mov	r30, r24
				}
				PORTC = seven_seg[value];
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	e0 5b       	subi	r30, 0xB0	; 176
    16ee:	fe 4f       	sbci	r31, 0xFE	; 254
    16f0:	80 81       	ld	r24, Z
    16f2:	88 b9       	out	0x08, r24	; 8
				PORTD = (digit << 5);
    16f4:	81 2f       	mov	r24, r17
    16f6:	82 95       	swap	r24
    16f8:	88 0f       	add	r24, r24
    16fa:	80 7e       	andi	r24, 0xE0	; 224
    16fc:	8b b9       	out	0x0b, r24	; 11
				digit = 1 - digit;
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	81 1b       	sub	r24, r17
    1702:	18 2f       	mov	r17, r24
			}
    1704:	ba cf       	rjmp	.-140    	; 0x167a <play_game+0xee>
		}
		
		//Detect values x and y from joystick
		//value x:
		ADMUX &= ~1;
    1706:	ec e7       	ldi	r30, 0x7C	; 124
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	8e 7f       	andi	r24, 0xFE	; 254
    170e:	80 83       	st	Z, r24
		// Start the ADC conversion
		ADCSRA |= (1<<ADSC);
    1710:	ea e7       	ldi	r30, 0x7A	; 122
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	80 64       	ori	r24, 0x40	; 64
    1718:	80 83       	st	Z, r24
		while(ADCSRA & (1<<ADSC)) {
    171a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    171e:	86 fd       	sbrc	r24, 6
    1720:	fc cf       	rjmp	.-8      	; 0x171a <play_game+0x18e>
			; /* Wait until conversion finished */
		}
		value_x = ADC; // read the value
    1722:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    1726:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
		
		//value y:
		ADMUX |= 1;
    172a:	ec e7       	ldi	r30, 0x7C	; 124
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	81 60       	ori	r24, 0x01	; 1
    1732:	80 83       	st	Z, r24
		// Start the ADC conversion
		ADCSRA |= (1<<ADSC);
    1734:	ea e7       	ldi	r30, 0x7A	; 122
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	80 64       	ori	r24, 0x40	; 64
    173c:	80 83       	st	Z, r24
		while(ADCSRA & (1<<ADSC)) {
    173e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1742:	86 fd       	sbrc	r24, 6
    1744:	fc cf       	rjmp	.-8      	; 0x173e <play_game+0x1b2>
			; /* Wait until conversion finished */
		}
		value_y = ADC; // read the value
    1746:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    174a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
		
		if ((value_x < rest_value_x-sensitivity_diagonal && value_y > rest_value_y+sensitivity_diagonal) && accept_input) {
    174e:	a1 01       	movw	r20, r2
    1750:	48 5c       	subi	r20, 0xC8	; 200
    1752:	51 09       	sbc	r21, r1
    1754:	24 17       	cp	r18, r20
    1756:	35 07       	cpc	r19, r21
    1758:	50 f5       	brcc	.+84     	; 0x17ae <play_game+0x222>
    175a:	b3 01       	movw	r22, r6
    175c:	68 53       	subi	r22, 0x38	; 56
    175e:	7f 4f       	sbci	r23, 0xFF	; 255
    1760:	68 17       	cp	r22, r24
    1762:	79 07       	cpc	r23, r25
    1764:	20 f5       	brcc	.+72     	; 0x17ae <play_game+0x222>
    1766:	00 23       	and	r16, r16
    1768:	11 f1       	breq	.+68     	; 0x17ae <play_game+0x222>
			if (move_diagonal(0,-1,1,0)) {
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	41 e0       	ldi	r20, 0x01	; 1
    176e:	6f ef       	ldi	r22, 0xFF	; 255
    1770:	80 e0       	ldi	r24, 0x00	; 0
    1772:	0e 94 1e 08 	call	0x103c	; 0x103c <move_diagonal>
    1776:	88 23       	and	r24, r24
    1778:	99 f0       	breq	.+38     	; 0x17a0 <play_game+0x214>
				step_counter += 2;
    177a:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <step_counter>
    177e:	8e 5f       	subi	r24, 0xFE	; 254
    1780:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <step_counter>
				DDRD |= (1 << 6);
    1784:	8a b1       	in	r24, 0x0a	; 10
    1786:	80 64       	ori	r24, 0x40	; 64
    1788:	8a b9       	out	0x0a, r24	; 10
				play_move_sound(buzzer_enabled);
    178a:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <buzzer_enabled>
    178e:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <play_move_sound>
				last_input = get_current_time();
    1792:	0e 94 a5 11 	call	0x234a	; 0x234a <get_current_time>
    1796:	69 8f       	std	Y+25, r22	; 0x19
    1798:	7a 8f       	std	Y+26, r23	; 0x1a
    179a:	8b 8f       	std	Y+27, r24	; 0x1b
    179c:	9c 8f       	std	Y+28, r25	; 0x1c
				accept_input = false;
    179e:	00 e0       	ldi	r16, 0x00	; 0
			}
			last_flash_time = get_current_time();
    17a0:	0e 94 a5 11 	call	0x234a	; 0x234a <get_current_time>
    17a4:	6d 8b       	std	Y+21, r22	; 0x15
    17a6:	7e 8b       	std	Y+22, r23	; 0x16
    17a8:	8f 8b       	std	Y+23, r24	; 0x17
    17aa:	98 8f       	std	Y+24, r25	; 0x18
    17ac:	44 c1       	rjmp	.+648    	; 0x1a36 <play_game+0x4aa>
		} else if ((value_x < rest_value_x-sensitivity_diagonal && value_y < rest_value_y-sensitivity_diagonal) && accept_input) {
    17ae:	24 17       	cp	r18, r20
    17b0:	35 07       	cpc	r19, r21
    17b2:	50 f5       	brcc	.+84     	; 0x1808 <play_game+0x27c>
    17b4:	a3 01       	movw	r20, r6
    17b6:	48 5c       	subi	r20, 0xC8	; 200
    17b8:	51 09       	sbc	r21, r1
    17ba:	84 17       	cp	r24, r20
    17bc:	95 07       	cpc	r25, r21
    17be:	20 f5       	brcc	.+72     	; 0x1808 <play_game+0x27c>
    17c0:	00 23       	and	r16, r16
    17c2:	11 f1       	breq	.+68     	; 0x1808 <play_game+0x27c>
			if (move_diagonal(0,-1,-1,0)) {
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	4f ef       	ldi	r20, 0xFF	; 255
    17c8:	6f ef       	ldi	r22, 0xFF	; 255
    17ca:	80 e0       	ldi	r24, 0x00	; 0
    17cc:	0e 94 1e 08 	call	0x103c	; 0x103c <move_diagonal>
    17d0:	88 23       	and	r24, r24
    17d2:	99 f0       	breq	.+38     	; 0x17fa <play_game+0x26e>
				step_counter += 2;
    17d4:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <step_counter>
    17d8:	8e 5f       	subi	r24, 0xFE	; 254
    17da:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <step_counter>
				DDRD |= (1 << 6);
    17de:	8a b1       	in	r24, 0x0a	; 10
    17e0:	80 64       	ori	r24, 0x40	; 64
    17e2:	8a b9       	out	0x0a, r24	; 10
				play_move_sound(buzzer_enabled);
    17e4:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <buzzer_enabled>
    17e8:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <play_move_sound>
				last_input = get_current_time();
    17ec:	0e 94 a5 11 	call	0x234a	; 0x234a <get_current_time>
    17f0:	69 8f       	std	Y+25, r22	; 0x19
    17f2:	7a 8f       	std	Y+26, r23	; 0x1a
    17f4:	8b 8f       	std	Y+27, r24	; 0x1b
    17f6:	9c 8f       	std	Y+28, r25	; 0x1c
				accept_input = false;
    17f8:	00 e0       	ldi	r16, 0x00	; 0
			}
			last_flash_time = get_current_time();
    17fa:	0e 94 a5 11 	call	0x234a	; 0x234a <get_current_time>
    17fe:	6d 8b       	std	Y+21, r22	; 0x15
    1800:	7e 8b       	std	Y+22, r23	; 0x16
    1802:	8f 8b       	std	Y+23, r24	; 0x17
    1804:	98 8f       	std	Y+24, r25	; 0x18
    1806:	17 c1       	rjmp	.+558    	; 0x1a36 <play_game+0x4aa>
		} else if ((value_x > rest_value_x+sensitivity_diagonal && value_y < rest_value_y-sensitivity_diagonal) && accept_input) {
    1808:	a1 01       	movw	r20, r2
    180a:	48 53       	subi	r20, 0x38	; 56
    180c:	5f 4f       	sbci	r21, 0xFF	; 255
    180e:	42 17       	cp	r20, r18
    1810:	53 07       	cpc	r21, r19
    1812:	50 f5       	brcc	.+84     	; 0x1868 <play_game+0x2dc>
    1814:	b3 01       	movw	r22, r6
    1816:	68 5c       	subi	r22, 0xC8	; 200
    1818:	71 09       	sbc	r23, r1
    181a:	86 17       	cp	r24, r22
    181c:	97 07       	cpc	r25, r23
    181e:	20 f5       	brcc	.+72     	; 0x1868 <play_game+0x2dc>
    1820:	00 23       	and	r16, r16
    1822:	11 f1       	breq	.+68     	; 0x1868 <play_game+0x2dc>
			if (move_diagonal(0,1,-1,0)) {
    1824:	20 e0       	ldi	r18, 0x00	; 0
    1826:	4f ef       	ldi	r20, 0xFF	; 255
    1828:	61 e0       	ldi	r22, 0x01	; 1
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	0e 94 1e 08 	call	0x103c	; 0x103c <move_diagonal>
    1830:	88 23       	and	r24, r24
    1832:	99 f0       	breq	.+38     	; 0x185a <play_game+0x2ce>
				step_counter += 2;
    1834:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <step_counter>
    1838:	8e 5f       	subi	r24, 0xFE	; 254
    183a:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <step_counter>
				DDRD |= (1 << 6);
    183e:	8a b1       	in	r24, 0x0a	; 10
    1840:	80 64       	ori	r24, 0x40	; 64
    1842:	8a b9       	out	0x0a, r24	; 10
				play_move_sound(buzzer_enabled);
    1844:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <buzzer_enabled>
    1848:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <play_move_sound>
				last_input = get_current_time();
    184c:	0e 94 a5 11 	call	0x234a	; 0x234a <get_current_time>
    1850:	69 8f       	std	Y+25, r22	; 0x19
    1852:	7a 8f       	std	Y+26, r23	; 0x1a
    1854:	8b 8f       	std	Y+27, r24	; 0x1b
    1856:	9c 8f       	std	Y+28, r25	; 0x1c
				accept_input = false;
    1858:	00 e0       	ldi	r16, 0x00	; 0
			}
			last_flash_time = get_current_time();
    185a:	0e 94 a5 11 	call	0x234a	; 0x234a <get_current_time>
    185e:	6d 8b       	std	Y+21, r22	; 0x15
    1860:	7e 8b       	std	Y+22, r23	; 0x16
    1862:	8f 8b       	std	Y+23, r24	; 0x17
    1864:	98 8f       	std	Y+24, r25	; 0x18
    1866:	e7 c0       	rjmp	.+462    	; 0x1a36 <play_game+0x4aa>
		} else if ((value_x > rest_value_x+sensitivity_diagonal && value_y > rest_value_y+sensitivity_diagonal) && accept_input) {
    1868:	42 17       	cp	r20, r18
    186a:	53 07       	cpc	r21, r19
    186c:	50 f5       	brcc	.+84     	; 0x18c2 <play_game+0x336>
    186e:	a3 01       	movw	r20, r6
    1870:	48 53       	subi	r20, 0x38	; 56
    1872:	5f 4f       	sbci	r21, 0xFF	; 255
    1874:	48 17       	cp	r20, r24
    1876:	59 07       	cpc	r21, r25
    1878:	20 f5       	brcc	.+72     	; 0x18c2 <play_game+0x336>
    187a:	00 23       	and	r16, r16
    187c:	11 f1       	breq	.+68     	; 0x18c2 <play_game+0x336>
			if (move_diagonal(0,1,1,0)) {
    187e:	20 e0       	ldi	r18, 0x00	; 0
    1880:	41 e0       	ldi	r20, 0x01	; 1
    1882:	61 e0       	ldi	r22, 0x01	; 1
    1884:	80 e0       	ldi	r24, 0x00	; 0
    1886:	0e 94 1e 08 	call	0x103c	; 0x103c <move_diagonal>
    188a:	88 23       	and	r24, r24
    188c:	99 f0       	breq	.+38     	; 0x18b4 <play_game+0x328>
				step_counter += 2;
    188e:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <step_counter>
    1892:	8e 5f       	subi	r24, 0xFE	; 254
    1894:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <step_counter>
				DDRD |= (1 << 6);
    1898:	8a b1       	in	r24, 0x0a	; 10
    189a:	80 64       	ori	r24, 0x40	; 64
    189c:	8a b9       	out	0x0a, r24	; 10
				play_move_sound(buzzer_enabled);
    189e:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <buzzer_enabled>
    18a2:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <play_move_sound>
				last_input = get_current_time();
    18a6:	0e 94 a5 11 	call	0x234a	; 0x234a <get_current_time>
    18aa:	69 8f       	std	Y+25, r22	; 0x19
    18ac:	7a 8f       	std	Y+26, r23	; 0x1a
    18ae:	8b 8f       	std	Y+27, r24	; 0x1b
    18b0:	9c 8f       	std	Y+28, r25	; 0x1c
				accept_input = false;
    18b2:	00 e0       	ldi	r16, 0x00	; 0
			}
			last_flash_time = get_current_time();
    18b4:	0e 94 a5 11 	call	0x234a	; 0x234a <get_current_time>
    18b8:	6d 8b       	std	Y+21, r22	; 0x15
    18ba:	7e 8b       	std	Y+22, r23	; 0x16
    18bc:	8f 8b       	std	Y+23, r24	; 0x17
    18be:	98 8f       	std	Y+24, r25	; 0x18
    18c0:	ba c0       	rjmp	.+372    	; 0x1a36 <play_game+0x4aa>
		} else if ((btn == BUTTON0_PUSHED || tolower(serial_input) == 'd' || value_x > rest_value_x+sensitivity_regular) && accept_input) {
    18c2:	dd 20       	and	r13, r13
    18c4:	51 f0       	breq	.+20     	; 0x18da <play_game+0x34e>
    18c6:	44 e6       	ldi	r20, 0x64	; 100
    18c8:	e4 16       	cp	r14, r20
    18ca:	f1 04       	cpc	r15, r1
    18cc:	31 f0       	breq	.+12     	; 0x18da <play_game+0x34e>
    18ce:	a1 01       	movw	r20, r2
    18d0:	40 57       	subi	r20, 0x70	; 112
    18d2:	5e 4f       	sbci	r21, 0xFE	; 254
    18d4:	42 17       	cp	r20, r18
    18d6:	53 07       	cpc	r21, r19
    18d8:	10 f5       	brcc	.+68     	; 0x191e <play_game+0x392>
    18da:	00 23       	and	r16, r16
    18dc:	01 f1       	breq	.+64     	; 0x191e <play_game+0x392>
			if (move_player(0, 1)) {
    18de:	61 e0       	ldi	r22, 0x01	; 1
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	0e 94 a6 06 	call	0xd4c	; 0xd4c <move_player>
    18e6:	88 23       	and	r24, r24
    18e8:	99 f0       	breq	.+38     	; 0x1910 <play_game+0x384>
				step_counter++; 
    18ea:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <step_counter>
    18ee:	8f 5f       	subi	r24, 0xFF	; 255
    18f0:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <step_counter>
				DDRD |= (1 << 6); 
    18f4:	8a b1       	in	r24, 0x0a	; 10
    18f6:	80 64       	ori	r24, 0x40	; 64
    18f8:	8a b9       	out	0x0a, r24	; 10
				play_move_sound(buzzer_enabled);
    18fa:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <buzzer_enabled>
    18fe:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <play_move_sound>
				last_input = get_current_time();
    1902:	0e 94 a5 11 	call	0x234a	; 0x234a <get_current_time>
    1906:	69 8f       	std	Y+25, r22	; 0x19
    1908:	7a 8f       	std	Y+26, r23	; 0x1a
    190a:	8b 8f       	std	Y+27, r24	; 0x1b
    190c:	9c 8f       	std	Y+28, r25	; 0x1c
				accept_input = false;
    190e:	00 e0       	ldi	r16, 0x00	; 0
			}
			last_flash_time = get_current_time();
    1910:	0e 94 a5 11 	call	0x234a	; 0x234a <get_current_time>
    1914:	6d 8b       	std	Y+21, r22	; 0x15
    1916:	7e 8b       	std	Y+22, r23	; 0x16
    1918:	8f 8b       	std	Y+23, r24	; 0x17
    191a:	98 8f       	std	Y+24, r25	; 0x18
    191c:	8c c0       	rjmp	.+280    	; 0x1a36 <play_game+0x4aa>
		} else if ((btn == BUTTON1_PUSHED || tolower(serial_input) == 's' || value_y < rest_value_y-sensitivity_regular) && accept_input) {
    191e:	41 e0       	ldi	r20, 0x01	; 1
    1920:	d4 16       	cp	r13, r20
    1922:	51 f0       	breq	.+20     	; 0x1938 <play_game+0x3ac>
    1924:	43 e7       	ldi	r20, 0x73	; 115
    1926:	e4 16       	cp	r14, r20
    1928:	f1 04       	cpc	r15, r1
    192a:	31 f0       	breq	.+12     	; 0x1938 <play_game+0x3ac>
    192c:	a3 01       	movw	r20, r6
    192e:	40 59       	subi	r20, 0x90	; 144
    1930:	51 40       	sbci	r21, 0x01	; 1
    1932:	84 17       	cp	r24, r20
    1934:	95 07       	cpc	r25, r21
    1936:	10 f5       	brcc	.+68     	; 0x197c <play_game+0x3f0>
    1938:	00 23       	and	r16, r16
    193a:	01 f1       	breq	.+64     	; 0x197c <play_game+0x3f0>
			if (move_player(-1, 0)) {
    193c:	60 e0       	ldi	r22, 0x00	; 0
    193e:	8f ef       	ldi	r24, 0xFF	; 255
    1940:	0e 94 a6 06 	call	0xd4c	; 0xd4c <move_player>
    1944:	88 23       	and	r24, r24
    1946:	99 f0       	breq	.+38     	; 0x196e <play_game+0x3e2>
				step_counter++; 
    1948:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <step_counter>
    194c:	8f 5f       	subi	r24, 0xFF	; 255
    194e:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <step_counter>
				DDRD |= (1 << 6); 
    1952:	8a b1       	in	r24, 0x0a	; 10
    1954:	80 64       	ori	r24, 0x40	; 64
    1956:	8a b9       	out	0x0a, r24	; 10
				play_move_sound(buzzer_enabled);
    1958:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <buzzer_enabled>
    195c:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <play_move_sound>
				last_input = get_current_time();
    1960:	0e 94 a5 11 	call	0x234a	; 0x234a <get_current_time>
    1964:	69 8f       	std	Y+25, r22	; 0x19
    1966:	7a 8f       	std	Y+26, r23	; 0x1a
    1968:	8b 8f       	std	Y+27, r24	; 0x1b
    196a:	9c 8f       	std	Y+28, r25	; 0x1c
				accept_input = false;
    196c:	00 e0       	ldi	r16, 0x00	; 0
			}
			last_flash_time = get_current_time();
    196e:	0e 94 a5 11 	call	0x234a	; 0x234a <get_current_time>
    1972:	6d 8b       	std	Y+21, r22	; 0x15
    1974:	7e 8b       	std	Y+22, r23	; 0x16
    1976:	8f 8b       	std	Y+23, r24	; 0x17
    1978:	98 8f       	std	Y+24, r25	; 0x18
    197a:	5d c0       	rjmp	.+186    	; 0x1a36 <play_game+0x4aa>
		} else if ((btn == BUTTON2_PUSHED || tolower(serial_input) == 'w' || value_y > rest_value_y+sensitivity_regular) && accept_input) {
    197c:	42 e0       	ldi	r20, 0x02	; 2
    197e:	d4 16       	cp	r13, r20
    1980:	51 f0       	breq	.+20     	; 0x1996 <play_game+0x40a>
    1982:	47 e7       	ldi	r20, 0x77	; 119
    1984:	e4 16       	cp	r14, r20
    1986:	f1 04       	cpc	r15, r1
    1988:	31 f0       	breq	.+12     	; 0x1996 <play_game+0x40a>
    198a:	a3 01       	movw	r20, r6
    198c:	40 57       	subi	r20, 0x70	; 112
    198e:	5e 4f       	sbci	r21, 0xFE	; 254
    1990:	48 17       	cp	r20, r24
    1992:	59 07       	cpc	r21, r25
    1994:	10 f5       	brcc	.+68     	; 0x19da <play_game+0x44e>
    1996:	00 23       	and	r16, r16
    1998:	01 f1       	breq	.+64     	; 0x19da <play_game+0x44e>
			if (move_player(1, 0)) {
    199a:	60 e0       	ldi	r22, 0x00	; 0
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	0e 94 a6 06 	call	0xd4c	; 0xd4c <move_player>
    19a2:	88 23       	and	r24, r24
    19a4:	99 f0       	breq	.+38     	; 0x19cc <play_game+0x440>
				step_counter++; 
    19a6:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <step_counter>
    19aa:	8f 5f       	subi	r24, 0xFF	; 255
    19ac:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <step_counter>
				DDRD |= (1 << 6); 
    19b0:	8a b1       	in	r24, 0x0a	; 10
    19b2:	80 64       	ori	r24, 0x40	; 64
    19b4:	8a b9       	out	0x0a, r24	; 10
				play_move_sound(buzzer_enabled);
    19b6:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <buzzer_enabled>
    19ba:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <play_move_sound>
				last_input = get_current_time();
    19be:	0e 94 a5 11 	call	0x234a	; 0x234a <get_current_time>
    19c2:	69 8f       	std	Y+25, r22	; 0x19
    19c4:	7a 8f       	std	Y+26, r23	; 0x1a
    19c6:	8b 8f       	std	Y+27, r24	; 0x1b
    19c8:	9c 8f       	std	Y+28, r25	; 0x1c
				accept_input = false;
    19ca:	00 e0       	ldi	r16, 0x00	; 0
			}
			last_flash_time = get_current_time();
    19cc:	0e 94 a5 11 	call	0x234a	; 0x234a <get_current_time>
    19d0:	6d 8b       	std	Y+21, r22	; 0x15
    19d2:	7e 8b       	std	Y+22, r23	; 0x16
    19d4:	8f 8b       	std	Y+23, r24	; 0x17
    19d6:	98 8f       	std	Y+24, r25	; 0x18
    19d8:	2e c0       	rjmp	.+92     	; 0x1a36 <play_game+0x4aa>
		} else if ((btn == BUTTON3_PUSHED || tolower(serial_input) == 'a' || value_x < rest_value_x-sensitivity_regular) && accept_input) {
    19da:	83 e0       	ldi	r24, 0x03	; 3
    19dc:	d8 16       	cp	r13, r24
    19de:	51 f0       	breq	.+20     	; 0x19f4 <play_game+0x468>
    19e0:	91 e6       	ldi	r25, 0x61	; 97
    19e2:	e9 16       	cp	r14, r25
    19e4:	f1 04       	cpc	r15, r1
    19e6:	31 f0       	breq	.+12     	; 0x19f4 <play_game+0x468>
    19e8:	c1 01       	movw	r24, r2
    19ea:	80 59       	subi	r24, 0x90	; 144
    19ec:	91 40       	sbci	r25, 0x01	; 1
    19ee:	28 17       	cp	r18, r24
    19f0:	39 07       	cpc	r19, r25
    19f2:	08 f5       	brcc	.+66     	; 0x1a36 <play_game+0x4aa>
    19f4:	00 23       	and	r16, r16
    19f6:	f9 f0       	breq	.+62     	; 0x1a36 <play_game+0x4aa>
			if (move_player(0, -1)) {
    19f8:	6f ef       	ldi	r22, 0xFF	; 255
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	0e 94 a6 06 	call	0xd4c	; 0xd4c <move_player>
    1a00:	88 23       	and	r24, r24
    1a02:	99 f0       	breq	.+38     	; 0x1a2a <play_game+0x49e>
				step_counter++; 
    1a04:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <step_counter>
    1a08:	8f 5f       	subi	r24, 0xFF	; 255
    1a0a:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <step_counter>
				DDRD |= (1 << 6); 
    1a0e:	8a b1       	in	r24, 0x0a	; 10
    1a10:	80 64       	ori	r24, 0x40	; 64
    1a12:	8a b9       	out	0x0a, r24	; 10
				play_move_sound(buzzer_enabled);
    1a14:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <buzzer_enabled>
    1a18:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <play_move_sound>
				last_input = get_current_time();
    1a1c:	0e 94 a5 11 	call	0x234a	; 0x234a <get_current_time>
    1a20:	69 8f       	std	Y+25, r22	; 0x19
    1a22:	7a 8f       	std	Y+26, r23	; 0x1a
    1a24:	8b 8f       	std	Y+27, r24	; 0x1b
    1a26:	9c 8f       	std	Y+28, r25	; 0x1c
				accept_input = false;
    1a28:	00 e0       	ldi	r16, 0x00	; 0
			}
			last_flash_time = get_current_time();
    1a2a:	0e 94 a5 11 	call	0x234a	; 0x234a <get_current_time>
    1a2e:	6d 8b       	std	Y+21, r22	; 0x15
    1a30:	7e 8b       	std	Y+22, r23	; 0x16
    1a32:	8f 8b       	std	Y+23, r24	; 0x17
    1a34:	98 8f       	std	Y+24, r25	; 0x18
		}

		uint32_t current_time = get_current_time();
    1a36:	0e 94 a5 11 	call	0x234a	; 0x234a <get_current_time>
    1a3a:	6b 01       	movw	r12, r22
    1a3c:	7c 01       	movw	r14, r24
		if (current_time >= last_flash_time + 200)
    1a3e:	8d 89       	ldd	r24, Y+21	; 0x15
    1a40:	9e 89       	ldd	r25, Y+22	; 0x16
    1a42:	af 89       	ldd	r26, Y+23	; 0x17
    1a44:	b8 8d       	ldd	r27, Y+24	; 0x18
    1a46:	88 53       	subi	r24, 0x38	; 56
    1a48:	9f 4f       	sbci	r25, 0xFF	; 255
    1a4a:	af 4f       	sbci	r26, 0xFF	; 255
    1a4c:	bf 4f       	sbci	r27, 0xFF	; 255
    1a4e:	c8 16       	cp	r12, r24
    1a50:	d9 06       	cpc	r13, r25
    1a52:	ea 06       	cpc	r14, r26
    1a54:	fb 06       	cpc	r15, r27
    1a56:	30 f0       	brcs	.+12     	; 0x1a64 <play_game+0x4d8>
		{
			// 200ms (0.2 seconds) has passed since the last time
			// we flashed the player icon, flash it now.
			flash_player();
    1a58:	0e 94 9d 03 	call	0x73a	; 0x73a <flash_player>

			// Update the most recent icon flash time.
			last_flash_time = current_time;
    1a5c:	cd 8a       	std	Y+21, r12	; 0x15
    1a5e:	de 8a       	std	Y+22, r13	; 0x16
    1a60:	ef 8a       	std	Y+23, r14	; 0x17
    1a62:	f8 8e       	std	Y+24, r15	; 0x18
		}
		if (current_time >= last_target_flash_time + 500) {
    1a64:	d5 01       	movw	r26, r10
    1a66:	c4 01       	movw	r24, r8
    1a68:	8c 50       	subi	r24, 0x0C	; 12
    1a6a:	9e 4f       	sbci	r25, 0xFE	; 254
    1a6c:	af 4f       	sbci	r26, 0xFF	; 255
    1a6e:	bf 4f       	sbci	r27, 0xFF	; 255
    1a70:	c8 16       	cp	r12, r24
    1a72:	d9 06       	cpc	r13, r25
    1a74:	ea 06       	cpc	r14, r26
    1a76:	fb 06       	cpc	r15, r27
    1a78:	20 f0       	brcs	.+8      	; 0x1a82 <play_game+0x4f6>
			flash_targets();
    1a7a:	0e 94 b4 03 	call	0x768	; 0x768 <flash_targets>
			last_target_flash_time = current_time;
    1a7e:	46 01       	movw	r8, r12
    1a80:	57 01       	movw	r10, r14
		}
		if (current_time >= last_input + 200) {
    1a82:	89 8d       	ldd	r24, Y+25	; 0x19
    1a84:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1a86:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1a88:	bc 8d       	ldd	r27, Y+28	; 0x1c
    1a8a:	88 53       	subi	r24, 0x38	; 56
    1a8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a8e:	af 4f       	sbci	r26, 0xFF	; 255
    1a90:	bf 4f       	sbci	r27, 0xFF	; 255
    1a92:	c8 16       	cp	r12, r24
    1a94:	d9 06       	cpc	r13, r25
    1a96:	ea 06       	cpc	r14, r26
    1a98:	fb 06       	cpc	r15, r27
    1a9a:	08 f0       	brcs	.+2      	; 0x1a9e <play_game+0x512>
			accept_input = true;
    1a9c:	01 e0       	ldi	r16, 0x01	; 1
		}
		
		//Display step counter on seven segment display
		if(digit == 0) {
    1a9e:	11 11       	cpse	r17, r1
    1aa0:	11 c0       	rjmp	.+34     	; 0x1ac4 <play_game+0x538>
			value = step_counter % 10;
    1aa2:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <step_counter>
    1aa6:	ed ec       	ldi	r30, 0xCD	; 205
    1aa8:	9e 9f       	mul	r25, r30
    1aaa:	e1 2d       	mov	r30, r1
    1aac:	11 24       	eor	r1, r1
    1aae:	e6 95       	lsr	r30
    1ab0:	e6 95       	lsr	r30
    1ab2:	e6 95       	lsr	r30
    1ab4:	ee 0f       	add	r30, r30
    1ab6:	8e 2f       	mov	r24, r30
    1ab8:	88 0f       	add	r24, r24
    1aba:	88 0f       	add	r24, r24
    1abc:	e8 0f       	add	r30, r24
    1abe:	9e 1b       	sub	r25, r30
    1ac0:	e9 2f       	mov	r30, r25
    1ac2:	16 c0       	rjmp	.+44     	; 0x1af0 <play_game+0x564>
			} else {
			value = (step_counter / 10) % 10;
    1ac4:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <step_counter>
    1ac8:	ed ec       	ldi	r30, 0xCD	; 205
    1aca:	8e 9f       	mul	r24, r30
    1acc:	81 2d       	mov	r24, r1
    1ace:	11 24       	eor	r1, r1
    1ad0:	86 95       	lsr	r24
    1ad2:	86 95       	lsr	r24
    1ad4:	86 95       	lsr	r24
    1ad6:	8e 9f       	mul	r24, r30
    1ad8:	e1 2d       	mov	r30, r1
    1ada:	11 24       	eor	r1, r1
    1adc:	e6 95       	lsr	r30
    1ade:	e6 95       	lsr	r30
    1ae0:	e6 95       	lsr	r30
    1ae2:	ee 0f       	add	r30, r30
    1ae4:	9e 2f       	mov	r25, r30
    1ae6:	99 0f       	add	r25, r25
    1ae8:	99 0f       	add	r25, r25
    1aea:	e9 0f       	add	r30, r25
    1aec:	8e 1b       	sub	r24, r30
    1aee:	e8 2f       	mov	r30, r24
		}
		PORTC = seven_seg[value];
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	e0 5b       	subi	r30, 0xB0	; 176
    1af4:	fe 4f       	sbci	r31, 0xFE	; 254
    1af6:	80 81       	ld	r24, Z
    1af8:	88 b9       	out	0x08, r24	; 8
		PORTD = (digit << 5);
    1afa:	81 2f       	mov	r24, r17
    1afc:	82 95       	swap	r24
    1afe:	88 0f       	add	r24, r24
    1b00:	80 7e       	andi	r24, 0xE0	; 224
    1b02:	8b b9       	out	0x0b, r24	; 11
		/* Change the digit flag for next time. if 0 becomes 1, if 1 becomes 0. */
		digit = 1 - digit;
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	81 1b       	sub	r24, r17
    1b08:	18 2f       	mov	r17, r24
		
		//Increment timer if necessary
		if (get_current_time() % 1000 == 0) {
    1b0a:	0e 94 a5 11 	call	0x234a	; 0x234a <get_current_time>
    1b0e:	28 ee       	ldi	r18, 0xE8	; 232
    1b10:	33 e0       	ldi	r19, 0x03	; 3
    1b12:	40 e0       	ldi	r20, 0x00	; 0
    1b14:	50 e0       	ldi	r21, 0x00	; 0
    1b16:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__udivmodsi4>
    1b1a:	67 2b       	or	r22, r23
    1b1c:	68 2b       	or	r22, r24
    1b1e:	69 2b       	or	r22, r25
    1b20:	69 f5       	brne	.+90     	; 0x1b7c <play_game+0x5f0>
			move_terminal_cursor(22, 1);
    1b22:	61 e0       	ldi	r22, 0x01	; 1
    1b24:	70 e0       	ldi	r23, 0x00	; 0
    1b26:	86 e1       	ldi	r24, 0x16	; 22
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	0e 94 4a 11 	call	0x2294	; 0x2294 <move_terminal_cursor>
			sprintf(play_time_str, "%d", play_time);
    1b2e:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <play_time>
    1b32:	1f 92       	push	r1
    1b34:	8f 93       	push	r24
    1b36:	89 ee       	ldi	r24, 0xE9	; 233
    1b38:	92 e0       	ldi	r25, 0x02	; 2
    1b3a:	9f 93       	push	r25
    1b3c:	8f 93       	push	r24
    1b3e:	ce 01       	movw	r24, r28
    1b40:	01 96       	adiw	r24, 0x01	; 1
    1b42:	7c 01       	movw	r14, r24
    1b44:	9f 93       	push	r25
    1b46:	8f 93       	push	r24
    1b48:	0e 94 bf 13 	call	0x277e	; 0x277e <sprintf>
			printf("%s", play_time_str);
    1b4c:	ff 92       	push	r15
    1b4e:	ef 92       	push	r14
    1b50:	8c ee       	ldi	r24, 0xEC	; 236
    1b52:	92 e0       	ldi	r25, 0x02	; 2
    1b54:	9f 93       	push	r25
    1b56:	8f 93       	push	r24
    1b58:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <printf>
			play_time++;
    1b5c:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <play_time>
    1b60:	8f 5f       	subi	r24, 0xFF	; 255
    1b62:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <play_time>
    1b66:	8f e1       	ldi	r24, 0x1F	; 31
    1b68:	9e e4       	ldi	r25, 0x4E	; 78
    1b6a:	01 97       	sbiw	r24, 0x01	; 1
    1b6c:	f1 f7       	brne	.-4      	; 0x1b6a <play_game+0x5de>
    1b6e:	00 c0       	rjmp	.+0      	; 0x1b70 <play_game+0x5e4>
    1b70:	00 00       	nop
    1b72:	0f b6       	in	r0, 0x3f	; 63
    1b74:	f8 94       	cli
    1b76:	de bf       	out	0x3e, r29	; 62
    1b78:	0f be       	out	0x3f, r0	; 63
    1b7a:	cd bf       	out	0x3d, r28	; 61
			_delay_ms(10);
		}
		DDRD &= (11111101);
    1b7c:	8a b1       	in	r24, 0x0a	; 10
    1b7e:	8d 7b       	andi	r24, 0xBD	; 189
    1b80:	8a b9       	out	0x0a, r24	; 10
	ADCSRA |= (1<<ADSC);
	while(ADCSRA & (1<<ADSC)) {;}
	uint16_t rest_value_y = ADC;

	// We play the game until it's over.
	while (!is_game_over())
    1b82:	0e 94 1c 06 	call	0xc38	; 0xc38 <is_game_over>
    1b86:	88 23       	and	r24, r24
    1b88:	09 f4       	brne	.+2      	; 0x1b8c <play_game+0x600>
    1b8a:	49 cd       	rjmp	.-1390   	; 0x161e <play_game+0x92>
			play_time++;
			_delay_ms(10);
		}
		DDRD &= (11111101);
	}
	DDRD |= (1 << 6); 
    1b8c:	8a b1       	in	r24, 0x0a	; 10
    1b8e:	80 64       	ori	r24, 0x40	; 64
    1b90:	8a b9       	out	0x0a, r24	; 10
	play_victory_sound(buzzer_enabled);
    1b92:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <buzzer_enabled>
    1b96:	0e 94 b4 02 	call	0x568	; 0x568 <play_victory_sound>
	DDRD &= (11111101);
    1b9a:	8a b1       	in	r24, 0x0a	; 10
    1b9c:	8d 7b       	andi	r24, 0xBD	; 189
    1b9e:	8a b9       	out	0x0a, r24	; 10
	handle_game_over();
    1ba0:	0e 94 01 0a 	call	0x1402	; 0x1402 <handle_game_over>

00001ba4 <main>:

/////////////////////////////// main //////////////////////////////////
int main(void)
{
	//Set a seed for the random number generator
	srand(get_current_time());
    1ba4:	0e 94 a5 11 	call	0x234a	; 0x234a <get_current_time>
    1ba8:	cb 01       	movw	r24, r22
    1baa:	0e 94 d5 12 	call	0x25aa	; 0x25aa <srand>
	
	// Setup hardware and callbacks. This will turn on interrupts.
	initialise_hardware();
    1bae:	0e 94 85 09 	call	0x130a	; 0x130a <initialise_hardware>

	// Show the start screen. Returns when the player starts the game.
	start_screen();
    1bb2:	0e 94 9f 09 	call	0x133e	; 0x133e <start_screen>
	
	//Set the level to 1
	current_level = 1;
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <current_level>
	
	//Enable buzzer sounds
	buzzer_enabled = true;
    1bbc:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <buzzer_enabled>

	// Loop forever and continuously play the game.
	while (1)
	{
		new_game(current_level);
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <new_game>
		play_game();
    1bc8:	0e 94 c6 0a 	call	0x158c	; 0x158c <play_game>

00001bcc <uart_put_char>:
// Variable to keep track of whether incoming characters are to be echoed
// back or not.
static bool do_echo;

static int uart_put_char(char c, FILE *stream)
{
    1bcc:	cf 93       	push	r28
    1bce:	c8 2f       	mov	r28, r24
	// Add the character to the buffer for transmission (if there is space
	// to do so). If not we wait until the buffer has space.

	// If the character is linefeed, we output carriage return.
	if (c == '\n')
    1bd0:	8a 30       	cpi	r24, 0x0A	; 10
    1bd2:	19 f4       	brne	.+6      	; 0x1bda <uart_put_char+0xe>
	{
		uart_put_char('\r', stream);
    1bd4:	8d e0       	ldi	r24, 0x0D	; 13
    1bd6:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <uart_put_char>
	// we don't output the character since the buffer will never be
	// emptied if interrupts are disabled. If the buffer is full and
	// interrupts are enabled, then we loop until the buffer has enough
	// space. The bytes_in_buffer variable will get modified by the ISR
	// which extracts bytes from the buffer.
	bool interrupts_enabled = bit_is_set(SREG, SREG_I);
    1bda:	9f b7       	in	r25, 0x3f	; 63
    1bdc:	90 78       	andi	r25, 0x80	; 128
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
    1bde:	02 c0       	rjmp	.+4      	; 0x1be4 <uart_put_char+0x18>
	{
		if (!interrupts_enabled)
    1be0:	99 23       	and	r25, r25
    1be2:	29 f1       	breq	.+74     	; 0x1c2e <uart_put_char+0x62>
	// emptied if interrupts are disabled. If the buffer is full and
	// interrupts are enabled, then we loop until the buffer has enough
	// space. The bytes_in_buffer variable will get modified by the ISR
	// which extracts bytes from the buffer.
	bool interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
    1be4:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <bytes_in_out_buffer>
    1be8:	8f 3f       	cpi	r24, 0xFF	; 255
    1bea:	d1 f3       	breq	.-12     	; 0x1be0 <uart_put_char+0x14>
	// If this is beyond the end of the buffer, we wrap around back to the
	// beginning of the buffer. NOTE: We disable interrupts before
	// modifying the buffer. This prevents the ISR from modifying the
	// buffer at the same time. We reenable them if they were enabled when
	// we entered the function.
	cli();
    1bec:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    1bee:	e0 91 9d 03 	lds	r30, 0x039D	; 0x80039d <out_insert_pos>
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	8e 0f       	add	r24, r30
    1bf6:	80 93 9d 03 	sts	0x039D, r24	; 0x80039d <out_insert_pos>
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	e1 56       	subi	r30, 0x61	; 97
    1bfe:	fc 4f       	sbci	r31, 0xFC	; 252
    1c00:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    1c02:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <bytes_in_out_buffer>
    1c06:	8f 5f       	subi	r24, 0xFF	; 255
    1c08:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <bytes_in_out_buffer>
	if (out_insert_pos == OUTPUT_BUFFER_SIZE)
    1c0c:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <out_insert_pos>
    1c10:	8f 3f       	cpi	r24, 0xFF	; 255
    1c12:	11 f4       	brne	.+4      	; 0x1c18 <uart_put_char+0x4c>
	{
		// Wrap around buffer pointer if necessary.
		out_insert_pos = 0;
    1c14:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <out_insert_pos>
	}

	// Reenable interrupts (UDR Empty interrupt may have been disabled) -
	// we ensure it is now enabled so that it will fire and deal with the
	// next character in the buffer.
	UCSR0B |= (1 << UDRIE0);
    1c18:	e1 ec       	ldi	r30, 0xC1	; 193
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	80 62       	ori	r24, 0x20	; 32
    1c20:	80 83       	st	Z, r24
	if (interrupts_enabled)
    1c22:	99 23       	and	r25, r25
    1c24:	39 f0       	breq	.+14     	; 0x1c34 <uart_put_char+0x68>
	{
		sei();
    1c26:	78 94       	sei
	}
	return 0;
    1c28:	80 e0       	ldi	r24, 0x00	; 0
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	05 c0       	rjmp	.+10     	; 0x1c38 <uart_put_char+0x6c>
	bool interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
	{
		if (!interrupts_enabled)
		{
			return 1;
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	02 c0       	rjmp	.+4      	; 0x1c38 <uart_put_char+0x6c>
	UCSR0B |= (1 << UDRIE0);
	if (interrupts_enabled)
	{
		sei();
	}
	return 0;
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	90 e0       	ldi	r25, 0x00	; 0
}
    1c38:	cf 91       	pop	r28
    1c3a:	08 95       	ret

00001c3c <uart_get_char>:

static int uart_get_char(FILE *stream)
{
	// Wait until we've received a character.
	while (bytes_in_input_buffer == 0)
    1c3c:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <bytes_in_input_buffer>
    1c40:	88 23       	and	r24, r24
    1c42:	e1 f3       	breq	.-8      	; 0x1c3c <uart_get_char>

	// Turn interrupts off and remove a character from the input buffer.
	// We reenable interrupts if they were on. The pending character is
	// the one which is byte_in_input_buffer characters before the insert
	// position (taking into account that we may need to wrap around).
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    1c44:	2f b7       	in	r18, 0x3f	; 63
    1c46:	20 78       	andi	r18, 0x80	; 128
	cli();
    1c48:	f8 94       	cli
	char c;
	if (input_insert_pos - bytes_in_input_buffer < 0)
    1c4a:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <input_insert_pos>
    1c4e:	30 91 b0 04 	lds	r19, 0x04B0	; 0x8004b0 <bytes_in_input_buffer>
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	83 1b       	sub	r24, r19
    1c56:	91 09       	sbc	r25, r1
    1c58:	5a f4       	brpl	.+22     	; 0x1c70 <uart_get_char+0x34>
	{
		// Need to wrap around.
		c = input_buffer[input_insert_pos - bytes_in_input_buffer +
    1c5a:	e0 91 9e 04 	lds	r30, 0x049E	; 0x80049e <input_insert_pos>
    1c5e:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <bytes_in_input_buffer>
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	e8 1b       	sub	r30, r24
    1c66:	f1 09       	sbc	r31, r1
    1c68:	e1 55       	subi	r30, 0x51	; 81
    1c6a:	fb 4f       	sbci	r31, 0xFB	; 251
    1c6c:	80 81       	ld	r24, Z
    1c6e:	0a c0       	rjmp	.+20     	; 0x1c84 <uart_get_char+0x48>
			INPUT_BUFFER_SIZE];
	}
	else
	{
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    1c70:	e0 91 9e 04 	lds	r30, 0x049E	; 0x80049e <input_insert_pos>
    1c74:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <bytes_in_input_buffer>
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	e8 1b       	sub	r30, r24
    1c7c:	f1 09       	sbc	r31, r1
    1c7e:	e1 56       	subi	r30, 0x61	; 97
    1c80:	fb 4f       	sbci	r31, 0xFB	; 251
    1c82:	80 81       	ld	r24, Z
	}

	// Decrement our count of bytes in the input buffer.
	bytes_in_input_buffer--;
    1c84:	90 91 b0 04 	lds	r25, 0x04B0	; 0x8004b0 <bytes_in_input_buffer>
    1c88:	91 50       	subi	r25, 0x01	; 1
    1c8a:	90 93 b0 04 	sts	0x04B0, r25	; 0x8004b0 <bytes_in_input_buffer>
	if (interrupts_enabled)
    1c8e:	22 23       	and	r18, r18
    1c90:	09 f0       	breq	.+2      	; 0x1c94 <uart_get_char+0x58>
	{
		sei();
    1c92:	78 94       	sei
	// as WASD. If you're a student reading this, pretend you didn't see
	// it XD. Honestly, you cannot rely on the arrow keys to work like
	// WASD, this is what we call undocumented behaviour.
	static char first = 0;
	static char second = 0;
	if (first == 0x1B && second == '[')
    1c94:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <first.1835>
    1c98:	9b 31       	cpi	r25, 0x1B	; 27
    1c9a:	b1 f4       	brne	.+44     	; 0x1cc8 <uart_get_char+0x8c>
    1c9c:	90 91 88 03 	lds	r25, 0x0388	; 0x800388 <second.1836>
    1ca0:	9b 35       	cpi	r25, 0x5B	; 91
    1ca2:	91 f4       	brne	.+36     	; 0x1cc8 <uart_get_char+0x8c>
	{
		switch (c)
    1ca4:	82 34       	cpi	r24, 0x42	; 66
    1ca6:	49 f0       	breq	.+18     	; 0x1cba <uart_get_char+0x7e>
    1ca8:	18 f4       	brcc	.+6      	; 0x1cb0 <uart_get_char+0x74>
    1caa:	81 34       	cpi	r24, 0x41	; 65
    1cac:	61 f0       	breq	.+24     	; 0x1cc6 <uart_get_char+0x8a>
    1cae:	0c c0       	rjmp	.+24     	; 0x1cc8 <uart_get_char+0x8c>
    1cb0:	83 34       	cpi	r24, 0x43	; 67
    1cb2:	29 f0       	breq	.+10     	; 0x1cbe <uart_get_char+0x82>
    1cb4:	84 34       	cpi	r24, 0x44	; 68
    1cb6:	29 f0       	breq	.+10     	; 0x1cc2 <uart_get_char+0x86>
    1cb8:	07 c0       	rjmp	.+14     	; 0x1cc8 <uart_get_char+0x8c>
		{
			case 'A':
				c = 'w';
				break;
			case 'B':
				c = 's';
    1cba:	83 e7       	ldi	r24, 0x73	; 115
				break;
    1cbc:	05 c0       	rjmp	.+10     	; 0x1cc8 <uart_get_char+0x8c>
			case 'C':
				c = 'd';
    1cbe:	84 e6       	ldi	r24, 0x64	; 100
				break;
    1cc0:	03 c0       	rjmp	.+6      	; 0x1cc8 <uart_get_char+0x8c>
			case 'D':
				c = 'a';
    1cc2:	81 e6       	ldi	r24, 0x61	; 97
				break;
    1cc4:	01 c0       	rjmp	.+2      	; 0x1cc8 <uart_get_char+0x8c>
	if (first == 0x1B && second == '[')
	{
		switch (c)
		{
			case 'A':
				c = 'w';
    1cc6:	87 e7       	ldi	r24, 0x77	; 119
				break;
			default:
				break;
		}
	}
	first = second;
    1cc8:	90 91 88 03 	lds	r25, 0x0388	; 0x800388 <second.1836>
    1ccc:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <first.1835>
	second = c;
    1cd0:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <second.1836>

	return c;
}
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	08 95       	ret

00001cd8 <__vector_21>:
	_FDEV_SETUP_RW);

// Interrupt handler for UART Data Register Empty (i.e., another character
// can be taken from our buffer and written out).
ISR(USART0_UDRE_vect)
{
    1cd8:	1f 92       	push	r1
    1cda:	0f 92       	push	r0
    1cdc:	0f b6       	in	r0, 0x3f	; 63
    1cde:	0f 92       	push	r0
    1ce0:	11 24       	eor	r1, r1
    1ce2:	2f 93       	push	r18
    1ce4:	8f 93       	push	r24
    1ce6:	9f 93       	push	r25
    1ce8:	ef 93       	push	r30
    1cea:	ff 93       	push	r31
	// Check if we have data in our buffer.
	if (bytes_in_out_buffer > 0)
    1cec:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <bytes_in_out_buffer>
    1cf0:	88 23       	and	r24, r24
    1cf2:	29 f1       	breq	.+74     	; 0x1d3e <__vector_21+0x66>
		// UART. The pending byte (character) is the one which is
		// bytes_in_buffer characters before the insert_pos (taking
		// into account that we may need to wrap around to the end of
		// the buffer).
		char c;
		if (out_insert_pos - bytes_in_out_buffer < 0)
    1cf4:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <out_insert_pos>
    1cf8:	20 91 9e 03 	lds	r18, 0x039E	; 0x80039e <bytes_in_out_buffer>
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	82 1b       	sub	r24, r18
    1d00:	91 09       	sbc	r25, r1
    1d02:	5a f4       	brpl	.+22     	; 0x1d1a <__vector_21+0x42>
		{
			// Need to wrap around.
			c = out_buffer[out_insert_pos - bytes_in_out_buffer +
    1d04:	e0 91 9d 03 	lds	r30, 0x039D	; 0x80039d <out_insert_pos>
    1d08:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <bytes_in_out_buffer>
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	e8 1b       	sub	r30, r24
    1d10:	f1 09       	sbc	r31, r1
    1d12:	e2 56       	subi	r30, 0x62	; 98
    1d14:	fb 4f       	sbci	r31, 0xFB	; 251
    1d16:	90 81       	ld	r25, Z
    1d18:	0a c0       	rjmp	.+20     	; 0x1d2e <__vector_21+0x56>
				OUTPUT_BUFFER_SIZE];
		}
		else
		{
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    1d1a:	e0 91 9d 03 	lds	r30, 0x039D	; 0x80039d <out_insert_pos>
    1d1e:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <bytes_in_out_buffer>
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	e8 1b       	sub	r30, r24
    1d26:	f1 09       	sbc	r31, r1
    1d28:	e1 56       	subi	r30, 0x61	; 97
    1d2a:	fc 4f       	sbci	r31, 0xFC	; 252
    1d2c:	90 81       	ld	r25, Z
		}

		// Decrement our count of the number of bytes in the buffer.
		bytes_in_out_buffer--;
    1d2e:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <bytes_in_out_buffer>
    1d32:	81 50       	subi	r24, 0x01	; 1
    1d34:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <bytes_in_out_buffer>

		// Output the character via the UART.
		UDR0 = c;
    1d38:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1d3c:	05 c0       	rjmp	.+10     	; 0x1d48 <__vector_21+0x70>
	{
		// No data in the buffer. We disable the UART Data Register
		// Empty interrupt because otherwise it will trigger again
		// immediately when this ISR exits. The interrupt is reenabled
		// when a character is placed in the buffer.
		UCSR0B &= ~(1 << UDRIE0);
    1d3e:	e1 ec       	ldi	r30, 0xC1	; 193
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	8f 7d       	andi	r24, 0xDF	; 223
    1d46:	80 83       	st	Z, r24
	}
}
    1d48:	ff 91       	pop	r31
    1d4a:	ef 91       	pop	r30
    1d4c:	9f 91       	pop	r25
    1d4e:	8f 91       	pop	r24
    1d50:	2f 91       	pop	r18
    1d52:	0f 90       	pop	r0
    1d54:	0f be       	out	0x3f, r0	; 63
    1d56:	0f 90       	pop	r0
    1d58:	1f 90       	pop	r1
    1d5a:	18 95       	reti

00001d5c <__vector_20>:

// Interrupt handler for UART Receive Complete (i.e., can read a character).
// The character is read and placed in the input buffer.
ISR(USART0_RX_vect)
{
    1d5c:	1f 92       	push	r1
    1d5e:	0f 92       	push	r0
    1d60:	0f b6       	in	r0, 0x3f	; 63
    1d62:	0f 92       	push	r0
    1d64:	11 24       	eor	r1, r1
    1d66:	2f 93       	push	r18
    1d68:	3f 93       	push	r19
    1d6a:	4f 93       	push	r20
    1d6c:	5f 93       	push	r21
    1d6e:	6f 93       	push	r22
    1d70:	7f 93       	push	r23
    1d72:	8f 93       	push	r24
    1d74:	9f 93       	push	r25
    1d76:	af 93       	push	r26
    1d78:	bf 93       	push	r27
    1d7a:	cf 93       	push	r28
    1d7c:	ef 93       	push	r30
    1d7e:	ff 93       	push	r31
	// Read the character - we ignore the possibility of overrun.
	char c = UDR0;
    1d80:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

	if (do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE)
    1d84:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <do_echo>
    1d88:	88 23       	and	r24, r24
    1d8a:	49 f0       	breq	.+18     	; 0x1d9e <__vector_20+0x42>
    1d8c:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <bytes_in_out_buffer>
    1d90:	8f 3f       	cpi	r24, 0xFF	; 255
    1d92:	29 f0       	breq	.+10     	; 0x1d9e <__vector_20+0x42>
	{
		// If echoing is enabled and there is output buffer space,
		// echo the received character back to the UART. If there
		// is no output buffer space, characters will be lost.
		uart_put_char(c, 0);
    1d94:	60 e0       	ldi	r22, 0x00	; 0
    1d96:	70 e0       	ldi	r23, 0x00	; 0
    1d98:	8c 2f       	mov	r24, r28
    1d9a:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <uart_put_char>
	}

	// Check if we have space in our buffer. If not, set the overrun flag
	// and throw away the character. We never clear the overrun flag -
	// it's up to the programmer to check/clear this flag if desired.
	if (bytes_in_input_buffer >= INPUT_BUFFER_SIZE)
    1d9e:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <bytes_in_input_buffer>
    1da2:	80 31       	cpi	r24, 0x10	; 16
    1da4:	20 f0       	brcs	.+8      	; 0x1dae <__vector_20+0x52>
	{
		input_overrun = 1;
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <input_overrun>
    1dac:	18 c0       	rjmp	.+48     	; 0x1dde <__vector_20+0x82>
	}
	else
	{
		// If the character is carriage return, turn it into linefeed.
		if (c == '\r')
    1dae:	cd 30       	cpi	r28, 0x0D	; 13
    1db0:	09 f4       	brne	.+2      	; 0x1db4 <__vector_20+0x58>
		{
			c = '\n';
    1db2:	ca e0       	ldi	r28, 0x0A	; 10
		}

		// There is room in the input buffer.
		input_buffer[input_insert_pos++] = c;
    1db4:	e0 91 9e 04 	lds	r30, 0x049E	; 0x80049e <input_insert_pos>
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	8e 0f       	add	r24, r30
    1dbc:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <input_insert_pos>
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	e1 56       	subi	r30, 0x61	; 97
    1dc4:	fb 4f       	sbci	r31, 0xFB	; 251
    1dc6:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    1dc8:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <bytes_in_input_buffer>
    1dcc:	8f 5f       	subi	r24, 0xFF	; 255
    1dce:	80 93 b0 04 	sts	0x04B0, r24	; 0x8004b0 <bytes_in_input_buffer>
		if (input_insert_pos == INPUT_BUFFER_SIZE)
    1dd2:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <input_insert_pos>
    1dd6:	80 31       	cpi	r24, 0x10	; 16
    1dd8:	11 f4       	brne	.+4      	; 0x1dde <__vector_20+0x82>
		{
			// Wrap around buffer pointer if necessary.
			input_insert_pos = 0;
    1dda:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <input_insert_pos>
		}
	}
}
    1dde:	ff 91       	pop	r31
    1de0:	ef 91       	pop	r30
    1de2:	cf 91       	pop	r28
    1de4:	bf 91       	pop	r27
    1de6:	af 91       	pop	r26
    1de8:	9f 91       	pop	r25
    1dea:	8f 91       	pop	r24
    1dec:	7f 91       	pop	r23
    1dee:	6f 91       	pop	r22
    1df0:	5f 91       	pop	r21
    1df2:	4f 91       	pop	r20
    1df4:	3f 91       	pop	r19
    1df6:	2f 91       	pop	r18
    1df8:	0f 90       	pop	r0
    1dfa:	0f be       	out	0x3f, r0	; 63
    1dfc:	0f 90       	pop	r0
    1dfe:	1f 90       	pop	r1
    1e00:	18 95       	reti

00001e02 <init_serial_stdio>:

void init_serial_stdio(long baudrate, bool echo)
{
	// Initialise our buffers.
	out_insert_pos = 0;
    1e02:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <out_insert_pos>
	bytes_in_out_buffer = 0;
    1e06:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <bytes_in_out_buffer>
	input_insert_pos = 0;
    1e0a:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <input_insert_pos>
	bytes_in_input_buffer = 0;
    1e0e:	10 92 b0 04 	sts	0x04B0, r1	; 0x8004b0 <bytes_in_input_buffer>
	input_overrun = 0;
    1e12:	10 92 af 04 	sts	0x04AF, r1	; 0x8004af <input_overrun>

	// Record whether we're going to echo characters or not.
	do_echo = echo;
    1e16:	40 93 8a 03 	sts	0x038A, r20	; 0x80038a <do_echo>

	// Configure the baud rate. This differs from the datasheet formula so
	// that we get rounding to the nearest integer while using integer
	// division (which truncates).
	UBRR0 = (uint16_t)((((SYSCLK / (8 * baudrate)) + 1) / 2) - 1);
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	88 0f       	add	r24, r24
    1e20:	99 1f       	adc	r25, r25
    1e22:	aa 1f       	adc	r26, r26
    1e24:	bb 1f       	adc	r27, r27
    1e26:	88 0f       	add	r24, r24
    1e28:	99 1f       	adc	r25, r25
    1e2a:	aa 1f       	adc	r26, r26
    1e2c:	bb 1f       	adc	r27, r27
    1e2e:	9c 01       	movw	r18, r24
    1e30:	ad 01       	movw	r20, r26
    1e32:	22 0f       	add	r18, r18
    1e34:	33 1f       	adc	r19, r19
    1e36:	44 1f       	adc	r20, r20
    1e38:	55 1f       	adc	r21, r21
    1e3a:	60 e0       	ldi	r22, 0x00	; 0
    1e3c:	72 e1       	ldi	r23, 0x12	; 18
    1e3e:	8a e7       	ldi	r24, 0x7A	; 122
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	0e 94 18 12 	call	0x2430	; 0x2430 <__divmodsi4>
    1e46:	ba 01       	movw	r22, r20
    1e48:	a9 01       	movw	r20, r18
    1e4a:	4f 5f       	subi	r20, 0xFF	; 255
    1e4c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e4e:	6f 4f       	sbci	r22, 0xFF	; 255
    1e50:	7f 4f       	sbci	r23, 0xFF	; 255
    1e52:	db 01       	movw	r26, r22
    1e54:	ca 01       	movw	r24, r20
    1e56:	1a f4       	brpl	.+6      	; 0x1e5e <init_serial_stdio+0x5c>
    1e58:	01 96       	adiw	r24, 0x01	; 1
    1e5a:	a1 1d       	adc	r26, r1
    1e5c:	b1 1d       	adc	r27, r1
    1e5e:	b5 95       	asr	r27
    1e60:	a7 95       	ror	r26
    1e62:	97 95       	ror	r25
    1e64:	87 95       	ror	r24
    1e66:	01 97       	sbiw	r24, 0x01	; 1
    1e68:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    1e6c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Enable transmission and receiving via UART. We don't enable the UDR
	// empty interrupt here (we wait until we've got a character to
	// transmit). NOTE: Interrupts must be enabled globally for this
	// module to work, but we do not do this here.
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
    1e70:	e1 ec       	ldi	r30, 0xC1	; 193
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	88 e1       	ldi	r24, 0x18	; 24
    1e76:	80 83       	st	Z, r24

	// Enable receive complete interrupt.
	UCSR0B |= (1 << RXCIE0);
    1e78:	80 81       	ld	r24, Z
    1e7a:	80 68       	ori	r24, 0x80	; 128
    1e7c:	80 83       	st	Z, r24

	// Set up our stream so the get and put functions are used to
	// read/write characters via the serial port when we use stdio
	// functions.
	stdout = &serialio;
    1e7e:	e1 eb       	ldi	r30, 0xB1	; 177
    1e80:	f4 e0       	ldi	r31, 0x04	; 4
    1e82:	8a e5       	ldi	r24, 0x5A	; 90
    1e84:	91 e0       	ldi	r25, 0x01	; 1
    1e86:	93 83       	std	Z+3, r25	; 0x03
    1e88:	82 83       	std	Z+2, r24	; 0x02
	stdin = &serialio;
    1e8a:	91 83       	std	Z+1, r25	; 0x01
    1e8c:	80 83       	st	Z, r24
    1e8e:	08 95       	ret

00001e90 <serial_input_available>:
}

bool serial_input_available(void)
{
	return bytes_in_input_buffer != 0;
    1e90:	90 91 b0 04 	lds	r25, 0x04B0	; 0x8004b0 <bytes_in_input_buffer>
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	91 11       	cpse	r25, r1
    1e98:	01 c0       	rjmp	.+2      	; 0x1e9c <serial_input_available+0xc>
    1e9a:	80 e0       	ldi	r24, 0x00	; 0
}
    1e9c:	08 95       	ret

00001e9e <clear_serial_input_buffer>:

void clear_serial_input_buffer(void)
{
	// Just adjust our buffer data so it looks empty.
	input_insert_pos = 0;
    1e9e:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <input_insert_pos>
	bytes_in_input_buffer = 0;
    1ea2:	10 92 b0 04 	sts	0x04B0, r1	; 0x8004b0 <bytes_in_input_buffer>
    1ea6:	08 95       	ret

00001ea8 <spi_setup_master>:

void spi_setup_master(uint8_t clockdivider)
{
	// Make the SS, MOSI and SCK pins outputs. These are pins 4, 5 and 7
	// of port B on the ATmega324A.
	DDRB |= (1 << DDB7) | (1 << DDB5) | (1 << DDB4);
    1ea8:	94 b1       	in	r25, 0x04	; 4
    1eaa:	90 6b       	ori	r25, 0xB0	; 176
    1eac:	94 b9       	out	0x04, r25	; 4

	// Set the slave select (SS) line high.
	PORTB |= (1 << PORTB4);
    1eae:	95 b1       	in	r25, 0x05	; 5
    1eb0:	90 61       	ori	r25, 0x10	; 16
    1eb2:	95 b9       	out	0x05, r25	; 5
	
	// Set up the SPI control registers SPCR and SPSR. Enable SPI as use
	// Master Mode by setting the SPE and MSTR bits of SPCR0.
	SPCR0 = (1 << SPE0) | (1 << MSTR0);
    1eb4:	90 e5       	ldi	r25, 0x50	; 80
    1eb6:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR based on the
	// given clock divider. Invalid values default to the slowest speed.
	// We consider each bit in turn.
	switch (clockdivider)
    1eb8:	88 30       	cpi	r24, 0x08	; 8
    1eba:	21 f0       	breq	.+8      	; 0x1ec4 <spi_setup_master+0x1c>
    1ebc:	80 32       	cpi	r24, 0x20	; 32
    1ebe:	11 f0       	breq	.+4      	; 0x1ec4 <spi_setup_master+0x1c>
    1ec0:	82 30       	cpi	r24, 0x02	; 2
    1ec2:	19 f4       	brne	.+6      	; 0x1eca <spi_setup_master+0x22>
	{
		case 2: // Fallthrough.
		case 8: // Fallthrough.
		case 32:
			SPSR0 = (1 << SPI2X0);
    1ec4:	91 e0       	ldi	r25, 0x01	; 1
    1ec6:	9d bd       	out	0x2d, r25	; 45
			break;
    1ec8:	01 c0       	rjmp	.+2      	; 0x1ecc <spi_setup_master+0x24>
		default:
			SPSR0 = 0;
    1eca:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch (clockdivider)
    1ecc:	80 32       	cpi	r24, 0x20	; 32
    1ece:	69 f0       	breq	.+26     	; 0x1eea <spi_setup_master+0x42>
    1ed0:	28 f4       	brcc	.+10     	; 0x1edc <spi_setup_master+0x34>
    1ed2:	88 30       	cpi	r24, 0x08	; 8
    1ed4:	71 f0       	breq	.+28     	; 0x1ef2 <spi_setup_master+0x4a>
    1ed6:	80 31       	cpi	r24, 0x10	; 16
    1ed8:	61 f0       	breq	.+24     	; 0x1ef2 <spi_setup_master+0x4a>
    1eda:	0e c0       	rjmp	.+28     	; 0x1ef8 <spi_setup_master+0x50>
    1edc:	80 34       	cpi	r24, 0x40	; 64
    1ede:	29 f0       	breq	.+10     	; 0x1eea <spi_setup_master+0x42>
    1ee0:	80 38       	cpi	r24, 0x80	; 128
    1ee2:	51 f4       	brne	.+20     	; 0x1ef8 <spi_setup_master+0x50>
	{
		case 128:
			SPCR0 |= (1 << SPR00);
    1ee4:	8c b5       	in	r24, 0x2c	; 44
    1ee6:	81 60       	ori	r24, 0x01	; 1
    1ee8:	8c bd       	out	0x2c, r24	; 44
			// Fallthrough.
		case 32: // Fallthrough.
		case 64:
			SPCR0 |= (1 << SPR10);
    1eea:	8c b5       	in	r24, 0x2c	; 44
    1eec:	82 60       	ori	r24, 0x02	; 2
    1eee:	8c bd       	out	0x2c, r24	; 44
			break;
    1ef0:	03 c0       	rjmp	.+6      	; 0x1ef8 <spi_setup_master+0x50>
		case 8: // Fallthrough.
		case 16:
			SPCR0 |= (1 << SPR00);
    1ef2:	8c b5       	in	r24, 0x2c	; 44
    1ef4:	81 60       	ori	r24, 0x01	; 1
    1ef6:	8c bd       	out	0x2c, r24	; 44
			break;
	}

	// Take SS (slave select) line low.
	PORTB &= ~(1 << PORTB4);
    1ef8:	85 b1       	in	r24, 0x05	; 5
    1efa:	8f 7e       	andi	r24, 0xEF	; 239
    1efc:	85 b9       	out	0x05, r24	; 5
    1efe:	08 95       	ret

00001f00 <spi_send_byte>:
	// transfer. We then wait until the most significant bit of SPSR0
	// (SPIF0) is set - this indicates that the transfer is complete. The
	// final read of SPSR0 followed by a read of SPDR0 will cause the SPIF
	// bit to be reset to 0. See page 173 of the ATmega324A datasheet for
	// more info.
	SPDR0 = byte;
    1f00:	8e bd       	out	0x2e, r24	; 46
	while ((SPSR0 & (1 << SPIF0)) == 0)
    1f02:	0d b4       	in	r0, 0x2d	; 45
    1f04:	07 fe       	sbrs	r0, 7
    1f06:	fd cf       	rjmp	.-6      	; 0x1f02 <spi_send_byte+0x2>
	{
		; // Wait.
	}
	return SPDR0;
    1f08:	8e b5       	in	r24, 0x2e	; 46
}
    1f0a:	08 95       	ret

00001f0c <display_initial_image>:
// Macro for getting next column number.
#define GET_NEXT_COLUMN(x, d) (((x) + 1) % countof((d)))

// Displays the initial image of the start screen.
static void display_initial_image(void)
{
    1f0c:	1f 93       	push	r17
    1f0e:	cf 93       	push	r28
    1f10:	df 93       	push	r29
    1f12:	cd b7       	in	r28, 0x3d	; 61
    1f14:	de b7       	in	r29, 0x3e	; 62
    1f16:	28 97       	sbiw	r28, 0x08	; 8
    1f18:	0f b6       	in	r0, 0x3f	; 63
    1f1a:	f8 94       	cli
    1f1c:	de bf       	out	0x3e, r29	; 62
    1f1e:	0f be       	out	0x3f, r0	; 63
    1f20:	cd bf       	out	0x3d, r28	; 61
	for (uint8_t col = 0; col < min(MATRIX_NUM_COLUMNS,
    1f22:	10 e0       	ldi	r17, 0x00	; 0
    1f24:	17 c0       	rjmp	.+46     	; 0x1f54 <display_initial_image+0x48>
		countof(anim_data)); col++)
	{
		MatrixColumn column_data;
		memcpy_P(column_data, &anim_data[col], sizeof(column_data));
    1f26:	61 2f       	mov	r22, r17
    1f28:	70 e0       	ldi	r23, 0x00	; 0
    1f2a:	66 0f       	add	r22, r22
    1f2c:	77 1f       	adc	r23, r23
    1f2e:	66 0f       	add	r22, r22
    1f30:	77 1f       	adc	r23, r23
    1f32:	66 0f       	add	r22, r22
    1f34:	77 1f       	adc	r23, r23
    1f36:	60 53       	subi	r22, 0x30	; 48
    1f38:	7e 4f       	sbci	r23, 0xFE	; 254
    1f3a:	48 e0       	ldi	r20, 0x08	; 8
    1f3c:	50 e0       	ldi	r21, 0x00	; 0
    1f3e:	ce 01       	movw	r24, r28
    1f40:	01 96       	adiw	r24, 0x01	; 1
    1f42:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <memcpy_P>
		ledmatrix_update_column(col, column_data);
    1f46:	be 01       	movw	r22, r28
    1f48:	6f 5f       	subi	r22, 0xFF	; 255
    1f4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f4c:	81 2f       	mov	r24, r17
    1f4e:	0e 94 5d 09 	call	0x12ba	; 0x12ba <ledmatrix_update_column>

// Displays the initial image of the start screen.
static void display_initial_image(void)
{
	for (uint8_t col = 0; col < min(MATRIX_NUM_COLUMNS,
		countof(anim_data)); col++)
    1f52:	1f 5f       	subi	r17, 0xFF	; 255
#define GET_NEXT_COLUMN(x, d) (((x) + 1) % countof((d)))

// Displays the initial image of the start screen.
static void display_initial_image(void)
{
	for (uint8_t col = 0; col < min(MATRIX_NUM_COLUMNS,
    1f54:	10 31       	cpi	r17, 0x10	; 16
    1f56:	38 f3       	brcs	.-50     	; 0x1f26 <display_initial_image+0x1a>
	{
		MatrixColumn column_data;
		memcpy_P(column_data, &anim_data[col], sizeof(column_data));
		ledmatrix_update_column(col, column_data);
	}
}
    1f58:	28 96       	adiw	r28, 0x08	; 8
    1f5a:	0f b6       	in	r0, 0x3f	; 63
    1f5c:	f8 94       	cli
    1f5e:	de bf       	out	0x3e, r29	; 62
    1f60:	0f be       	out	0x3f, r0	; 63
    1f62:	cd bf       	out	0x3d, r28	; 61
    1f64:	df 91       	pop	r29
    1f66:	cf 91       	pop	r28
    1f68:	1f 91       	pop	r17
    1f6a:	08 95       	ret

00001f6c <display_next_column>:

// Displays the next column of the start screen.
static void display_next_column(void)
{
    1f6c:	cf 93       	push	r28
    1f6e:	df 93       	push	r29
    1f70:	cd b7       	in	r28, 0x3d	; 61
    1f72:	de b7       	in	r29, 0x3e	; 62
    1f74:	28 97       	sbiw	r28, 0x08	; 8
    1f76:	0f b6       	in	r0, 0x3f	; 63
    1f78:	f8 94       	cli
    1f7a:	de bf       	out	0x3e, r29	; 62
    1f7c:	0f be       	out	0x3f, r0	; 63
    1f7e:	cd bf       	out	0x3d, r28	; 61
	ledmatrix_shift_display_left();
    1f80:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <ledmatrix_shift_display_left>
	MatrixColumn column_data;
	memcpy_P(column_data, &anim_data[next_column], sizeof(column_data));
    1f84:	60 91 8b 03 	lds	r22, 0x038B	; 0x80038b <next_column>
    1f88:	70 e0       	ldi	r23, 0x00	; 0
    1f8a:	66 0f       	add	r22, r22
    1f8c:	77 1f       	adc	r23, r23
    1f8e:	66 0f       	add	r22, r22
    1f90:	77 1f       	adc	r23, r23
    1f92:	66 0f       	add	r22, r22
    1f94:	77 1f       	adc	r23, r23
    1f96:	60 53       	subi	r22, 0x30	; 48
    1f98:	7e 4f       	sbci	r23, 0xFE	; 254
    1f9a:	48 e0       	ldi	r20, 0x08	; 8
    1f9c:	50 e0       	ldi	r21, 0x00	; 0
    1f9e:	ce 01       	movw	r24, r28
    1fa0:	01 96       	adiw	r24, 0x01	; 1
    1fa2:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <memcpy_P>
	ledmatrix_update_column(MATRIX_NUM_COLUMNS - 1, column_data);
    1fa6:	be 01       	movw	r22, r28
    1fa8:	6f 5f       	subi	r22, 0xFF	; 255
    1faa:	7f 4f       	sbci	r23, 0xFF	; 255
    1fac:	8f e0       	ldi	r24, 0x0F	; 15
    1fae:	0e 94 5d 09 	call	0x12ba	; 0x12ba <ledmatrix_update_column>
	next_column = GET_NEXT_COLUMN(next_column, anim_data);
    1fb2:	40 91 8b 03 	lds	r20, 0x038B	; 0x80038b <next_column>
    1fb6:	50 e0       	ldi	r21, 0x00	; 0
    1fb8:	4f 5f       	subi	r20, 0xFF	; 255
    1fba:	5f 4f       	sbci	r21, 0xFF	; 255
    1fbc:	9a 01       	movw	r18, r20
    1fbe:	36 95       	lsr	r19
    1fc0:	27 95       	ror	r18
    1fc2:	ab e7       	ldi	r26, 0x7B	; 123
    1fc4:	b4 e1       	ldi	r27, 0x14	; 20
    1fc6:	0e 94 37 12 	call	0x246e	; 0x246e <__umulhisi3>
    1fca:	96 95       	lsr	r25
    1fcc:	87 95       	ror	r24
    1fce:	62 e3       	ldi	r22, 0x32	; 50
    1fd0:	68 9f       	mul	r22, r24
    1fd2:	90 01       	movw	r18, r0
    1fd4:	69 9f       	mul	r22, r25
    1fd6:	30 0d       	add	r19, r0
    1fd8:	11 24       	eor	r1, r1
    1fda:	ca 01       	movw	r24, r20
    1fdc:	82 1b       	sub	r24, r18
    1fde:	93 0b       	sbc	r25, r19
    1fe0:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <next_column>
	if (next_column == MATRIX_NUM_COLUMNS)
    1fe4:	80 31       	cpi	r24, 0x10	; 16
    1fe6:	29 f4       	brne	.+10     	; 0x1ff2 <display_next_column+0x86>
	{
		flags |= FLG_IS_NEW_CYCLE;
    1fe8:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <flags>
    1fec:	81 60       	ori	r24, 0x01	; 1
    1fee:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <flags>
	}
}
    1ff2:	28 96       	adiw	r28, 0x08	; 8
    1ff4:	0f b6       	in	r0, 0x3f	; 63
    1ff6:	f8 94       	cli
    1ff8:	de bf       	out	0x3e, r29	; 62
    1ffa:	0f be       	out	0x3f, r0	; 63
    1ffc:	cd bf       	out	0x3d, r28	; 61
    1ffe:	df 91       	pop	r29
    2000:	cf 91       	pop	r28
    2002:	08 95       	ret

00002004 <display_title_pixel>:
		}
	}
}

static bool display_title_pixel(uint8_t line, uint8_t col, bool coloured)
{
    2004:	ef 92       	push	r14
    2006:	ff 92       	push	r15
    2008:	0f 93       	push	r16
    200a:	1f 93       	push	r17
    200c:	cf 93       	push	r28
    200e:	df 93       	push	r29
    2010:	cd b7       	in	r28, 0x3d	; 61
    2012:	de b7       	in	r29, 0x3e	; 62
    2014:	28 97       	sbiw	r28, 0x08	; 8
    2016:	0f b6       	in	r0, 0x3f	; 63
    2018:	f8 94       	cli
    201a:	de bf       	out	0x3e, r29	; 62
    201c:	0f be       	out	0x3f, r0	; 63
    201e:	cd bf       	out	0x3d, r28	; 61
    2020:	f6 2e       	mov	r15, r22
    2022:	e4 2e       	mov	r14, r20
	uint64_t data;
	memcpy_P(&data, &title_data[line], sizeof(data));
    2024:	68 2f       	mov	r22, r24
    2026:	70 e0       	ldi	r23, 0x00	; 0
    2028:	66 0f       	add	r22, r22
    202a:	77 1f       	adc	r23, r23
    202c:	66 0f       	add	r22, r22
    202e:	77 1f       	adc	r23, r23
    2030:	66 0f       	add	r22, r22
    2032:	77 1f       	adc	r23, r23
    2034:	68 55       	subi	r22, 0x58	; 88
    2036:	7e 4f       	sbci	r23, 0xFE	; 254
    2038:	48 e0       	ldi	r20, 0x08	; 8
    203a:	50 e0       	ldi	r21, 0x00	; 0
    203c:	ce 01       	movw	r24, r28
    203e:	01 96       	adiw	r24, 0x01	; 1
    2040:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <memcpy_P>
	if (data & ((uint64_t)1U << (63 - col)))
    2044:	0f e3       	ldi	r16, 0x3F	; 63
    2046:	10 e0       	ldi	r17, 0x00	; 0
    2048:	0f 19       	sub	r16, r15
    204a:	11 09       	sbc	r17, r1
    204c:	29 81       	ldd	r18, Y+1	; 0x01
    204e:	3a 81       	ldd	r19, Y+2	; 0x02
    2050:	4b 81       	ldd	r20, Y+3	; 0x03
    2052:	5c 81       	ldd	r21, Y+4	; 0x04
    2054:	6d 81       	ldd	r22, Y+5	; 0x05
    2056:	7e 81       	ldd	r23, Y+6	; 0x06
    2058:	8f 81       	ldd	r24, Y+7	; 0x07
    205a:	98 85       	ldd	r25, Y+8	; 0x08
    205c:	0e 94 48 12 	call	0x2490	; 0x2490 <__lshrdi3>
    2060:	21 70       	andi	r18, 0x01	; 1
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	40 e0       	ldi	r20, 0x00	; 0
    2066:	50 e0       	ldi	r21, 0x00	; 0
    2068:	60 e0       	ldi	r22, 0x00	; 0
    206a:	70 e0       	ldi	r23, 0x00	; 0
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	a0 e0       	ldi	r26, 0x00	; 0
    2072:	0e 94 64 12 	call	0x24c8	; 0x24c8 <__cmpdi2_s8>
    2076:	c1 f0       	breq	.+48     	; 0x20a8 <display_title_pixel+0xa4>
	{
		if (!coloured)
    2078:	e1 10       	cpse	r14, r1
    207a:	1b c0       	rjmp	.+54     	; 0x20b2 <display_title_pixel+0xae>
    207c:	10 e0       	ldi	r17, 0x00	; 0
    207e:	0f c0       	rjmp	.+30     	; 0x209e <display_title_pixel+0x9a>
		{
			for (uint8_t j = 0; j < countof(title_pos); j++)
			{
				if (col <= title_pos[j])
    2080:	81 2f       	mov	r24, r17
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	fc 01       	movw	r30, r24
    2086:	ea 50       	subi	r30, 0x0A	; 10
    2088:	fd 4f       	sbci	r31, 0xFD	; 253
    208a:	20 81       	ld	r18, Z
    208c:	2f 15       	cp	r18, r15
    208e:	30 f0       	brcs	.+12     	; 0x209c <display_title_pixel+0x98>
				{
					set_display_attribute(title_attr[j]);
    2090:	fc 01       	movw	r30, r24
    2092:	e1 51       	subi	r30, 0x11	; 17
    2094:	fd 4f       	sbci	r31, 0xFD	; 253
    2096:	80 81       	ld	r24, Z
    2098:	0e 94 79 11 	call	0x22f2	; 0x22f2 <set_display_attribute>
	memcpy_P(&data, &title_data[line], sizeof(data));
	if (data & ((uint64_t)1U << (63 - col)))
	{
		if (!coloured)
		{
			for (uint8_t j = 0; j < countof(title_pos); j++)
    209c:	1f 5f       	subi	r17, 0xFF	; 255
    209e:	17 30       	cpi	r17, 0x07	; 7
    20a0:	78 f3       	brcs	.-34     	; 0x2080 <display_title_pixel+0x7c>
				if (col <= title_pos[j])
				{
					set_display_attribute(title_attr[j]);
				}
			}
			coloured = true;
    20a2:	ee 24       	eor	r14, r14
    20a4:	e3 94       	inc	r14
    20a6:	05 c0       	rjmp	.+10     	; 0x20b2 <display_title_pixel+0xae>
		}
	}
	else
	{
		if (coloured)
    20a8:	ee 20       	and	r14, r14
    20aa:	19 f0       	breq	.+6      	; 0x20b2 <display_title_pixel+0xae>
		{
			normal_display_mode();
    20ac:	0e 94 5e 11 	call	0x22bc	; 0x22bc <normal_display_mode>
			coloured = false;
    20b0:	e1 2c       	mov	r14, r1
		}
		
	}
	putchar(' ');
    20b2:	60 91 b3 04 	lds	r22, 0x04B3	; 0x8004b3 <__iob+0x2>
    20b6:	70 91 b4 04 	lds	r23, 0x04B4	; 0x8004b4 <__iob+0x3>
    20ba:	80 e2       	ldi	r24, 0x20	; 32
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	0e 94 40 13 	call	0x2680	; 0x2680 <fputc>
	return coloured;
}
    20c2:	8e 2d       	mov	r24, r14
    20c4:	28 96       	adiw	r28, 0x08	; 8
    20c6:	0f b6       	in	r0, 0x3f	; 63
    20c8:	f8 94       	cli
    20ca:	de bf       	out	0x3e, r29	; 62
    20cc:	0f be       	out	0x3f, r0	; 63
    20ce:	cd bf       	out	0x3d, r28	; 61
    20d0:	df 91       	pop	r29
    20d2:	cf 91       	pop	r28
    20d4:	1f 91       	pop	r17
    20d6:	0f 91       	pop	r16
    20d8:	ff 90       	pop	r15
    20da:	ef 90       	pop	r14
    20dc:	08 95       	ret

000020de <setup_start_screen>:
	}
}

void setup_start_screen(void)
{
	ledmatrix_clear();
    20de:	0e 94 81 09 	call	0x1302	; 0x1302 <ledmatrix_clear>
	display_initial_image();
    20e2:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <display_initial_image>
	flags |= FLG_IS_NEW_CYCLE;
    20e6:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <flags>
    20ea:	81 60       	ori	r24, 0x01	; 1
    20ec:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <flags>
    20f0:	08 95       	ret

000020f2 <update_start_screen>:
}

void update_start_screen(void)
{
    20f2:	cf 92       	push	r12
    20f4:	df 92       	push	r13
    20f6:	ef 92       	push	r14
    20f8:	ff 92       	push	r15
	uint32_t time = get_current_time();
    20fa:	0e 94 a5 11 	call	0x234a	; 0x234a <get_current_time>
    20fe:	6b 01       	movw	r12, r22
    2100:	7c 01       	movw	r14, r24

	if (flags & FLG_IS_NEW_CYCLE)
    2102:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <flags>
    2106:	80 ff       	sbrs	r24, 0
    2108:	16 c0       	rjmp	.+44     	; 0x2136 <update_start_screen+0x44>
	{
		flashing_start_time = time;
    210a:	c0 92 90 03 	sts	0x0390, r12	; 0x800390 <flashing_start_time>
    210e:	d0 92 91 03 	sts	0x0391, r13	; 0x800391 <flashing_start_time+0x1>
    2112:	e0 92 92 03 	sts	0x0392, r14	; 0x800392 <flashing_start_time+0x2>
    2116:	f0 92 93 03 	sts	0x0393, r15	; 0x800393 <flashing_start_time+0x3>
		last_update_time = time;
    211a:	c0 92 8c 03 	sts	0x038C, r12	; 0x80038c <last_update_time>
    211e:	d0 92 8d 03 	sts	0x038D, r13	; 0x80038d <last_update_time+0x1>
    2122:	e0 92 8e 03 	sts	0x038E, r14	; 0x80038e <last_update_time+0x2>
    2126:	f0 92 8f 03 	sts	0x038F, r15	; 0x80038f <last_update_time+0x3>
		next_column = MATRIX_NUM_COLUMNS;
    212a:	90 e1       	ldi	r25, 0x10	; 16
    212c:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <next_column>
		flags &= ((~FLG_IS_NEW_CYCLE) & (~FLG_IS_FLASH_DONE) &
    2130:	88 7f       	andi	r24, 0xF8	; 248
    2132:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <flags>
			(~FLG_TOGGLE_ON));
	}

	if (next_column == MATRIX_NUM_COLUMNS)
    2136:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <next_column>
    213a:	80 31       	cpi	r24, 0x10	; 16
    213c:	09 f0       	breq	.+2      	; 0x2140 <update_start_screen+0x4e>
    213e:	64 c0       	rjmp	.+200    	; 0x2208 <update_start_screen+0x116>
	{
		if (time > flashing_start_time + FLASH_TIME + STATIC_TIME)
    2140:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <flashing_start_time>
    2144:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <flashing_start_time+0x1>
    2148:	a0 91 92 03 	lds	r26, 0x0392	; 0x800392 <flashing_start_time+0x2>
    214c:	b0 91 93 03 	lds	r27, 0x0393	; 0x800393 <flashing_start_time+0x3>
    2150:	ac 01       	movw	r20, r24
    2152:	bd 01       	movw	r22, r26
    2154:	40 53       	subi	r20, 0x30	; 48
    2156:	58 4f       	sbci	r21, 0xF8	; 248
    2158:	6f 4f       	sbci	r22, 0xFF	; 255
    215a:	7f 4f       	sbci	r23, 0xFF	; 255
    215c:	4c 15       	cp	r20, r12
    215e:	5d 05       	cpc	r21, r13
    2160:	6e 05       	cpc	r22, r14
    2162:	7f 05       	cpc	r23, r15
    2164:	58 f4       	brcc	.+22     	; 0x217c <update_start_screen+0x8a>
		{
			// Two seconds have passed since start of flashing,
			// display next column.
			display_next_column();
    2166:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <display_next_column>
			last_update_time = time;
    216a:	c0 92 8c 03 	sts	0x038C, r12	; 0x80038c <last_update_time>
    216e:	d0 92 8d 03 	sts	0x038D, r13	; 0x80038d <last_update_time+0x1>
    2172:	e0 92 8e 03 	sts	0x038E, r14	; 0x80038e <last_update_time+0x2>
    2176:	f0 92 8f 03 	sts	0x038F, r15	; 0x80038f <last_update_time+0x3>
    217a:	61 c0       	rjmp	.+194    	; 0x223e <update_start_screen+0x14c>
		}
		else if (!(flags & FLG_IS_FLASH_DONE) && time >
    217c:	20 91 94 03 	lds	r18, 0x0394	; 0x800394 <flags>
    2180:	32 2f       	mov	r19, r18
    2182:	32 70       	andi	r19, 0x02	; 2
    2184:	21 fd       	sbrc	r18, 1
    2186:	19 c0       	rjmp	.+50     	; 0x21ba <update_start_screen+0xc8>
			flashing_start_time + FLASH_TIME)
    2188:	88 51       	subi	r24, 0x18	; 24
    218a:	9c 4f       	sbci	r25, 0xFC	; 252
    218c:	af 4f       	sbci	r26, 0xFF	; 255
    218e:	bf 4f       	sbci	r27, 0xFF	; 255
			// Two seconds have passed since start of flashing,
			// display next column.
			display_next_column();
			last_update_time = time;
		}
		else if (!(flags & FLG_IS_FLASH_DONE) && time >
    2190:	8c 15       	cp	r24, r12
    2192:	9d 05       	cpc	r25, r13
    2194:	ae 05       	cpc	r26, r14
    2196:	bf 05       	cpc	r27, r15
    2198:	80 f4       	brcc	.+32     	; 0x21ba <update_start_screen+0xc8>
			flashing_start_time + FLASH_TIME)
		{
			// One second has passed since the start of flashing,
			// turn off flashing.
			display_initial_image();
    219a:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <display_initial_image>
			flags |= FLG_IS_FLASH_DONE;
    219e:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <flags>
    21a2:	82 60       	ori	r24, 0x02	; 2
    21a4:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <flags>
			last_update_time = time;
    21a8:	c0 92 8c 03 	sts	0x038C, r12	; 0x80038c <last_update_time>
    21ac:	d0 92 8d 03 	sts	0x038D, r13	; 0x80038d <last_update_time+0x1>
    21b0:	e0 92 8e 03 	sts	0x038E, r14	; 0x80038e <last_update_time+0x2>
    21b4:	f0 92 8f 03 	sts	0x038F, r15	; 0x80038f <last_update_time+0x3>
    21b8:	42 c0       	rjmp	.+132    	; 0x223e <update_start_screen+0x14c>
		}
		else if (!(flags & FLG_IS_FLASH_DONE) && time >
    21ba:	31 11       	cpse	r19, r1
    21bc:	40 c0       	rjmp	.+128    	; 0x223e <update_start_screen+0x14c>
			last_update_time + FLASH_SPEED)
    21be:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <last_update_time>
    21c2:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <last_update_time+0x1>
    21c6:	a0 91 8e 03 	lds	r26, 0x038E	; 0x80038e <last_update_time+0x2>
    21ca:	b0 91 8f 03 	lds	r27, 0x038F	; 0x80038f <last_update_time+0x3>
    21ce:	8c 59       	subi	r24, 0x9C	; 156
    21d0:	9f 4f       	sbci	r25, 0xFF	; 255
    21d2:	af 4f       	sbci	r26, 0xFF	; 255
    21d4:	bf 4f       	sbci	r27, 0xFF	; 255
			// turn off flashing.
			display_initial_image();
			flags |= FLG_IS_FLASH_DONE;
			last_update_time = time;
		}
		else if (!(flags & FLG_IS_FLASH_DONE) && time >
    21d6:	8c 15       	cp	r24, r12
    21d8:	9d 05       	cpc	r25, r13
    21da:	ae 05       	cpc	r26, r14
    21dc:	bf 05       	cpc	r27, r15
    21de:	78 f5       	brcc	.+94     	; 0x223e <update_start_screen+0x14c>
			last_update_time + FLASH_SPEED)
		{
			// 0.1 seconds passed since last flash, flash the LED
			// matrix.
			if ((flags ^= FLG_TOGGLE_ON) & FLG_TOGGLE_ON)
    21e0:	84 e0       	ldi	r24, 0x04	; 4
    21e2:	28 27       	eor	r18, r24
    21e4:	20 93 94 03 	sts	0x0394, r18	; 0x800394 <flags>
    21e8:	22 ff       	sbrs	r18, 2
    21ea:	03 c0       	rjmp	.+6      	; 0x21f2 <update_start_screen+0x100>
			{
				ledmatrix_clear();
    21ec:	0e 94 81 09 	call	0x1302	; 0x1302 <ledmatrix_clear>
    21f0:	02 c0       	rjmp	.+4      	; 0x21f6 <update_start_screen+0x104>
			}
			else
			{
				display_initial_image();
    21f2:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <display_initial_image>
			}
			last_update_time = time;
    21f6:	c0 92 8c 03 	sts	0x038C, r12	; 0x80038c <last_update_time>
    21fa:	d0 92 8d 03 	sts	0x038D, r13	; 0x80038d <last_update_time+0x1>
    21fe:	e0 92 8e 03 	sts	0x038E, r14	; 0x80038e <last_update_time+0x2>
    2202:	f0 92 8f 03 	sts	0x038F, r15	; 0x80038f <last_update_time+0x3>
    2206:	1b c0       	rjmp	.+54     	; 0x223e <update_start_screen+0x14c>
		}
	}
	else
	{
		if (time > last_update_time + SCROLL_SPEED)
    2208:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <last_update_time>
    220c:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <last_update_time+0x1>
    2210:	a0 91 8e 03 	lds	r26, 0x038E	; 0x80038e <last_update_time+0x2>
    2214:	b0 91 8f 03 	lds	r27, 0x038F	; 0x80038f <last_update_time+0x3>
    2218:	88 53       	subi	r24, 0x38	; 56
    221a:	9f 4f       	sbci	r25, 0xFF	; 255
    221c:	af 4f       	sbci	r26, 0xFF	; 255
    221e:	bf 4f       	sbci	r27, 0xFF	; 255
    2220:	8c 15       	cp	r24, r12
    2222:	9d 05       	cpc	r25, r13
    2224:	ae 05       	cpc	r26, r14
    2226:	bf 05       	cpc	r27, r15
    2228:	50 f4       	brcc	.+20     	; 0x223e <update_start_screen+0x14c>
		{
			display_next_column();
    222a:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <display_next_column>
			last_update_time = time;
    222e:	c0 92 8c 03 	sts	0x038C, r12	; 0x80038c <last_update_time>
    2232:	d0 92 8d 03 	sts	0x038D, r13	; 0x80038d <last_update_time+0x1>
    2236:	e0 92 8e 03 	sts	0x038E, r14	; 0x80038e <last_update_time+0x2>
    223a:	f0 92 8f 03 	sts	0x038F, r15	; 0x80038f <last_update_time+0x3>
		}
	}
}
    223e:	ff 90       	pop	r15
    2240:	ef 90       	pop	r14
    2242:	df 90       	pop	r13
    2244:	cf 90       	pop	r12
    2246:	08 95       	ret

00002248 <display_terminal_title>:
	putchar(' ');
	return coloured;
}

void display_terminal_title(uint8_t row, uint8_t col)
{
    2248:	ff 92       	push	r15
    224a:	0f 93       	push	r16
    224c:	1f 93       	push	r17
    224e:	cf 93       	push	r28
    2250:	df 93       	push	r29
    2252:	f8 2e       	mov	r15, r24
    2254:	06 2f       	mov	r16, r22
	bool coloured = false;
	for (uint8_t line = 0; line < countof(title_data); line++)
    2256:	10 e0       	ldi	r17, 0x00	; 0
	return coloured;
}

void display_terminal_title(uint8_t row, uint8_t col)
{
	bool coloured = false;
    2258:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t line = 0; line < countof(title_data); line++)
    225a:	14 c0       	rjmp	.+40     	; 0x2284 <display_terminal_title+0x3c>
	{
		move_terminal_cursor(line + row, col);
    225c:	60 2f       	mov	r22, r16
    225e:	70 e0       	ldi	r23, 0x00	; 0
    2260:	8f 2d       	mov	r24, r15
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	81 0f       	add	r24, r17
    2266:	91 1d       	adc	r25, r1
    2268:	0e 94 4a 11 	call	0x2294	; 0x2294 <move_terminal_cursor>
		for (uint8_t i = 0; i < 64; i++)
    226c:	c0 e0       	ldi	r28, 0x00	; 0
    226e:	07 c0       	rjmp	.+14     	; 0x227e <display_terminal_title+0x36>
		{
			coloured = display_title_pixel(line, i, coloured);
    2270:	4d 2f       	mov	r20, r29
    2272:	6c 2f       	mov	r22, r28
    2274:	81 2f       	mov	r24, r17
    2276:	0e 94 02 10 	call	0x2004	; 0x2004 <display_title_pixel>
    227a:	d8 2f       	mov	r29, r24
{
	bool coloured = false;
	for (uint8_t line = 0; line < countof(title_data); line++)
	{
		move_terminal_cursor(line + row, col);
		for (uint8_t i = 0; i < 64; i++)
    227c:	cf 5f       	subi	r28, 0xFF	; 255
    227e:	c0 34       	cpi	r28, 0x40	; 64
    2280:	b8 f3       	brcs	.-18     	; 0x2270 <display_terminal_title+0x28>
}

void display_terminal_title(uint8_t row, uint8_t col)
{
	bool coloured = false;
	for (uint8_t line = 0; line < countof(title_data); line++)
    2282:	1f 5f       	subi	r17, 0xFF	; 255
    2284:	15 30       	cpi	r17, 0x05	; 5
    2286:	50 f3       	brcs	.-44     	; 0x225c <display_terminal_title+0x14>
		for (uint8_t i = 0; i < 64; i++)
		{
			coloured = display_title_pixel(line, i, coloured);
		}
	}
}
    2288:	df 91       	pop	r29
    228a:	cf 91       	pop	r28
    228c:	1f 91       	pop	r17
    228e:	0f 91       	pop	r16
    2290:	ff 90       	pop	r15
    2292:	08 95       	ret

00002294 <move_terminal_cursor>:
}

void reverse_video(void)
{
	printf_P(PSTR("\x1b[7m"));
}
    2294:	6f 5f       	subi	r22, 0xFF	; 255
    2296:	7f 4f       	sbci	r23, 0xFF	; 255
    2298:	7f 93       	push	r23
    229a:	6f 93       	push	r22
    229c:	01 96       	adiw	r24, 0x01	; 1
    229e:	9f 93       	push	r25
    22a0:	8f 93       	push	r24
    22a2:	8b e7       	ldi	r24, 0x7B	; 123
    22a4:	93 e0       	ldi	r25, 0x03	; 3
    22a6:	9f 93       	push	r25
    22a8:	8f 93       	push	r24
    22aa:	0e 94 92 13 	call	0x2724	; 0x2724 <printf_P>
    22ae:	0f 90       	pop	r0
    22b0:	0f 90       	pop	r0
    22b2:	0f 90       	pop	r0
    22b4:	0f 90       	pop	r0
    22b6:	0f 90       	pop	r0
    22b8:	0f 90       	pop	r0
    22ba:	08 95       	ret

000022bc <normal_display_mode>:
    22bc:	86 e7       	ldi	r24, 0x76	; 118
    22be:	93 e0       	ldi	r25, 0x03	; 3
    22c0:	9f 93       	push	r25
    22c2:	8f 93       	push	r24
    22c4:	0e 94 92 13 	call	0x2724	; 0x2724 <printf_P>
    22c8:	0f 90       	pop	r0
    22ca:	0f 90       	pop	r0
    22cc:	08 95       	ret

000022ce <clear_terminal>:

void clear_terminal(void)
{
	printf_P(PSTR("\x1b[2J"));
    22ce:	81 e7       	ldi	r24, 0x71	; 113
    22d0:	93 e0       	ldi	r25, 0x03	; 3
    22d2:	9f 93       	push	r25
    22d4:	8f 93       	push	r24
    22d6:	0e 94 92 13 	call	0x2724	; 0x2724 <printf_P>
}
    22da:	0f 90       	pop	r0
    22dc:	0f 90       	pop	r0
    22de:	08 95       	ret

000022e0 <clear_to_end_of_line>:

void clear_to_end_of_line(void)
{
	printf_P(PSTR("\x1b[K"));
    22e0:	8d e6       	ldi	r24, 0x6D	; 109
    22e2:	93 e0       	ldi	r25, 0x03	; 3
    22e4:	9f 93       	push	r25
    22e6:	8f 93       	push	r24
    22e8:	0e 94 92 13 	call	0x2724	; 0x2724 <printf_P>
}
    22ec:	0f 90       	pop	r0
    22ee:	0f 90       	pop	r0
    22f0:	08 95       	ret

000022f2 <set_display_attribute>:

void set_display_attribute(DisplayParameter parameter)
{
	printf_P(PSTR("\x1b[%dm"), parameter);
    22f2:	1f 92       	push	r1
    22f4:	8f 93       	push	r24
    22f6:	87 e6       	ldi	r24, 0x67	; 103
    22f8:	93 e0       	ldi	r25, 0x03	; 3
    22fa:	9f 93       	push	r25
    22fc:	8f 93       	push	r24
    22fe:	0e 94 92 13 	call	0x2724	; 0x2724 <printf_P>
}
    2302:	0f 90       	pop	r0
    2304:	0f 90       	pop	r0
    2306:	0f 90       	pop	r0
    2308:	0f 90       	pop	r0
    230a:	08 95       	ret

0000230c <hide_cursor>:

void hide_cursor(void)
{
	printf_P(PSTR("\x1b[?25l"));
    230c:	80 e6       	ldi	r24, 0x60	; 96
    230e:	93 e0       	ldi	r25, 0x03	; 3
    2310:	9f 93       	push	r25
    2312:	8f 93       	push	r24
    2314:	0e 94 92 13 	call	0x2724	; 0x2724 <printf_P>
}
    2318:	0f 90       	pop	r0
    231a:	0f 90       	pop	r0
    231c:	08 95       	ret

0000231e <init_timer0>:
static volatile uint32_t clock_ticks_ms;

void init_timer0(void)
{
	// Reset clock tick count. L indicates a long (32 bit) constant.
	clock_ticks_ms = 0L;
    231e:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <clock_ticks_ms>
    2322:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <clock_ticks_ms+0x1>
    2326:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <clock_ticks_ms+0x2>
    232a:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <clock_ticks_ms+0x3>
	// interrupt every 64 x 125 clock cycles, i.e. every 1 milliseconds
	// with an 8MHz clock. The counter will be reset to 0 when it reaches
	// it's output compare value.

	// Clear the timer.
	TCNT0 = 0;
    232e:	16 bc       	out	0x26, r1	; 38

	// Set the output compare value to be 124.
	OCR0A = 124;
    2330:	8c e7       	ldi	r24, 0x7C	; 124
    2332:	87 bd       	out	0x27, r24	; 39

	// Set the timer to clear on compare match (CTC mode) and to
	// divide the clock by 64. This starts the timer running.
	TCCR0A = (1 << WGM01);
    2334:	92 e0       	ldi	r25, 0x02	; 2
    2336:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1 << CS01) | (1 << CS00);
    2338:	83 e0       	ldi	r24, 0x03	; 3
    233a:	85 bd       	out	0x25, r24	; 37

	// Enable an interrupt on output compare match. Note that
	// interrupts have to be enabled globally before the interrupts
	// will fire.
	TIMSK0 |= (1 << OCIE0A);
    233c:	ee e6       	ldi	r30, 0x6E	; 110
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	82 60       	ori	r24, 0x02	; 2
    2344:	80 83       	st	Z, r24

	// Make sure the interrupt flag is cleared by writing a 1 to it.
	TIFR0 = (1 << OCF0A);
    2346:	95 bb       	out	0x15, r25	; 21
    2348:	08 95       	ret

0000234a <get_current_time>:
uint32_t get_current_time(void)
{
	// Disable interrupts so we can be sure that the interrupt doesn't
	// fire when we've copied just a couple of bytes of the value.
	// Interrupts are re-enabled if they were enabled at the start.
	uint8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
    234a:	8f b7       	in	r24, 0x3f	; 63
    234c:	28 2f       	mov	r18, r24
    234e:	20 78       	andi	r18, 0x80	; 128
	cli();
    2350:	f8 94       	cli
	uint32_t result = clock_ticks_ms;
    2352:	60 91 95 03 	lds	r22, 0x0395	; 0x800395 <clock_ticks_ms>
    2356:	70 91 96 03 	lds	r23, 0x0396	; 0x800396 <clock_ticks_ms+0x1>
    235a:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <clock_ticks_ms+0x2>
    235e:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <clock_ticks_ms+0x3>
	if (interrupts_were_enabled)
    2362:	22 23       	and	r18, r18
    2364:	09 f0       	breq	.+2      	; 0x2368 <get_current_time+0x1e>
	{
		sei();
    2366:	78 94       	sei
	}
	return result;
}
    2368:	08 95       	ret

0000236a <__vector_16>:

// Interrupt handler for clock tick.
ISR(TIMER0_COMPA_vect)
{
    236a:	1f 92       	push	r1
    236c:	0f 92       	push	r0
    236e:	0f b6       	in	r0, 0x3f	; 63
    2370:	0f 92       	push	r0
    2372:	11 24       	eor	r1, r1
    2374:	8f 93       	push	r24
    2376:	9f 93       	push	r25
    2378:	af 93       	push	r26
    237a:	bf 93       	push	r27
	// Increment our clock tick count.
	clock_ticks_ms++;
    237c:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <clock_ticks_ms>
    2380:	90 91 96 03 	lds	r25, 0x0396	; 0x800396 <clock_ticks_ms+0x1>
    2384:	a0 91 97 03 	lds	r26, 0x0397	; 0x800397 <clock_ticks_ms+0x2>
    2388:	b0 91 98 03 	lds	r27, 0x0398	; 0x800398 <clock_ticks_ms+0x3>
    238c:	01 96       	adiw	r24, 0x01	; 1
    238e:	a1 1d       	adc	r26, r1
    2390:	b1 1d       	adc	r27, r1
    2392:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <clock_ticks_ms>
    2396:	90 93 96 03 	sts	0x0396, r25	; 0x800396 <clock_ticks_ms+0x1>
    239a:	a0 93 97 03 	sts	0x0397, r26	; 0x800397 <clock_ticks_ms+0x2>
    239e:	b0 93 98 03 	sts	0x0398, r27	; 0x800398 <clock_ticks_ms+0x3>
}
    23a2:	bf 91       	pop	r27
    23a4:	af 91       	pop	r26
    23a6:	9f 91       	pop	r25
    23a8:	8f 91       	pop	r24
    23aa:	0f 90       	pop	r0
    23ac:	0f be       	out	0x3f, r0	; 63
    23ae:	0f 90       	pop	r0
    23b0:	1f 90       	pop	r1
    23b2:	18 95       	reti

000023b4 <init_timer1>:
#include <avr/interrupt.h>

void init_timer1(void)
{
	// Setup timer 1.
	TCNT1 = 0;
    23b4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    23b8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    23bc:	08 95       	ret

000023be <init_timer2>:
#include <avr/interrupt.h>

void init_timer2(void)
{
	// Setup timer 2.
	TCNT2 = 0;
    23be:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    23c2:	08 95       	ret

000023c4 <__divmodhi4>:
    23c4:	97 fb       	bst	r25, 7
    23c6:	07 2e       	mov	r0, r23
    23c8:	16 f4       	brtc	.+4      	; 0x23ce <__divmodhi4+0xa>
    23ca:	00 94       	com	r0
    23cc:	07 d0       	rcall	.+14     	; 0x23dc <__divmodhi4_neg1>
    23ce:	77 fd       	sbrc	r23, 7
    23d0:	09 d0       	rcall	.+18     	; 0x23e4 <__divmodhi4_neg2>
    23d2:	0e 94 70 12 	call	0x24e0	; 0x24e0 <__udivmodhi4>
    23d6:	07 fc       	sbrc	r0, 7
    23d8:	05 d0       	rcall	.+10     	; 0x23e4 <__divmodhi4_neg2>
    23da:	3e f4       	brtc	.+14     	; 0x23ea <__divmodhi4_exit>

000023dc <__divmodhi4_neg1>:
    23dc:	90 95       	com	r25
    23de:	81 95       	neg	r24
    23e0:	9f 4f       	sbci	r25, 0xFF	; 255
    23e2:	08 95       	ret

000023e4 <__divmodhi4_neg2>:
    23e4:	70 95       	com	r23
    23e6:	61 95       	neg	r22
    23e8:	7f 4f       	sbci	r23, 0xFF	; 255

000023ea <__divmodhi4_exit>:
    23ea:	08 95       	ret

000023ec <__udivmodsi4>:
    23ec:	a1 e2       	ldi	r26, 0x21	; 33
    23ee:	1a 2e       	mov	r1, r26
    23f0:	aa 1b       	sub	r26, r26
    23f2:	bb 1b       	sub	r27, r27
    23f4:	fd 01       	movw	r30, r26
    23f6:	0d c0       	rjmp	.+26     	; 0x2412 <__udivmodsi4_ep>

000023f8 <__udivmodsi4_loop>:
    23f8:	aa 1f       	adc	r26, r26
    23fa:	bb 1f       	adc	r27, r27
    23fc:	ee 1f       	adc	r30, r30
    23fe:	ff 1f       	adc	r31, r31
    2400:	a2 17       	cp	r26, r18
    2402:	b3 07       	cpc	r27, r19
    2404:	e4 07       	cpc	r30, r20
    2406:	f5 07       	cpc	r31, r21
    2408:	20 f0       	brcs	.+8      	; 0x2412 <__udivmodsi4_ep>
    240a:	a2 1b       	sub	r26, r18
    240c:	b3 0b       	sbc	r27, r19
    240e:	e4 0b       	sbc	r30, r20
    2410:	f5 0b       	sbc	r31, r21

00002412 <__udivmodsi4_ep>:
    2412:	66 1f       	adc	r22, r22
    2414:	77 1f       	adc	r23, r23
    2416:	88 1f       	adc	r24, r24
    2418:	99 1f       	adc	r25, r25
    241a:	1a 94       	dec	r1
    241c:	69 f7       	brne	.-38     	; 0x23f8 <__udivmodsi4_loop>
    241e:	60 95       	com	r22
    2420:	70 95       	com	r23
    2422:	80 95       	com	r24
    2424:	90 95       	com	r25
    2426:	9b 01       	movw	r18, r22
    2428:	ac 01       	movw	r20, r24
    242a:	bd 01       	movw	r22, r26
    242c:	cf 01       	movw	r24, r30
    242e:	08 95       	ret

00002430 <__divmodsi4>:
    2430:	05 2e       	mov	r0, r21
    2432:	97 fb       	bst	r25, 7
    2434:	1e f4       	brtc	.+6      	; 0x243c <__divmodsi4+0xc>
    2436:	00 94       	com	r0
    2438:	0e 94 2f 12 	call	0x245e	; 0x245e <__negsi2>
    243c:	57 fd       	sbrc	r21, 7
    243e:	07 d0       	rcall	.+14     	; 0x244e <__divmodsi4_neg2>
    2440:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__udivmodsi4>
    2444:	07 fc       	sbrc	r0, 7
    2446:	03 d0       	rcall	.+6      	; 0x244e <__divmodsi4_neg2>
    2448:	4e f4       	brtc	.+18     	; 0x245c <__divmodsi4_exit>
    244a:	0c 94 2f 12 	jmp	0x245e	; 0x245e <__negsi2>

0000244e <__divmodsi4_neg2>:
    244e:	50 95       	com	r21
    2450:	40 95       	com	r20
    2452:	30 95       	com	r19
    2454:	21 95       	neg	r18
    2456:	3f 4f       	sbci	r19, 0xFF	; 255
    2458:	4f 4f       	sbci	r20, 0xFF	; 255
    245a:	5f 4f       	sbci	r21, 0xFF	; 255

0000245c <__divmodsi4_exit>:
    245c:	08 95       	ret

0000245e <__negsi2>:
    245e:	90 95       	com	r25
    2460:	80 95       	com	r24
    2462:	70 95       	com	r23
    2464:	61 95       	neg	r22
    2466:	7f 4f       	sbci	r23, 0xFF	; 255
    2468:	8f 4f       	sbci	r24, 0xFF	; 255
    246a:	9f 4f       	sbci	r25, 0xFF	; 255
    246c:	08 95       	ret

0000246e <__umulhisi3>:
    246e:	a2 9f       	mul	r26, r18
    2470:	b0 01       	movw	r22, r0
    2472:	b3 9f       	mul	r27, r19
    2474:	c0 01       	movw	r24, r0
    2476:	a3 9f       	mul	r26, r19
    2478:	70 0d       	add	r23, r0
    247a:	81 1d       	adc	r24, r1
    247c:	11 24       	eor	r1, r1
    247e:	91 1d       	adc	r25, r1
    2480:	b2 9f       	mul	r27, r18
    2482:	70 0d       	add	r23, r0
    2484:	81 1d       	adc	r24, r1
    2486:	11 24       	eor	r1, r1
    2488:	91 1d       	adc	r25, r1
    248a:	08 95       	ret

0000248c <__ashrdi3>:
    248c:	97 fb       	bst	r25, 7
    248e:	10 f8       	bld	r1, 0

00002490 <__lshrdi3>:
    2490:	16 94       	lsr	r1
    2492:	00 08       	sbc	r0, r0
    2494:	0f 93       	push	r16
    2496:	08 30       	cpi	r16, 0x08	; 8
    2498:	98 f0       	brcs	.+38     	; 0x24c0 <__lshrdi3+0x30>
    249a:	08 50       	subi	r16, 0x08	; 8
    249c:	23 2f       	mov	r18, r19
    249e:	34 2f       	mov	r19, r20
    24a0:	45 2f       	mov	r20, r21
    24a2:	56 2f       	mov	r21, r22
    24a4:	67 2f       	mov	r22, r23
    24a6:	78 2f       	mov	r23, r24
    24a8:	89 2f       	mov	r24, r25
    24aa:	90 2d       	mov	r25, r0
    24ac:	f4 cf       	rjmp	.-24     	; 0x2496 <__lshrdi3+0x6>
    24ae:	05 94       	asr	r0
    24b0:	97 95       	ror	r25
    24b2:	87 95       	ror	r24
    24b4:	77 95       	ror	r23
    24b6:	67 95       	ror	r22
    24b8:	57 95       	ror	r21
    24ba:	47 95       	ror	r20
    24bc:	37 95       	ror	r19
    24be:	27 95       	ror	r18
    24c0:	0a 95       	dec	r16
    24c2:	aa f7       	brpl	.-22     	; 0x24ae <__lshrdi3+0x1e>
    24c4:	0f 91       	pop	r16
    24c6:	08 95       	ret

000024c8 <__cmpdi2_s8>:
    24c8:	00 24       	eor	r0, r0
    24ca:	a7 fd       	sbrc	r26, 7
    24cc:	00 94       	com	r0
    24ce:	2a 17       	cp	r18, r26
    24d0:	30 05       	cpc	r19, r0
    24d2:	40 05       	cpc	r20, r0
    24d4:	50 05       	cpc	r21, r0
    24d6:	60 05       	cpc	r22, r0
    24d8:	70 05       	cpc	r23, r0
    24da:	80 05       	cpc	r24, r0
    24dc:	90 05       	cpc	r25, r0
    24de:	08 95       	ret

000024e0 <__udivmodhi4>:
    24e0:	aa 1b       	sub	r26, r26
    24e2:	bb 1b       	sub	r27, r27
    24e4:	51 e1       	ldi	r21, 0x11	; 17
    24e6:	07 c0       	rjmp	.+14     	; 0x24f6 <__udivmodhi4_ep>

000024e8 <__udivmodhi4_loop>:
    24e8:	aa 1f       	adc	r26, r26
    24ea:	bb 1f       	adc	r27, r27
    24ec:	a6 17       	cp	r26, r22
    24ee:	b7 07       	cpc	r27, r23
    24f0:	10 f0       	brcs	.+4      	; 0x24f6 <__udivmodhi4_ep>
    24f2:	a6 1b       	sub	r26, r22
    24f4:	b7 0b       	sbc	r27, r23

000024f6 <__udivmodhi4_ep>:
    24f6:	88 1f       	adc	r24, r24
    24f8:	99 1f       	adc	r25, r25
    24fa:	5a 95       	dec	r21
    24fc:	a9 f7       	brne	.-22     	; 0x24e8 <__udivmodhi4_loop>
    24fe:	80 95       	com	r24
    2500:	90 95       	com	r25
    2502:	bc 01       	movw	r22, r24
    2504:	cd 01       	movw	r24, r26
    2506:	08 95       	ret

00002508 <do_rand>:
    2508:	8f 92       	push	r8
    250a:	9f 92       	push	r9
    250c:	af 92       	push	r10
    250e:	bf 92       	push	r11
    2510:	cf 92       	push	r12
    2512:	df 92       	push	r13
    2514:	ef 92       	push	r14
    2516:	ff 92       	push	r15
    2518:	cf 93       	push	r28
    251a:	df 93       	push	r29
    251c:	ec 01       	movw	r28, r24
    251e:	68 81       	ld	r22, Y
    2520:	79 81       	ldd	r23, Y+1	; 0x01
    2522:	8a 81       	ldd	r24, Y+2	; 0x02
    2524:	9b 81       	ldd	r25, Y+3	; 0x03
    2526:	61 15       	cp	r22, r1
    2528:	71 05       	cpc	r23, r1
    252a:	81 05       	cpc	r24, r1
    252c:	91 05       	cpc	r25, r1
    252e:	21 f4       	brne	.+8      	; 0x2538 <do_rand+0x30>
    2530:	64 e2       	ldi	r22, 0x24	; 36
    2532:	79 ed       	ldi	r23, 0xD9	; 217
    2534:	8b e5       	ldi	r24, 0x5B	; 91
    2536:	97 e0       	ldi	r25, 0x07	; 7
    2538:	2d e1       	ldi	r18, 0x1D	; 29
    253a:	33 ef       	ldi	r19, 0xF3	; 243
    253c:	41 e0       	ldi	r20, 0x01	; 1
    253e:	50 e0       	ldi	r21, 0x00	; 0
    2540:	0e 94 18 12 	call	0x2430	; 0x2430 <__divmodsi4>
    2544:	49 01       	movw	r8, r18
    2546:	5a 01       	movw	r10, r20
    2548:	9b 01       	movw	r18, r22
    254a:	ac 01       	movw	r20, r24
    254c:	a7 ea       	ldi	r26, 0xA7	; 167
    254e:	b1 e4       	ldi	r27, 0x41	; 65
    2550:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <__muluhisi3>
    2554:	6b 01       	movw	r12, r22
    2556:	7c 01       	movw	r14, r24
    2558:	ac ee       	ldi	r26, 0xEC	; 236
    255a:	b4 ef       	ldi	r27, 0xF4	; 244
    255c:	a5 01       	movw	r20, r10
    255e:	94 01       	movw	r18, r8
    2560:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__mulohisi3>
    2564:	dc 01       	movw	r26, r24
    2566:	cb 01       	movw	r24, r22
    2568:	8c 0d       	add	r24, r12
    256a:	9d 1d       	adc	r25, r13
    256c:	ae 1d       	adc	r26, r14
    256e:	bf 1d       	adc	r27, r15
    2570:	b7 ff       	sbrs	r27, 7
    2572:	03 c0       	rjmp	.+6      	; 0x257a <do_rand+0x72>
    2574:	01 97       	sbiw	r24, 0x01	; 1
    2576:	a1 09       	sbc	r26, r1
    2578:	b0 48       	sbci	r27, 0x80	; 128
    257a:	88 83       	st	Y, r24
    257c:	99 83       	std	Y+1, r25	; 0x01
    257e:	aa 83       	std	Y+2, r26	; 0x02
    2580:	bb 83       	std	Y+3, r27	; 0x03
    2582:	9f 77       	andi	r25, 0x7F	; 127
    2584:	df 91       	pop	r29
    2586:	cf 91       	pop	r28
    2588:	ff 90       	pop	r15
    258a:	ef 90       	pop	r14
    258c:	df 90       	pop	r13
    258e:	cf 90       	pop	r12
    2590:	bf 90       	pop	r11
    2592:	af 90       	pop	r10
    2594:	9f 90       	pop	r9
    2596:	8f 90       	pop	r8
    2598:	08 95       	ret

0000259a <rand_r>:
    259a:	0e 94 84 12 	call	0x2508	; 0x2508 <do_rand>
    259e:	08 95       	ret

000025a0 <rand>:
    25a0:	80 e0       	ldi	r24, 0x00	; 0
    25a2:	91 e0       	ldi	r25, 0x01	; 1
    25a4:	0e 94 84 12 	call	0x2508	; 0x2508 <do_rand>
    25a8:	08 95       	ret

000025aa <srand>:
    25aa:	a0 e0       	ldi	r26, 0x00	; 0
    25ac:	b0 e0       	ldi	r27, 0x00	; 0
    25ae:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    25b2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    25b6:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    25ba:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    25be:	08 95       	ret

000025c0 <tolower>:
    25c0:	91 11       	cpse	r25, r1
    25c2:	08 95       	ret
    25c4:	81 54       	subi	r24, 0x41	; 65
    25c6:	8a 51       	subi	r24, 0x1A	; 26
    25c8:	08 f4       	brcc	.+2      	; 0x25cc <tolower+0xc>
    25ca:	80 5e       	subi	r24, 0xE0	; 224
    25cc:	85 5a       	subi	r24, 0xA5	; 165
    25ce:	08 95       	ret

000025d0 <toupper>:
    25d0:	91 11       	cpse	r25, r1
    25d2:	08 95       	ret
    25d4:	81 56       	subi	r24, 0x61	; 97
    25d6:	8a 51       	subi	r24, 0x1A	; 26
    25d8:	08 f4       	brcc	.+2      	; 0x25dc <toupper+0xc>
    25da:	80 52       	subi	r24, 0x20	; 32
    25dc:	85 58       	subi	r24, 0x85	; 133
    25de:	08 95       	ret

000025e0 <memcpy_P>:
    25e0:	fb 01       	movw	r30, r22
    25e2:	dc 01       	movw	r26, r24
    25e4:	02 c0       	rjmp	.+4      	; 0x25ea <memcpy_P+0xa>
    25e6:	05 90       	lpm	r0, Z+
    25e8:	0d 92       	st	X+, r0
    25ea:	41 50       	subi	r20, 0x01	; 1
    25ec:	50 40       	sbci	r21, 0x00	; 0
    25ee:	d8 f7       	brcc	.-10     	; 0x25e6 <memcpy_P+0x6>
    25f0:	08 95       	ret

000025f2 <strcmp>:
    25f2:	fb 01       	movw	r30, r22
    25f4:	dc 01       	movw	r26, r24
    25f6:	8d 91       	ld	r24, X+
    25f8:	01 90       	ld	r0, Z+
    25fa:	80 19       	sub	r24, r0
    25fc:	01 10       	cpse	r0, r1
    25fe:	d9 f3       	breq	.-10     	; 0x25f6 <strcmp+0x4>
    2600:	99 0b       	sbc	r25, r25
    2602:	08 95       	ret

00002604 <fgetc>:
    2604:	cf 93       	push	r28
    2606:	df 93       	push	r29
    2608:	ec 01       	movw	r28, r24
    260a:	2b 81       	ldd	r18, Y+3	; 0x03
    260c:	20 ff       	sbrs	r18, 0
    260e:	33 c0       	rjmp	.+102    	; 0x2676 <fgetc+0x72>
    2610:	26 ff       	sbrs	r18, 6
    2612:	0a c0       	rjmp	.+20     	; 0x2628 <fgetc+0x24>
    2614:	2f 7b       	andi	r18, 0xBF	; 191
    2616:	2b 83       	std	Y+3, r18	; 0x03
    2618:	8e 81       	ldd	r24, Y+6	; 0x06
    261a:	9f 81       	ldd	r25, Y+7	; 0x07
    261c:	01 96       	adiw	r24, 0x01	; 1
    261e:	9f 83       	std	Y+7, r25	; 0x07
    2620:	8e 83       	std	Y+6, r24	; 0x06
    2622:	8a 81       	ldd	r24, Y+2	; 0x02
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	29 c0       	rjmp	.+82     	; 0x267a <fgetc+0x76>
    2628:	22 ff       	sbrs	r18, 2
    262a:	0f c0       	rjmp	.+30     	; 0x264a <fgetc+0x46>
    262c:	e8 81       	ld	r30, Y
    262e:	f9 81       	ldd	r31, Y+1	; 0x01
    2630:	80 81       	ld	r24, Z
    2632:	08 2e       	mov	r0, r24
    2634:	00 0c       	add	r0, r0
    2636:	99 0b       	sbc	r25, r25
    2638:	00 97       	sbiw	r24, 0x00	; 0
    263a:	19 f4       	brne	.+6      	; 0x2642 <fgetc+0x3e>
    263c:	20 62       	ori	r18, 0x20	; 32
    263e:	2b 83       	std	Y+3, r18	; 0x03
    2640:	1a c0       	rjmp	.+52     	; 0x2676 <fgetc+0x72>
    2642:	31 96       	adiw	r30, 0x01	; 1
    2644:	f9 83       	std	Y+1, r31	; 0x01
    2646:	e8 83       	st	Y, r30
    2648:	0e c0       	rjmp	.+28     	; 0x2666 <fgetc+0x62>
    264a:	ea 85       	ldd	r30, Y+10	; 0x0a
    264c:	fb 85       	ldd	r31, Y+11	; 0x0b
    264e:	09 95       	icall
    2650:	97 ff       	sbrs	r25, 7
    2652:	09 c0       	rjmp	.+18     	; 0x2666 <fgetc+0x62>
    2654:	2b 81       	ldd	r18, Y+3	; 0x03
    2656:	01 96       	adiw	r24, 0x01	; 1
    2658:	11 f0       	breq	.+4      	; 0x265e <fgetc+0x5a>
    265a:	80 e2       	ldi	r24, 0x20	; 32
    265c:	01 c0       	rjmp	.+2      	; 0x2660 <fgetc+0x5c>
    265e:	80 e1       	ldi	r24, 0x10	; 16
    2660:	82 2b       	or	r24, r18
    2662:	8b 83       	std	Y+3, r24	; 0x03
    2664:	08 c0       	rjmp	.+16     	; 0x2676 <fgetc+0x72>
    2666:	2e 81       	ldd	r18, Y+6	; 0x06
    2668:	3f 81       	ldd	r19, Y+7	; 0x07
    266a:	2f 5f       	subi	r18, 0xFF	; 255
    266c:	3f 4f       	sbci	r19, 0xFF	; 255
    266e:	3f 83       	std	Y+7, r19	; 0x07
    2670:	2e 83       	std	Y+6, r18	; 0x06
    2672:	99 27       	eor	r25, r25
    2674:	02 c0       	rjmp	.+4      	; 0x267a <fgetc+0x76>
    2676:	8f ef       	ldi	r24, 0xFF	; 255
    2678:	9f ef       	ldi	r25, 0xFF	; 255
    267a:	df 91       	pop	r29
    267c:	cf 91       	pop	r28
    267e:	08 95       	ret

00002680 <fputc>:
    2680:	0f 93       	push	r16
    2682:	1f 93       	push	r17
    2684:	cf 93       	push	r28
    2686:	df 93       	push	r29
    2688:	fb 01       	movw	r30, r22
    268a:	23 81       	ldd	r18, Z+3	; 0x03
    268c:	21 fd       	sbrc	r18, 1
    268e:	03 c0       	rjmp	.+6      	; 0x2696 <fputc+0x16>
    2690:	8f ef       	ldi	r24, 0xFF	; 255
    2692:	9f ef       	ldi	r25, 0xFF	; 255
    2694:	2c c0       	rjmp	.+88     	; 0x26ee <fputc+0x6e>
    2696:	22 ff       	sbrs	r18, 2
    2698:	16 c0       	rjmp	.+44     	; 0x26c6 <fputc+0x46>
    269a:	46 81       	ldd	r20, Z+6	; 0x06
    269c:	57 81       	ldd	r21, Z+7	; 0x07
    269e:	24 81       	ldd	r18, Z+4	; 0x04
    26a0:	35 81       	ldd	r19, Z+5	; 0x05
    26a2:	42 17       	cp	r20, r18
    26a4:	53 07       	cpc	r21, r19
    26a6:	44 f4       	brge	.+16     	; 0x26b8 <fputc+0x38>
    26a8:	a0 81       	ld	r26, Z
    26aa:	b1 81       	ldd	r27, Z+1	; 0x01
    26ac:	9d 01       	movw	r18, r26
    26ae:	2f 5f       	subi	r18, 0xFF	; 255
    26b0:	3f 4f       	sbci	r19, 0xFF	; 255
    26b2:	31 83       	std	Z+1, r19	; 0x01
    26b4:	20 83       	st	Z, r18
    26b6:	8c 93       	st	X, r24
    26b8:	26 81       	ldd	r18, Z+6	; 0x06
    26ba:	37 81       	ldd	r19, Z+7	; 0x07
    26bc:	2f 5f       	subi	r18, 0xFF	; 255
    26be:	3f 4f       	sbci	r19, 0xFF	; 255
    26c0:	37 83       	std	Z+7, r19	; 0x07
    26c2:	26 83       	std	Z+6, r18	; 0x06
    26c4:	14 c0       	rjmp	.+40     	; 0x26ee <fputc+0x6e>
    26c6:	8b 01       	movw	r16, r22
    26c8:	ec 01       	movw	r28, r24
    26ca:	fb 01       	movw	r30, r22
    26cc:	00 84       	ldd	r0, Z+8	; 0x08
    26ce:	f1 85       	ldd	r31, Z+9	; 0x09
    26d0:	e0 2d       	mov	r30, r0
    26d2:	09 95       	icall
    26d4:	89 2b       	or	r24, r25
    26d6:	e1 f6       	brne	.-72     	; 0x2690 <fputc+0x10>
    26d8:	d8 01       	movw	r26, r16
    26da:	16 96       	adiw	r26, 0x06	; 6
    26dc:	8d 91       	ld	r24, X+
    26de:	9c 91       	ld	r25, X
    26e0:	17 97       	sbiw	r26, 0x07	; 7
    26e2:	01 96       	adiw	r24, 0x01	; 1
    26e4:	17 96       	adiw	r26, 0x07	; 7
    26e6:	9c 93       	st	X, r25
    26e8:	8e 93       	st	-X, r24
    26ea:	16 97       	sbiw	r26, 0x06	; 6
    26ec:	ce 01       	movw	r24, r28
    26ee:	df 91       	pop	r29
    26f0:	cf 91       	pop	r28
    26f2:	1f 91       	pop	r17
    26f4:	0f 91       	pop	r16
    26f6:	08 95       	ret

000026f8 <printf>:
    26f8:	a0 e0       	ldi	r26, 0x00	; 0
    26fa:	b0 e0       	ldi	r27, 0x00	; 0
    26fc:	e2 e8       	ldi	r30, 0x82	; 130
    26fe:	f3 e1       	ldi	r31, 0x13	; 19
    2700:	0c 94 59 16 	jmp	0x2cb2	; 0x2cb2 <__prologue_saves__+0x20>
    2704:	ae 01       	movw	r20, r28
    2706:	4b 5f       	subi	r20, 0xFB	; 251
    2708:	5f 4f       	sbci	r21, 0xFF	; 255
    270a:	fa 01       	movw	r30, r20
    270c:	61 91       	ld	r22, Z+
    270e:	71 91       	ld	r23, Z+
    2710:	af 01       	movw	r20, r30
    2712:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <__iob+0x2>
    2716:	90 91 b4 04 	lds	r25, 0x04B4	; 0x8004b4 <__iob+0x3>
    271a:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <vfprintf>
    271e:	e2 e0       	ldi	r30, 0x02	; 2
    2720:	0c 94 75 16 	jmp	0x2cea	; 0x2cea <__epilogue_restores__+0x20>

00002724 <printf_P>:
    2724:	a0 e0       	ldi	r26, 0x00	; 0
    2726:	b0 e0       	ldi	r27, 0x00	; 0
    2728:	e8 e9       	ldi	r30, 0x98	; 152
    272a:	f3 e1       	ldi	r31, 0x13	; 19
    272c:	0c 94 57 16 	jmp	0x2cae	; 0x2cae <__prologue_saves__+0x1c>
    2730:	ae 01       	movw	r20, r28
    2732:	49 5f       	subi	r20, 0xF9	; 249
    2734:	5f 4f       	sbci	r21, 0xFF	; 255
    2736:	da 01       	movw	r26, r20
    2738:	6d 91       	ld	r22, X+
    273a:	7d 91       	ld	r23, X+
    273c:	ad 01       	movw	r20, r26
    273e:	01 eb       	ldi	r16, 0xB1	; 177
    2740:	14 e0       	ldi	r17, 0x04	; 4
    2742:	f8 01       	movw	r30, r16
    2744:	82 81       	ldd	r24, Z+2	; 0x02
    2746:	93 81       	ldd	r25, Z+3	; 0x03
    2748:	dc 01       	movw	r26, r24
    274a:	13 96       	adiw	r26, 0x03	; 3
    274c:	2c 91       	ld	r18, X
    274e:	13 97       	sbiw	r26, 0x03	; 3
    2750:	28 60       	ori	r18, 0x08	; 8
    2752:	13 96       	adiw	r26, 0x03	; 3
    2754:	2c 93       	st	X, r18
    2756:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <vfprintf>
    275a:	d8 01       	movw	r26, r16
    275c:	12 96       	adiw	r26, 0x02	; 2
    275e:	ed 91       	ld	r30, X+
    2760:	fc 91       	ld	r31, X
    2762:	13 97       	sbiw	r26, 0x03	; 3
    2764:	23 81       	ldd	r18, Z+3	; 0x03
    2766:	27 7f       	andi	r18, 0xF7	; 247
    2768:	23 83       	std	Z+3, r18	; 0x03
    276a:	e4 e0       	ldi	r30, 0x04	; 4
    276c:	0c 94 73 16 	jmp	0x2ce6	; 0x2ce6 <__epilogue_restores__+0x1c>

00002770 <putchar>:
    2770:	60 91 b3 04 	lds	r22, 0x04B3	; 0x8004b3 <__iob+0x2>
    2774:	70 91 b4 04 	lds	r23, 0x04B4	; 0x8004b4 <__iob+0x3>
    2778:	0e 94 40 13 	call	0x2680	; 0x2680 <fputc>
    277c:	08 95       	ret

0000277e <sprintf>:
    277e:	ae e0       	ldi	r26, 0x0E	; 14
    2780:	b0 e0       	ldi	r27, 0x00	; 0
    2782:	e5 ec       	ldi	r30, 0xC5	; 197
    2784:	f3 e1       	ldi	r31, 0x13	; 19
    2786:	0c 94 57 16 	jmp	0x2cae	; 0x2cae <__prologue_saves__+0x1c>
    278a:	0d 89       	ldd	r16, Y+21	; 0x15
    278c:	1e 89       	ldd	r17, Y+22	; 0x16
    278e:	86 e0       	ldi	r24, 0x06	; 6
    2790:	8c 83       	std	Y+4, r24	; 0x04
    2792:	1a 83       	std	Y+2, r17	; 0x02
    2794:	09 83       	std	Y+1, r16	; 0x01
    2796:	8f ef       	ldi	r24, 0xFF	; 255
    2798:	9f e7       	ldi	r25, 0x7F	; 127
    279a:	9e 83       	std	Y+6, r25	; 0x06
    279c:	8d 83       	std	Y+5, r24	; 0x05
    279e:	ae 01       	movw	r20, r28
    27a0:	47 5e       	subi	r20, 0xE7	; 231
    27a2:	5f 4f       	sbci	r21, 0xFF	; 255
    27a4:	6f 89       	ldd	r22, Y+23	; 0x17
    27a6:	78 8d       	ldd	r23, Y+24	; 0x18
    27a8:	ce 01       	movw	r24, r28
    27aa:	01 96       	adiw	r24, 0x01	; 1
    27ac:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <vfprintf>
    27b0:	ef 81       	ldd	r30, Y+7	; 0x07
    27b2:	f8 85       	ldd	r31, Y+8	; 0x08
    27b4:	e0 0f       	add	r30, r16
    27b6:	f1 1f       	adc	r31, r17
    27b8:	10 82       	st	Z, r1
    27ba:	2e 96       	adiw	r28, 0x0e	; 14
    27bc:	e4 e0       	ldi	r30, 0x04	; 4
    27be:	0c 94 73 16 	jmp	0x2ce6	; 0x2ce6 <__epilogue_restores__+0x1c>

000027c2 <vfprintf>:
    27c2:	ab e0       	ldi	r26, 0x0B	; 11
    27c4:	b0 e0       	ldi	r27, 0x00	; 0
    27c6:	e7 ee       	ldi	r30, 0xE7	; 231
    27c8:	f3 e1       	ldi	r31, 0x13	; 19
    27ca:	0c 94 49 16 	jmp	0x2c92	; 0x2c92 <__prologue_saves__>
    27ce:	6c 01       	movw	r12, r24
    27d0:	7b 01       	movw	r14, r22
    27d2:	8a 01       	movw	r16, r20
    27d4:	fc 01       	movw	r30, r24
    27d6:	17 82       	std	Z+7, r1	; 0x07
    27d8:	16 82       	std	Z+6, r1	; 0x06
    27da:	83 81       	ldd	r24, Z+3	; 0x03
    27dc:	81 ff       	sbrs	r24, 1
    27de:	cc c1       	rjmp	.+920    	; 0x2b78 <vfprintf+0x3b6>
    27e0:	ce 01       	movw	r24, r28
    27e2:	01 96       	adiw	r24, 0x01	; 1
    27e4:	3c 01       	movw	r6, r24
    27e6:	f6 01       	movw	r30, r12
    27e8:	93 81       	ldd	r25, Z+3	; 0x03
    27ea:	f7 01       	movw	r30, r14
    27ec:	93 fd       	sbrc	r25, 3
    27ee:	85 91       	lpm	r24, Z+
    27f0:	93 ff       	sbrs	r25, 3
    27f2:	81 91       	ld	r24, Z+
    27f4:	7f 01       	movw	r14, r30
    27f6:	88 23       	and	r24, r24
    27f8:	09 f4       	brne	.+2      	; 0x27fc <vfprintf+0x3a>
    27fa:	ba c1       	rjmp	.+884    	; 0x2b70 <vfprintf+0x3ae>
    27fc:	85 32       	cpi	r24, 0x25	; 37
    27fe:	39 f4       	brne	.+14     	; 0x280e <vfprintf+0x4c>
    2800:	93 fd       	sbrc	r25, 3
    2802:	85 91       	lpm	r24, Z+
    2804:	93 ff       	sbrs	r25, 3
    2806:	81 91       	ld	r24, Z+
    2808:	7f 01       	movw	r14, r30
    280a:	85 32       	cpi	r24, 0x25	; 37
    280c:	29 f4       	brne	.+10     	; 0x2818 <vfprintf+0x56>
    280e:	b6 01       	movw	r22, r12
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	0e 94 40 13 	call	0x2680	; 0x2680 <fputc>
    2816:	e7 cf       	rjmp	.-50     	; 0x27e6 <vfprintf+0x24>
    2818:	91 2c       	mov	r9, r1
    281a:	21 2c       	mov	r2, r1
    281c:	31 2c       	mov	r3, r1
    281e:	ff e1       	ldi	r31, 0x1F	; 31
    2820:	f3 15       	cp	r31, r3
    2822:	d8 f0       	brcs	.+54     	; 0x285a <vfprintf+0x98>
    2824:	8b 32       	cpi	r24, 0x2B	; 43
    2826:	79 f0       	breq	.+30     	; 0x2846 <vfprintf+0x84>
    2828:	38 f4       	brcc	.+14     	; 0x2838 <vfprintf+0x76>
    282a:	80 32       	cpi	r24, 0x20	; 32
    282c:	79 f0       	breq	.+30     	; 0x284c <vfprintf+0x8a>
    282e:	83 32       	cpi	r24, 0x23	; 35
    2830:	a1 f4       	brne	.+40     	; 0x285a <vfprintf+0x98>
    2832:	23 2d       	mov	r18, r3
    2834:	20 61       	ori	r18, 0x10	; 16
    2836:	1d c0       	rjmp	.+58     	; 0x2872 <vfprintf+0xb0>
    2838:	8d 32       	cpi	r24, 0x2D	; 45
    283a:	61 f0       	breq	.+24     	; 0x2854 <vfprintf+0x92>
    283c:	80 33       	cpi	r24, 0x30	; 48
    283e:	69 f4       	brne	.+26     	; 0x285a <vfprintf+0x98>
    2840:	23 2d       	mov	r18, r3
    2842:	21 60       	ori	r18, 0x01	; 1
    2844:	16 c0       	rjmp	.+44     	; 0x2872 <vfprintf+0xb0>
    2846:	83 2d       	mov	r24, r3
    2848:	82 60       	ori	r24, 0x02	; 2
    284a:	38 2e       	mov	r3, r24
    284c:	e3 2d       	mov	r30, r3
    284e:	e4 60       	ori	r30, 0x04	; 4
    2850:	3e 2e       	mov	r3, r30
    2852:	2a c0       	rjmp	.+84     	; 0x28a8 <vfprintf+0xe6>
    2854:	f3 2d       	mov	r31, r3
    2856:	f8 60       	ori	r31, 0x08	; 8
    2858:	1d c0       	rjmp	.+58     	; 0x2894 <vfprintf+0xd2>
    285a:	37 fc       	sbrc	r3, 7
    285c:	2d c0       	rjmp	.+90     	; 0x28b8 <vfprintf+0xf6>
    285e:	20 ed       	ldi	r18, 0xD0	; 208
    2860:	28 0f       	add	r18, r24
    2862:	2a 30       	cpi	r18, 0x0A	; 10
    2864:	40 f0       	brcs	.+16     	; 0x2876 <vfprintf+0xb4>
    2866:	8e 32       	cpi	r24, 0x2E	; 46
    2868:	b9 f4       	brne	.+46     	; 0x2898 <vfprintf+0xd6>
    286a:	36 fc       	sbrc	r3, 6
    286c:	81 c1       	rjmp	.+770    	; 0x2b70 <vfprintf+0x3ae>
    286e:	23 2d       	mov	r18, r3
    2870:	20 64       	ori	r18, 0x40	; 64
    2872:	32 2e       	mov	r3, r18
    2874:	19 c0       	rjmp	.+50     	; 0x28a8 <vfprintf+0xe6>
    2876:	36 fe       	sbrs	r3, 6
    2878:	06 c0       	rjmp	.+12     	; 0x2886 <vfprintf+0xc4>
    287a:	8a e0       	ldi	r24, 0x0A	; 10
    287c:	98 9e       	mul	r9, r24
    287e:	20 0d       	add	r18, r0
    2880:	11 24       	eor	r1, r1
    2882:	92 2e       	mov	r9, r18
    2884:	11 c0       	rjmp	.+34     	; 0x28a8 <vfprintf+0xe6>
    2886:	ea e0       	ldi	r30, 0x0A	; 10
    2888:	2e 9e       	mul	r2, r30
    288a:	20 0d       	add	r18, r0
    288c:	11 24       	eor	r1, r1
    288e:	22 2e       	mov	r2, r18
    2890:	f3 2d       	mov	r31, r3
    2892:	f0 62       	ori	r31, 0x20	; 32
    2894:	3f 2e       	mov	r3, r31
    2896:	08 c0       	rjmp	.+16     	; 0x28a8 <vfprintf+0xe6>
    2898:	8c 36       	cpi	r24, 0x6C	; 108
    289a:	21 f4       	brne	.+8      	; 0x28a4 <vfprintf+0xe2>
    289c:	83 2d       	mov	r24, r3
    289e:	80 68       	ori	r24, 0x80	; 128
    28a0:	38 2e       	mov	r3, r24
    28a2:	02 c0       	rjmp	.+4      	; 0x28a8 <vfprintf+0xe6>
    28a4:	88 36       	cpi	r24, 0x68	; 104
    28a6:	41 f4       	brne	.+16     	; 0x28b8 <vfprintf+0xf6>
    28a8:	f7 01       	movw	r30, r14
    28aa:	93 fd       	sbrc	r25, 3
    28ac:	85 91       	lpm	r24, Z+
    28ae:	93 ff       	sbrs	r25, 3
    28b0:	81 91       	ld	r24, Z+
    28b2:	7f 01       	movw	r14, r30
    28b4:	81 11       	cpse	r24, r1
    28b6:	b3 cf       	rjmp	.-154    	; 0x281e <vfprintf+0x5c>
    28b8:	98 2f       	mov	r25, r24
    28ba:	9f 7d       	andi	r25, 0xDF	; 223
    28bc:	95 54       	subi	r25, 0x45	; 69
    28be:	93 30       	cpi	r25, 0x03	; 3
    28c0:	28 f4       	brcc	.+10     	; 0x28cc <vfprintf+0x10a>
    28c2:	0c 5f       	subi	r16, 0xFC	; 252
    28c4:	1f 4f       	sbci	r17, 0xFF	; 255
    28c6:	9f e3       	ldi	r25, 0x3F	; 63
    28c8:	99 83       	std	Y+1, r25	; 0x01
    28ca:	0d c0       	rjmp	.+26     	; 0x28e6 <vfprintf+0x124>
    28cc:	83 36       	cpi	r24, 0x63	; 99
    28ce:	31 f0       	breq	.+12     	; 0x28dc <vfprintf+0x11a>
    28d0:	83 37       	cpi	r24, 0x73	; 115
    28d2:	71 f0       	breq	.+28     	; 0x28f0 <vfprintf+0x12e>
    28d4:	83 35       	cpi	r24, 0x53	; 83
    28d6:	09 f0       	breq	.+2      	; 0x28da <vfprintf+0x118>
    28d8:	59 c0       	rjmp	.+178    	; 0x298c <vfprintf+0x1ca>
    28da:	21 c0       	rjmp	.+66     	; 0x291e <vfprintf+0x15c>
    28dc:	f8 01       	movw	r30, r16
    28de:	80 81       	ld	r24, Z
    28e0:	89 83       	std	Y+1, r24	; 0x01
    28e2:	0e 5f       	subi	r16, 0xFE	; 254
    28e4:	1f 4f       	sbci	r17, 0xFF	; 255
    28e6:	88 24       	eor	r8, r8
    28e8:	83 94       	inc	r8
    28ea:	91 2c       	mov	r9, r1
    28ec:	53 01       	movw	r10, r6
    28ee:	13 c0       	rjmp	.+38     	; 0x2916 <vfprintf+0x154>
    28f0:	28 01       	movw	r4, r16
    28f2:	f2 e0       	ldi	r31, 0x02	; 2
    28f4:	4f 0e       	add	r4, r31
    28f6:	51 1c       	adc	r5, r1
    28f8:	f8 01       	movw	r30, r16
    28fa:	a0 80       	ld	r10, Z
    28fc:	b1 80       	ldd	r11, Z+1	; 0x01
    28fe:	36 fe       	sbrs	r3, 6
    2900:	03 c0       	rjmp	.+6      	; 0x2908 <vfprintf+0x146>
    2902:	69 2d       	mov	r22, r9
    2904:	70 e0       	ldi	r23, 0x00	; 0
    2906:	02 c0       	rjmp	.+4      	; 0x290c <vfprintf+0x14a>
    2908:	6f ef       	ldi	r22, 0xFF	; 255
    290a:	7f ef       	ldi	r23, 0xFF	; 255
    290c:	c5 01       	movw	r24, r10
    290e:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <strnlen>
    2912:	4c 01       	movw	r8, r24
    2914:	82 01       	movw	r16, r4
    2916:	f3 2d       	mov	r31, r3
    2918:	ff 77       	andi	r31, 0x7F	; 127
    291a:	3f 2e       	mov	r3, r31
    291c:	16 c0       	rjmp	.+44     	; 0x294a <vfprintf+0x188>
    291e:	28 01       	movw	r4, r16
    2920:	22 e0       	ldi	r18, 0x02	; 2
    2922:	42 0e       	add	r4, r18
    2924:	51 1c       	adc	r5, r1
    2926:	f8 01       	movw	r30, r16
    2928:	a0 80       	ld	r10, Z
    292a:	b1 80       	ldd	r11, Z+1	; 0x01
    292c:	36 fe       	sbrs	r3, 6
    292e:	03 c0       	rjmp	.+6      	; 0x2936 <vfprintf+0x174>
    2930:	69 2d       	mov	r22, r9
    2932:	70 e0       	ldi	r23, 0x00	; 0
    2934:	02 c0       	rjmp	.+4      	; 0x293a <vfprintf+0x178>
    2936:	6f ef       	ldi	r22, 0xFF	; 255
    2938:	7f ef       	ldi	r23, 0xFF	; 255
    293a:	c5 01       	movw	r24, r10
    293c:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <strnlen_P>
    2940:	4c 01       	movw	r8, r24
    2942:	f3 2d       	mov	r31, r3
    2944:	f0 68       	ori	r31, 0x80	; 128
    2946:	3f 2e       	mov	r3, r31
    2948:	82 01       	movw	r16, r4
    294a:	33 fc       	sbrc	r3, 3
    294c:	1b c0       	rjmp	.+54     	; 0x2984 <vfprintf+0x1c2>
    294e:	82 2d       	mov	r24, r2
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	88 16       	cp	r8, r24
    2954:	99 06       	cpc	r9, r25
    2956:	b0 f4       	brcc	.+44     	; 0x2984 <vfprintf+0x1c2>
    2958:	b6 01       	movw	r22, r12
    295a:	80 e2       	ldi	r24, 0x20	; 32
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	0e 94 40 13 	call	0x2680	; 0x2680 <fputc>
    2962:	2a 94       	dec	r2
    2964:	f4 cf       	rjmp	.-24     	; 0x294e <vfprintf+0x18c>
    2966:	f5 01       	movw	r30, r10
    2968:	37 fc       	sbrc	r3, 7
    296a:	85 91       	lpm	r24, Z+
    296c:	37 fe       	sbrs	r3, 7
    296e:	81 91       	ld	r24, Z+
    2970:	5f 01       	movw	r10, r30
    2972:	b6 01       	movw	r22, r12
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	0e 94 40 13 	call	0x2680	; 0x2680 <fputc>
    297a:	21 10       	cpse	r2, r1
    297c:	2a 94       	dec	r2
    297e:	21 e0       	ldi	r18, 0x01	; 1
    2980:	82 1a       	sub	r8, r18
    2982:	91 08       	sbc	r9, r1
    2984:	81 14       	cp	r8, r1
    2986:	91 04       	cpc	r9, r1
    2988:	71 f7       	brne	.-36     	; 0x2966 <vfprintf+0x1a4>
    298a:	e8 c0       	rjmp	.+464    	; 0x2b5c <vfprintf+0x39a>
    298c:	84 36       	cpi	r24, 0x64	; 100
    298e:	11 f0       	breq	.+4      	; 0x2994 <vfprintf+0x1d2>
    2990:	89 36       	cpi	r24, 0x69	; 105
    2992:	41 f5       	brne	.+80     	; 0x29e4 <vfprintf+0x222>
    2994:	f8 01       	movw	r30, r16
    2996:	37 fe       	sbrs	r3, 7
    2998:	07 c0       	rjmp	.+14     	; 0x29a8 <vfprintf+0x1e6>
    299a:	60 81       	ld	r22, Z
    299c:	71 81       	ldd	r23, Z+1	; 0x01
    299e:	82 81       	ldd	r24, Z+2	; 0x02
    29a0:	93 81       	ldd	r25, Z+3	; 0x03
    29a2:	0c 5f       	subi	r16, 0xFC	; 252
    29a4:	1f 4f       	sbci	r17, 0xFF	; 255
    29a6:	08 c0       	rjmp	.+16     	; 0x29b8 <vfprintf+0x1f6>
    29a8:	60 81       	ld	r22, Z
    29aa:	71 81       	ldd	r23, Z+1	; 0x01
    29ac:	07 2e       	mov	r0, r23
    29ae:	00 0c       	add	r0, r0
    29b0:	88 0b       	sbc	r24, r24
    29b2:	99 0b       	sbc	r25, r25
    29b4:	0e 5f       	subi	r16, 0xFE	; 254
    29b6:	1f 4f       	sbci	r17, 0xFF	; 255
    29b8:	f3 2d       	mov	r31, r3
    29ba:	ff 76       	andi	r31, 0x6F	; 111
    29bc:	3f 2e       	mov	r3, r31
    29be:	97 ff       	sbrs	r25, 7
    29c0:	09 c0       	rjmp	.+18     	; 0x29d4 <vfprintf+0x212>
    29c2:	90 95       	com	r25
    29c4:	80 95       	com	r24
    29c6:	70 95       	com	r23
    29c8:	61 95       	neg	r22
    29ca:	7f 4f       	sbci	r23, 0xFF	; 255
    29cc:	8f 4f       	sbci	r24, 0xFF	; 255
    29ce:	9f 4f       	sbci	r25, 0xFF	; 255
    29d0:	f0 68       	ori	r31, 0x80	; 128
    29d2:	3f 2e       	mov	r3, r31
    29d4:	2a e0       	ldi	r18, 0x0A	; 10
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	a3 01       	movw	r20, r6
    29da:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <__ultoa_invert>
    29de:	88 2e       	mov	r8, r24
    29e0:	86 18       	sub	r8, r6
    29e2:	45 c0       	rjmp	.+138    	; 0x2a6e <vfprintf+0x2ac>
    29e4:	85 37       	cpi	r24, 0x75	; 117
    29e6:	31 f4       	brne	.+12     	; 0x29f4 <vfprintf+0x232>
    29e8:	23 2d       	mov	r18, r3
    29ea:	2f 7e       	andi	r18, 0xEF	; 239
    29ec:	b2 2e       	mov	r11, r18
    29ee:	2a e0       	ldi	r18, 0x0A	; 10
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	25 c0       	rjmp	.+74     	; 0x2a3e <vfprintf+0x27c>
    29f4:	93 2d       	mov	r25, r3
    29f6:	99 7f       	andi	r25, 0xF9	; 249
    29f8:	b9 2e       	mov	r11, r25
    29fa:	8f 36       	cpi	r24, 0x6F	; 111
    29fc:	c1 f0       	breq	.+48     	; 0x2a2e <vfprintf+0x26c>
    29fe:	18 f4       	brcc	.+6      	; 0x2a06 <vfprintf+0x244>
    2a00:	88 35       	cpi	r24, 0x58	; 88
    2a02:	79 f0       	breq	.+30     	; 0x2a22 <vfprintf+0x260>
    2a04:	b5 c0       	rjmp	.+362    	; 0x2b70 <vfprintf+0x3ae>
    2a06:	80 37       	cpi	r24, 0x70	; 112
    2a08:	19 f0       	breq	.+6      	; 0x2a10 <vfprintf+0x24e>
    2a0a:	88 37       	cpi	r24, 0x78	; 120
    2a0c:	21 f0       	breq	.+8      	; 0x2a16 <vfprintf+0x254>
    2a0e:	b0 c0       	rjmp	.+352    	; 0x2b70 <vfprintf+0x3ae>
    2a10:	e9 2f       	mov	r30, r25
    2a12:	e0 61       	ori	r30, 0x10	; 16
    2a14:	be 2e       	mov	r11, r30
    2a16:	b4 fe       	sbrs	r11, 4
    2a18:	0d c0       	rjmp	.+26     	; 0x2a34 <vfprintf+0x272>
    2a1a:	fb 2d       	mov	r31, r11
    2a1c:	f4 60       	ori	r31, 0x04	; 4
    2a1e:	bf 2e       	mov	r11, r31
    2a20:	09 c0       	rjmp	.+18     	; 0x2a34 <vfprintf+0x272>
    2a22:	34 fe       	sbrs	r3, 4
    2a24:	0a c0       	rjmp	.+20     	; 0x2a3a <vfprintf+0x278>
    2a26:	29 2f       	mov	r18, r25
    2a28:	26 60       	ori	r18, 0x06	; 6
    2a2a:	b2 2e       	mov	r11, r18
    2a2c:	06 c0       	rjmp	.+12     	; 0x2a3a <vfprintf+0x278>
    2a2e:	28 e0       	ldi	r18, 0x08	; 8
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	05 c0       	rjmp	.+10     	; 0x2a3e <vfprintf+0x27c>
    2a34:	20 e1       	ldi	r18, 0x10	; 16
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	02 c0       	rjmp	.+4      	; 0x2a3e <vfprintf+0x27c>
    2a3a:	20 e1       	ldi	r18, 0x10	; 16
    2a3c:	32 e0       	ldi	r19, 0x02	; 2
    2a3e:	f8 01       	movw	r30, r16
    2a40:	b7 fe       	sbrs	r11, 7
    2a42:	07 c0       	rjmp	.+14     	; 0x2a52 <vfprintf+0x290>
    2a44:	60 81       	ld	r22, Z
    2a46:	71 81       	ldd	r23, Z+1	; 0x01
    2a48:	82 81       	ldd	r24, Z+2	; 0x02
    2a4a:	93 81       	ldd	r25, Z+3	; 0x03
    2a4c:	0c 5f       	subi	r16, 0xFC	; 252
    2a4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a50:	06 c0       	rjmp	.+12     	; 0x2a5e <vfprintf+0x29c>
    2a52:	60 81       	ld	r22, Z
    2a54:	71 81       	ldd	r23, Z+1	; 0x01
    2a56:	80 e0       	ldi	r24, 0x00	; 0
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	0e 5f       	subi	r16, 0xFE	; 254
    2a5c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a5e:	a3 01       	movw	r20, r6
    2a60:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <__ultoa_invert>
    2a64:	88 2e       	mov	r8, r24
    2a66:	86 18       	sub	r8, r6
    2a68:	fb 2d       	mov	r31, r11
    2a6a:	ff 77       	andi	r31, 0x7F	; 127
    2a6c:	3f 2e       	mov	r3, r31
    2a6e:	36 fe       	sbrs	r3, 6
    2a70:	0d c0       	rjmp	.+26     	; 0x2a8c <vfprintf+0x2ca>
    2a72:	23 2d       	mov	r18, r3
    2a74:	2e 7f       	andi	r18, 0xFE	; 254
    2a76:	a2 2e       	mov	r10, r18
    2a78:	89 14       	cp	r8, r9
    2a7a:	58 f4       	brcc	.+22     	; 0x2a92 <vfprintf+0x2d0>
    2a7c:	34 fe       	sbrs	r3, 4
    2a7e:	0b c0       	rjmp	.+22     	; 0x2a96 <vfprintf+0x2d4>
    2a80:	32 fc       	sbrc	r3, 2
    2a82:	09 c0       	rjmp	.+18     	; 0x2a96 <vfprintf+0x2d4>
    2a84:	83 2d       	mov	r24, r3
    2a86:	8e 7e       	andi	r24, 0xEE	; 238
    2a88:	a8 2e       	mov	r10, r24
    2a8a:	05 c0       	rjmp	.+10     	; 0x2a96 <vfprintf+0x2d4>
    2a8c:	b8 2c       	mov	r11, r8
    2a8e:	a3 2c       	mov	r10, r3
    2a90:	03 c0       	rjmp	.+6      	; 0x2a98 <vfprintf+0x2d6>
    2a92:	b8 2c       	mov	r11, r8
    2a94:	01 c0       	rjmp	.+2      	; 0x2a98 <vfprintf+0x2d6>
    2a96:	b9 2c       	mov	r11, r9
    2a98:	a4 fe       	sbrs	r10, 4
    2a9a:	0f c0       	rjmp	.+30     	; 0x2aba <vfprintf+0x2f8>
    2a9c:	fe 01       	movw	r30, r28
    2a9e:	e8 0d       	add	r30, r8
    2aa0:	f1 1d       	adc	r31, r1
    2aa2:	80 81       	ld	r24, Z
    2aa4:	80 33       	cpi	r24, 0x30	; 48
    2aa6:	21 f4       	brne	.+8      	; 0x2ab0 <vfprintf+0x2ee>
    2aa8:	9a 2d       	mov	r25, r10
    2aaa:	99 7e       	andi	r25, 0xE9	; 233
    2aac:	a9 2e       	mov	r10, r25
    2aae:	09 c0       	rjmp	.+18     	; 0x2ac2 <vfprintf+0x300>
    2ab0:	a2 fe       	sbrs	r10, 2
    2ab2:	06 c0       	rjmp	.+12     	; 0x2ac0 <vfprintf+0x2fe>
    2ab4:	b3 94       	inc	r11
    2ab6:	b3 94       	inc	r11
    2ab8:	04 c0       	rjmp	.+8      	; 0x2ac2 <vfprintf+0x300>
    2aba:	8a 2d       	mov	r24, r10
    2abc:	86 78       	andi	r24, 0x86	; 134
    2abe:	09 f0       	breq	.+2      	; 0x2ac2 <vfprintf+0x300>
    2ac0:	b3 94       	inc	r11
    2ac2:	a3 fc       	sbrc	r10, 3
    2ac4:	11 c0       	rjmp	.+34     	; 0x2ae8 <vfprintf+0x326>
    2ac6:	a0 fe       	sbrs	r10, 0
    2ac8:	06 c0       	rjmp	.+12     	; 0x2ad6 <vfprintf+0x314>
    2aca:	b2 14       	cp	r11, r2
    2acc:	88 f4       	brcc	.+34     	; 0x2af0 <vfprintf+0x32e>
    2ace:	28 0c       	add	r2, r8
    2ad0:	92 2c       	mov	r9, r2
    2ad2:	9b 18       	sub	r9, r11
    2ad4:	0e c0       	rjmp	.+28     	; 0x2af2 <vfprintf+0x330>
    2ad6:	b2 14       	cp	r11, r2
    2ad8:	60 f4       	brcc	.+24     	; 0x2af2 <vfprintf+0x330>
    2ada:	b6 01       	movw	r22, r12
    2adc:	80 e2       	ldi	r24, 0x20	; 32
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	0e 94 40 13 	call	0x2680	; 0x2680 <fputc>
    2ae4:	b3 94       	inc	r11
    2ae6:	f7 cf       	rjmp	.-18     	; 0x2ad6 <vfprintf+0x314>
    2ae8:	b2 14       	cp	r11, r2
    2aea:	18 f4       	brcc	.+6      	; 0x2af2 <vfprintf+0x330>
    2aec:	2b 18       	sub	r2, r11
    2aee:	02 c0       	rjmp	.+4      	; 0x2af4 <vfprintf+0x332>
    2af0:	98 2c       	mov	r9, r8
    2af2:	21 2c       	mov	r2, r1
    2af4:	a4 fe       	sbrs	r10, 4
    2af6:	10 c0       	rjmp	.+32     	; 0x2b18 <vfprintf+0x356>
    2af8:	b6 01       	movw	r22, r12
    2afa:	80 e3       	ldi	r24, 0x30	; 48
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	0e 94 40 13 	call	0x2680	; 0x2680 <fputc>
    2b02:	a2 fe       	sbrs	r10, 2
    2b04:	17 c0       	rjmp	.+46     	; 0x2b34 <vfprintf+0x372>
    2b06:	a1 fc       	sbrc	r10, 1
    2b08:	03 c0       	rjmp	.+6      	; 0x2b10 <vfprintf+0x34e>
    2b0a:	88 e7       	ldi	r24, 0x78	; 120
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	02 c0       	rjmp	.+4      	; 0x2b14 <vfprintf+0x352>
    2b10:	88 e5       	ldi	r24, 0x58	; 88
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	b6 01       	movw	r22, r12
    2b16:	0c c0       	rjmp	.+24     	; 0x2b30 <vfprintf+0x36e>
    2b18:	8a 2d       	mov	r24, r10
    2b1a:	86 78       	andi	r24, 0x86	; 134
    2b1c:	59 f0       	breq	.+22     	; 0x2b34 <vfprintf+0x372>
    2b1e:	a1 fe       	sbrs	r10, 1
    2b20:	02 c0       	rjmp	.+4      	; 0x2b26 <vfprintf+0x364>
    2b22:	8b e2       	ldi	r24, 0x2B	; 43
    2b24:	01 c0       	rjmp	.+2      	; 0x2b28 <vfprintf+0x366>
    2b26:	80 e2       	ldi	r24, 0x20	; 32
    2b28:	a7 fc       	sbrc	r10, 7
    2b2a:	8d e2       	ldi	r24, 0x2D	; 45
    2b2c:	b6 01       	movw	r22, r12
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	0e 94 40 13 	call	0x2680	; 0x2680 <fputc>
    2b34:	89 14       	cp	r8, r9
    2b36:	38 f4       	brcc	.+14     	; 0x2b46 <vfprintf+0x384>
    2b38:	b6 01       	movw	r22, r12
    2b3a:	80 e3       	ldi	r24, 0x30	; 48
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	0e 94 40 13 	call	0x2680	; 0x2680 <fputc>
    2b42:	9a 94       	dec	r9
    2b44:	f7 cf       	rjmp	.-18     	; 0x2b34 <vfprintf+0x372>
    2b46:	8a 94       	dec	r8
    2b48:	f3 01       	movw	r30, r6
    2b4a:	e8 0d       	add	r30, r8
    2b4c:	f1 1d       	adc	r31, r1
    2b4e:	80 81       	ld	r24, Z
    2b50:	b6 01       	movw	r22, r12
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	0e 94 40 13 	call	0x2680	; 0x2680 <fputc>
    2b58:	81 10       	cpse	r8, r1
    2b5a:	f5 cf       	rjmp	.-22     	; 0x2b46 <vfprintf+0x384>
    2b5c:	22 20       	and	r2, r2
    2b5e:	09 f4       	brne	.+2      	; 0x2b62 <vfprintf+0x3a0>
    2b60:	42 ce       	rjmp	.-892    	; 0x27e6 <vfprintf+0x24>
    2b62:	b6 01       	movw	r22, r12
    2b64:	80 e2       	ldi	r24, 0x20	; 32
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	0e 94 40 13 	call	0x2680	; 0x2680 <fputc>
    2b6c:	2a 94       	dec	r2
    2b6e:	f6 cf       	rjmp	.-20     	; 0x2b5c <vfprintf+0x39a>
    2b70:	f6 01       	movw	r30, r12
    2b72:	86 81       	ldd	r24, Z+6	; 0x06
    2b74:	97 81       	ldd	r25, Z+7	; 0x07
    2b76:	02 c0       	rjmp	.+4      	; 0x2b7c <vfprintf+0x3ba>
    2b78:	8f ef       	ldi	r24, 0xFF	; 255
    2b7a:	9f ef       	ldi	r25, 0xFF	; 255
    2b7c:	2b 96       	adiw	r28, 0x0b	; 11
    2b7e:	e2 e1       	ldi	r30, 0x12	; 18
    2b80:	0c 94 65 16 	jmp	0x2cca	; 0x2cca <__epilogue_restores__>

00002b84 <strnlen_P>:
    2b84:	fc 01       	movw	r30, r24
    2b86:	05 90       	lpm	r0, Z+
    2b88:	61 50       	subi	r22, 0x01	; 1
    2b8a:	70 40       	sbci	r23, 0x00	; 0
    2b8c:	01 10       	cpse	r0, r1
    2b8e:	d8 f7       	brcc	.-10     	; 0x2b86 <strnlen_P+0x2>
    2b90:	80 95       	com	r24
    2b92:	90 95       	com	r25
    2b94:	8e 0f       	add	r24, r30
    2b96:	9f 1f       	adc	r25, r31
    2b98:	08 95       	ret

00002b9a <strnlen>:
    2b9a:	fc 01       	movw	r30, r24
    2b9c:	61 50       	subi	r22, 0x01	; 1
    2b9e:	70 40       	sbci	r23, 0x00	; 0
    2ba0:	01 90       	ld	r0, Z+
    2ba2:	01 10       	cpse	r0, r1
    2ba4:	d8 f7       	brcc	.-10     	; 0x2b9c <strnlen+0x2>
    2ba6:	80 95       	com	r24
    2ba8:	90 95       	com	r25
    2baa:	8e 0f       	add	r24, r30
    2bac:	9f 1f       	adc	r25, r31
    2bae:	08 95       	ret

00002bb0 <__ultoa_invert>:
    2bb0:	fa 01       	movw	r30, r20
    2bb2:	aa 27       	eor	r26, r26
    2bb4:	28 30       	cpi	r18, 0x08	; 8
    2bb6:	51 f1       	breq	.+84     	; 0x2c0c <__ultoa_invert+0x5c>
    2bb8:	20 31       	cpi	r18, 0x10	; 16
    2bba:	81 f1       	breq	.+96     	; 0x2c1c <__ultoa_invert+0x6c>
    2bbc:	e8 94       	clt
    2bbe:	6f 93       	push	r22
    2bc0:	6e 7f       	andi	r22, 0xFE	; 254
    2bc2:	6e 5f       	subi	r22, 0xFE	; 254
    2bc4:	7f 4f       	sbci	r23, 0xFF	; 255
    2bc6:	8f 4f       	sbci	r24, 0xFF	; 255
    2bc8:	9f 4f       	sbci	r25, 0xFF	; 255
    2bca:	af 4f       	sbci	r26, 0xFF	; 255
    2bcc:	b1 e0       	ldi	r27, 0x01	; 1
    2bce:	3e d0       	rcall	.+124    	; 0x2c4c <__ultoa_invert+0x9c>
    2bd0:	b4 e0       	ldi	r27, 0x04	; 4
    2bd2:	3c d0       	rcall	.+120    	; 0x2c4c <__ultoa_invert+0x9c>
    2bd4:	67 0f       	add	r22, r23
    2bd6:	78 1f       	adc	r23, r24
    2bd8:	89 1f       	adc	r24, r25
    2bda:	9a 1f       	adc	r25, r26
    2bdc:	a1 1d       	adc	r26, r1
    2bde:	68 0f       	add	r22, r24
    2be0:	79 1f       	adc	r23, r25
    2be2:	8a 1f       	adc	r24, r26
    2be4:	91 1d       	adc	r25, r1
    2be6:	a1 1d       	adc	r26, r1
    2be8:	6a 0f       	add	r22, r26
    2bea:	71 1d       	adc	r23, r1
    2bec:	81 1d       	adc	r24, r1
    2bee:	91 1d       	adc	r25, r1
    2bf0:	a1 1d       	adc	r26, r1
    2bf2:	20 d0       	rcall	.+64     	; 0x2c34 <__ultoa_invert+0x84>
    2bf4:	09 f4       	brne	.+2      	; 0x2bf8 <__ultoa_invert+0x48>
    2bf6:	68 94       	set
    2bf8:	3f 91       	pop	r19
    2bfa:	2a e0       	ldi	r18, 0x0A	; 10
    2bfc:	26 9f       	mul	r18, r22
    2bfe:	11 24       	eor	r1, r1
    2c00:	30 19       	sub	r19, r0
    2c02:	30 5d       	subi	r19, 0xD0	; 208
    2c04:	31 93       	st	Z+, r19
    2c06:	de f6       	brtc	.-74     	; 0x2bbe <__ultoa_invert+0xe>
    2c08:	cf 01       	movw	r24, r30
    2c0a:	08 95       	ret
    2c0c:	46 2f       	mov	r20, r22
    2c0e:	47 70       	andi	r20, 0x07	; 7
    2c10:	40 5d       	subi	r20, 0xD0	; 208
    2c12:	41 93       	st	Z+, r20
    2c14:	b3 e0       	ldi	r27, 0x03	; 3
    2c16:	0f d0       	rcall	.+30     	; 0x2c36 <__ultoa_invert+0x86>
    2c18:	c9 f7       	brne	.-14     	; 0x2c0c <__ultoa_invert+0x5c>
    2c1a:	f6 cf       	rjmp	.-20     	; 0x2c08 <__ultoa_invert+0x58>
    2c1c:	46 2f       	mov	r20, r22
    2c1e:	4f 70       	andi	r20, 0x0F	; 15
    2c20:	40 5d       	subi	r20, 0xD0	; 208
    2c22:	4a 33       	cpi	r20, 0x3A	; 58
    2c24:	18 f0       	brcs	.+6      	; 0x2c2c <__ultoa_invert+0x7c>
    2c26:	49 5d       	subi	r20, 0xD9	; 217
    2c28:	31 fd       	sbrc	r19, 1
    2c2a:	40 52       	subi	r20, 0x20	; 32
    2c2c:	41 93       	st	Z+, r20
    2c2e:	02 d0       	rcall	.+4      	; 0x2c34 <__ultoa_invert+0x84>
    2c30:	a9 f7       	brne	.-22     	; 0x2c1c <__ultoa_invert+0x6c>
    2c32:	ea cf       	rjmp	.-44     	; 0x2c08 <__ultoa_invert+0x58>
    2c34:	b4 e0       	ldi	r27, 0x04	; 4
    2c36:	a6 95       	lsr	r26
    2c38:	97 95       	ror	r25
    2c3a:	87 95       	ror	r24
    2c3c:	77 95       	ror	r23
    2c3e:	67 95       	ror	r22
    2c40:	ba 95       	dec	r27
    2c42:	c9 f7       	brne	.-14     	; 0x2c36 <__ultoa_invert+0x86>
    2c44:	00 97       	sbiw	r24, 0x00	; 0
    2c46:	61 05       	cpc	r22, r1
    2c48:	71 05       	cpc	r23, r1
    2c4a:	08 95       	ret
    2c4c:	9b 01       	movw	r18, r22
    2c4e:	ac 01       	movw	r20, r24
    2c50:	0a 2e       	mov	r0, r26
    2c52:	06 94       	lsr	r0
    2c54:	57 95       	ror	r21
    2c56:	47 95       	ror	r20
    2c58:	37 95       	ror	r19
    2c5a:	27 95       	ror	r18
    2c5c:	ba 95       	dec	r27
    2c5e:	c9 f7       	brne	.-14     	; 0x2c52 <__ultoa_invert+0xa2>
    2c60:	62 0f       	add	r22, r18
    2c62:	73 1f       	adc	r23, r19
    2c64:	84 1f       	adc	r24, r20
    2c66:	95 1f       	adc	r25, r21
    2c68:	a0 1d       	adc	r26, r0
    2c6a:	08 95       	ret

00002c6c <__muluhisi3>:
    2c6c:	0e 94 37 12 	call	0x246e	; 0x246e <__umulhisi3>
    2c70:	a5 9f       	mul	r26, r21
    2c72:	90 0d       	add	r25, r0
    2c74:	b4 9f       	mul	r27, r20
    2c76:	90 0d       	add	r25, r0
    2c78:	a4 9f       	mul	r26, r20
    2c7a:	80 0d       	add	r24, r0
    2c7c:	91 1d       	adc	r25, r1
    2c7e:	11 24       	eor	r1, r1
    2c80:	08 95       	ret

00002c82 <__mulshisi3>:
    2c82:	b7 ff       	sbrs	r27, 7
    2c84:	0c 94 36 16 	jmp	0x2c6c	; 0x2c6c <__muluhisi3>

00002c88 <__mulohisi3>:
    2c88:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <__muluhisi3>
    2c8c:	82 1b       	sub	r24, r18
    2c8e:	93 0b       	sbc	r25, r19
    2c90:	08 95       	ret

00002c92 <__prologue_saves__>:
    2c92:	2f 92       	push	r2
    2c94:	3f 92       	push	r3
    2c96:	4f 92       	push	r4
    2c98:	5f 92       	push	r5
    2c9a:	6f 92       	push	r6
    2c9c:	7f 92       	push	r7
    2c9e:	8f 92       	push	r8
    2ca0:	9f 92       	push	r9
    2ca2:	af 92       	push	r10
    2ca4:	bf 92       	push	r11
    2ca6:	cf 92       	push	r12
    2ca8:	df 92       	push	r13
    2caa:	ef 92       	push	r14
    2cac:	ff 92       	push	r15
    2cae:	0f 93       	push	r16
    2cb0:	1f 93       	push	r17
    2cb2:	cf 93       	push	r28
    2cb4:	df 93       	push	r29
    2cb6:	cd b7       	in	r28, 0x3d	; 61
    2cb8:	de b7       	in	r29, 0x3e	; 62
    2cba:	ca 1b       	sub	r28, r26
    2cbc:	db 0b       	sbc	r29, r27
    2cbe:	0f b6       	in	r0, 0x3f	; 63
    2cc0:	f8 94       	cli
    2cc2:	de bf       	out	0x3e, r29	; 62
    2cc4:	0f be       	out	0x3f, r0	; 63
    2cc6:	cd bf       	out	0x3d, r28	; 61
    2cc8:	09 94       	ijmp

00002cca <__epilogue_restores__>:
    2cca:	2a 88       	ldd	r2, Y+18	; 0x12
    2ccc:	39 88       	ldd	r3, Y+17	; 0x11
    2cce:	48 88       	ldd	r4, Y+16	; 0x10
    2cd0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2cd2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2cd4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2cd6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2cd8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2cda:	aa 84       	ldd	r10, Y+10	; 0x0a
    2cdc:	b9 84       	ldd	r11, Y+9	; 0x09
    2cde:	c8 84       	ldd	r12, Y+8	; 0x08
    2ce0:	df 80       	ldd	r13, Y+7	; 0x07
    2ce2:	ee 80       	ldd	r14, Y+6	; 0x06
    2ce4:	fd 80       	ldd	r15, Y+5	; 0x05
    2ce6:	0c 81       	ldd	r16, Y+4	; 0x04
    2ce8:	1b 81       	ldd	r17, Y+3	; 0x03
    2cea:	aa 81       	ldd	r26, Y+2	; 0x02
    2cec:	b9 81       	ldd	r27, Y+1	; 0x01
    2cee:	ce 0f       	add	r28, r30
    2cf0:	d1 1d       	adc	r29, r1
    2cf2:	0f b6       	in	r0, 0x3f	; 63
    2cf4:	f8 94       	cli
    2cf6:	de bf       	out	0x3e, r29	; 62
    2cf8:	0f be       	out	0x3f, r0	; 63
    2cfa:	cd bf       	out	0x3d, r28	; 61
    2cfc:	ed 01       	movw	r28, r26
    2cfe:	08 95       	ret

00002d00 <_exit>:
    2d00:	f8 94       	cli

00002d02 <__stop_program>:
    2d02:	ff cf       	rjmp	.-2      	; 0x2d02 <__stop_program>
