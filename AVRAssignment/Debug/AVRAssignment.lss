
AVRAssignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000106  00800100  00001ede  00001f72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ede  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b5  00800206  00800206  00002078  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002078  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000020d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000328  00000000  00000000  00002114  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003263  00000000  00000000  0000243c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014ca  00000000  00000000  0000569f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c26  00000000  00000000  00006b69  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000880  00000000  00000000  00008790  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000db8  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c8e  00000000  00000000  00009dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000328  00000000  00000000  0000ba56  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 92 01 	jmp	0x324	; 0x324 <__ctors_end>
       4:	0c 94 af 01 	jmp	0x35e	; 0x35e <__bad_interrupt>
       8:	0c 94 af 01 	jmp	0x35e	; 0x35e <__bad_interrupt>
       c:	0c 94 af 01 	jmp	0x35e	; 0x35e <__bad_interrupt>
      10:	0c 94 af 01 	jmp	0x35e	; 0x35e <__bad_interrupt>
      14:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__vector_5>
      18:	0c 94 af 01 	jmp	0x35e	; 0x35e <__bad_interrupt>
      1c:	0c 94 af 01 	jmp	0x35e	; 0x35e <__bad_interrupt>
      20:	0c 94 af 01 	jmp	0x35e	; 0x35e <__bad_interrupt>
      24:	0c 94 af 01 	jmp	0x35e	; 0x35e <__bad_interrupt>
      28:	0c 94 af 01 	jmp	0x35e	; 0x35e <__bad_interrupt>
      2c:	0c 94 af 01 	jmp	0x35e	; 0x35e <__bad_interrupt>
      30:	0c 94 af 01 	jmp	0x35e	; 0x35e <__bad_interrupt>
      34:	0c 94 af 01 	jmp	0x35e	; 0x35e <__bad_interrupt>
      38:	0c 94 af 01 	jmp	0x35e	; 0x35e <__bad_interrupt>
      3c:	0c 94 af 01 	jmp	0x35e	; 0x35e <__bad_interrupt>
      40:	0c 94 aa 0a 	jmp	0x1554	; 0x1554 <__vector_16>
      44:	0c 94 af 01 	jmp	0x35e	; 0x35e <__bad_interrupt>
      48:	0c 94 af 01 	jmp	0x35e	; 0x35e <__bad_interrupt>
      4c:	0c 94 af 01 	jmp	0x35e	; 0x35e <__bad_interrupt>
      50:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <__vector_20>
      54:	0c 94 61 07 	jmp	0xec2	; 0xec2 <__vector_21>
      58:	0c 94 af 01 	jmp	0x35e	; 0x35e <__bad_interrupt>
      5c:	0c 94 af 01 	jmp	0x35e	; 0x35e <__bad_interrupt>
      60:	0c 94 af 01 	jmp	0x35e	; 0x35e <__bad_interrupt>
      64:	0c 94 af 01 	jmp	0x35e	; 0x35e <__bad_interrupt>
      68:	0c 94 af 01 	jmp	0x35e	; 0x35e <__bad_interrupt>
      6c:	0c 94 af 01 	jmp	0x35e	; 0x35e <__bad_interrupt>
      70:	0c 94 af 01 	jmp	0x35e	; 0x35e <__bad_interrupt>
      74:	0c 94 af 01 	jmp	0x35e	; 0x35e <__bad_interrupt>
      78:	0c 94 af 01 	jmp	0x35e	; 0x35e <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	43 61       	ori	r20, 0x13	; 19
      7e:	6e 6e       	ori	r22, 0xEE	; 238
      80:	6f 74       	andi	r22, 0x4F	; 79
      82:	20 73       	andi	r18, 0x30	; 48
      84:	74 61       	ori	r23, 0x14	; 20
      86:	63 6b       	ori	r22, 0xB3	; 179
      88:	20 62       	ori	r18, 0x20	; 32
      8a:	6f 78       	andi	r22, 0x8F	; 143
      8c:	65 73       	andi	r22, 0x35	; 53
	...

0000008f <__c.2429>:
      8f:	43 61 6e 6e 6f 74 20 70 75 73 68 20 62 6f 78 20     Cannot push box 
      9f:	6f 6e 74 6f 20 77 61 6c 6c 00                       onto wall.

000000a9 <__c.2427>:
      a9:	54 68 65 72 65 20 69 73 20 61 20 77 61 6c 6c 20     There is a wall 
      b9:	69 6e 20 74 68 65 20 77 61 79 00                    in the way.

000000c4 <__c.2425>:
      c4:	57 61 6c 6c 20 68 69 74 00                          Wall hit.

000000cd <__c.2423>:
      cd:	50 6c 61 79 65 72 20 68 69 74 20 61 20 77 61 6c     Player hit a wal
      dd:	6c 00                                               l.

000000df <__c.2617>:
      df:	50 72 65 73 73 20 27 72 27 2f 27 52 27 20 74 6f     Press 'r'/'R' to
      ef:	20 72 65 73 74 61 72 74 2c 20 6f 72 20 27 65 27      restart, or 'e'
      ff:	2f 27 45 27 20 74 6f 20 65 78 69 74 00              /'E' to exit.

0000010c <__c.2615>:
     10c:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

00000116 <__c.2586>:
     116:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 50 72     CSSE2010/7201 Pr
     126:	6f 6a 65 63 74 20 62 79 20 52 69 6c 65 79 20 53     oject by Riley S
     136:	74 65 77 61 72 74 20 2d 20 34 38 38 32 38 36 36     tewart - 4882866
     146:	32 00                                               2.

00000148 <title_data>:
     148:	60 38 1f 3f 3f 63 7e fe 60 bc b1 b1 61 66 c3 c0     `8.??c~.`...af..
     158:	60 b6 3f bf 61 7c c3 fe 60 b3 b1 b1 61 66 c3 06     `.?.a|..`...af..
     168:	e0 b1 31 3f 3f 63 7e fe                             ..1??c~.

00000170 <anim_data>:
     170:	f0 f0 00 f0 f0 f0 f0 00 f0 00 00 f0 00 00 f0 00     ................
     180:	f0 00 00 f0 00 00 f0 00 f0 f0 f0 f0 00 f0 f0 00     ................
	...
     198:	f0 f0 f0 f0 f0 00 00 00 f0 00 00 00 f0 00 00 00     ................
     1a8:	f0 00 00 00 f0 00 00 00 f0 f0 f0 f0 f0 00 00 00     ................
	...
     1c0:	f0 f0 f0 f0 f0 f0 f0 00 00 00 00 f0 00 00 00 00     ................
     1d0:	00 00 f0 00 f0 00 00 00 f0 f0 00 00 00 f0 00 00     ................
	...
     1e8:	f0 f0 f0 f0 f0 00 00 00 f0 00 00 00 f0 00 00 00     ................
     1f8:	f0 00 00 00 f0 00 00 00 f0 f0 f0 f0 f0 00 00 00     ................
	...
     210:	f0 f0 f0 f0 f0 f0 f0 00 f0 00 00 f0 00 00 00 00     ................
     220:	f0 00 00 f0 00 00 00 00 f0 f0 f0 f0 00 00 00 00     ................
	...
     238:	f0 f0 f0 00 f0 00 00 00 f0 00 f0 00 f0 00 00 00     ................
     248:	f0 00 f0 00 f0 00 00 00 f0 f0 f0 f0 f0 00 00 00     ................
	...
     260:	f0 f0 f0 f0 f0 00 00 00 00 00 00 00 f0 00 00 00     ................
     270:	00 00 00 00 f0 00 00 00 f0 f0 f0 f0 f0 00 00 00     ................
	...
     290:	3c 3c 3c 3c 3c 3c 00 00 3c 3c 00 00 3c 3c 00 00     <<<<<<..<<..<<..
     2a0:	3c 00 3c 3c 00 3c 00 00 3c 00 3c 3c 00 3c 00 00     <.<<.<..<.<<.<..
     2b0:	3c 3c 00 00 3c 3c 00 00 3c 3c 3c 3c 3c 3c 00 00     <<..<<..<<<<<<..
     2c0:	00 00 00 10 00 10 00 00 10 00 00 10 00 10 00 00     ................
     2d0:	00 10 00 00 10 00 10 10 00 00 10 10 00 10 10 10     ................
     2e0:	00 10 00 00 00 00 10 10 10 00 00 00 00 00 00 00     ................
	...

00000300 <__c.2187>:
     300:	1b 5b 3f 32 35 6c 00                                .[?25l.

00000307 <__c.2182>:
     307:	1b 5b 25 64 6d 00                                   .[%dm.

0000030d <__c.2177>:
     30d:	1b 5b 4b 00                                         .[K.

00000311 <__c.2172>:
     311:	1b 5b 32 4a 00                                      .[2J.

00000316 <__c.2162>:
     316:	1b 5b 30 6d 00                                      .[0m.

0000031b <__c.2157>:
     31b:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

00000324 <__ctors_end>:
     324:	11 24       	eor	r1, r1
     326:	1f be       	out	0x3f, r1	; 63
     328:	cf ef       	ldi	r28, 0xFF	; 255
     32a:	d8 e0       	ldi	r29, 0x08	; 8
     32c:	de bf       	out	0x3e, r29	; 62
     32e:	cd bf       	out	0x3d, r28	; 61

00000330 <__do_copy_data>:
     330:	12 e0       	ldi	r17, 0x02	; 2
     332:	a0 e0       	ldi	r26, 0x00	; 0
     334:	b1 e0       	ldi	r27, 0x01	; 1
     336:	ee ed       	ldi	r30, 0xDE	; 222
     338:	fe e1       	ldi	r31, 0x1E	; 30
     33a:	02 c0       	rjmp	.+4      	; 0x340 <__do_copy_data+0x10>
     33c:	05 90       	lpm	r0, Z+
     33e:	0d 92       	st	X+, r0
     340:	a6 30       	cpi	r26, 0x06	; 6
     342:	b1 07       	cpc	r27, r17
     344:	d9 f7       	brne	.-10     	; 0x33c <__do_copy_data+0xc>

00000346 <__do_clear_bss>:
     346:	23 e0       	ldi	r18, 0x03	; 3
     348:	a6 e0       	ldi	r26, 0x06	; 6
     34a:	b2 e0       	ldi	r27, 0x02	; 2
     34c:	01 c0       	rjmp	.+2      	; 0x350 <.do_clear_bss_start>

0000034e <.do_clear_bss_loop>:
     34e:	1d 92       	st	X+, r1

00000350 <.do_clear_bss_start>:
     350:	ab 3b       	cpi	r26, 0xBB	; 187
     352:	b2 07       	cpc	r27, r18
     354:	e1 f7       	brne	.-8      	; 0x34e <.do_clear_bss_loop>
     356:	0e 94 ce 06 	call	0xd9c	; 0xd9c <main>
     35a:	0c 94 6d 0f 	jmp	0x1eda	; 0x1eda <_exit>

0000035e <__bad_interrupt>:
     35e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000362 <init_buttons>:
	// using a pin change interrupt. These pins correspond to pin
	// change interrupts PCINT8 to PCINT11 which are covered by
	// pin change interrupt 1.

	// Empty the button push queue and reset last state.
	queue_length = 0;
     362:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <__data_end>
	last_button_state = 0;
     366:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <last_button_state>

	// Enable the interrupt (see datasheet page 77).
	PCICR |= (1 << PCIE1);
     36a:	e8 e6       	ldi	r30, 0x68	; 104
     36c:	f0 e0       	ldi	r31, 0x00	; 0
     36e:	80 81       	ld	r24, Z
     370:	82 60       	ori	r24, 0x02	; 2
     372:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78).
	PCIFR |= (1 << PCIF1);
     374:	8b b3       	in	r24, 0x1b	; 27
     376:	82 60       	ori	r24, 0x02	; 2
     378:	8b bb       	out	0x1b, r24	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78).
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT10) |
     37a:	ec e6       	ldi	r30, 0x6C	; 108
     37c:	f0 e0       	ldi	r31, 0x00	; 0
     37e:	80 81       	ld	r24, Z
     380:	8f 60       	ori	r24, 0x0F	; 15
     382:	80 83       	st	Z, r24
     384:	08 95       	ret

00000386 <button_pushed>:

ButtonState button_pushed(void)
{
	ButtonState result = NO_BUTTON_PUSHED; // Default result.

	if (queue_length > 0)
     386:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
     38a:	88 23       	and	r24, r24
     38c:	f9 f0       	breq	.+62     	; 0x3cc <button_pushed+0x46>
	{
		// Remove the first element off the queue and move all the
		// other entries closer to the front of the queue. We turn off
		// interrupts (if on) before we make any changes to the queue.
		// If interrupts were on, we turn them back on when done.
		result = button_queue[0];
     38e:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <button_queue>

		// Save whether interrupts were enabled and turn them off.
		bool interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     392:	5f b7       	in	r21, 0x3f	; 63
     394:	50 78       	andi	r21, 0x80	; 128
		cli();
     396:	f8 94       	cli
		
		for (uint8_t i = 1; i < queue_length; i++)
     398:	91 e0       	ldi	r25, 0x01	; 1
     39a:	0b c0       	rjmp	.+22     	; 0x3b2 <button_pushed+0x2c>
		{
			button_queue[i - 1] = button_queue[i];
     39c:	29 2f       	mov	r18, r25
     39e:	30 e0       	ldi	r19, 0x00	; 0
     3a0:	f9 01       	movw	r30, r18
     3a2:	e9 5f       	subi	r30, 0xF9	; 249
     3a4:	fd 4f       	sbci	r31, 0xFD	; 253
     3a6:	40 81       	ld	r20, Z
     3a8:	f9 01       	movw	r30, r18
     3aa:	ea 5f       	subi	r30, 0xFA	; 250
     3ac:	fd 4f       	sbci	r31, 0xFD	; 253
     3ae:	40 83       	st	Z, r20

		// Save whether interrupts were enabled and turn them off.
		bool interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for (uint8_t i = 1; i < queue_length; i++)
     3b0:	9f 5f       	subi	r25, 0xFF	; 255
     3b2:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__data_end>
     3b6:	92 17       	cp	r25, r18
     3b8:	88 f3       	brcs	.-30     	; 0x39c <button_pushed+0x16>
		{
			button_queue[i - 1] = button_queue[i];
		}
		queue_length--;
     3ba:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <__data_end>
     3be:	91 50       	subi	r25, 0x01	; 1
     3c0:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <__data_end>

		if (interrupts_were_enabled)
     3c4:	55 23       	and	r21, r21
     3c6:	19 f0       	breq	.+6      	; 0x3ce <button_pushed+0x48>
		{
			// Turn them back on again.
			sei();
     3c8:	78 94       	sei
     3ca:	08 95       	ret
		(1 << PCINT11);
}

ButtonState button_pushed(void)
{
	ButtonState result = NO_BUTTON_PUSHED; // Default result.
     3cc:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again.
			sei();
		}
	}
	return result;
}
     3ce:	08 95       	ret

000003d0 <clear_button_presses>:

void clear_button_presses(void)
{
	// Save whether interrupts were enabled and turn them off.
	bool interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     3d0:	8f b7       	in	r24, 0x3f	; 63
	cli();
     3d2:	f8 94       	cli
	queue_length = 0;
     3d4:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <__data_end>
	last_button_state = 0;
     3d8:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <last_button_state>
	if (interrupts_were_enabled)
     3dc:	88 23       	and	r24, r24
     3de:	0c f4       	brge	.+2      	; 0x3e2 <clear_button_presses+0x12>
	{
		// Turn them back on again.
		sei();
     3e0:	78 94       	sei
     3e2:	08 95       	ret

000003e4 <__vector_5>:
	}
}

// Interrupt handler for a change on buttons.
ISR(PCINT1_vect)
{
     3e4:	1f 92       	push	r1
     3e6:	0f 92       	push	r0
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	0f 92       	push	r0
     3ec:	11 24       	eor	r1, r1
     3ee:	2f 93       	push	r18
     3f0:	3f 93       	push	r19
     3f2:	4f 93       	push	r20
     3f4:	8f 93       	push	r24
     3f6:	9f 93       	push	r25
     3f8:	ef 93       	push	r30
     3fa:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     3fc:	43 b1       	in	r20, 0x03	; 3
     3fe:	4f 70       	andi	r20, 0x0F	; 15
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++)
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	24 c0       	rjmp	.+72     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
	{
		if (queue_length < BUTTON_QUEUE_SIZE
     404:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <__data_end>
     408:	94 30       	cpi	r25, 0x04	; 4
     40a:	f8 f4       	brcc	.+62     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
				&& (button_state & (1 << pin))
     40c:	24 2f       	mov	r18, r20
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	08 2e       	mov	r0, r24
     412:	02 c0       	rjmp	.+4      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     414:	35 95       	asr	r19
     416:	27 95       	ror	r18
     418:	0a 94       	dec	r0
     41a:	e2 f7       	brpl	.-8      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     41c:	20 ff       	sbrs	r18, 0
     41e:	15 c0       	rjmp	.+42     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
				&& !(last_button_state & (1 << pin)))
     420:	20 91 0b 02 	lds	r18, 0x020B	; 0x80020b <last_button_state>
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	08 2e       	mov	r0, r24
     428:	02 c0       	rjmp	.+4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     42a:	35 95       	asr	r19
     42c:	27 95       	ror	r18
     42e:	0a 94       	dec	r0
     430:	e2 f7       	brpl	.-8      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
     432:	20 fd       	sbrc	r18, 0
     434:	0a c0       	rjmp	.+20     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
				{
			// Add the button push to the queue (and update the
			// length of the queue).
			button_queue[queue_length++] = pin;
     436:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <__data_end>
     43a:	91 e0       	ldi	r25, 0x01	; 1
     43c:	9e 0f       	add	r25, r30
     43e:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <__data_end>
     442:	f0 e0       	ldi	r31, 0x00	; 0
     444:	e9 5f       	subi	r30, 0xF9	; 249
     446:	fd 4f       	sbci	r31, 0xFD	; 253
     448:	80 83       	st	Z, r24
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++)
     44a:	8f 5f       	subi	r24, 0xFF	; 255
     44c:	84 30       	cpi	r24, 0x04	; 4
     44e:	d0 f2       	brcs	.-76     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state.
	last_button_state = button_state;
     450:	40 93 0b 02 	sts	0x020B, r20	; 0x80020b <last_button_state>
}
     454:	ff 91       	pop	r31
     456:	ef 91       	pop	r30
     458:	9f 91       	pop	r25
     45a:	8f 91       	pop	r24
     45c:	4f 91       	pop	r20
     45e:	3f 91       	pop	r19
     460:	2f 91       	pop	r18
     462:	0f 90       	pop	r0
     464:	0f be       	out	0x3f, r0	; 63
     466:	0f 90       	pop	r0
     468:	1f 90       	pop	r1
     46a:	18 95       	reti

0000046c <paint_square>:
// ========================== GAME LOGIC FUNCTIONS ===========================

// This function paints a square based on the object(s) currently on it.
static void paint_square(uint8_t row, uint8_t col)
{	
	switch (board[row][col] & OBJECT_MASK)
     46c:	90 e1       	ldi	r25, 0x10	; 16
     46e:	89 9f       	mul	r24, r25
     470:	f0 01       	movw	r30, r0
     472:	11 24       	eor	r1, r1
     474:	e1 5f       	subi	r30, 0xF1	; 241
     476:	fd 4f       	sbci	r31, 0xFD	; 253
     478:	e6 0f       	add	r30, r22
     47a:	f1 1d       	adc	r31, r1
     47c:	90 81       	ld	r25, Z
     47e:	97 70       	andi	r25, 0x07	; 7
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	99 f0       	breq	.+38     	; 0x4aa <paint_square+0x3e>
     484:	28 f4       	brcc	.+10     	; 0x490 <paint_square+0x24>
     486:	99 23       	and	r25, r25
     488:	41 f0       	breq	.+16     	; 0x49a <paint_square+0x2e>
     48a:	91 30       	cpi	r25, 0x01	; 1
     48c:	51 f0       	breq	.+20     	; 0x4a2 <paint_square+0x36>
     48e:	08 95       	ret
     490:	94 30       	cpi	r25, 0x04	; 4
     492:	79 f0       	breq	.+30     	; 0x4b2 <paint_square+0x46>
     494:	96 30       	cpi	r25, 0x06	; 6
     496:	89 f0       	breq	.+34     	; 0x4ba <paint_square+0x4e>
     498:	08 95       	ret
	{
		case ROOM:
			ledmatrix_update_pixel(row, col, COLOUR_BLACK);
     49a:	40 e0       	ldi	r20, 0x00	; 0
     49c:	0e 94 ff 04 	call	0x9fe	; 0x9fe <ledmatrix_update_pixel>
			break;
     4a0:	08 95       	ret
		case WALL:
			ledmatrix_update_pixel(row, col, COLOUR_WALL);
     4a2:	4f ef       	ldi	r20, 0xFF	; 255
     4a4:	0e 94 ff 04 	call	0x9fe	; 0x9fe <ledmatrix_update_pixel>
			break;
     4a8:	08 95       	ret
		case BOX:
			ledmatrix_update_pixel(row, col, COLOUR_BOX);
     4aa:	4c e3       	ldi	r20, 0x3C	; 60
     4ac:	0e 94 ff 04 	call	0x9fe	; 0x9fe <ledmatrix_update_pixel>
			break;
     4b0:	08 95       	ret
		case TARGET:
			ledmatrix_update_pixel(row, col, COLOUR_TARGET);
     4b2:	4f e0       	ldi	r20, 0x0F	; 15
     4b4:	0e 94 ff 04 	call	0x9fe	; 0x9fe <ledmatrix_update_pixel>
			break;
     4b8:	08 95       	ret
		case BOX | TARGET:
			ledmatrix_update_pixel(row, col, COLOUR_DONE);
     4ba:	40 ef       	ldi	r20, 0xF0	; 240
     4bc:	0e 94 ff 04 	call	0x9fe	; 0x9fe <ledmatrix_update_pixel>
     4c0:	08 95       	ret

000004c2 <flash_player>:
// currently not visible, it is set to visible and rendered on the display.
// The static global variable "player_visible" indicates whether the player
// icon is currently visible.
void flash_player(void)
{
	player_visible = !player_visible;
     4c2:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <player_visible>
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	89 27       	eor	r24, r25
     4ca:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <player_visible>
	if (player_visible)
     4ce:	88 23       	and	r24, r24
     4d0:	41 f0       	breq	.+16     	; 0x4e2 <flash_player+0x20>
	{
		// The player is visible, paint it with COLOUR_PLAYER.
		ledmatrix_update_pixel(player_row, player_col, COLOUR_PLAYER);
     4d2:	40 e1       	ldi	r20, 0x10	; 16
     4d4:	60 91 0d 02 	lds	r22, 0x020D	; 0x80020d <player_col>
     4d8:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <player_row>
     4dc:	0e 94 ff 04 	call	0x9fe	; 0x9fe <ledmatrix_update_pixel>
     4e0:	08 95       	ret
	}
	else
	{
		// The player is not visible, paint the underlying square.
		paint_square(player_row, player_col);
     4e2:	60 91 0d 02 	lds	r22, 0x020D	; 0x80020d <player_col>
     4e6:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <player_row>
     4ea:	0e 94 36 02 	call	0x46c	; 0x46c <paint_square>
     4ee:	08 95       	ret

000004f0 <display_terminal_message>:
	update_terminal_display(player_row, MATRIX_NUM_ROWS-player_row, 1);
	flash_player();
	return true;
}

void display_terminal_message(char type[]) {
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
     4f4:	ec 01       	movw	r28, r24
	if (strcmp(type, "wall") == 0) {
     4f6:	60 e2       	ldi	r22, 0x20	; 32
     4f8:	71 e0       	ldi	r23, 0x01	; 1
     4fa:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <strcmp>
     4fe:	89 2b       	or	r24, r25
     500:	89 f5       	brne	.+98     	; 0x564 <display_terminal_message+0x74>
		int rand_num;
		int lb = 1;
		int ub = 3;
		rand_num = (rand() % (ub - lb + 1)) + lb;
     502:	0e 94 c5 0b 	call	0x178a	; 0x178a <rand>
     506:	63 e0       	ldi	r22, 0x03	; 3
     508:	70 e0       	ldi	r23, 0x00	; 0
     50a:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__divmodhi4>
     50e:	ec 01       	movw	r28, r24
     510:	21 96       	adiw	r28, 0x01	; 1
		move_terminal_cursor(20, 1);
     512:	61 e0       	ldi	r22, 0x01	; 1
     514:	70 e0       	ldi	r23, 0x00	; 0
     516:	84 e1       	ldi	r24, 0x14	; 20
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	0e 94 3f 0a 	call	0x147e	; 0x147e <move_terminal_cursor>
		if (rand_num == 1) {
     51e:	c1 30       	cpi	r28, 0x01	; 1
     520:	d1 05       	cpc	r29, r1
     522:	49 f4       	brne	.+18     	; 0x536 <display_terminal_message+0x46>
			printf_P(PSTR("Player hit a wall"));
     524:	8d ec       	ldi	r24, 0xCD	; 205
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	9f 93       	push	r25
     52a:	8f 93       	push	r24
     52c:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <printf_P>
     530:	0f 90       	pop	r0
     532:	0f 90       	pop	r0
     534:	42 c0       	rjmp	.+132    	; 0x5ba <display_terminal_message+0xca>
		} else if (rand_num == 2) {
     536:	c2 30       	cpi	r28, 0x02	; 2
     538:	d1 05       	cpc	r29, r1
     53a:	49 f4       	brne	.+18     	; 0x54e <display_terminal_message+0x5e>
			printf_P(PSTR("Wall hit"));
     53c:	84 ec       	ldi	r24, 0xC4	; 196
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	9f 93       	push	r25
     542:	8f 93       	push	r24
     544:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <printf_P>
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	36 c0       	rjmp	.+108    	; 0x5ba <display_terminal_message+0xca>
		} else if (rand_num == 3) {
     54e:	23 97       	sbiw	r28, 0x03	; 3
     550:	a1 f5       	brne	.+104    	; 0x5ba <display_terminal_message+0xca>
			printf_P(PSTR("There is a wall in the way"));
     552:	89 ea       	ldi	r24, 0xA9	; 169
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	9f 93       	push	r25
     558:	8f 93       	push	r24
     55a:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <printf_P>
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	2b c0       	rjmp	.+86     	; 0x5ba <display_terminal_message+0xca>
		}
	} else if (strcmp(type, "box_wall") == 0) {
     564:	6c e1       	ldi	r22, 0x1C	; 28
     566:	71 e0       	ldi	r23, 0x01	; 1
     568:	ce 01       	movw	r24, r28
     56a:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <strcmp>
     56e:	89 2b       	or	r24, r25
     570:	79 f4       	brne	.+30     	; 0x590 <display_terminal_message+0xa0>
		move_terminal_cursor(20, 1);
     572:	61 e0       	ldi	r22, 0x01	; 1
     574:	70 e0       	ldi	r23, 0x00	; 0
     576:	84 e1       	ldi	r24, 0x14	; 20
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	0e 94 3f 0a 	call	0x147e	; 0x147e <move_terminal_cursor>
		printf_P(PSTR("Cannot push box onto wall"));
     57e:	8f e8       	ldi	r24, 0x8F	; 143
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	9f 93       	push	r25
     584:	8f 93       	push	r24
     586:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <printf_P>
     58a:	0f 90       	pop	r0
     58c:	0f 90       	pop	r0
     58e:	15 c0       	rjmp	.+42     	; 0x5ba <display_terminal_message+0xca>
	} else if (strcmp(type, "box_box") == 0) {
     590:	65 e2       	ldi	r22, 0x25	; 37
     592:	71 e0       	ldi	r23, 0x01	; 1
     594:	ce 01       	movw	r24, r28
     596:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <strcmp>
     59a:	89 2b       	or	r24, r25
     59c:	71 f4       	brne	.+28     	; 0x5ba <display_terminal_message+0xca>
		move_terminal_cursor(20, 1);
     59e:	61 e0       	ldi	r22, 0x01	; 1
     5a0:	70 e0       	ldi	r23, 0x00	; 0
     5a2:	84 e1       	ldi	r24, 0x14	; 20
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	0e 94 3f 0a 	call	0x147e	; 0x147e <move_terminal_cursor>
		printf_P(PSTR("Cannot stack boxes"));
     5aa:	8c e7       	ldi	r24, 0x7C	; 124
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	9f 93       	push	r25
     5b0:	8f 93       	push	r24
     5b2:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <printf_P>
     5b6:	0f 90       	pop	r0
     5b8:	0f 90       	pop	r0
	}
	return;
}
     5ba:	df 91       	pop	r29
     5bc:	cf 91       	pop	r28
     5be:	08 95       	ret

000005c0 <is_game_over>:

// This function checks if the game is over (i.e., the level is solved), and
// returns true iff (if and only if) the game is over.
bool is_game_over(void)
{
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
     5c0:	40 e0       	ldi	r20, 0x00	; 0
     5c2:	50 e0       	ldi	r21, 0x00	; 0
     5c4:	17 c0       	rjmp	.+46     	; 0x5f4 <is_game_over+0x34>
		for (int col = 0; col < MATRIX_NUM_COLUMNS; col++) {
			if (board[row][col] == TARGET) {
     5c6:	fa 01       	movw	r30, r20
     5c8:	e2 95       	swap	r30
     5ca:	f2 95       	swap	r31
     5cc:	f0 7f       	andi	r31, 0xF0	; 240
     5ce:	fe 27       	eor	r31, r30
     5d0:	e0 7f       	andi	r30, 0xF0	; 240
     5d2:	fe 27       	eor	r31, r30
     5d4:	e1 5f       	subi	r30, 0xF1	; 241
     5d6:	fd 4f       	sbci	r31, 0xFD	; 253
     5d8:	e8 0f       	add	r30, r24
     5da:	f9 1f       	adc	r31, r25
     5dc:	20 81       	ld	r18, Z
     5de:	24 30       	cpi	r18, 0x04	; 4
     5e0:	71 f0       	breq	.+28     	; 0x5fe <is_game_over+0x3e>
// This function checks if the game is over (i.e., the level is solved), and
// returns true iff (if and only if) the game is over.
bool is_game_over(void)
{
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
		for (int col = 0; col < MATRIX_NUM_COLUMNS; col++) {
     5e2:	01 96       	adiw	r24, 0x01	; 1
     5e4:	02 c0       	rjmp	.+4      	; 0x5ea <is_game_over+0x2a>
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	80 31       	cpi	r24, 0x10	; 16
     5ec:	91 05       	cpc	r25, r1
     5ee:	5c f3       	brlt	.-42     	; 0x5c6 <is_game_over+0x6>

// This function checks if the game is over (i.e., the level is solved), and
// returns true iff (if and only if) the game is over.
bool is_game_over(void)
{
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
     5f0:	4f 5f       	subi	r20, 0xFF	; 255
     5f2:	5f 4f       	sbci	r21, 0xFF	; 255
     5f4:	48 30       	cpi	r20, 0x08	; 8
     5f6:	51 05       	cpc	r21, r1
     5f8:	b4 f3       	brlt	.-20     	; 0x5e6 <is_game_over+0x26>
			if (board[row][col] == TARGET) {
				return false;
			}
		}
	}
	return true;
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	08 95       	ret
bool is_game_over(void)
{
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
		for (int col = 0; col < MATRIX_NUM_COLUMNS; col++) {
			if (board[row][col] == TARGET) {
				return false;
     5fe:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}
	return true;
}
     600:	08 95       	ret

00000602 <modulo>:

//Calculates the modulus of a number for player movement
int modulo(int x,int y){
     602:	9b 01       	movw	r18, r22
	return (x % y + y) % y;
     604:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__divmodhi4>
     608:	82 0f       	add	r24, r18
     60a:	93 1f       	adc	r25, r19
     60c:	b9 01       	movw	r22, r18
     60e:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__divmodhi4>
}
     612:	08 95       	ret

00000614 <update_terminal_display>:
		printf("\n");
		GAME_BOARD_ROW++;
	}
}

void update_terminal_display(int board_row, int terminal_row, int terminal_col) {
     614:	0f 93       	push	r16
     616:	1f 93       	push	r17
     618:	cf 93       	push	r28
     61a:	df 93       	push	r29
     61c:	8c 01       	movw	r16, r24
     61e:	cb 01       	movw	r24, r22
	move_terminal_cursor(terminal_row, terminal_col);
     620:	ba 01       	movw	r22, r20
     622:	0e 94 3f 0a 	call	0x147e	; 0x147e <move_terminal_cursor>
	clear_to_end_of_line();
     626:	0e 94 65 0a 	call	0x14ca	; 0x14ca <clear_to_end_of_line>
	for (int column = 1; column <= MATRIX_NUM_COLUMNS-1; column++) {
     62a:	c1 e0       	ldi	r28, 0x01	; 1
     62c:	d0 e0       	ldi	r29, 0x00	; 0
     62e:	43 c0       	rjmp	.+134    	; 0x6b6 <update_terminal_display+0xa2>
		if (board[board_row][column] == ROOM) {
     630:	f8 01       	movw	r30, r16
     632:	e2 95       	swap	r30
     634:	f2 95       	swap	r31
     636:	f0 7f       	andi	r31, 0xF0	; 240
     638:	fe 27       	eor	r31, r30
     63a:	e0 7f       	andi	r30, 0xF0	; 240
     63c:	fe 27       	eor	r31, r30
     63e:	e1 5f       	subi	r30, 0xF1	; 241
     640:	fd 4f       	sbci	r31, 0xFD	; 253
     642:	ec 0f       	add	r30, r28
     644:	fd 1f       	adc	r31, r29
     646:	80 81       	ld	r24, Z
     648:	81 11       	cpse	r24, r1
     64a:	09 c0       	rjmp	.+18     	; 0x65e <update_terminal_display+0x4a>
			printf("\033[100m   \033[0m");
     64c:	8d e2       	ldi	r24, 0x2D	; 45
     64e:	91 e0       	ldi	r25, 0x01	; 1
     650:	9f 93       	push	r25
     652:	8f 93       	push	r24
     654:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <printf>
     658:	0f 90       	pop	r0
     65a:	0f 90       	pop	r0
     65c:	2b c0       	rjmp	.+86     	; 0x6b4 <update_terminal_display+0xa0>
		} else if (board[board_row][column] == WALL) {
     65e:	81 30       	cpi	r24, 0x01	; 1
     660:	49 f4       	brne	.+18     	; 0x674 <update_terminal_display+0x60>
			printf("\033[103m   \033[0m");
     662:	8b e3       	ldi	r24, 0x3B	; 59
     664:	91 e0       	ldi	r25, 0x01	; 1
     666:	9f 93       	push	r25
     668:	8f 93       	push	r24
     66a:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <printf>
     66e:	0f 90       	pop	r0
     670:	0f 90       	pop	r0
     672:	20 c0       	rjmp	.+64     	; 0x6b4 <update_terminal_display+0xa0>
		} else if (board[board_row][column] == BOX) {
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	49 f4       	brne	.+18     	; 0x68a <update_terminal_display+0x76>
			printf("\033[43m   \033[0m");
     678:	89 e4       	ldi	r24, 0x49	; 73
     67a:	91 e0       	ldi	r25, 0x01	; 1
     67c:	9f 93       	push	r25
     67e:	8f 93       	push	r24
     680:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <printf>
     684:	0f 90       	pop	r0
     686:	0f 90       	pop	r0
     688:	15 c0       	rjmp	.+42     	; 0x6b4 <update_terminal_display+0xa0>
		} else if (board[board_row][column] == TARGET) {
     68a:	84 30       	cpi	r24, 0x04	; 4
     68c:	49 f4       	brne	.+18     	; 0x6a0 <update_terminal_display+0x8c>
			printf("\033[41m   \033[0m");
     68e:	86 e5       	ldi	r24, 0x56	; 86
     690:	91 e0       	ldi	r25, 0x01	; 1
     692:	9f 93       	push	r25
     694:	8f 93       	push	r24
     696:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <printf>
     69a:	0f 90       	pop	r0
     69c:	0f 90       	pop	r0
     69e:	0a c0       	rjmp	.+20     	; 0x6b4 <update_terminal_display+0xa0>
		} else if (board[board_row][column] == (BOX | TARGET)) {
     6a0:	86 30       	cpi	r24, 0x06	; 6
     6a2:	41 f4       	brne	.+16     	; 0x6b4 <update_terminal_display+0xa0>
			printf("\033[102m   \033[0m");
     6a4:	83 e6       	ldi	r24, 0x63	; 99
     6a6:	91 e0       	ldi	r25, 0x01	; 1
     6a8:	9f 93       	push	r25
     6aa:	8f 93       	push	r24
     6ac:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <printf>
     6b0:	0f 90       	pop	r0
     6b2:	0f 90       	pop	r0
}

void update_terminal_display(int board_row, int terminal_row, int terminal_col) {
	move_terminal_cursor(terminal_row, terminal_col);
	clear_to_end_of_line();
	for (int column = 1; column <= MATRIX_NUM_COLUMNS-1; column++) {
     6b4:	21 96       	adiw	r28, 0x01	; 1
     6b6:	c0 31       	cpi	r28, 0x10	; 16
     6b8:	d1 05       	cpc	r29, r1
     6ba:	0c f4       	brge	.+2      	; 0x6be <update_terminal_display+0xaa>
     6bc:	b9 cf       	rjmp	.-142    	; 0x630 <update_terminal_display+0x1c>
			printf("\033[41m   \033[0m");
		} else if (board[board_row][column] == (BOX | TARGET)) {
			printf("\033[102m   \033[0m");
		}
	}
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	1f 91       	pop	r17
     6c4:	0f 91       	pop	r16
     6c6:	08 95       	ret

000006c8 <move_player>:
	}
}

// This function handles player movements.
bool move_player(int8_t delta_row, int8_t delta_col)
{
     6c8:	af 92       	push	r10
     6ca:	bf 92       	push	r11
     6cc:	cf 92       	push	r12
     6ce:	df 92       	push	r13
     6d0:	ef 92       	push	r14
     6d2:	ff 92       	push	r15
     6d4:	0f 93       	push	r16
     6d6:	1f 93       	push	r17
     6d8:	cf 93       	push	r28
     6da:	df 93       	push	r29
     6dc:	c6 2e       	mov	r12, r22
	// |    message area of the terminal and return a valid indicating a |
	// |    valid move.                                                  |
	// +-----------------------------------------------------------------+
	
	//Calculate next positions
	int next_row = modulo((player_row+delta_row), 8);
     6de:	b0 90 0e 02 	lds	r11, 0x020E	; 0x80020e <player_row>
     6e2:	e8 2e       	mov	r14, r24
     6e4:	88 0f       	add	r24, r24
     6e6:	ff 08       	sbc	r15, r15
     6e8:	68 e0       	ldi	r22, 0x08	; 8
     6ea:	70 e0       	ldi	r23, 0x00	; 0
     6ec:	c7 01       	movw	r24, r14
     6ee:	8b 0d       	add	r24, r11
     6f0:	91 1d       	adc	r25, r1
     6f2:	0e 94 01 03 	call	0x602	; 0x602 <modulo>
     6f6:	ec 01       	movw	r28, r24
	int next_col = modulo((player_col+delta_col), 16);
     6f8:	a0 90 0d 02 	lds	r10, 0x020D	; 0x80020d <player_col>
     6fc:	0c 2c       	mov	r0, r12
     6fe:	00 0c       	add	r0, r0
     700:	dd 08       	sbc	r13, r13
     702:	60 e1       	ldi	r22, 0x10	; 16
     704:	70 e0       	ldi	r23, 0x00	; 0
     706:	c6 01       	movw	r24, r12
     708:	8a 0d       	add	r24, r10
     70a:	91 1d       	adc	r25, r1
     70c:	0e 94 01 03 	call	0x602	; 0x602 <modulo>
     710:	8c 01       	movw	r16, r24
	int next_next_row = modulo((next_row+delta_row), 8);
     712:	68 e0       	ldi	r22, 0x08	; 8
     714:	70 e0       	ldi	r23, 0x00	; 0
     716:	c7 01       	movw	r24, r14
     718:	8c 0f       	add	r24, r28
     71a:	9d 1f       	adc	r25, r29
     71c:	0e 94 01 03 	call	0x602	; 0x602 <modulo>
     720:	7c 01       	movw	r14, r24
	int next_next_col = modulo((next_col+delta_col), 16);
     722:	60 e1       	ldi	r22, 0x10	; 16
     724:	70 e0       	ldi	r23, 0x00	; 0
     726:	c6 01       	movw	r24, r12
     728:	80 0f       	add	r24, r16
     72a:	91 1f       	adc	r25, r17
     72c:	0e 94 01 03 	call	0x602	; 0x602 <modulo>
     730:	6c 01       	movw	r12, r24

	paint_square(player_row, player_col);
     732:	6a 2d       	mov	r22, r10
     734:	8b 2d       	mov	r24, r11
     736:	0e 94 36 02 	call	0x46c	; 0x46c <paint_square>
	move_terminal_cursor(20,0);
     73a:	60 e0       	ldi	r22, 0x00	; 0
     73c:	70 e0       	ldi	r23, 0x00	; 0
     73e:	84 e1       	ldi	r24, 0x14	; 20
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	0e 94 3f 0a 	call	0x147e	; 0x147e <move_terminal_cursor>
	clear_to_end_of_line();
     746:	0e 94 65 0a 	call	0x14ca	; 0x14ca <clear_to_end_of_line>
	
	//checks for wall in front of player
	if (board[next_row][next_col] == WALL) {
     74a:	fe 01       	movw	r30, r28
     74c:	e2 95       	swap	r30
     74e:	f2 95       	swap	r31
     750:	f0 7f       	andi	r31, 0xF0	; 240
     752:	fe 27       	eor	r31, r30
     754:	e0 7f       	andi	r30, 0xF0	; 240
     756:	fe 27       	eor	r31, r30
     758:	e1 5f       	subi	r30, 0xF1	; 241
     75a:	fd 4f       	sbci	r31, 0xFD	; 253
     75c:	e0 0f       	add	r30, r16
     75e:	f1 1f       	adc	r31, r17
     760:	80 81       	ld	r24, Z
     762:	81 30       	cpi	r24, 0x01	; 1
     764:	31 f4       	brne	.+12     	; 0x772 <move_player+0xaa>
		display_terminal_message("wall");
     766:	80 e2       	ldi	r24, 0x20	; 32
     768:	91 e0       	ldi	r25, 0x01	; 1
     76a:	0e 94 78 02 	call	0x4f0	; 0x4f0 <display_terminal_message>
		return false;
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	d2 c0       	rjmp	.+420    	; 0x916 <__stack+0x17>
		
	//checks for filled target in front of player
	} else if (board[next_row][next_col] == (BOX | TARGET)) {
     772:	86 30       	cpi	r24, 0x06	; 6
     774:	09 f0       	breq	.+2      	; 0x778 <move_player+0xb0>
     776:	4b c0       	rjmp	.+150    	; 0x80e <__DATA_REGION_LENGTH__+0xe>
		if (board[next_next_row][next_next_col] == WALL) {
     778:	f7 01       	movw	r30, r14
     77a:	e2 95       	swap	r30
     77c:	f2 95       	swap	r31
     77e:	f0 7f       	andi	r31, 0xF0	; 240
     780:	fe 27       	eor	r31, r30
     782:	e0 7f       	andi	r30, 0xF0	; 240
     784:	fe 27       	eor	r31, r30
     786:	e1 5f       	subi	r30, 0xF1	; 241
     788:	fd 4f       	sbci	r31, 0xFD	; 253
     78a:	ec 0d       	add	r30, r12
     78c:	fd 1d       	adc	r31, r13
     78e:	80 81       	ld	r24, Z
     790:	81 30       	cpi	r24, 0x01	; 1
     792:	31 f4       	brne	.+12     	; 0x7a0 <move_player+0xd8>
			display_terminal_message("box_wall");
     794:	8c e1       	ldi	r24, 0x1C	; 28
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	0e 94 78 02 	call	0x4f0	; 0x4f0 <display_terminal_message>
			return false;
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	bb c0       	rjmp	.+374    	; 0x916 <__stack+0x17>
		}
		board[next_row][next_col] = TARGET;
     7a0:	fe 01       	movw	r30, r28
     7a2:	e2 95       	swap	r30
     7a4:	f2 95       	swap	r31
     7a6:	f0 7f       	andi	r31, 0xF0	; 240
     7a8:	fe 27       	eor	r31, r30
     7aa:	e0 7f       	andi	r30, 0xF0	; 240
     7ac:	fe 27       	eor	r31, r30
     7ae:	e1 5f       	subi	r30, 0xF1	; 241
     7b0:	fd 4f       	sbci	r31, 0xFD	; 253
     7b2:	e0 0f       	add	r30, r16
     7b4:	f1 1f       	adc	r31, r17
     7b6:	84 e0       	ldi	r24, 0x04	; 4
     7b8:	80 83       	st	Z, r24
		paint_square(next_row, next_col);
     7ba:	60 2f       	mov	r22, r16
     7bc:	8c 2f       	mov	r24, r28
     7be:	0e 94 36 02 	call	0x46c	; 0x46c <paint_square>
		update_terminal_display(next_row, MATRIX_NUM_ROWS-next_row, 1);
     7c2:	68 94       	set
     7c4:	aa 24       	eor	r10, r10
     7c6:	a3 f8       	bld	r10, 3
     7c8:	b1 2c       	mov	r11, r1
     7ca:	b5 01       	movw	r22, r10
     7cc:	6c 1b       	sub	r22, r28
     7ce:	7d 0b       	sbc	r23, r29
     7d0:	41 e0       	ldi	r20, 0x01	; 1
     7d2:	50 e0       	ldi	r21, 0x00	; 0
     7d4:	ce 01       	movw	r24, r28
     7d6:	0e 94 0a 03 	call	0x614	; 0x614 <update_terminal_display>
		board[next_next_row][next_next_col] = BOX;
     7da:	f7 01       	movw	r30, r14
     7dc:	e2 95       	swap	r30
     7de:	f2 95       	swap	r31
     7e0:	f0 7f       	andi	r31, 0xF0	; 240
     7e2:	fe 27       	eor	r31, r30
     7e4:	e0 7f       	andi	r30, 0xF0	; 240
     7e6:	fe 27       	eor	r31, r30
     7e8:	e1 5f       	subi	r30, 0xF1	; 241
     7ea:	fd 4f       	sbci	r31, 0xFD	; 253
     7ec:	ec 0d       	add	r30, r12
     7ee:	fd 1d       	adc	r31, r13
     7f0:	82 e0       	ldi	r24, 0x02	; 2
     7f2:	80 83       	st	Z, r24
		paint_square(next_next_row, next_next_col);
     7f4:	6c 2d       	mov	r22, r12
     7f6:	8e 2d       	mov	r24, r14
     7f8:	0e 94 36 02 	call	0x46c	; 0x46c <paint_square>
		update_terminal_display(next_next_row, MATRIX_NUM_ROWS-next_next_row, 1);
     7fc:	b5 01       	movw	r22, r10
     7fe:	6e 19       	sub	r22, r14
     800:	7f 09       	sbc	r23, r15
     802:	41 e0       	ldi	r20, 0x01	; 1
     804:	50 e0       	ldi	r21, 0x00	; 0
     806:	c7 01       	movw	r24, r14
     808:	0e 94 0a 03 	call	0x614	; 0x614 <update_terminal_display>
     80c:	6e c0       	rjmp	.+220    	; 0x8ea <__DATA_REGION_LENGTH__+0xea>
		
	//checks for box in front of player
	} else if (board[next_row][next_col] == BOX) {
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	09 f0       	breq	.+2      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     812:	6b c0       	rjmp	.+214    	; 0x8ea <__DATA_REGION_LENGTH__+0xea>
		if (board[next_next_row][next_next_col] == WALL) {
     814:	f7 01       	movw	r30, r14
     816:	e2 95       	swap	r30
     818:	f2 95       	swap	r31
     81a:	f0 7f       	andi	r31, 0xF0	; 240
     81c:	fe 27       	eor	r31, r30
     81e:	e0 7f       	andi	r30, 0xF0	; 240
     820:	fe 27       	eor	r31, r30
     822:	e1 5f       	subi	r30, 0xF1	; 241
     824:	fd 4f       	sbci	r31, 0xFD	; 253
     826:	ec 0d       	add	r30, r12
     828:	fd 1d       	adc	r31, r13
     82a:	80 81       	ld	r24, Z
     82c:	81 30       	cpi	r24, 0x01	; 1
     82e:	31 f4       	brne	.+12     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
			display_terminal_message("box_wall");
     830:	8c e1       	ldi	r24, 0x1C	; 28
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	0e 94 78 02 	call	0x4f0	; 0x4f0 <display_terminal_message>
			return false;
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	6d c0       	rjmp	.+218    	; 0x916 <__stack+0x17>
		} else if (board[next_next_row][next_next_col] == BOX) {
     83c:	82 30       	cpi	r24, 0x02	; 2
     83e:	31 f4       	brne	.+12     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
			display_terminal_message("box_box");
     840:	85 e2       	ldi	r24, 0x25	; 37
     842:	91 e0       	ldi	r25, 0x01	; 1
     844:	0e 94 78 02 	call	0x4f0	; 0x4f0 <display_terminal_message>
			return false;
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	65 c0       	rjmp	.+202    	; 0x916 <__stack+0x17>
		} else {
			board[next_row][next_col] = ROOM;
     84c:	fe 01       	movw	r30, r28
     84e:	e2 95       	swap	r30
     850:	f2 95       	swap	r31
     852:	f0 7f       	andi	r31, 0xF0	; 240
     854:	fe 27       	eor	r31, r30
     856:	e0 7f       	andi	r30, 0xF0	; 240
     858:	fe 27       	eor	r31, r30
     85a:	e1 5f       	subi	r30, 0xF1	; 241
     85c:	fd 4f       	sbci	r31, 0xFD	; 253
     85e:	e0 0f       	add	r30, r16
     860:	f1 1f       	adc	r31, r17
     862:	10 82       	st	Z, r1
			if (board[next_next_row][next_next_col] == TARGET) {
     864:	f7 01       	movw	r30, r14
     866:	e2 95       	swap	r30
     868:	f2 95       	swap	r31
     86a:	f0 7f       	andi	r31, 0xF0	; 240
     86c:	fe 27       	eor	r31, r30
     86e:	e0 7f       	andi	r30, 0xF0	; 240
     870:	fe 27       	eor	r31, r30
     872:	e1 5f       	subi	r30, 0xF1	; 241
     874:	fd 4f       	sbci	r31, 0xFD	; 253
     876:	ec 0d       	add	r30, r12
     878:	fd 1d       	adc	r31, r13
     87a:	80 81       	ld	r24, Z
     87c:	84 30       	cpi	r24, 0x04	; 4
     87e:	d9 f4       	brne	.+54     	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
				board[next_next_row][next_next_col] = (TARGET | BOX);
     880:	f7 01       	movw	r30, r14
     882:	e2 95       	swap	r30
     884:	f2 95       	swap	r31
     886:	f0 7f       	andi	r31, 0xF0	; 240
     888:	fe 27       	eor	r31, r30
     88a:	e0 7f       	andi	r30, 0xF0	; 240
     88c:	fe 27       	eor	r31, r30
     88e:	e1 5f       	subi	r30, 0xF1	; 241
     890:	fd 4f       	sbci	r31, 0xFD	; 253
     892:	ec 0d       	add	r30, r12
     894:	fd 1d       	adc	r31, r13
     896:	86 e0       	ldi	r24, 0x06	; 6
     898:	80 83       	st	Z, r24
				paint_square(next_next_row, next_next_col);
     89a:	6c 2d       	mov	r22, r12
     89c:	8e 2d       	mov	r24, r14
     89e:	0e 94 36 02 	call	0x46c	; 0x46c <paint_square>
				update_terminal_display(next_next_row, MATRIX_NUM_ROWS-next_next_row, 1);
     8a2:	68 e0       	ldi	r22, 0x08	; 8
     8a4:	70 e0       	ldi	r23, 0x00	; 0
     8a6:	6e 19       	sub	r22, r14
     8a8:	7f 09       	sbc	r23, r15
     8aa:	41 e0       	ldi	r20, 0x01	; 1
     8ac:	50 e0       	ldi	r21, 0x00	; 0
     8ae:	c7 01       	movw	r24, r14
     8b0:	0e 94 0a 03 	call	0x614	; 0x614 <update_terminal_display>
     8b4:	1a c0       	rjmp	.+52     	; 0x8ea <__DATA_REGION_LENGTH__+0xea>
			} else {
				board[next_next_row][next_next_col] = BOX;
     8b6:	f7 01       	movw	r30, r14
     8b8:	e2 95       	swap	r30
     8ba:	f2 95       	swap	r31
     8bc:	f0 7f       	andi	r31, 0xF0	; 240
     8be:	fe 27       	eor	r31, r30
     8c0:	e0 7f       	andi	r30, 0xF0	; 240
     8c2:	fe 27       	eor	r31, r30
     8c4:	e1 5f       	subi	r30, 0xF1	; 241
     8c6:	fd 4f       	sbci	r31, 0xFD	; 253
     8c8:	ec 0d       	add	r30, r12
     8ca:	fd 1d       	adc	r31, r13
     8cc:	82 e0       	ldi	r24, 0x02	; 2
     8ce:	80 83       	st	Z, r24
				paint_square(next_next_row, next_next_col);
     8d0:	6c 2d       	mov	r22, r12
     8d2:	8e 2d       	mov	r24, r14
     8d4:	0e 94 36 02 	call	0x46c	; 0x46c <paint_square>
				update_terminal_display(next_next_row, MATRIX_NUM_ROWS-next_next_row, 1);
     8d8:	68 e0       	ldi	r22, 0x08	; 8
     8da:	70 e0       	ldi	r23, 0x00	; 0
     8dc:	6e 19       	sub	r22, r14
     8de:	7f 09       	sbc	r23, r15
     8e0:	41 e0       	ldi	r20, 0x01	; 1
     8e2:	50 e0       	ldi	r21, 0x00	; 0
     8e4:	c7 01       	movw	r24, r14
     8e6:	0e 94 0a 03 	call	0x614	; 0x614 <update_terminal_display>
			}
		}
	}
	
	player_row = next_row;
     8ea:	8c 2f       	mov	r24, r28
     8ec:	c0 93 0e 02 	sts	0x020E, r28	; 0x80020e <player_row>
	player_col = next_col;
     8f0:	00 93 0d 02 	sts	0x020D, r16	; 0x80020d <player_col>
	paint_square(player_row, player_col);
     8f4:	60 2f       	mov	r22, r16
     8f6:	0e 94 36 02 	call	0x46c	; 0x46c <paint_square>
	update_terminal_display(player_row, MATRIX_NUM_ROWS-player_row, 1);
     8fa:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <player_row>
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	68 e0       	ldi	r22, 0x08	; 8
     902:	70 e0       	ldi	r23, 0x00	; 0
     904:	68 1b       	sub	r22, r24
     906:	79 0b       	sbc	r23, r25
     908:	41 e0       	ldi	r20, 0x01	; 1
     90a:	50 e0       	ldi	r21, 0x00	; 0
     90c:	0e 94 0a 03 	call	0x614	; 0x614 <update_terminal_display>
	flash_player();
     910:	0e 94 61 02 	call	0x4c2	; 0x4c2 <flash_player>
	return true;
     914:	81 e0       	ldi	r24, 0x01	; 1
}
     916:	df 91       	pop	r29
     918:	cf 91       	pop	r28
     91a:	1f 91       	pop	r17
     91c:	0f 91       	pop	r16
     91e:	ff 90       	pop	r15
     920:	ef 90       	pop	r14
     922:	df 90       	pop	r13
     924:	cf 90       	pop	r12
     926:	bf 90       	pop	r11
     928:	af 90       	pop	r10
     92a:	08 95       	ret

0000092c <draw_terminal_board>:
int modulo(int x,int y){
	return (x % y + y) % y;
}

//Paints the current board on the terminal display
void draw_terminal_board(void) {
     92c:	0f 93       	push	r16
     92e:	1f 93       	push	r17
     930:	cf 93       	push	r28
     932:	df 93       	push	r29
	int GAME_BOARD_ROW = 1;
	int GAME_BOARD_COL = 1;
	for (int row = MATRIX_NUM_ROWS-1; row >= 0; row--) {
     934:	c7 e0       	ldi	r28, 0x07	; 7
     936:	d0 e0       	ldi	r29, 0x00	; 0
	return (x % y + y) % y;
}

//Paints the current board on the terminal display
void draw_terminal_board(void) {
	int GAME_BOARD_ROW = 1;
     938:	01 e0       	ldi	r16, 0x01	; 1
     93a:	10 e0       	ldi	r17, 0x00	; 0
	int GAME_BOARD_COL = 1;
	for (int row = MATRIX_NUM_ROWS-1; row >= 0; row--) {
     93c:	0d c0       	rjmp	.+26     	; 0x958 <draw_terminal_board+0x2c>
		update_terminal_display(row, GAME_BOARD_ROW, GAME_BOARD_COL);
     93e:	41 e0       	ldi	r20, 0x01	; 1
     940:	50 e0       	ldi	r21, 0x00	; 0
     942:	b8 01       	movw	r22, r16
     944:	ce 01       	movw	r24, r28
     946:	0e 94 0a 03 	call	0x614	; 0x614 <update_terminal_display>
		printf("\n");
     94a:	8a e0       	ldi	r24, 0x0A	; 10
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	0e 94 a5 0c 	call	0x194a	; 0x194a <putchar>
		GAME_BOARD_ROW++;
     952:	0f 5f       	subi	r16, 0xFF	; 255
     954:	1f 4f       	sbci	r17, 0xFF	; 255

//Paints the current board on the terminal display
void draw_terminal_board(void) {
	int GAME_BOARD_ROW = 1;
	int GAME_BOARD_COL = 1;
	for (int row = MATRIX_NUM_ROWS-1; row >= 0; row--) {
     956:	21 97       	sbiw	r28, 0x01	; 1
     958:	dd 23       	and	r29, r29
     95a:	8c f7       	brge	.-30     	; 0x93e <draw_terminal_board+0x12>
		update_terminal_display(row, GAME_BOARD_ROW, GAME_BOARD_COL);
		printf("\n");
		GAME_BOARD_ROW++;
	}
}
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	1f 91       	pop	r17
     962:	0f 91       	pop	r16
     964:	08 95       	ret

00000966 <initialise_game>:
	}
}

// This function initialises the global variables used to store the game
// state, and renders the initial game display.
void initialise_game(void) {
     966:	cf 93       	push	r28
     968:	df 93       	push	r29
	#undef W
	#undef T
	#undef B

	// Set the initial player location (for level 1).
	player_row = 5;
     96a:	85 e0       	ldi	r24, 0x05	; 5
     96c:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <player_row>
	player_col = 2;
     970:	82 e0       	ldi	r24, 0x02	; 2
     972:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <player_col>

	// Make the player icon initially invisible.
	player_visible = false;
     976:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <player_visible>

	// Copy the starting layout (level 1 map) to the board array, and flip
	// all the rows.
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     97a:	a0 e0       	ldi	r26, 0x00	; 0
     97c:	27 c0       	rjmp	.+78     	; 0x9cc <initialise_game+0x66>
	{
		for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
		{
			board[MATRIX_NUM_ROWS - 1 - row][col] =
     97e:	8a 2f       	mov	r24, r26
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	27 e0       	ldi	r18, 0x07	; 7
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	28 1b       	sub	r18, r24
     988:	39 0b       	sbc	r19, r25
				lv1_layout[row][col];
     98a:	46 2f       	mov	r20, r22
     98c:	50 e0       	ldi	r21, 0x00	; 0
     98e:	fc 01       	movw	r30, r24
     990:	e2 95       	swap	r30
     992:	f2 95       	swap	r31
     994:	f0 7f       	andi	r31, 0xF0	; 240
     996:	fe 27       	eor	r31, r30
     998:	e0 7f       	andi	r30, 0xF0	; 240
     99a:	fe 27       	eor	r31, r30
     99c:	ef 58       	subi	r30, 0x8F	; 143
     99e:	fe 4f       	sbci	r31, 0xFE	; 254
     9a0:	e4 0f       	add	r30, r20
     9a2:	f5 1f       	adc	r31, r21
     9a4:	70 81       	ld	r23, Z
	// all the rows.
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
	{
		for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
		{
			board[MATRIX_NUM_ROWS - 1 - row][col] =
     9a6:	c9 01       	movw	r24, r18
     9a8:	82 95       	swap	r24
     9aa:	92 95       	swap	r25
     9ac:	90 7f       	andi	r25, 0xF0	; 240
     9ae:	98 27       	eor	r25, r24
     9b0:	80 7f       	andi	r24, 0xF0	; 240
     9b2:	98 27       	eor	r25, r24
     9b4:	81 5f       	subi	r24, 0xF1	; 241
     9b6:	9d 4f       	sbci	r25, 0xFD	; 253
     9b8:	fc 01       	movw	r30, r24
     9ba:	e4 0f       	add	r30, r20
     9bc:	f5 1f       	adc	r31, r21
     9be:	70 83       	st	Z, r23

	// Copy the starting layout (level 1 map) to the board array, and flip
	// all the rows.
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
	{
		for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
     9c0:	6f 5f       	subi	r22, 0xFF	; 255
     9c2:	01 c0       	rjmp	.+2      	; 0x9c6 <initialise_game+0x60>
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	60 31       	cpi	r22, 0x10	; 16
     9c8:	d0 f2       	brcs	.-76     	; 0x97e <initialise_game+0x18>
	// Make the player icon initially invisible.
	player_visible = false;

	// Copy the starting layout (level 1 map) to the board array, and flip
	// all the rows.
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     9ca:	af 5f       	subi	r26, 0xFF	; 255
     9cc:	a8 30       	cpi	r26, 0x08	; 8
     9ce:	d0 f3       	brcs	.-12     	; 0x9c4 <initialise_game+0x5e>
     9d0:	d0 e0       	ldi	r29, 0x00	; 0
     9d2:	0a c0       	rjmp	.+20     	; 0x9e8 <initialise_game+0x82>
	// Draw the game board (map).
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
	{
		for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
		{
			paint_square(row, col);
     9d4:	6c 2f       	mov	r22, r28
     9d6:	8d 2f       	mov	r24, r29
     9d8:	0e 94 36 02 	call	0x46c	; 0x46c <paint_square>
	}

	// Draw the game board (map).
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
	{
		for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
     9dc:	cf 5f       	subi	r28, 0xFF	; 255
     9de:	01 c0       	rjmp	.+2      	; 0x9e2 <initialise_game+0x7c>
     9e0:	c0 e0       	ldi	r28, 0x00	; 0
     9e2:	c0 31       	cpi	r28, 0x10	; 16
     9e4:	b8 f3       	brcs	.-18     	; 0x9d4 <initialise_game+0x6e>
				lv1_layout[row][col];
		}
	}

	// Draw the game board (map).
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     9e6:	df 5f       	subi	r29, 0xFF	; 255
     9e8:	d8 30       	cpi	r29, 0x08	; 8
     9ea:	d0 f3       	brcs	.-12     	; 0x9e0 <initialise_game+0x7a>
			paint_square(row, col);
		}
	}
	
	//Draw the game board on the terminal
	draw_terminal_board();
     9ec:	0e 94 96 04 	call	0x92c	; 0x92c <draw_terminal_board>
}
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	08 95       	ret

000009f6 <init_ledmatrix>:
}

void ledmatrix_shift_display_down(void)
{
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     9f6:	80 e8       	ldi	r24, 0x80	; 128
     9f8:	0e 94 49 08 	call	0x1092	; 0x1092 <spi_setup_master>
     9fc:	08 95       	ret

000009fe <ledmatrix_update_pixel>:
     9fe:	1f 93       	push	r17
     a00:	cf 93       	push	r28
     a02:	df 93       	push	r29
     a04:	60 31       	cpi	r22, 0x10	; 16
     a06:	b0 f4       	brcc	.+44     	; 0xa34 <ledmatrix_update_pixel+0x36>
     a08:	88 30       	cpi	r24, 0x08	; 8
     a0a:	a0 f4       	brcc	.+40     	; 0xa34 <ledmatrix_update_pixel+0x36>
     a0c:	14 2f       	mov	r17, r20
     a0e:	d6 2f       	mov	r29, r22
     a10:	c8 2f       	mov	r28, r24
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	0e 94 75 08 	call	0x10ea	; 0x10ea <spi_send_byte>
     a18:	8c 2f       	mov	r24, r28
     a1a:	87 70       	andi	r24, 0x07	; 7
     a1c:	20 e1       	ldi	r18, 0x10	; 16
     a1e:	82 9f       	mul	r24, r18
     a20:	c0 01       	movw	r24, r0
     a22:	11 24       	eor	r1, r1
     a24:	6d 2f       	mov	r22, r29
     a26:	6f 70       	andi	r22, 0x0F	; 15
     a28:	86 2b       	or	r24, r22
     a2a:	0e 94 75 08 	call	0x10ea	; 0x10ea <spi_send_byte>
     a2e:	81 2f       	mov	r24, r17
     a30:	0e 94 75 08 	call	0x10ea	; 0x10ea <spi_send_byte>
     a34:	df 91       	pop	r29
     a36:	cf 91       	pop	r28
     a38:	1f 91       	pop	r17
     a3a:	08 95       	ret

00000a3c <ledmatrix_update_column>:
     a3c:	0f 93       	push	r16
     a3e:	1f 93       	push	r17
     a40:	cf 93       	push	r28
     a42:	80 31       	cpi	r24, 0x10	; 16
     a44:	a0 f4       	brcc	.+40     	; 0xa6e <ledmatrix_update_column+0x32>
     a46:	8b 01       	movw	r16, r22
     a48:	c8 2f       	mov	r28, r24
     a4a:	83 e0       	ldi	r24, 0x03	; 3
     a4c:	0e 94 75 08 	call	0x10ea	; 0x10ea <spi_send_byte>
     a50:	8c 2f       	mov	r24, r28
     a52:	8f 70       	andi	r24, 0x0F	; 15
     a54:	0e 94 75 08 	call	0x10ea	; 0x10ea <spi_send_byte>
     a58:	c0 e0       	ldi	r28, 0x00	; 0
     a5a:	07 c0       	rjmp	.+14     	; 0xa6a <ledmatrix_update_column+0x2e>
     a5c:	f8 01       	movw	r30, r16
     a5e:	ec 0f       	add	r30, r28
     a60:	f1 1d       	adc	r31, r1
     a62:	80 81       	ld	r24, Z
     a64:	0e 94 75 08 	call	0x10ea	; 0x10ea <spi_send_byte>
     a68:	cf 5f       	subi	r28, 0xFF	; 255
     a6a:	c8 30       	cpi	r28, 0x08	; 8
     a6c:	b8 f3       	brcs	.-18     	; 0xa5c <ledmatrix_update_column+0x20>
     a6e:	cf 91       	pop	r28
     a70:	1f 91       	pop	r17
     a72:	0f 91       	pop	r16
     a74:	08 95       	ret

00000a76 <ledmatrix_shift_display_left>:
     a76:	84 e0       	ldi	r24, 0x04	; 4
     a78:	0e 94 75 08 	call	0x10ea	; 0x10ea <spi_send_byte>
     a7c:	82 e0       	ldi	r24, 0x02	; 2
     a7e:	0e 94 75 08 	call	0x10ea	; 0x10ea <spi_send_byte>
     a82:	08 95       	ret

00000a84 <ledmatrix_clear>:
}

void ledmatrix_clear(void)
{
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     a84:	8f e0       	ldi	r24, 0x0F	; 15
     a86:	0e 94 75 08 	call	0x10ea	; 0x10ea <spi_send_byte>
     a8a:	08 95       	ret

00000a8c <initialise_hardware>:
	}
	handle_game_over();
}

void increment_step_counter(void) {
	step_counter++;
     a8c:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <init_ledmatrix>
     a90:	0e 94 b1 01 	call	0x362	; 0x362 <init_buttons>
     a94:	40 e0       	ldi	r20, 0x00	; 0
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	7b e4       	ldi	r23, 0x4B	; 75
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	0e 94 f6 07 	call	0xfec	; 0xfec <init_serial_stdio>
     aa2:	0e 94 84 0a 	call	0x1508	; 0x1508 <init_timer0>
     aa6:	0e 94 cf 0a 	call	0x159e	; 0x159e <init_timer1>
     aaa:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <init_timer2>
     aae:	78 94       	sei
     ab0:	08 95       	ret

00000ab2 <start_screen>:
     ab2:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <hide_cursor>
     ab6:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <normal_display_mode>
     aba:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <clear_terminal>
     abe:	65 e0       	ldi	r22, 0x05	; 5
     ac0:	83 e0       	ldi	r24, 0x03	; 3
     ac2:	0e 94 19 0a 	call	0x1432	; 0x1432 <display_terminal_title>
     ac6:	65 e0       	ldi	r22, 0x05	; 5
     ac8:	70 e0       	ldi	r23, 0x00	; 0
     aca:	8b e0       	ldi	r24, 0x0B	; 11
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	0e 94 3f 0a 	call	0x147e	; 0x147e <move_terminal_cursor>
     ad2:	86 e1       	ldi	r24, 0x16	; 22
     ad4:	91 e0       	ldi	r25, 0x01	; 1
     ad6:	9f 93       	push	r25
     ad8:	8f 93       	push	r24
     ada:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <printf_P>
     ade:	0e 94 64 09 	call	0x12c8	; 0x12c8 <setup_start_screen>
     ae2:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <clear_button_presses>
     ae6:	0f 90       	pop	r0
     ae8:	0f 90       	pop	r0
     aea:	0e 94 c3 01 	call	0x386	; 0x386 <button_pushed>
     aee:	8f 3f       	cpi	r24, 0xFF	; 255
     af0:	99 f4       	brne	.+38     	; 0xb18 <start_screen+0x66>
     af2:	0e 94 3d 08 	call	0x107a	; 0x107a <serial_input_available>
     af6:	88 23       	and	r24, r24
     af8:	61 f0       	breq	.+24     	; 0xb12 <start_screen+0x60>
     afa:	80 91 b5 03 	lds	r24, 0x03B5	; 0x8003b5 <__iob>
     afe:	90 91 b6 03 	lds	r25, 0x03B6	; 0x8003b6 <__iob+0x1>
     b02:	0e 94 ef 0b 	call	0x17de	; 0x17de <fgetc>
     b06:	83 37       	cpi	r24, 0x73	; 115
     b08:	91 05       	cpc	r25, r1
     b0a:	31 f0       	breq	.+12     	; 0xb18 <start_screen+0x66>
     b0c:	83 35       	cpi	r24, 0x53	; 83
     b0e:	91 05       	cpc	r25, r1
     b10:	19 f0       	breq	.+6      	; 0xb18 <start_screen+0x66>
     b12:	0e 94 6e 09 	call	0x12dc	; 0x12dc <update_start_screen>
     b16:	e9 cf       	rjmp	.-46     	; 0xaea <start_screen+0x38>
     b18:	08 95       	ret

00000b1a <new_game>:
     b1a:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <hide_cursor>
     b1e:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <clear_terminal>
     b22:	0e 94 b3 04 	call	0x966	; 0x966 <initialise_game>
     b26:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <clear_button_presses>
     b2a:	0e 94 44 08 	call	0x1088	; 0x1088 <clear_serial_input_buffer>
     b2e:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <step_counter>
     b32:	08 95       	ret

00000b34 <handle_game_over>:
}

void handle_game_over(void)
{
	move_terminal_cursor(14, 10);
     b34:	6a e0       	ldi	r22, 0x0A	; 10
     b36:	70 e0       	ldi	r23, 0x00	; 0
     b38:	8e e0       	ldi	r24, 0x0E	; 14
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	0e 94 3f 0a 	call	0x147e	; 0x147e <move_terminal_cursor>
	printf_P(PSTR("GAME OVER"));
     b40:	8c e0       	ldi	r24, 0x0C	; 12
     b42:	91 e0       	ldi	r25, 0x01	; 1
     b44:	9f 93       	push	r25
     b46:	8f 93       	push	r24
     b48:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <printf_P>
	move_terminal_cursor(15, 10);
     b4c:	6a e0       	ldi	r22, 0x0A	; 10
     b4e:	70 e0       	ldi	r23, 0x00	; 0
     b50:	8f e0       	ldi	r24, 0x0F	; 15
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	0e 94 3f 0a 	call	0x147e	; 0x147e <move_terminal_cursor>
	printf_P(PSTR("Press 'r'/'R' to restart, or 'e'/'E' to exit"));
     b58:	8f ed       	ldi	r24, 0xDF	; 223
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	9f 93       	push	r25
     b5e:	8f 93       	push	r24
     b60:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <printf_P>
     b64:	0f 90       	pop	r0
     b66:	0f 90       	pop	r0
     b68:	0f 90       	pop	r0
     b6a:	0f 90       	pop	r0
	while (1)
	{
		// Get serial input. If no serial input is ready, serial_input
		// would be -1 (not a valid character).
		int serial_input = -1;
		if (serial_input_available())
     b6c:	0e 94 3d 08 	call	0x107a	; 0x107a <serial_input_available>
     b70:	88 23       	and	r24, r24
     b72:	e1 f3       	breq	.-8      	; 0xb6c <handle_game_over+0x38>
		{
			serial_input = fgetc(stdin);
     b74:	80 91 b5 03 	lds	r24, 0x03B5	; 0x8003b5 <__iob>
     b78:	90 91 b6 03 	lds	r25, 0x03B6	; 0x8003b6 <__iob+0x1>
     b7c:	0e 94 ef 0b 	call	0x17de	; 0x17de <fgetc>
		{
			// <YOUR CODE HERE>
		}
		// Now check for other possible inputs.
		
	}
     b80:	f5 cf       	rjmp	.-22     	; 0xb6c <handle_game_over+0x38>

00000b82 <play_game>:
	//Reset step counter
	step_counter = 0;
}

void play_game(void)
{
     b82:	cf 93       	push	r28
     b84:	df 93       	push	r29
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62
     b8a:	6e 97       	sbiw	r28, 0x1e	; 30
     b8c:	0f b6       	in	r0, 0x3f	; 63
     b8e:	f8 94       	cli
     b90:	de bf       	out	0x3e, r29	; 62
     b92:	0f be       	out	0x3f, r0	; 63
     b94:	cd bf       	out	0x3d, r28	; 61
	//Initialise step counter
	uint8_t seven_seg[10] = {63,6,91,79,102,109,125,7,127,111};
     b96:	8a e0       	ldi	r24, 0x0A	; 10
     b98:	e2 e1       	ldi	r30, 0x12	; 18
     b9a:	f1 e0       	ldi	r31, 0x01	; 1
     b9c:	de 01       	movw	r26, r28
     b9e:	11 96       	adiw	r26, 0x01	; 1
     ba0:	01 90       	ld	r0, Z+
     ba2:	0d 92       	st	X+, r0
     ba4:	8a 95       	dec	r24
     ba6:	e1 f7       	brne	.-8      	; 0xba0 <play_game+0x1e>
	step_counter = 0;
     ba8:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <step_counter>
	uint8_t value = 0;
	uint8_t digit = 0; /* 0 = right, 1 = left */
	DDRA = 0xFF;
     bac:	8f ef       	ldi	r24, 0xFF	; 255
     bae:	81 b9       	out	0x01, r24	; 1
	DDRC = (1 << 0);
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	87 b9       	out	0x07, r24	; 7
	
	uint32_t last_flash_time = get_current_time();
     bb4:	0e 94 9a 0a 	call	0x1534	; 0x1534 <get_current_time>
     bb8:	4b 01       	movw	r8, r22
     bba:	5c 01       	movw	r10, r24
	
	int play_time = 0;
     bbc:	00 e0       	ldi	r16, 0x00	; 0
     bbe:	10 e0       	ldi	r17, 0x00	; 0
{
	//Initialise step counter
	uint8_t seven_seg[10] = {63,6,91,79,102,109,125,7,127,111};
	step_counter = 0;
	uint8_t value = 0;
	uint8_t digit = 0; /* 0 = right, 1 = left */
     bc0:	f1 2c       	mov	r15, r1
	
	int play_time = 0;
	char play_time_str[20];

	// We play the game until it's over.
	while (!is_game_over())
     bc2:	e5 c0       	rjmp	.+458    	; 0xd8e <play_game+0x20c>
	{
		// We need to check if any buttons have been pushed, this will
		// be NO_BUTTON_PUSHED if no button has been pushed. If button
		// 0 has been pushed, we get BUTTON0_PUSHED, and likewise, if
		// button 1 has been pushed, we get BUTTON1_PUSHED, and so on.
		ButtonState btn = button_pushed();
     bc4:	0e 94 c3 01 	call	0x386	; 0x386 <button_pushed>
     bc8:	e8 2e       	mov	r14, r24
		int serial_input = -1;

		if (serial_input_available()) {
     bca:	0e 94 3d 08 	call	0x107a	; 0x107a <serial_input_available>
     bce:	88 23       	and	r24, r24
     bd0:	39 f0       	breq	.+14     	; 0xbe0 <play_game+0x5e>
			serial_input = fgetc(stdin);
     bd2:	80 91 b5 03 	lds	r24, 0x03B5	; 0x8003b5 <__iob>
     bd6:	90 91 b6 03 	lds	r25, 0x03B6	; 0x8003b6 <__iob+0x1>
     bda:	0e 94 ef 0b 	call	0x17de	; 0x17de <fgetc>
     bde:	02 c0       	rjmp	.+4      	; 0xbe4 <play_game+0x62>
		// We need to check if any buttons have been pushed, this will
		// be NO_BUTTON_PUSHED if no button has been pushed. If button
		// 0 has been pushed, we get BUTTON0_PUSHED, and likewise, if
		// button 1 has been pushed, we get BUTTON1_PUSHED, and so on.
		ButtonState btn = button_pushed();
		int serial_input = -1;
     be0:	8f ef       	ldi	r24, 0xFF	; 255
     be2:	9f ef       	ldi	r25, 0xFF	; 255

		if (serial_input_available()) {
			serial_input = fgetc(stdin);
		}

		if (btn == BUTTON0_PUSHED || tolower(serial_input) == 'd') {
     be4:	ee 20       	and	r14, r14
     be6:	29 f0       	breq	.+10     	; 0xbf2 <play_game+0x70>
     be8:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <tolower>
     bec:	84 36       	cpi	r24, 0x64	; 100
     bee:	91 05       	cpc	r25, r1
     bf0:	81 f4       	brne	.+32     	; 0xc12 <play_game+0x90>
			if (move_player(0, 1)) {step_counter++;}
     bf2:	61 e0       	ldi	r22, 0x01	; 1
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	0e 94 64 03 	call	0x6c8	; 0x6c8 <move_player>
     bfa:	88 23       	and	r24, r24
     bfc:	29 f0       	breq	.+10     	; 0xc08 <play_game+0x86>
     bfe:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <step_counter>
     c02:	8f 5f       	subi	r24, 0xFF	; 255
     c04:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <step_counter>
			last_flash_time = get_current_time();
     c08:	0e 94 9a 0a 	call	0x1534	; 0x1534 <get_current_time>
     c0c:	4b 01       	movw	r8, r22
     c0e:	5c 01       	movw	r10, r24
     c10:	41 c0       	rjmp	.+130    	; 0xc94 <play_game+0x112>
		} else if (btn == BUTTON1_PUSHED || tolower(serial_input) == 's') {
     c12:	21 e0       	ldi	r18, 0x01	; 1
     c14:	e2 16       	cp	r14, r18
     c16:	19 f0       	breq	.+6      	; 0xc1e <play_game+0x9c>
     c18:	83 37       	cpi	r24, 0x73	; 115
     c1a:	91 05       	cpc	r25, r1
     c1c:	81 f4       	brne	.+32     	; 0xc3e <play_game+0xbc>
			if (move_player(-1, 0)) {step_counter++;}
     c1e:	60 e0       	ldi	r22, 0x00	; 0
     c20:	8f ef       	ldi	r24, 0xFF	; 255
     c22:	0e 94 64 03 	call	0x6c8	; 0x6c8 <move_player>
     c26:	88 23       	and	r24, r24
     c28:	29 f0       	breq	.+10     	; 0xc34 <play_game+0xb2>
     c2a:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <step_counter>
     c2e:	8f 5f       	subi	r24, 0xFF	; 255
     c30:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <step_counter>
			last_flash_time = get_current_time();
     c34:	0e 94 9a 0a 	call	0x1534	; 0x1534 <get_current_time>
     c38:	4b 01       	movw	r8, r22
     c3a:	5c 01       	movw	r10, r24
     c3c:	2b c0       	rjmp	.+86     	; 0xc94 <play_game+0x112>
		} else if (btn == BUTTON2_PUSHED || tolower(serial_input) == 'w') {
     c3e:	22 e0       	ldi	r18, 0x02	; 2
     c40:	e2 16       	cp	r14, r18
     c42:	19 f0       	breq	.+6      	; 0xc4a <play_game+0xc8>
     c44:	87 37       	cpi	r24, 0x77	; 119
     c46:	91 05       	cpc	r25, r1
     c48:	81 f4       	brne	.+32     	; 0xc6a <play_game+0xe8>
			if (move_player(1, 0)) {step_counter++;}
     c4a:	60 e0       	ldi	r22, 0x00	; 0
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	0e 94 64 03 	call	0x6c8	; 0x6c8 <move_player>
     c52:	88 23       	and	r24, r24
     c54:	29 f0       	breq	.+10     	; 0xc60 <play_game+0xde>
     c56:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <step_counter>
     c5a:	8f 5f       	subi	r24, 0xFF	; 255
     c5c:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <step_counter>
			last_flash_time = get_current_time();
     c60:	0e 94 9a 0a 	call	0x1534	; 0x1534 <get_current_time>
     c64:	4b 01       	movw	r8, r22
     c66:	5c 01       	movw	r10, r24
     c68:	15 c0       	rjmp	.+42     	; 0xc94 <play_game+0x112>
		} else if (btn == BUTTON3_PUSHED || tolower(serial_input) == 'a') {
     c6a:	23 e0       	ldi	r18, 0x03	; 3
     c6c:	e2 16       	cp	r14, r18
     c6e:	19 f0       	breq	.+6      	; 0xc76 <play_game+0xf4>
     c70:	81 36       	cpi	r24, 0x61	; 97
     c72:	91 05       	cpc	r25, r1
     c74:	79 f4       	brne	.+30     	; 0xc94 <play_game+0x112>
			if (move_player(0, -1)) {step_counter++;}
     c76:	6f ef       	ldi	r22, 0xFF	; 255
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	0e 94 64 03 	call	0x6c8	; 0x6c8 <move_player>
     c7e:	88 23       	and	r24, r24
     c80:	29 f0       	breq	.+10     	; 0xc8c <play_game+0x10a>
     c82:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <step_counter>
     c86:	8f 5f       	subi	r24, 0xFF	; 255
     c88:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <step_counter>
			last_flash_time = get_current_time();
     c8c:	0e 94 9a 0a 	call	0x1534	; 0x1534 <get_current_time>
     c90:	4b 01       	movw	r8, r22
     c92:	5c 01       	movw	r10, r24
		}

		uint32_t current_time = get_current_time();
     c94:	0e 94 9a 0a 	call	0x1534	; 0x1534 <get_current_time>
     c98:	2b 01       	movw	r4, r22
     c9a:	3c 01       	movw	r6, r24
		if (current_time >= last_flash_time + 200)
     c9c:	d5 01       	movw	r26, r10
     c9e:	c4 01       	movw	r24, r8
     ca0:	88 53       	subi	r24, 0x38	; 56
     ca2:	9f 4f       	sbci	r25, 0xFF	; 255
     ca4:	af 4f       	sbci	r26, 0xFF	; 255
     ca6:	bf 4f       	sbci	r27, 0xFF	; 255
     ca8:	48 16       	cp	r4, r24
     caa:	59 06       	cpc	r5, r25
     cac:	6a 06       	cpc	r6, r26
     cae:	7b 06       	cpc	r7, r27
     cb0:	20 f0       	brcs	.+8      	; 0xcba <play_game+0x138>
		{
			// 200ms (0.2 seconds) has passed since the last time
			// we flashed the player icon, flash it now.
			flash_player();
     cb2:	0e 94 61 02 	call	0x4c2	; 0x4c2 <flash_player>

			// Update the most recent icon flash time.
			last_flash_time = current_time;
     cb6:	53 01       	movw	r10, r6
     cb8:	42 01       	movw	r8, r4
		}
		
		//Display step counter on seven segment display
		if(digit == 0) {
     cba:	f1 10       	cpse	r15, r1
     cbc:	11 c0       	rjmp	.+34     	; 0xce0 <play_game+0x15e>
			value = step_counter % 10;
     cbe:	20 91 a0 02 	lds	r18, 0x02A0	; 0x8002a0 <step_counter>
     cc2:	8d ec       	ldi	r24, 0xCD	; 205
     cc4:	28 9f       	mul	r18, r24
     cc6:	81 2d       	mov	r24, r1
     cc8:	11 24       	eor	r1, r1
     cca:	86 95       	lsr	r24
     ccc:	86 95       	lsr	r24
     cce:	86 95       	lsr	r24
     cd0:	88 0f       	add	r24, r24
     cd2:	98 2f       	mov	r25, r24
     cd4:	99 0f       	add	r25, r25
     cd6:	99 0f       	add	r25, r25
     cd8:	89 0f       	add	r24, r25
     cda:	28 1b       	sub	r18, r24
     cdc:	82 2f       	mov	r24, r18
     cde:	16 c0       	rjmp	.+44     	; 0xd0c <play_game+0x18a>
			} else {
			value = (step_counter / 10) % 10;
     ce0:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <step_counter>
     ce4:	8d ec       	ldi	r24, 0xCD	; 205
     ce6:	98 9f       	mul	r25, r24
     ce8:	91 2d       	mov	r25, r1
     cea:	11 24       	eor	r1, r1
     cec:	96 95       	lsr	r25
     cee:	96 95       	lsr	r25
     cf0:	96 95       	lsr	r25
     cf2:	98 9f       	mul	r25, r24
     cf4:	81 2d       	mov	r24, r1
     cf6:	11 24       	eor	r1, r1
     cf8:	86 95       	lsr	r24
     cfa:	86 95       	lsr	r24
     cfc:	86 95       	lsr	r24
     cfe:	88 0f       	add	r24, r24
     d00:	28 2f       	mov	r18, r24
     d02:	22 0f       	add	r18, r18
     d04:	22 0f       	add	r18, r18
     d06:	82 0f       	add	r24, r18
     d08:	98 1b       	sub	r25, r24
     d0a:	89 2f       	mov	r24, r25
		}
		PORTA = seven_seg[value];
     d0c:	e1 e0       	ldi	r30, 0x01	; 1
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	ec 0f       	add	r30, r28
     d12:	fd 1f       	adc	r31, r29
     d14:	e8 0f       	add	r30, r24
     d16:	f1 1d       	adc	r31, r1
     d18:	80 81       	ld	r24, Z
     d1a:	82 b9       	out	0x02, r24	; 2
		PORTC = digit;
     d1c:	f8 b8       	out	0x08, r15	; 8
		/* Change the digit flag for next time. if 0 becomes 1, if 1 becomes 0. */
		digit = 1 - digit;
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	8f 19       	sub	r24, r15
     d22:	f8 2e       	mov	r15, r24
		
		//Increment timer if necessary
		if (get_current_time() % 1000 == 0) {
     d24:	0e 94 9a 0a 	call	0x1534	; 0x1534 <get_current_time>
     d28:	28 ee       	ldi	r18, 0xE8	; 232
     d2a:	33 e0       	ldi	r19, 0x03	; 3
     d2c:	40 e0       	ldi	r20, 0x00	; 0
     d2e:	50 e0       	ldi	r21, 0x00	; 0
     d30:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <__udivmodsi4>
     d34:	67 2b       	or	r22, r23
     d36:	68 2b       	or	r22, r24
     d38:	69 2b       	or	r22, r25
     d3a:	49 f5       	brne	.+82     	; 0xd8e <play_game+0x20c>
			move_terminal_cursor(22, 1);
     d3c:	61 e0       	ldi	r22, 0x01	; 1
     d3e:	70 e0       	ldi	r23, 0x00	; 0
     d40:	86 e1       	ldi	r24, 0x16	; 22
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	0e 94 3f 0a 	call	0x147e	; 0x147e <move_terminal_cursor>
			sprintf(play_time_str, "%d", play_time);
     d48:	1f 93       	push	r17
     d4a:	0f 93       	push	r16
     d4c:	81 ef       	ldi	r24, 0xF1	; 241
     d4e:	91 e0       	ldi	r25, 0x01	; 1
     d50:	9f 93       	push	r25
     d52:	8f 93       	push	r24
     d54:	3e 01       	movw	r6, r28
     d56:	8b e0       	ldi	r24, 0x0B	; 11
     d58:	68 0e       	add	r6, r24
     d5a:	71 1c       	adc	r7, r1
     d5c:	7f 92       	push	r7
     d5e:	6f 92       	push	r6
     d60:	0e 94 ac 0c 	call	0x1958	; 0x1958 <sprintf>
			printf("%s", play_time_str);
     d64:	7f 92       	push	r7
     d66:	6f 92       	push	r6
     d68:	84 ef       	ldi	r24, 0xF4	; 244
     d6a:	91 e0       	ldi	r25, 0x01	; 1
     d6c:	9f 93       	push	r25
     d6e:	8f 93       	push	r24
     d70:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <printf>
			play_time++;
     d74:	0f 5f       	subi	r16, 0xFF	; 255
     d76:	1f 4f       	sbci	r17, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d78:	8f e1       	ldi	r24, 0x1F	; 31
     d7a:	9e e4       	ldi	r25, 0x4E	; 78
     d7c:	01 97       	sbiw	r24, 0x01	; 1
     d7e:	f1 f7       	brne	.-4      	; 0xd7c <play_game+0x1fa>
     d80:	00 c0       	rjmp	.+0      	; 0xd82 <play_game+0x200>
     d82:	00 00       	nop
     d84:	0f b6       	in	r0, 0x3f	; 63
     d86:	f8 94       	cli
     d88:	de bf       	out	0x3e, r29	; 62
     d8a:	0f be       	out	0x3f, r0	; 63
     d8c:	cd bf       	out	0x3d, r28	; 61
	
	int play_time = 0;
	char play_time_str[20];

	// We play the game until it's over.
	while (!is_game_over())
     d8e:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <is_game_over>
     d92:	88 23       	and	r24, r24
     d94:	09 f4       	brne	.+2      	; 0xd98 <play_game+0x216>
     d96:	16 cf       	rjmp	.-468    	; 0xbc4 <play_game+0x42>
			printf("%s", play_time_str);
			play_time++;
			_delay_ms(10);
		}
	}
	handle_game_over();
     d98:	0e 94 9a 05 	call	0xb34	; 0xb34 <handle_game_over>

00000d9c <main>:

/////////////////////////////// main //////////////////////////////////
int main(void)
{
	//Set a seed for the random number generator
	srand(get_current_time());
     d9c:	0e 94 9a 0a 	call	0x1534	; 0x1534 <get_current_time>
     da0:	cb 01       	movw	r24, r22
     da2:	0e 94 ca 0b 	call	0x1794	; 0x1794 <srand>
	
	// Setup hardware and callbacks. This will turn on interrupts.
	initialise_hardware();
     da6:	0e 94 46 05 	call	0xa8c	; 0xa8c <initialise_hardware>

	// Show the start screen. Returns when the player starts the game.
	start_screen();
     daa:	0e 94 59 05 	call	0xab2	; 0xab2 <start_screen>

	// Loop forever and continuously play the game.
	while (1)
	{
		new_game();
     dae:	0e 94 8d 05 	call	0xb1a	; 0xb1a <new_game>
		play_game();
     db2:	0e 94 c1 05 	call	0xb82	; 0xb82 <play_game>

00000db6 <uart_put_char>:
// Variable to keep track of whether incoming characters are to be echoed
// back or not.
static bool do_echo;

static int uart_put_char(char c, FILE *stream)
{
     db6:	cf 93       	push	r28
     db8:	c8 2f       	mov	r28, r24
	// Add the character to the buffer for transmission (if there is space
	// to do so). If not we wait until the buffer has space.

	// If the character is linefeed, we output carriage return.
	if (c == '\n')
     dba:	8a 30       	cpi	r24, 0x0A	; 10
     dbc:	19 f4       	brne	.+6      	; 0xdc4 <uart_put_char+0xe>
	{
		uart_put_char('\r', stream);
     dbe:	8d e0       	ldi	r24, 0x0D	; 13
     dc0:	0e 94 db 06 	call	0xdb6	; 0xdb6 <uart_put_char>
	// we don't output the character since the buffer will never be
	// emptied if interrupts are disabled. If the buffer is full and
	// interrupts are enabled, then we loop until the buffer has enough
	// space. The bytes_in_buffer variable will get modified by the ISR
	// which extracts bytes from the buffer.
	bool interrupts_enabled = bit_is_set(SREG, SREG_I);
     dc4:	9f b7       	in	r25, 0x3f	; 63
     dc6:	90 78       	andi	r25, 0x80	; 128
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <uart_put_char+0x18>
	{
		if (!interrupts_enabled)
     dca:	99 23       	and	r25, r25
     dcc:	29 f1       	breq	.+74     	; 0xe18 <uart_put_char+0x62>
	// emptied if interrupts are disabled. If the buffer is full and
	// interrupts are enabled, then we loop until the buffer has enough
	// space. The bytes_in_buffer variable will get modified by the ISR
	// which extracts bytes from the buffer.
	bool interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
     dce:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <bytes_in_out_buffer>
     dd2:	8f 3f       	cpi	r24, 0xFF	; 255
     dd4:	d1 f3       	breq	.-12     	; 0xdca <uart_put_char+0x14>
	// If this is beyond the end of the buffer, we wrap around back to the
	// beginning of the buffer. NOTE: We disable interrupts before
	// modifying the buffer. This prevents the ISR from modifying the
	// buffer at the same time. We reenable them if they were enabled when
	// we entered the function.
	cli();
     dd6:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
     dd8:	e0 91 a1 02 	lds	r30, 0x02A1	; 0x8002a1 <out_insert_pos>
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	8e 0f       	add	r24, r30
     de0:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <out_insert_pos>
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	ed 55       	subi	r30, 0x5D	; 93
     de8:	fd 4f       	sbci	r31, 0xFD	; 253
     dea:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
     dec:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <bytes_in_out_buffer>
     df0:	8f 5f       	subi	r24, 0xFF	; 255
     df2:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <bytes_in_out_buffer>
	if (out_insert_pos == OUTPUT_BUFFER_SIZE)
     df6:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <out_insert_pos>
     dfa:	8f 3f       	cpi	r24, 0xFF	; 255
     dfc:	11 f4       	brne	.+4      	; 0xe02 <uart_put_char+0x4c>
	{
		// Wrap around buffer pointer if necessary.
		out_insert_pos = 0;
     dfe:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <out_insert_pos>
	}

	// Reenable interrupts (UDR Empty interrupt may have been disabled) -
	// we ensure it is now enabled so that it will fire and deal with the
	// next character in the buffer.
	UCSR0B |= (1 << UDRIE0);
     e02:	e1 ec       	ldi	r30, 0xC1	; 193
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	80 62       	ori	r24, 0x20	; 32
     e0a:	80 83       	st	Z, r24
	if (interrupts_enabled)
     e0c:	99 23       	and	r25, r25
     e0e:	39 f0       	breq	.+14     	; 0xe1e <uart_put_char+0x68>
	{
		sei();
     e10:	78 94       	sei
	}
	return 0;
     e12:	80 e0       	ldi	r24, 0x00	; 0
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	05 c0       	rjmp	.+10     	; 0xe22 <uart_put_char+0x6c>
	bool interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
	{
		if (!interrupts_enabled)
		{
			return 1;
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <uart_put_char+0x6c>
	UCSR0B |= (1 << UDRIE0);
	if (interrupts_enabled)
	{
		sei();
	}
	return 0;
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	90 e0       	ldi	r25, 0x00	; 0
}
     e22:	cf 91       	pop	r28
     e24:	08 95       	ret

00000e26 <uart_get_char>:

static int uart_get_char(FILE *stream)
{
	// Wait until we've received a character.
	while (bytes_in_input_buffer == 0)
     e26:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <bytes_in_input_buffer>
     e2a:	88 23       	and	r24, r24
     e2c:	e1 f3       	breq	.-8      	; 0xe26 <uart_get_char>

	// Turn interrupts off and remove a character from the input buffer.
	// We reenable interrupts if they were on. The pending character is
	// the one which is byte_in_input_buffer characters before the insert
	// position (taking into account that we may need to wrap around).
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
     e2e:	2f b7       	in	r18, 0x3f	; 63
     e30:	20 78       	andi	r18, 0x80	; 128
	cli();
     e32:	f8 94       	cli
	char c;
	if (input_insert_pos - bytes_in_input_buffer < 0)
     e34:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <input_insert_pos>
     e38:	30 91 b4 03 	lds	r19, 0x03B4	; 0x8003b4 <bytes_in_input_buffer>
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	83 1b       	sub	r24, r19
     e40:	91 09       	sbc	r25, r1
     e42:	5a f4       	brpl	.+22     	; 0xe5a <uart_get_char+0x34>
	{
		// Need to wrap around.
		c = input_buffer[input_insert_pos - bytes_in_input_buffer +
     e44:	e0 91 a2 03 	lds	r30, 0x03A2	; 0x8003a2 <input_insert_pos>
     e48:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <bytes_in_input_buffer>
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	e8 1b       	sub	r30, r24
     e50:	f1 09       	sbc	r31, r1
     e52:	ed 54       	subi	r30, 0x4D	; 77
     e54:	fc 4f       	sbci	r31, 0xFC	; 252
     e56:	80 81       	ld	r24, Z
     e58:	0a c0       	rjmp	.+20     	; 0xe6e <uart_get_char+0x48>
			INPUT_BUFFER_SIZE];
	}
	else
	{
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
     e5a:	e0 91 a2 03 	lds	r30, 0x03A2	; 0x8003a2 <input_insert_pos>
     e5e:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <bytes_in_input_buffer>
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	e8 1b       	sub	r30, r24
     e66:	f1 09       	sbc	r31, r1
     e68:	ed 55       	subi	r30, 0x5D	; 93
     e6a:	fc 4f       	sbci	r31, 0xFC	; 252
     e6c:	80 81       	ld	r24, Z
	}

	// Decrement our count of bytes in the input buffer.
	bytes_in_input_buffer--;
     e6e:	90 91 b4 03 	lds	r25, 0x03B4	; 0x8003b4 <bytes_in_input_buffer>
     e72:	91 50       	subi	r25, 0x01	; 1
     e74:	90 93 b4 03 	sts	0x03B4, r25	; 0x8003b4 <bytes_in_input_buffer>
	if (interrupts_enabled)
     e78:	22 23       	and	r18, r18
     e7a:	09 f0       	breq	.+2      	; 0xe7e <uart_get_char+0x58>
	{
		sei();
     e7c:	78 94       	sei
	// as WASD. If you're a student reading this, pretend you didn't see
	// it XD. Honestly, you cannot rely on the arrow keys to work like
	// WASD, this is what we call undocumented behaviour.
	static char first = 0;
	static char second = 0;
	if (first == 0x1B && second == '[')
     e7e:	90 91 90 02 	lds	r25, 0x0290	; 0x800290 <first.1835>
     e82:	9b 31       	cpi	r25, 0x1B	; 27
     e84:	b1 f4       	brne	.+44     	; 0xeb2 <uart_get_char+0x8c>
     e86:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <second.1836>
     e8a:	9b 35       	cpi	r25, 0x5B	; 91
     e8c:	91 f4       	brne	.+36     	; 0xeb2 <uart_get_char+0x8c>
	{
		switch (c)
     e8e:	82 34       	cpi	r24, 0x42	; 66
     e90:	49 f0       	breq	.+18     	; 0xea4 <uart_get_char+0x7e>
     e92:	18 f4       	brcc	.+6      	; 0xe9a <uart_get_char+0x74>
     e94:	81 34       	cpi	r24, 0x41	; 65
     e96:	61 f0       	breq	.+24     	; 0xeb0 <uart_get_char+0x8a>
     e98:	0c c0       	rjmp	.+24     	; 0xeb2 <uart_get_char+0x8c>
     e9a:	83 34       	cpi	r24, 0x43	; 67
     e9c:	29 f0       	breq	.+10     	; 0xea8 <uart_get_char+0x82>
     e9e:	84 34       	cpi	r24, 0x44	; 68
     ea0:	29 f0       	breq	.+10     	; 0xeac <uart_get_char+0x86>
     ea2:	07 c0       	rjmp	.+14     	; 0xeb2 <uart_get_char+0x8c>
		{
			case 'A':
				c = 'w';
				break;
			case 'B':
				c = 's';
     ea4:	83 e7       	ldi	r24, 0x73	; 115
				break;
     ea6:	05 c0       	rjmp	.+10     	; 0xeb2 <uart_get_char+0x8c>
			case 'C':
				c = 'd';
     ea8:	84 e6       	ldi	r24, 0x64	; 100
				break;
     eaa:	03 c0       	rjmp	.+6      	; 0xeb2 <uart_get_char+0x8c>
			case 'D':
				c = 'a';
     eac:	81 e6       	ldi	r24, 0x61	; 97
				break;
     eae:	01 c0       	rjmp	.+2      	; 0xeb2 <uart_get_char+0x8c>
	if (first == 0x1B && second == '[')
	{
		switch (c)
		{
			case 'A':
				c = 'w';
     eb0:	87 e7       	ldi	r24, 0x77	; 119
				break;
			default:
				break;
		}
	}
	first = second;
     eb2:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <second.1836>
     eb6:	90 93 90 02 	sts	0x0290, r25	; 0x800290 <first.1835>
	second = c;
     eba:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <second.1836>

	return c;
}
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	08 95       	ret

00000ec2 <__vector_21>:
	_FDEV_SETUP_RW);

// Interrupt handler for UART Data Register Empty (i.e., another character
// can be taken from our buffer and written out).
ISR(USART0_UDRE_vect)
{
     ec2:	1f 92       	push	r1
     ec4:	0f 92       	push	r0
     ec6:	0f b6       	in	r0, 0x3f	; 63
     ec8:	0f 92       	push	r0
     eca:	11 24       	eor	r1, r1
     ecc:	2f 93       	push	r18
     ece:	8f 93       	push	r24
     ed0:	9f 93       	push	r25
     ed2:	ef 93       	push	r30
     ed4:	ff 93       	push	r31
	// Check if we have data in our buffer.
	if (bytes_in_out_buffer > 0)
     ed6:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <bytes_in_out_buffer>
     eda:	88 23       	and	r24, r24
     edc:	29 f1       	breq	.+74     	; 0xf28 <__vector_21+0x66>
		// UART. The pending byte (character) is the one which is
		// bytes_in_buffer characters before the insert_pos (taking
		// into account that we may need to wrap around to the end of
		// the buffer).
		char c;
		if (out_insert_pos - bytes_in_out_buffer < 0)
     ede:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <out_insert_pos>
     ee2:	20 91 a2 02 	lds	r18, 0x02A2	; 0x8002a2 <bytes_in_out_buffer>
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	82 1b       	sub	r24, r18
     eea:	91 09       	sbc	r25, r1
     eec:	5a f4       	brpl	.+22     	; 0xf04 <__vector_21+0x42>
		{
			// Need to wrap around.
			c = out_buffer[out_insert_pos - bytes_in_out_buffer +
     eee:	e0 91 a1 02 	lds	r30, 0x02A1	; 0x8002a1 <out_insert_pos>
     ef2:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <bytes_in_out_buffer>
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	e8 1b       	sub	r30, r24
     efa:	f1 09       	sbc	r31, r1
     efc:	ee 55       	subi	r30, 0x5E	; 94
     efe:	fc 4f       	sbci	r31, 0xFC	; 252
     f00:	90 81       	ld	r25, Z
     f02:	0a c0       	rjmp	.+20     	; 0xf18 <__vector_21+0x56>
				OUTPUT_BUFFER_SIZE];
		}
		else
		{
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
     f04:	e0 91 a1 02 	lds	r30, 0x02A1	; 0x8002a1 <out_insert_pos>
     f08:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <bytes_in_out_buffer>
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	e8 1b       	sub	r30, r24
     f10:	f1 09       	sbc	r31, r1
     f12:	ed 55       	subi	r30, 0x5D	; 93
     f14:	fd 4f       	sbci	r31, 0xFD	; 253
     f16:	90 81       	ld	r25, Z
		}

		// Decrement our count of the number of bytes in the buffer.
		bytes_in_out_buffer--;
     f18:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <bytes_in_out_buffer>
     f1c:	81 50       	subi	r24, 0x01	; 1
     f1e:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <bytes_in_out_buffer>

		// Output the character via the UART.
		UDR0 = c;
     f22:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     f26:	05 c0       	rjmp	.+10     	; 0xf32 <__vector_21+0x70>
	{
		// No data in the buffer. We disable the UART Data Register
		// Empty interrupt because otherwise it will trigger again
		// immediately when this ISR exits. The interrupt is reenabled
		// when a character is placed in the buffer.
		UCSR0B &= ~(1 << UDRIE0);
     f28:	e1 ec       	ldi	r30, 0xC1	; 193
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	8f 7d       	andi	r24, 0xDF	; 223
     f30:	80 83       	st	Z, r24
	}
}
     f32:	ff 91       	pop	r31
     f34:	ef 91       	pop	r30
     f36:	9f 91       	pop	r25
     f38:	8f 91       	pop	r24
     f3a:	2f 91       	pop	r18
     f3c:	0f 90       	pop	r0
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	0f 90       	pop	r0
     f42:	1f 90       	pop	r1
     f44:	18 95       	reti

00000f46 <__vector_20>:

// Interrupt handler for UART Receive Complete (i.e., can read a character).
// The character is read and placed in the input buffer.
ISR(USART0_RX_vect)
{
     f46:	1f 92       	push	r1
     f48:	0f 92       	push	r0
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	0f 92       	push	r0
     f4e:	11 24       	eor	r1, r1
     f50:	2f 93       	push	r18
     f52:	3f 93       	push	r19
     f54:	4f 93       	push	r20
     f56:	5f 93       	push	r21
     f58:	6f 93       	push	r22
     f5a:	7f 93       	push	r23
     f5c:	8f 93       	push	r24
     f5e:	9f 93       	push	r25
     f60:	af 93       	push	r26
     f62:	bf 93       	push	r27
     f64:	cf 93       	push	r28
     f66:	ef 93       	push	r30
     f68:	ff 93       	push	r31
	// Read the character - we ignore the possibility of overrun.
	char c = UDR0;
     f6a:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

	if (do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE)
     f6e:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <do_echo>
     f72:	88 23       	and	r24, r24
     f74:	49 f0       	breq	.+18     	; 0xf88 <__vector_20+0x42>
     f76:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <bytes_in_out_buffer>
     f7a:	8f 3f       	cpi	r24, 0xFF	; 255
     f7c:	29 f0       	breq	.+10     	; 0xf88 <__vector_20+0x42>
	{
		// If echoing is enabled and there is output buffer space,
		// echo the received character back to the UART. If there
		// is no output buffer space, characters will be lost.
		uart_put_char(c, 0);
     f7e:	60 e0       	ldi	r22, 0x00	; 0
     f80:	70 e0       	ldi	r23, 0x00	; 0
     f82:	8c 2f       	mov	r24, r28
     f84:	0e 94 db 06 	call	0xdb6	; 0xdb6 <uart_put_char>
	}

	// Check if we have space in our buffer. If not, set the overrun flag
	// and throw away the character. We never clear the overrun flag -
	// it's up to the programmer to check/clear this flag if desired.
	if (bytes_in_input_buffer >= INPUT_BUFFER_SIZE)
     f88:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <bytes_in_input_buffer>
     f8c:	80 31       	cpi	r24, 0x10	; 16
     f8e:	20 f0       	brcs	.+8      	; 0xf98 <__vector_20+0x52>
	{
		input_overrun = 1;
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <input_overrun>
     f96:	18 c0       	rjmp	.+48     	; 0xfc8 <__vector_20+0x82>
	}
	else
	{
		// If the character is carriage return, turn it into linefeed.
		if (c == '\r')
     f98:	cd 30       	cpi	r28, 0x0D	; 13
     f9a:	09 f4       	brne	.+2      	; 0xf9e <__vector_20+0x58>
		{
			c = '\n';
     f9c:	ca e0       	ldi	r28, 0x0A	; 10
		}

		// There is room in the input buffer.
		input_buffer[input_insert_pos++] = c;
     f9e:	e0 91 a2 03 	lds	r30, 0x03A2	; 0x8003a2 <input_insert_pos>
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	8e 0f       	add	r24, r30
     fa6:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <input_insert_pos>
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	ed 55       	subi	r30, 0x5D	; 93
     fae:	fc 4f       	sbci	r31, 0xFC	; 252
     fb0:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
     fb2:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <bytes_in_input_buffer>
     fb6:	8f 5f       	subi	r24, 0xFF	; 255
     fb8:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <bytes_in_input_buffer>
		if (input_insert_pos == INPUT_BUFFER_SIZE)
     fbc:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <input_insert_pos>
     fc0:	80 31       	cpi	r24, 0x10	; 16
     fc2:	11 f4       	brne	.+4      	; 0xfc8 <__vector_20+0x82>
		{
			// Wrap around buffer pointer if necessary.
			input_insert_pos = 0;
     fc4:	10 92 a2 03 	sts	0x03A2, r1	; 0x8003a2 <input_insert_pos>
		}
	}
}
     fc8:	ff 91       	pop	r31
     fca:	ef 91       	pop	r30
     fcc:	cf 91       	pop	r28
     fce:	bf 91       	pop	r27
     fd0:	af 91       	pop	r26
     fd2:	9f 91       	pop	r25
     fd4:	8f 91       	pop	r24
     fd6:	7f 91       	pop	r23
     fd8:	6f 91       	pop	r22
     fda:	5f 91       	pop	r21
     fdc:	4f 91       	pop	r20
     fde:	3f 91       	pop	r19
     fe0:	2f 91       	pop	r18
     fe2:	0f 90       	pop	r0
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	0f 90       	pop	r0
     fe8:	1f 90       	pop	r1
     fea:	18 95       	reti

00000fec <init_serial_stdio>:

void init_serial_stdio(long baudrate, bool echo)
{
	// Initialise our buffers.
	out_insert_pos = 0;
     fec:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <out_insert_pos>
	bytes_in_out_buffer = 0;
     ff0:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <bytes_in_out_buffer>
	input_insert_pos = 0;
     ff4:	10 92 a2 03 	sts	0x03A2, r1	; 0x8003a2 <input_insert_pos>
	bytes_in_input_buffer = 0;
     ff8:	10 92 b4 03 	sts	0x03B4, r1	; 0x8003b4 <bytes_in_input_buffer>
	input_overrun = 0;
     ffc:	10 92 b3 03 	sts	0x03B3, r1	; 0x8003b3 <input_overrun>

	// Record whether we're going to echo characters or not.
	do_echo = echo;
    1000:	40 93 91 02 	sts	0x0291, r20	; 0x800291 <do_echo>

	// Configure the baud rate. This differs from the datasheet formula so
	// that we get rounding to the nearest integer while using integer
	// division (which truncates).
	UBRR0 = (uint16_t)((((SYSCLK / (8 * baudrate)) + 1) / 2) - 1);
    1004:	dc 01       	movw	r26, r24
    1006:	cb 01       	movw	r24, r22
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	aa 1f       	adc	r26, r26
    100e:	bb 1f       	adc	r27, r27
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	aa 1f       	adc	r26, r26
    1016:	bb 1f       	adc	r27, r27
    1018:	9c 01       	movw	r18, r24
    101a:	ad 01       	movw	r20, r26
    101c:	22 0f       	add	r18, r18
    101e:	33 1f       	adc	r19, r19
    1020:	44 1f       	adc	r20, r20
    1022:	55 1f       	adc	r21, r21
    1024:	60 e0       	ldi	r22, 0x00	; 0
    1026:	72 e1       	ldi	r23, 0x12	; 18
    1028:	8a e7       	ldi	r24, 0x7A	; 122
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	0e 94 0d 0b 	call	0x161a	; 0x161a <__divmodsi4>
    1030:	ba 01       	movw	r22, r20
    1032:	a9 01       	movw	r20, r18
    1034:	4f 5f       	subi	r20, 0xFF	; 255
    1036:	5f 4f       	sbci	r21, 0xFF	; 255
    1038:	6f 4f       	sbci	r22, 0xFF	; 255
    103a:	7f 4f       	sbci	r23, 0xFF	; 255
    103c:	db 01       	movw	r26, r22
    103e:	ca 01       	movw	r24, r20
    1040:	1a f4       	brpl	.+6      	; 0x1048 <init_serial_stdio+0x5c>
    1042:	01 96       	adiw	r24, 0x01	; 1
    1044:	a1 1d       	adc	r26, r1
    1046:	b1 1d       	adc	r27, r1
    1048:	b5 95       	asr	r27
    104a:	a7 95       	ror	r26
    104c:	97 95       	ror	r25
    104e:	87 95       	ror	r24
    1050:	01 97       	sbiw	r24, 0x01	; 1
    1052:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    1056:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Enable transmission and receiving via UART. We don't enable the UDR
	// empty interrupt here (we wait until we've got a character to
	// transmit). NOTE: Interrupts must be enabled globally for this
	// module to work, but we do not do this here.
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
    105a:	e1 ec       	ldi	r30, 0xC1	; 193
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	88 e1       	ldi	r24, 0x18	; 24
    1060:	80 83       	st	Z, r24

	// Enable receive complete interrupt.
	UCSR0B |= (1 << RXCIE0);
    1062:	80 81       	ld	r24, Z
    1064:	80 68       	ori	r24, 0x80	; 128
    1066:	80 83       	st	Z, r24

	// Set up our stream so the get and put functions are used to
	// read/write characters via the serial port when we use stdio
	// functions.
	stdout = &serialio;
    1068:	e5 eb       	ldi	r30, 0xB5	; 181
    106a:	f3 e0       	ldi	r31, 0x03	; 3
    106c:	84 e0       	ldi	r24, 0x04	; 4
    106e:	91 e0       	ldi	r25, 0x01	; 1
    1070:	93 83       	std	Z+3, r25	; 0x03
    1072:	82 83       	std	Z+2, r24	; 0x02
	stdin = &serialio;
    1074:	91 83       	std	Z+1, r25	; 0x01
    1076:	80 83       	st	Z, r24
    1078:	08 95       	ret

0000107a <serial_input_available>:
}

bool serial_input_available(void)
{
	return bytes_in_input_buffer != 0;
    107a:	90 91 b4 03 	lds	r25, 0x03B4	; 0x8003b4 <bytes_in_input_buffer>
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	91 11       	cpse	r25, r1
    1082:	01 c0       	rjmp	.+2      	; 0x1086 <serial_input_available+0xc>
    1084:	80 e0       	ldi	r24, 0x00	; 0
}
    1086:	08 95       	ret

00001088 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void)
{
	// Just adjust our buffer data so it looks empty.
	input_insert_pos = 0;
    1088:	10 92 a2 03 	sts	0x03A2, r1	; 0x8003a2 <input_insert_pos>
	bytes_in_input_buffer = 0;
    108c:	10 92 b4 03 	sts	0x03B4, r1	; 0x8003b4 <bytes_in_input_buffer>
    1090:	08 95       	ret

00001092 <spi_setup_master>:

void spi_setup_master(uint8_t clockdivider)
{
	// Make the SS, MOSI and SCK pins outputs. These are pins 4, 5 and 7
	// of port B on the ATmega324A.
	DDRB |= (1 << DDB7) | (1 << DDB5) | (1 << DDB4);
    1092:	94 b1       	in	r25, 0x04	; 4
    1094:	90 6b       	ori	r25, 0xB0	; 176
    1096:	94 b9       	out	0x04, r25	; 4

	// Set the slave select (SS) line high.
	PORTB |= (1 << PORTB4);
    1098:	95 b1       	in	r25, 0x05	; 5
    109a:	90 61       	ori	r25, 0x10	; 16
    109c:	95 b9       	out	0x05, r25	; 5
	
	// Set up the SPI control registers SPCR and SPSR. Enable SPI as use
	// Master Mode by setting the SPE and MSTR bits of SPCR0.
	SPCR0 = (1 << SPE0) | (1 << MSTR0);
    109e:	90 e5       	ldi	r25, 0x50	; 80
    10a0:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR based on the
	// given clock divider. Invalid values default to the slowest speed.
	// We consider each bit in turn.
	switch (clockdivider)
    10a2:	88 30       	cpi	r24, 0x08	; 8
    10a4:	21 f0       	breq	.+8      	; 0x10ae <spi_setup_master+0x1c>
    10a6:	80 32       	cpi	r24, 0x20	; 32
    10a8:	11 f0       	breq	.+4      	; 0x10ae <spi_setup_master+0x1c>
    10aa:	82 30       	cpi	r24, 0x02	; 2
    10ac:	19 f4       	brne	.+6      	; 0x10b4 <spi_setup_master+0x22>
	{
		case 2: // Fallthrough.
		case 8: // Fallthrough.
		case 32:
			SPSR0 = (1 << SPI2X0);
    10ae:	91 e0       	ldi	r25, 0x01	; 1
    10b0:	9d bd       	out	0x2d, r25	; 45
			break;
    10b2:	01 c0       	rjmp	.+2      	; 0x10b6 <spi_setup_master+0x24>
		default:
			SPSR0 = 0;
    10b4:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch (clockdivider)
    10b6:	80 32       	cpi	r24, 0x20	; 32
    10b8:	69 f0       	breq	.+26     	; 0x10d4 <spi_setup_master+0x42>
    10ba:	28 f4       	brcc	.+10     	; 0x10c6 <spi_setup_master+0x34>
    10bc:	88 30       	cpi	r24, 0x08	; 8
    10be:	71 f0       	breq	.+28     	; 0x10dc <spi_setup_master+0x4a>
    10c0:	80 31       	cpi	r24, 0x10	; 16
    10c2:	61 f0       	breq	.+24     	; 0x10dc <spi_setup_master+0x4a>
    10c4:	0e c0       	rjmp	.+28     	; 0x10e2 <spi_setup_master+0x50>
    10c6:	80 34       	cpi	r24, 0x40	; 64
    10c8:	29 f0       	breq	.+10     	; 0x10d4 <spi_setup_master+0x42>
    10ca:	80 38       	cpi	r24, 0x80	; 128
    10cc:	51 f4       	brne	.+20     	; 0x10e2 <spi_setup_master+0x50>
	{
		case 128:
			SPCR0 |= (1 << SPR00);
    10ce:	8c b5       	in	r24, 0x2c	; 44
    10d0:	81 60       	ori	r24, 0x01	; 1
    10d2:	8c bd       	out	0x2c, r24	; 44
			// Fallthrough.
		case 32: // Fallthrough.
		case 64:
			SPCR0 |= (1 << SPR10);
    10d4:	8c b5       	in	r24, 0x2c	; 44
    10d6:	82 60       	ori	r24, 0x02	; 2
    10d8:	8c bd       	out	0x2c, r24	; 44
			break;
    10da:	03 c0       	rjmp	.+6      	; 0x10e2 <spi_setup_master+0x50>
		case 8: // Fallthrough.
		case 16:
			SPCR0 |= (1 << SPR00);
    10dc:	8c b5       	in	r24, 0x2c	; 44
    10de:	81 60       	ori	r24, 0x01	; 1
    10e0:	8c bd       	out	0x2c, r24	; 44
			break;
	}

	// Take SS (slave select) line low.
	PORTB &= ~(1 << PORTB4);
    10e2:	85 b1       	in	r24, 0x05	; 5
    10e4:	8f 7e       	andi	r24, 0xEF	; 239
    10e6:	85 b9       	out	0x05, r24	; 5
    10e8:	08 95       	ret

000010ea <spi_send_byte>:
	// transfer. We then wait until the most significant bit of SPSR0
	// (SPIF0) is set - this indicates that the transfer is complete. The
	// final read of SPSR0 followed by a read of SPDR0 will cause the SPIF
	// bit to be reset to 0. See page 173 of the ATmega324A datasheet for
	// more info.
	SPDR0 = byte;
    10ea:	8e bd       	out	0x2e, r24	; 46
	while ((SPSR0 & (1 << SPIF0)) == 0)
    10ec:	0d b4       	in	r0, 0x2d	; 45
    10ee:	07 fe       	sbrs	r0, 7
    10f0:	fd cf       	rjmp	.-6      	; 0x10ec <spi_send_byte+0x2>
	{
		; // Wait.
	}
	return SPDR0;
    10f2:	8e b5       	in	r24, 0x2e	; 46
}
    10f4:	08 95       	ret

000010f6 <display_initial_image>:
// Macro for getting next column number.
#define GET_NEXT_COLUMN(x, d) (((x) + 1) % countof((d)))

// Displays the initial image of the start screen.
static void display_initial_image(void)
{
    10f6:	1f 93       	push	r17
    10f8:	cf 93       	push	r28
    10fa:	df 93       	push	r29
    10fc:	cd b7       	in	r28, 0x3d	; 61
    10fe:	de b7       	in	r29, 0x3e	; 62
    1100:	28 97       	sbiw	r28, 0x08	; 8
    1102:	0f b6       	in	r0, 0x3f	; 63
    1104:	f8 94       	cli
    1106:	de bf       	out	0x3e, r29	; 62
    1108:	0f be       	out	0x3f, r0	; 63
    110a:	cd bf       	out	0x3d, r28	; 61
	for (uint8_t col = 0; col < min(MATRIX_NUM_COLUMNS,
    110c:	10 e0       	ldi	r17, 0x00	; 0
    110e:	17 c0       	rjmp	.+46     	; 0x113e <display_initial_image+0x48>
		countof(anim_data)); col++)
	{
		MatrixColumn column_data;
		memcpy_P(column_data, &anim_data[col], sizeof(column_data));
    1110:	61 2f       	mov	r22, r17
    1112:	70 e0       	ldi	r23, 0x00	; 0
    1114:	66 0f       	add	r22, r22
    1116:	77 1f       	adc	r23, r23
    1118:	66 0f       	add	r22, r22
    111a:	77 1f       	adc	r23, r23
    111c:	66 0f       	add	r22, r22
    111e:	77 1f       	adc	r23, r23
    1120:	60 59       	subi	r22, 0x90	; 144
    1122:	7e 4f       	sbci	r23, 0xFE	; 254
    1124:	48 e0       	ldi	r20, 0x08	; 8
    1126:	50 e0       	ldi	r21, 0x00	; 0
    1128:	ce 01       	movw	r24, r28
    112a:	01 96       	adiw	r24, 0x01	; 1
    112c:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <memcpy_P>
		ledmatrix_update_column(col, column_data);
    1130:	be 01       	movw	r22, r28
    1132:	6f 5f       	subi	r22, 0xFF	; 255
    1134:	7f 4f       	sbci	r23, 0xFF	; 255
    1136:	81 2f       	mov	r24, r17
    1138:	0e 94 1e 05 	call	0xa3c	; 0xa3c <ledmatrix_update_column>

// Displays the initial image of the start screen.
static void display_initial_image(void)
{
	for (uint8_t col = 0; col < min(MATRIX_NUM_COLUMNS,
		countof(anim_data)); col++)
    113c:	1f 5f       	subi	r17, 0xFF	; 255
#define GET_NEXT_COLUMN(x, d) (((x) + 1) % countof((d)))

// Displays the initial image of the start screen.
static void display_initial_image(void)
{
	for (uint8_t col = 0; col < min(MATRIX_NUM_COLUMNS,
    113e:	10 31       	cpi	r17, 0x10	; 16
    1140:	38 f3       	brcs	.-50     	; 0x1110 <display_initial_image+0x1a>
	{
		MatrixColumn column_data;
		memcpy_P(column_data, &anim_data[col], sizeof(column_data));
		ledmatrix_update_column(col, column_data);
	}
}
    1142:	28 96       	adiw	r28, 0x08	; 8
    1144:	0f b6       	in	r0, 0x3f	; 63
    1146:	f8 94       	cli
    1148:	de bf       	out	0x3e, r29	; 62
    114a:	0f be       	out	0x3f, r0	; 63
    114c:	cd bf       	out	0x3d, r28	; 61
    114e:	df 91       	pop	r29
    1150:	cf 91       	pop	r28
    1152:	1f 91       	pop	r17
    1154:	08 95       	ret

00001156 <display_next_column>:

// Displays the next column of the start screen.
static void display_next_column(void)
{
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
    115a:	cd b7       	in	r28, 0x3d	; 61
    115c:	de b7       	in	r29, 0x3e	; 62
    115e:	28 97       	sbiw	r28, 0x08	; 8
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	f8 94       	cli
    1164:	de bf       	out	0x3e, r29	; 62
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	cd bf       	out	0x3d, r28	; 61
	ledmatrix_shift_display_left();
    116a:	0e 94 3b 05 	call	0xa76	; 0xa76 <ledmatrix_shift_display_left>
	MatrixColumn column_data;
	memcpy_P(column_data, &anim_data[next_column], sizeof(column_data));
    116e:	60 91 92 02 	lds	r22, 0x0292	; 0x800292 <next_column>
    1172:	70 e0       	ldi	r23, 0x00	; 0
    1174:	66 0f       	add	r22, r22
    1176:	77 1f       	adc	r23, r23
    1178:	66 0f       	add	r22, r22
    117a:	77 1f       	adc	r23, r23
    117c:	66 0f       	add	r22, r22
    117e:	77 1f       	adc	r23, r23
    1180:	60 59       	subi	r22, 0x90	; 144
    1182:	7e 4f       	sbci	r23, 0xFE	; 254
    1184:	48 e0       	ldi	r20, 0x08	; 8
    1186:	50 e0       	ldi	r21, 0x00	; 0
    1188:	ce 01       	movw	r24, r28
    118a:	01 96       	adiw	r24, 0x01	; 1
    118c:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <memcpy_P>
	ledmatrix_update_column(MATRIX_NUM_COLUMNS - 1, column_data);
    1190:	be 01       	movw	r22, r28
    1192:	6f 5f       	subi	r22, 0xFF	; 255
    1194:	7f 4f       	sbci	r23, 0xFF	; 255
    1196:	8f e0       	ldi	r24, 0x0F	; 15
    1198:	0e 94 1e 05 	call	0xa3c	; 0xa3c <ledmatrix_update_column>
	next_column = GET_NEXT_COLUMN(next_column, anim_data);
    119c:	40 91 92 02 	lds	r20, 0x0292	; 0x800292 <next_column>
    11a0:	50 e0       	ldi	r21, 0x00	; 0
    11a2:	4f 5f       	subi	r20, 0xFF	; 255
    11a4:	5f 4f       	sbci	r21, 0xFF	; 255
    11a6:	9a 01       	movw	r18, r20
    11a8:	36 95       	lsr	r19
    11aa:	27 95       	ror	r18
    11ac:	ab e7       	ldi	r26, 0x7B	; 123
    11ae:	b4 e1       	ldi	r27, 0x14	; 20
    11b0:	0e 94 2c 0b 	call	0x1658	; 0x1658 <__umulhisi3>
    11b4:	96 95       	lsr	r25
    11b6:	87 95       	ror	r24
    11b8:	62 e3       	ldi	r22, 0x32	; 50
    11ba:	68 9f       	mul	r22, r24
    11bc:	90 01       	movw	r18, r0
    11be:	69 9f       	mul	r22, r25
    11c0:	30 0d       	add	r19, r0
    11c2:	11 24       	eor	r1, r1
    11c4:	ca 01       	movw	r24, r20
    11c6:	82 1b       	sub	r24, r18
    11c8:	93 0b       	sbc	r25, r19
    11ca:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <next_column>
	if (next_column == MATRIX_NUM_COLUMNS)
    11ce:	80 31       	cpi	r24, 0x10	; 16
    11d0:	29 f4       	brne	.+10     	; 0x11dc <display_next_column+0x86>
	{
		flags |= FLG_IS_NEW_CYCLE;
    11d2:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <flags>
    11d6:	81 60       	ori	r24, 0x01	; 1
    11d8:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <flags>
	}
}
    11dc:	28 96       	adiw	r28, 0x08	; 8
    11de:	0f b6       	in	r0, 0x3f	; 63
    11e0:	f8 94       	cli
    11e2:	de bf       	out	0x3e, r29	; 62
    11e4:	0f be       	out	0x3f, r0	; 63
    11e6:	cd bf       	out	0x3d, r28	; 61
    11e8:	df 91       	pop	r29
    11ea:	cf 91       	pop	r28
    11ec:	08 95       	ret

000011ee <display_title_pixel>:
		}
	}
}

static bool display_title_pixel(uint8_t line, uint8_t col, bool coloured)
{
    11ee:	ef 92       	push	r14
    11f0:	ff 92       	push	r15
    11f2:	0f 93       	push	r16
    11f4:	1f 93       	push	r17
    11f6:	cf 93       	push	r28
    11f8:	df 93       	push	r29
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
    11fe:	28 97       	sbiw	r28, 0x08	; 8
    1200:	0f b6       	in	r0, 0x3f	; 63
    1202:	f8 94       	cli
    1204:	de bf       	out	0x3e, r29	; 62
    1206:	0f be       	out	0x3f, r0	; 63
    1208:	cd bf       	out	0x3d, r28	; 61
    120a:	f6 2e       	mov	r15, r22
    120c:	e4 2e       	mov	r14, r20
	uint64_t data;
	memcpy_P(&data, &title_data[line], sizeof(data));
    120e:	68 2f       	mov	r22, r24
    1210:	70 e0       	ldi	r23, 0x00	; 0
    1212:	66 0f       	add	r22, r22
    1214:	77 1f       	adc	r23, r23
    1216:	66 0f       	add	r22, r22
    1218:	77 1f       	adc	r23, r23
    121a:	66 0f       	add	r22, r22
    121c:	77 1f       	adc	r23, r23
    121e:	68 5b       	subi	r22, 0xB8	; 184
    1220:	7e 4f       	sbci	r23, 0xFE	; 254
    1222:	48 e0       	ldi	r20, 0x08	; 8
    1224:	50 e0       	ldi	r21, 0x00	; 0
    1226:	ce 01       	movw	r24, r28
    1228:	01 96       	adiw	r24, 0x01	; 1
    122a:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <memcpy_P>
	if (data & ((uint64_t)1U << (63 - col)))
    122e:	0f e3       	ldi	r16, 0x3F	; 63
    1230:	10 e0       	ldi	r17, 0x00	; 0
    1232:	0f 19       	sub	r16, r15
    1234:	11 09       	sbc	r17, r1
    1236:	29 81       	ldd	r18, Y+1	; 0x01
    1238:	3a 81       	ldd	r19, Y+2	; 0x02
    123a:	4b 81       	ldd	r20, Y+3	; 0x03
    123c:	5c 81       	ldd	r21, Y+4	; 0x04
    123e:	6d 81       	ldd	r22, Y+5	; 0x05
    1240:	7e 81       	ldd	r23, Y+6	; 0x06
    1242:	8f 81       	ldd	r24, Y+7	; 0x07
    1244:	98 85       	ldd	r25, Y+8	; 0x08
    1246:	0e 94 3d 0b 	call	0x167a	; 0x167a <__lshrdi3>
    124a:	21 70       	andi	r18, 0x01	; 1
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	40 e0       	ldi	r20, 0x00	; 0
    1250:	50 e0       	ldi	r21, 0x00	; 0
    1252:	60 e0       	ldi	r22, 0x00	; 0
    1254:	70 e0       	ldi	r23, 0x00	; 0
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	a0 e0       	ldi	r26, 0x00	; 0
    125c:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <__cmpdi2_s8>
    1260:	c1 f0       	breq	.+48     	; 0x1292 <display_title_pixel+0xa4>
	{
		if (!coloured)
    1262:	e1 10       	cpse	r14, r1
    1264:	1b c0       	rjmp	.+54     	; 0x129c <display_title_pixel+0xae>
    1266:	10 e0       	ldi	r17, 0x00	; 0
    1268:	0f c0       	rjmp	.+30     	; 0x1288 <display_title_pixel+0x9a>
		{
			for (uint8_t j = 0; j < countof(title_pos); j++)
			{
				if (col <= title_pos[j])
    126a:	81 2f       	mov	r24, r17
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	fc 01       	movw	r30, r24
    1270:	e2 50       	subi	r30, 0x02	; 2
    1272:	fe 4f       	sbci	r31, 0xFE	; 254
    1274:	20 81       	ld	r18, Z
    1276:	2f 15       	cp	r18, r15
    1278:	30 f0       	brcs	.+12     	; 0x1286 <display_title_pixel+0x98>
				{
					set_display_attribute(title_attr[j]);
    127a:	fc 01       	movw	r30, r24
    127c:	e9 50       	subi	r30, 0x09	; 9
    127e:	fe 4f       	sbci	r31, 0xFE	; 254
    1280:	80 81       	ld	r24, Z
    1282:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <set_display_attribute>
	memcpy_P(&data, &title_data[line], sizeof(data));
	if (data & ((uint64_t)1U << (63 - col)))
	{
		if (!coloured)
		{
			for (uint8_t j = 0; j < countof(title_pos); j++)
    1286:	1f 5f       	subi	r17, 0xFF	; 255
    1288:	17 30       	cpi	r17, 0x07	; 7
    128a:	78 f3       	brcs	.-34     	; 0x126a <display_title_pixel+0x7c>
				if (col <= title_pos[j])
				{
					set_display_attribute(title_attr[j]);
				}
			}
			coloured = true;
    128c:	ee 24       	eor	r14, r14
    128e:	e3 94       	inc	r14
    1290:	05 c0       	rjmp	.+10     	; 0x129c <display_title_pixel+0xae>
		}
	}
	else
	{
		if (coloured)
    1292:	ee 20       	and	r14, r14
    1294:	19 f0       	breq	.+6      	; 0x129c <display_title_pixel+0xae>
		{
			normal_display_mode();
    1296:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <normal_display_mode>
			coloured = false;
    129a:	e1 2c       	mov	r14, r1
		}
		
	}
	putchar(' ');
    129c:	60 91 b7 03 	lds	r22, 0x03B7	; 0x8003b7 <__iob+0x2>
    12a0:	70 91 b8 03 	lds	r23, 0x03B8	; 0x8003b8 <__iob+0x3>
    12a4:	80 e2       	ldi	r24, 0x20	; 32
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	0e 94 2d 0c 	call	0x185a	; 0x185a <fputc>
	return coloured;
}
    12ac:	8e 2d       	mov	r24, r14
    12ae:	28 96       	adiw	r28, 0x08	; 8
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	f8 94       	cli
    12b4:	de bf       	out	0x3e, r29	; 62
    12b6:	0f be       	out	0x3f, r0	; 63
    12b8:	cd bf       	out	0x3d, r28	; 61
    12ba:	df 91       	pop	r29
    12bc:	cf 91       	pop	r28
    12be:	1f 91       	pop	r17
    12c0:	0f 91       	pop	r16
    12c2:	ff 90       	pop	r15
    12c4:	ef 90       	pop	r14
    12c6:	08 95       	ret

000012c8 <setup_start_screen>:
	}
}

void setup_start_screen(void)
{
	ledmatrix_clear();
    12c8:	0e 94 42 05 	call	0xa84	; 0xa84 <ledmatrix_clear>
	display_initial_image();
    12cc:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <display_initial_image>
	flags |= FLG_IS_NEW_CYCLE;
    12d0:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <flags>
    12d4:	81 60       	ori	r24, 0x01	; 1
    12d6:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <flags>
    12da:	08 95       	ret

000012dc <update_start_screen>:
}

void update_start_screen(void)
{
    12dc:	cf 92       	push	r12
    12de:	df 92       	push	r13
    12e0:	ef 92       	push	r14
    12e2:	ff 92       	push	r15
	uint32_t time = get_current_time();
    12e4:	0e 94 9a 0a 	call	0x1534	; 0x1534 <get_current_time>
    12e8:	6b 01       	movw	r12, r22
    12ea:	7c 01       	movw	r14, r24

	if (flags & FLG_IS_NEW_CYCLE)
    12ec:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <flags>
    12f0:	80 ff       	sbrs	r24, 0
    12f2:	16 c0       	rjmp	.+44     	; 0x1320 <update_start_screen+0x44>
	{
		flashing_start_time = time;
    12f4:	c0 92 97 02 	sts	0x0297, r12	; 0x800297 <flashing_start_time>
    12f8:	d0 92 98 02 	sts	0x0298, r13	; 0x800298 <flashing_start_time+0x1>
    12fc:	e0 92 99 02 	sts	0x0299, r14	; 0x800299 <flashing_start_time+0x2>
    1300:	f0 92 9a 02 	sts	0x029A, r15	; 0x80029a <flashing_start_time+0x3>
		last_update_time = time;
    1304:	c0 92 93 02 	sts	0x0293, r12	; 0x800293 <last_update_time>
    1308:	d0 92 94 02 	sts	0x0294, r13	; 0x800294 <last_update_time+0x1>
    130c:	e0 92 95 02 	sts	0x0295, r14	; 0x800295 <last_update_time+0x2>
    1310:	f0 92 96 02 	sts	0x0296, r15	; 0x800296 <last_update_time+0x3>
		next_column = MATRIX_NUM_COLUMNS;
    1314:	90 e1       	ldi	r25, 0x10	; 16
    1316:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <next_column>
		flags &= ((~FLG_IS_NEW_CYCLE) & (~FLG_IS_FLASH_DONE) &
    131a:	88 7f       	andi	r24, 0xF8	; 248
    131c:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <flags>
			(~FLG_TOGGLE_ON));
	}

	if (next_column == MATRIX_NUM_COLUMNS)
    1320:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <next_column>
    1324:	80 31       	cpi	r24, 0x10	; 16
    1326:	09 f0       	breq	.+2      	; 0x132a <update_start_screen+0x4e>
    1328:	64 c0       	rjmp	.+200    	; 0x13f2 <update_start_screen+0x116>
	{
		if (time > flashing_start_time + FLASH_TIME + STATIC_TIME)
    132a:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <flashing_start_time>
    132e:	90 91 98 02 	lds	r25, 0x0298	; 0x800298 <flashing_start_time+0x1>
    1332:	a0 91 99 02 	lds	r26, 0x0299	; 0x800299 <flashing_start_time+0x2>
    1336:	b0 91 9a 02 	lds	r27, 0x029A	; 0x80029a <flashing_start_time+0x3>
    133a:	ac 01       	movw	r20, r24
    133c:	bd 01       	movw	r22, r26
    133e:	40 53       	subi	r20, 0x30	; 48
    1340:	58 4f       	sbci	r21, 0xF8	; 248
    1342:	6f 4f       	sbci	r22, 0xFF	; 255
    1344:	7f 4f       	sbci	r23, 0xFF	; 255
    1346:	4c 15       	cp	r20, r12
    1348:	5d 05       	cpc	r21, r13
    134a:	6e 05       	cpc	r22, r14
    134c:	7f 05       	cpc	r23, r15
    134e:	58 f4       	brcc	.+22     	; 0x1366 <update_start_screen+0x8a>
		{
			// Two seconds have passed since start of flashing,
			// display next column.
			display_next_column();
    1350:	0e 94 ab 08 	call	0x1156	; 0x1156 <display_next_column>
			last_update_time = time;
    1354:	c0 92 93 02 	sts	0x0293, r12	; 0x800293 <last_update_time>
    1358:	d0 92 94 02 	sts	0x0294, r13	; 0x800294 <last_update_time+0x1>
    135c:	e0 92 95 02 	sts	0x0295, r14	; 0x800295 <last_update_time+0x2>
    1360:	f0 92 96 02 	sts	0x0296, r15	; 0x800296 <last_update_time+0x3>
    1364:	61 c0       	rjmp	.+194    	; 0x1428 <update_start_screen+0x14c>
		}
		else if (!(flags & FLG_IS_FLASH_DONE) && time >
    1366:	20 91 9b 02 	lds	r18, 0x029B	; 0x80029b <flags>
    136a:	32 2f       	mov	r19, r18
    136c:	32 70       	andi	r19, 0x02	; 2
    136e:	21 fd       	sbrc	r18, 1
    1370:	19 c0       	rjmp	.+50     	; 0x13a4 <update_start_screen+0xc8>
			flashing_start_time + FLASH_TIME)
    1372:	88 51       	subi	r24, 0x18	; 24
    1374:	9c 4f       	sbci	r25, 0xFC	; 252
    1376:	af 4f       	sbci	r26, 0xFF	; 255
    1378:	bf 4f       	sbci	r27, 0xFF	; 255
			// Two seconds have passed since start of flashing,
			// display next column.
			display_next_column();
			last_update_time = time;
		}
		else if (!(flags & FLG_IS_FLASH_DONE) && time >
    137a:	8c 15       	cp	r24, r12
    137c:	9d 05       	cpc	r25, r13
    137e:	ae 05       	cpc	r26, r14
    1380:	bf 05       	cpc	r27, r15
    1382:	80 f4       	brcc	.+32     	; 0x13a4 <update_start_screen+0xc8>
			flashing_start_time + FLASH_TIME)
		{
			// One second has passed since the start of flashing,
			// turn off flashing.
			display_initial_image();
    1384:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <display_initial_image>
			flags |= FLG_IS_FLASH_DONE;
    1388:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <flags>
    138c:	82 60       	ori	r24, 0x02	; 2
    138e:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <flags>
			last_update_time = time;
    1392:	c0 92 93 02 	sts	0x0293, r12	; 0x800293 <last_update_time>
    1396:	d0 92 94 02 	sts	0x0294, r13	; 0x800294 <last_update_time+0x1>
    139a:	e0 92 95 02 	sts	0x0295, r14	; 0x800295 <last_update_time+0x2>
    139e:	f0 92 96 02 	sts	0x0296, r15	; 0x800296 <last_update_time+0x3>
    13a2:	42 c0       	rjmp	.+132    	; 0x1428 <update_start_screen+0x14c>
		}
		else if (!(flags & FLG_IS_FLASH_DONE) && time >
    13a4:	31 11       	cpse	r19, r1
    13a6:	40 c0       	rjmp	.+128    	; 0x1428 <update_start_screen+0x14c>
			last_update_time + FLASH_SPEED)
    13a8:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <last_update_time>
    13ac:	90 91 94 02 	lds	r25, 0x0294	; 0x800294 <last_update_time+0x1>
    13b0:	a0 91 95 02 	lds	r26, 0x0295	; 0x800295 <last_update_time+0x2>
    13b4:	b0 91 96 02 	lds	r27, 0x0296	; 0x800296 <last_update_time+0x3>
    13b8:	8c 59       	subi	r24, 0x9C	; 156
    13ba:	9f 4f       	sbci	r25, 0xFF	; 255
    13bc:	af 4f       	sbci	r26, 0xFF	; 255
    13be:	bf 4f       	sbci	r27, 0xFF	; 255
			// turn off flashing.
			display_initial_image();
			flags |= FLG_IS_FLASH_DONE;
			last_update_time = time;
		}
		else if (!(flags & FLG_IS_FLASH_DONE) && time >
    13c0:	8c 15       	cp	r24, r12
    13c2:	9d 05       	cpc	r25, r13
    13c4:	ae 05       	cpc	r26, r14
    13c6:	bf 05       	cpc	r27, r15
    13c8:	78 f5       	brcc	.+94     	; 0x1428 <update_start_screen+0x14c>
			last_update_time + FLASH_SPEED)
		{
			// 0.1 seconds passed since last flash, flash the LED
			// matrix.
			if ((flags ^= FLG_TOGGLE_ON) & FLG_TOGGLE_ON)
    13ca:	84 e0       	ldi	r24, 0x04	; 4
    13cc:	28 27       	eor	r18, r24
    13ce:	20 93 9b 02 	sts	0x029B, r18	; 0x80029b <flags>
    13d2:	22 ff       	sbrs	r18, 2
    13d4:	03 c0       	rjmp	.+6      	; 0x13dc <update_start_screen+0x100>
			{
				ledmatrix_clear();
    13d6:	0e 94 42 05 	call	0xa84	; 0xa84 <ledmatrix_clear>
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <update_start_screen+0x104>
			}
			else
			{
				display_initial_image();
    13dc:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <display_initial_image>
			}
			last_update_time = time;
    13e0:	c0 92 93 02 	sts	0x0293, r12	; 0x800293 <last_update_time>
    13e4:	d0 92 94 02 	sts	0x0294, r13	; 0x800294 <last_update_time+0x1>
    13e8:	e0 92 95 02 	sts	0x0295, r14	; 0x800295 <last_update_time+0x2>
    13ec:	f0 92 96 02 	sts	0x0296, r15	; 0x800296 <last_update_time+0x3>
    13f0:	1b c0       	rjmp	.+54     	; 0x1428 <update_start_screen+0x14c>
		}
	}
	else
	{
		if (time > last_update_time + SCROLL_SPEED)
    13f2:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <last_update_time>
    13f6:	90 91 94 02 	lds	r25, 0x0294	; 0x800294 <last_update_time+0x1>
    13fa:	a0 91 95 02 	lds	r26, 0x0295	; 0x800295 <last_update_time+0x2>
    13fe:	b0 91 96 02 	lds	r27, 0x0296	; 0x800296 <last_update_time+0x3>
    1402:	88 53       	subi	r24, 0x38	; 56
    1404:	9f 4f       	sbci	r25, 0xFF	; 255
    1406:	af 4f       	sbci	r26, 0xFF	; 255
    1408:	bf 4f       	sbci	r27, 0xFF	; 255
    140a:	8c 15       	cp	r24, r12
    140c:	9d 05       	cpc	r25, r13
    140e:	ae 05       	cpc	r26, r14
    1410:	bf 05       	cpc	r27, r15
    1412:	50 f4       	brcc	.+20     	; 0x1428 <update_start_screen+0x14c>
		{
			display_next_column();
    1414:	0e 94 ab 08 	call	0x1156	; 0x1156 <display_next_column>
			last_update_time = time;
    1418:	c0 92 93 02 	sts	0x0293, r12	; 0x800293 <last_update_time>
    141c:	d0 92 94 02 	sts	0x0294, r13	; 0x800294 <last_update_time+0x1>
    1420:	e0 92 95 02 	sts	0x0295, r14	; 0x800295 <last_update_time+0x2>
    1424:	f0 92 96 02 	sts	0x0296, r15	; 0x800296 <last_update_time+0x3>
		}
	}
}
    1428:	ff 90       	pop	r15
    142a:	ef 90       	pop	r14
    142c:	df 90       	pop	r13
    142e:	cf 90       	pop	r12
    1430:	08 95       	ret

00001432 <display_terminal_title>:
	putchar(' ');
	return coloured;
}

void display_terminal_title(uint8_t row, uint8_t col)
{
    1432:	ff 92       	push	r15
    1434:	0f 93       	push	r16
    1436:	1f 93       	push	r17
    1438:	cf 93       	push	r28
    143a:	df 93       	push	r29
    143c:	f8 2e       	mov	r15, r24
    143e:	06 2f       	mov	r16, r22
	bool coloured = false;
	for (uint8_t line = 0; line < countof(title_data); line++)
    1440:	10 e0       	ldi	r17, 0x00	; 0
	return coloured;
}

void display_terminal_title(uint8_t row, uint8_t col)
{
	bool coloured = false;
    1442:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t line = 0; line < countof(title_data); line++)
    1444:	14 c0       	rjmp	.+40     	; 0x146e <display_terminal_title+0x3c>
	{
		move_terminal_cursor(line + row, col);
    1446:	60 2f       	mov	r22, r16
    1448:	70 e0       	ldi	r23, 0x00	; 0
    144a:	8f 2d       	mov	r24, r15
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	81 0f       	add	r24, r17
    1450:	91 1d       	adc	r25, r1
    1452:	0e 94 3f 0a 	call	0x147e	; 0x147e <move_terminal_cursor>
		for (uint8_t i = 0; i < 64; i++)
    1456:	c0 e0       	ldi	r28, 0x00	; 0
    1458:	07 c0       	rjmp	.+14     	; 0x1468 <display_terminal_title+0x36>
		{
			coloured = display_title_pixel(line, i, coloured);
    145a:	4d 2f       	mov	r20, r29
    145c:	6c 2f       	mov	r22, r28
    145e:	81 2f       	mov	r24, r17
    1460:	0e 94 f7 08 	call	0x11ee	; 0x11ee <display_title_pixel>
    1464:	d8 2f       	mov	r29, r24
{
	bool coloured = false;
	for (uint8_t line = 0; line < countof(title_data); line++)
	{
		move_terminal_cursor(line + row, col);
		for (uint8_t i = 0; i < 64; i++)
    1466:	cf 5f       	subi	r28, 0xFF	; 255
    1468:	c0 34       	cpi	r28, 0x40	; 64
    146a:	b8 f3       	brcs	.-18     	; 0x145a <display_terminal_title+0x28>
}

void display_terminal_title(uint8_t row, uint8_t col)
{
	bool coloured = false;
	for (uint8_t line = 0; line < countof(title_data); line++)
    146c:	1f 5f       	subi	r17, 0xFF	; 255
    146e:	15 30       	cpi	r17, 0x05	; 5
    1470:	50 f3       	brcs	.-44     	; 0x1446 <display_terminal_title+0x14>
		for (uint8_t i = 0; i < 64; i++)
		{
			coloured = display_title_pixel(line, i, coloured);
		}
	}
}
    1472:	df 91       	pop	r29
    1474:	cf 91       	pop	r28
    1476:	1f 91       	pop	r17
    1478:	0f 91       	pop	r16
    147a:	ff 90       	pop	r15
    147c:	08 95       	ret

0000147e <move_terminal_cursor>:
}

void reverse_video(void)
{
	printf_P(PSTR("\x1b[7m"));
}
    147e:	6f 5f       	subi	r22, 0xFF	; 255
    1480:	7f 4f       	sbci	r23, 0xFF	; 255
    1482:	7f 93       	push	r23
    1484:	6f 93       	push	r22
    1486:	01 96       	adiw	r24, 0x01	; 1
    1488:	9f 93       	push	r25
    148a:	8f 93       	push	r24
    148c:	8b e1       	ldi	r24, 0x1B	; 27
    148e:	93 e0       	ldi	r25, 0x03	; 3
    1490:	9f 93       	push	r25
    1492:	8f 93       	push	r24
    1494:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <printf_P>
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	08 95       	ret

000014a6 <normal_display_mode>:
    14a6:	86 e1       	ldi	r24, 0x16	; 22
    14a8:	93 e0       	ldi	r25, 0x03	; 3
    14aa:	9f 93       	push	r25
    14ac:	8f 93       	push	r24
    14ae:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <printf_P>
    14b2:	0f 90       	pop	r0
    14b4:	0f 90       	pop	r0
    14b6:	08 95       	ret

000014b8 <clear_terminal>:

void clear_terminal(void)
{
	printf_P(PSTR("\x1b[2J"));
    14b8:	81 e1       	ldi	r24, 0x11	; 17
    14ba:	93 e0       	ldi	r25, 0x03	; 3
    14bc:	9f 93       	push	r25
    14be:	8f 93       	push	r24
    14c0:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <printf_P>
}
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	08 95       	ret

000014ca <clear_to_end_of_line>:

void clear_to_end_of_line(void)
{
	printf_P(PSTR("\x1b[K"));
    14ca:	8d e0       	ldi	r24, 0x0D	; 13
    14cc:	93 e0       	ldi	r25, 0x03	; 3
    14ce:	9f 93       	push	r25
    14d0:	8f 93       	push	r24
    14d2:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <printf_P>
}
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	08 95       	ret

000014dc <set_display_attribute>:

void set_display_attribute(DisplayParameter parameter)
{
	printf_P(PSTR("\x1b[%dm"), parameter);
    14dc:	1f 92       	push	r1
    14de:	8f 93       	push	r24
    14e0:	87 e0       	ldi	r24, 0x07	; 7
    14e2:	93 e0       	ldi	r25, 0x03	; 3
    14e4:	9f 93       	push	r25
    14e6:	8f 93       	push	r24
    14e8:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <printf_P>
}
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	08 95       	ret

000014f6 <hide_cursor>:

void hide_cursor(void)
{
	printf_P(PSTR("\x1b[?25l"));
    14f6:	80 e0       	ldi	r24, 0x00	; 0
    14f8:	93 e0       	ldi	r25, 0x03	; 3
    14fa:	9f 93       	push	r25
    14fc:	8f 93       	push	r24
    14fe:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <printf_P>
}
    1502:	0f 90       	pop	r0
    1504:	0f 90       	pop	r0
    1506:	08 95       	ret

00001508 <init_timer0>:
static volatile uint32_t clock_ticks_ms;

void init_timer0(void)
{
	// Reset clock tick count. L indicates a long (32 bit) constant.
	clock_ticks_ms = 0L;
    1508:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <clock_ticks_ms>
    150c:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <clock_ticks_ms+0x1>
    1510:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <clock_ticks_ms+0x2>
    1514:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <clock_ticks_ms+0x3>
	// interrupt every 64 x 125 clock cycles, i.e. every 1 milliseconds
	// with an 8MHz clock. The counter will be reset to 0 when it reaches
	// it's output compare value.

	// Clear the timer.
	TCNT0 = 0;
    1518:	16 bc       	out	0x26, r1	; 38

	// Set the output compare value to be 124.
	OCR0A = 124;
    151a:	8c e7       	ldi	r24, 0x7C	; 124
    151c:	87 bd       	out	0x27, r24	; 39

	// Set the timer to clear on compare match (CTC mode) and to
	// divide the clock by 64. This starts the timer running.
	TCCR0A = (1 << WGM01);
    151e:	92 e0       	ldi	r25, 0x02	; 2
    1520:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1 << CS01) | (1 << CS00);
    1522:	83 e0       	ldi	r24, 0x03	; 3
    1524:	85 bd       	out	0x25, r24	; 37

	// Enable an interrupt on output compare match. Note that
	// interrupts have to be enabled globally before the interrupts
	// will fire.
	TIMSK0 |= (1 << OCIE0A);
    1526:	ee e6       	ldi	r30, 0x6E	; 110
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	82 60       	ori	r24, 0x02	; 2
    152e:	80 83       	st	Z, r24

	// Make sure the interrupt flag is cleared by writing a 1 to it.
	TIFR0 = (1 << OCF0A);
    1530:	95 bb       	out	0x15, r25	; 21
    1532:	08 95       	ret

00001534 <get_current_time>:
uint32_t get_current_time(void)
{
	// Disable interrupts so we can be sure that the interrupt doesn't
	// fire when we've copied just a couple of bytes of the value.
	// Interrupts are re-enabled if they were enabled at the start.
	uint8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
    1534:	8f b7       	in	r24, 0x3f	; 63
    1536:	28 2f       	mov	r18, r24
    1538:	20 78       	andi	r18, 0x80	; 128
	cli();
    153a:	f8 94       	cli
	uint32_t result = clock_ticks_ms;
    153c:	60 91 9c 02 	lds	r22, 0x029C	; 0x80029c <clock_ticks_ms>
    1540:	70 91 9d 02 	lds	r23, 0x029D	; 0x80029d <clock_ticks_ms+0x1>
    1544:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <clock_ticks_ms+0x2>
    1548:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <clock_ticks_ms+0x3>
	if (interrupts_were_enabled)
    154c:	22 23       	and	r18, r18
    154e:	09 f0       	breq	.+2      	; 0x1552 <get_current_time+0x1e>
	{
		sei();
    1550:	78 94       	sei
	}
	return result;
}
    1552:	08 95       	ret

00001554 <__vector_16>:

// Interrupt handler for clock tick.
ISR(TIMER0_COMPA_vect)
{
    1554:	1f 92       	push	r1
    1556:	0f 92       	push	r0
    1558:	0f b6       	in	r0, 0x3f	; 63
    155a:	0f 92       	push	r0
    155c:	11 24       	eor	r1, r1
    155e:	8f 93       	push	r24
    1560:	9f 93       	push	r25
    1562:	af 93       	push	r26
    1564:	bf 93       	push	r27
	// Increment our clock tick count.
	clock_ticks_ms++;
    1566:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <clock_ticks_ms>
    156a:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <clock_ticks_ms+0x1>
    156e:	a0 91 9e 02 	lds	r26, 0x029E	; 0x80029e <clock_ticks_ms+0x2>
    1572:	b0 91 9f 02 	lds	r27, 0x029F	; 0x80029f <clock_ticks_ms+0x3>
    1576:	01 96       	adiw	r24, 0x01	; 1
    1578:	a1 1d       	adc	r26, r1
    157a:	b1 1d       	adc	r27, r1
    157c:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <clock_ticks_ms>
    1580:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <clock_ticks_ms+0x1>
    1584:	a0 93 9e 02 	sts	0x029E, r26	; 0x80029e <clock_ticks_ms+0x2>
    1588:	b0 93 9f 02 	sts	0x029F, r27	; 0x80029f <clock_ticks_ms+0x3>
}
    158c:	bf 91       	pop	r27
    158e:	af 91       	pop	r26
    1590:	9f 91       	pop	r25
    1592:	8f 91       	pop	r24
    1594:	0f 90       	pop	r0
    1596:	0f be       	out	0x3f, r0	; 63
    1598:	0f 90       	pop	r0
    159a:	1f 90       	pop	r1
    159c:	18 95       	reti

0000159e <init_timer1>:
#include <avr/interrupt.h>

void init_timer1(void)
{
	// Setup timer 1.
	TCNT1 = 0;
    159e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    15a2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    15a6:	08 95       	ret

000015a8 <init_timer2>:
#include <avr/interrupt.h>

void init_timer2(void)
{
	// Setup timer 2.
	TCNT2 = 0;
    15a8:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    15ac:	08 95       	ret

000015ae <__divmodhi4>:
    15ae:	97 fb       	bst	r25, 7
    15b0:	07 2e       	mov	r0, r23
    15b2:	16 f4       	brtc	.+4      	; 0x15b8 <__divmodhi4+0xa>
    15b4:	00 94       	com	r0
    15b6:	07 d0       	rcall	.+14     	; 0x15c6 <__divmodhi4_neg1>
    15b8:	77 fd       	sbrc	r23, 7
    15ba:	09 d0       	rcall	.+18     	; 0x15ce <__divmodhi4_neg2>
    15bc:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__udivmodhi4>
    15c0:	07 fc       	sbrc	r0, 7
    15c2:	05 d0       	rcall	.+10     	; 0x15ce <__divmodhi4_neg2>
    15c4:	3e f4       	brtc	.+14     	; 0x15d4 <__divmodhi4_exit>

000015c6 <__divmodhi4_neg1>:
    15c6:	90 95       	com	r25
    15c8:	81 95       	neg	r24
    15ca:	9f 4f       	sbci	r25, 0xFF	; 255
    15cc:	08 95       	ret

000015ce <__divmodhi4_neg2>:
    15ce:	70 95       	com	r23
    15d0:	61 95       	neg	r22
    15d2:	7f 4f       	sbci	r23, 0xFF	; 255

000015d4 <__divmodhi4_exit>:
    15d4:	08 95       	ret

000015d6 <__udivmodsi4>:
    15d6:	a1 e2       	ldi	r26, 0x21	; 33
    15d8:	1a 2e       	mov	r1, r26
    15da:	aa 1b       	sub	r26, r26
    15dc:	bb 1b       	sub	r27, r27
    15de:	fd 01       	movw	r30, r26
    15e0:	0d c0       	rjmp	.+26     	; 0x15fc <__udivmodsi4_ep>

000015e2 <__udivmodsi4_loop>:
    15e2:	aa 1f       	adc	r26, r26
    15e4:	bb 1f       	adc	r27, r27
    15e6:	ee 1f       	adc	r30, r30
    15e8:	ff 1f       	adc	r31, r31
    15ea:	a2 17       	cp	r26, r18
    15ec:	b3 07       	cpc	r27, r19
    15ee:	e4 07       	cpc	r30, r20
    15f0:	f5 07       	cpc	r31, r21
    15f2:	20 f0       	brcs	.+8      	; 0x15fc <__udivmodsi4_ep>
    15f4:	a2 1b       	sub	r26, r18
    15f6:	b3 0b       	sbc	r27, r19
    15f8:	e4 0b       	sbc	r30, r20
    15fa:	f5 0b       	sbc	r31, r21

000015fc <__udivmodsi4_ep>:
    15fc:	66 1f       	adc	r22, r22
    15fe:	77 1f       	adc	r23, r23
    1600:	88 1f       	adc	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	1a 94       	dec	r1
    1606:	69 f7       	brne	.-38     	; 0x15e2 <__udivmodsi4_loop>
    1608:	60 95       	com	r22
    160a:	70 95       	com	r23
    160c:	80 95       	com	r24
    160e:	90 95       	com	r25
    1610:	9b 01       	movw	r18, r22
    1612:	ac 01       	movw	r20, r24
    1614:	bd 01       	movw	r22, r26
    1616:	cf 01       	movw	r24, r30
    1618:	08 95       	ret

0000161a <__divmodsi4>:
    161a:	05 2e       	mov	r0, r21
    161c:	97 fb       	bst	r25, 7
    161e:	1e f4       	brtc	.+6      	; 0x1626 <__divmodsi4+0xc>
    1620:	00 94       	com	r0
    1622:	0e 94 24 0b 	call	0x1648	; 0x1648 <__negsi2>
    1626:	57 fd       	sbrc	r21, 7
    1628:	07 d0       	rcall	.+14     	; 0x1638 <__divmodsi4_neg2>
    162a:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <__udivmodsi4>
    162e:	07 fc       	sbrc	r0, 7
    1630:	03 d0       	rcall	.+6      	; 0x1638 <__divmodsi4_neg2>
    1632:	4e f4       	brtc	.+18     	; 0x1646 <__divmodsi4_exit>
    1634:	0c 94 24 0b 	jmp	0x1648	; 0x1648 <__negsi2>

00001638 <__divmodsi4_neg2>:
    1638:	50 95       	com	r21
    163a:	40 95       	com	r20
    163c:	30 95       	com	r19
    163e:	21 95       	neg	r18
    1640:	3f 4f       	sbci	r19, 0xFF	; 255
    1642:	4f 4f       	sbci	r20, 0xFF	; 255
    1644:	5f 4f       	sbci	r21, 0xFF	; 255

00001646 <__divmodsi4_exit>:
    1646:	08 95       	ret

00001648 <__negsi2>:
    1648:	90 95       	com	r25
    164a:	80 95       	com	r24
    164c:	70 95       	com	r23
    164e:	61 95       	neg	r22
    1650:	7f 4f       	sbci	r23, 0xFF	; 255
    1652:	8f 4f       	sbci	r24, 0xFF	; 255
    1654:	9f 4f       	sbci	r25, 0xFF	; 255
    1656:	08 95       	ret

00001658 <__umulhisi3>:
    1658:	a2 9f       	mul	r26, r18
    165a:	b0 01       	movw	r22, r0
    165c:	b3 9f       	mul	r27, r19
    165e:	c0 01       	movw	r24, r0
    1660:	a3 9f       	mul	r26, r19
    1662:	70 0d       	add	r23, r0
    1664:	81 1d       	adc	r24, r1
    1666:	11 24       	eor	r1, r1
    1668:	91 1d       	adc	r25, r1
    166a:	b2 9f       	mul	r27, r18
    166c:	70 0d       	add	r23, r0
    166e:	81 1d       	adc	r24, r1
    1670:	11 24       	eor	r1, r1
    1672:	91 1d       	adc	r25, r1
    1674:	08 95       	ret

00001676 <__ashrdi3>:
    1676:	97 fb       	bst	r25, 7
    1678:	10 f8       	bld	r1, 0

0000167a <__lshrdi3>:
    167a:	16 94       	lsr	r1
    167c:	00 08       	sbc	r0, r0
    167e:	0f 93       	push	r16
    1680:	08 30       	cpi	r16, 0x08	; 8
    1682:	98 f0       	brcs	.+38     	; 0x16aa <__lshrdi3+0x30>
    1684:	08 50       	subi	r16, 0x08	; 8
    1686:	23 2f       	mov	r18, r19
    1688:	34 2f       	mov	r19, r20
    168a:	45 2f       	mov	r20, r21
    168c:	56 2f       	mov	r21, r22
    168e:	67 2f       	mov	r22, r23
    1690:	78 2f       	mov	r23, r24
    1692:	89 2f       	mov	r24, r25
    1694:	90 2d       	mov	r25, r0
    1696:	f4 cf       	rjmp	.-24     	; 0x1680 <__lshrdi3+0x6>
    1698:	05 94       	asr	r0
    169a:	97 95       	ror	r25
    169c:	87 95       	ror	r24
    169e:	77 95       	ror	r23
    16a0:	67 95       	ror	r22
    16a2:	57 95       	ror	r21
    16a4:	47 95       	ror	r20
    16a6:	37 95       	ror	r19
    16a8:	27 95       	ror	r18
    16aa:	0a 95       	dec	r16
    16ac:	aa f7       	brpl	.-22     	; 0x1698 <__lshrdi3+0x1e>
    16ae:	0f 91       	pop	r16
    16b0:	08 95       	ret

000016b2 <__cmpdi2_s8>:
    16b2:	00 24       	eor	r0, r0
    16b4:	a7 fd       	sbrc	r26, 7
    16b6:	00 94       	com	r0
    16b8:	2a 17       	cp	r18, r26
    16ba:	30 05       	cpc	r19, r0
    16bc:	40 05       	cpc	r20, r0
    16be:	50 05       	cpc	r21, r0
    16c0:	60 05       	cpc	r22, r0
    16c2:	70 05       	cpc	r23, r0
    16c4:	80 05       	cpc	r24, r0
    16c6:	90 05       	cpc	r25, r0
    16c8:	08 95       	ret

000016ca <__udivmodhi4>:
    16ca:	aa 1b       	sub	r26, r26
    16cc:	bb 1b       	sub	r27, r27
    16ce:	51 e1       	ldi	r21, 0x11	; 17
    16d0:	07 c0       	rjmp	.+14     	; 0x16e0 <__udivmodhi4_ep>

000016d2 <__udivmodhi4_loop>:
    16d2:	aa 1f       	adc	r26, r26
    16d4:	bb 1f       	adc	r27, r27
    16d6:	a6 17       	cp	r26, r22
    16d8:	b7 07       	cpc	r27, r23
    16da:	10 f0       	brcs	.+4      	; 0x16e0 <__udivmodhi4_ep>
    16dc:	a6 1b       	sub	r26, r22
    16de:	b7 0b       	sbc	r27, r23

000016e0 <__udivmodhi4_ep>:
    16e0:	88 1f       	adc	r24, r24
    16e2:	99 1f       	adc	r25, r25
    16e4:	5a 95       	dec	r21
    16e6:	a9 f7       	brne	.-22     	; 0x16d2 <__udivmodhi4_loop>
    16e8:	80 95       	com	r24
    16ea:	90 95       	com	r25
    16ec:	bc 01       	movw	r22, r24
    16ee:	cd 01       	movw	r24, r26
    16f0:	08 95       	ret

000016f2 <do_rand>:
    16f2:	8f 92       	push	r8
    16f4:	9f 92       	push	r9
    16f6:	af 92       	push	r10
    16f8:	bf 92       	push	r11
    16fa:	cf 92       	push	r12
    16fc:	df 92       	push	r13
    16fe:	ef 92       	push	r14
    1700:	ff 92       	push	r15
    1702:	cf 93       	push	r28
    1704:	df 93       	push	r29
    1706:	ec 01       	movw	r28, r24
    1708:	68 81       	ld	r22, Y
    170a:	79 81       	ldd	r23, Y+1	; 0x01
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	9b 81       	ldd	r25, Y+3	; 0x03
    1710:	61 15       	cp	r22, r1
    1712:	71 05       	cpc	r23, r1
    1714:	81 05       	cpc	r24, r1
    1716:	91 05       	cpc	r25, r1
    1718:	21 f4       	brne	.+8      	; 0x1722 <do_rand+0x30>
    171a:	64 e2       	ldi	r22, 0x24	; 36
    171c:	79 ed       	ldi	r23, 0xD9	; 217
    171e:	8b e5       	ldi	r24, 0x5B	; 91
    1720:	97 e0       	ldi	r25, 0x07	; 7
    1722:	2d e1       	ldi	r18, 0x1D	; 29
    1724:	33 ef       	ldi	r19, 0xF3	; 243
    1726:	41 e0       	ldi	r20, 0x01	; 1
    1728:	50 e0       	ldi	r21, 0x00	; 0
    172a:	0e 94 0d 0b 	call	0x161a	; 0x161a <__divmodsi4>
    172e:	49 01       	movw	r8, r18
    1730:	5a 01       	movw	r10, r20
    1732:	9b 01       	movw	r18, r22
    1734:	ac 01       	movw	r20, r24
    1736:	a7 ea       	ldi	r26, 0xA7	; 167
    1738:	b1 e4       	ldi	r27, 0x41	; 65
    173a:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <__muluhisi3>
    173e:	6b 01       	movw	r12, r22
    1740:	7c 01       	movw	r14, r24
    1742:	ac ee       	ldi	r26, 0xEC	; 236
    1744:	b4 ef       	ldi	r27, 0xF4	; 244
    1746:	a5 01       	movw	r20, r10
    1748:	94 01       	movw	r18, r8
    174a:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <__mulohisi3>
    174e:	dc 01       	movw	r26, r24
    1750:	cb 01       	movw	r24, r22
    1752:	8c 0d       	add	r24, r12
    1754:	9d 1d       	adc	r25, r13
    1756:	ae 1d       	adc	r26, r14
    1758:	bf 1d       	adc	r27, r15
    175a:	b7 ff       	sbrs	r27, 7
    175c:	03 c0       	rjmp	.+6      	; 0x1764 <do_rand+0x72>
    175e:	01 97       	sbiw	r24, 0x01	; 1
    1760:	a1 09       	sbc	r26, r1
    1762:	b0 48       	sbci	r27, 0x80	; 128
    1764:	88 83       	st	Y, r24
    1766:	99 83       	std	Y+1, r25	; 0x01
    1768:	aa 83       	std	Y+2, r26	; 0x02
    176a:	bb 83       	std	Y+3, r27	; 0x03
    176c:	9f 77       	andi	r25, 0x7F	; 127
    176e:	df 91       	pop	r29
    1770:	cf 91       	pop	r28
    1772:	ff 90       	pop	r15
    1774:	ef 90       	pop	r14
    1776:	df 90       	pop	r13
    1778:	cf 90       	pop	r12
    177a:	bf 90       	pop	r11
    177c:	af 90       	pop	r10
    177e:	9f 90       	pop	r9
    1780:	8f 90       	pop	r8
    1782:	08 95       	ret

00001784 <rand_r>:
    1784:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <do_rand>
    1788:	08 95       	ret

0000178a <rand>:
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	91 e0       	ldi	r25, 0x01	; 1
    178e:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <do_rand>
    1792:	08 95       	ret

00001794 <srand>:
    1794:	a0 e0       	ldi	r26, 0x00	; 0
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    179c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    17a0:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    17a4:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    17a8:	08 95       	ret

000017aa <tolower>:
    17aa:	91 11       	cpse	r25, r1
    17ac:	08 95       	ret
    17ae:	81 54       	subi	r24, 0x41	; 65
    17b0:	8a 51       	subi	r24, 0x1A	; 26
    17b2:	08 f4       	brcc	.+2      	; 0x17b6 <tolower+0xc>
    17b4:	80 5e       	subi	r24, 0xE0	; 224
    17b6:	85 5a       	subi	r24, 0xA5	; 165
    17b8:	08 95       	ret

000017ba <memcpy_P>:
    17ba:	fb 01       	movw	r30, r22
    17bc:	dc 01       	movw	r26, r24
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <memcpy_P+0xa>
    17c0:	05 90       	lpm	r0, Z+
    17c2:	0d 92       	st	X+, r0
    17c4:	41 50       	subi	r20, 0x01	; 1
    17c6:	50 40       	sbci	r21, 0x00	; 0
    17c8:	d8 f7       	brcc	.-10     	; 0x17c0 <memcpy_P+0x6>
    17ca:	08 95       	ret

000017cc <strcmp>:
    17cc:	fb 01       	movw	r30, r22
    17ce:	dc 01       	movw	r26, r24
    17d0:	8d 91       	ld	r24, X+
    17d2:	01 90       	ld	r0, Z+
    17d4:	80 19       	sub	r24, r0
    17d6:	01 10       	cpse	r0, r1
    17d8:	d9 f3       	breq	.-10     	; 0x17d0 <strcmp+0x4>
    17da:	99 0b       	sbc	r25, r25
    17dc:	08 95       	ret

000017de <fgetc>:
    17de:	cf 93       	push	r28
    17e0:	df 93       	push	r29
    17e2:	ec 01       	movw	r28, r24
    17e4:	2b 81       	ldd	r18, Y+3	; 0x03
    17e6:	20 ff       	sbrs	r18, 0
    17e8:	33 c0       	rjmp	.+102    	; 0x1850 <fgetc+0x72>
    17ea:	26 ff       	sbrs	r18, 6
    17ec:	0a c0       	rjmp	.+20     	; 0x1802 <fgetc+0x24>
    17ee:	2f 7b       	andi	r18, 0xBF	; 191
    17f0:	2b 83       	std	Y+3, r18	; 0x03
    17f2:	8e 81       	ldd	r24, Y+6	; 0x06
    17f4:	9f 81       	ldd	r25, Y+7	; 0x07
    17f6:	01 96       	adiw	r24, 0x01	; 1
    17f8:	9f 83       	std	Y+7, r25	; 0x07
    17fa:	8e 83       	std	Y+6, r24	; 0x06
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	29 c0       	rjmp	.+82     	; 0x1854 <fgetc+0x76>
    1802:	22 ff       	sbrs	r18, 2
    1804:	0f c0       	rjmp	.+30     	; 0x1824 <fgetc+0x46>
    1806:	e8 81       	ld	r30, Y
    1808:	f9 81       	ldd	r31, Y+1	; 0x01
    180a:	80 81       	ld	r24, Z
    180c:	08 2e       	mov	r0, r24
    180e:	00 0c       	add	r0, r0
    1810:	99 0b       	sbc	r25, r25
    1812:	00 97       	sbiw	r24, 0x00	; 0
    1814:	19 f4       	brne	.+6      	; 0x181c <fgetc+0x3e>
    1816:	20 62       	ori	r18, 0x20	; 32
    1818:	2b 83       	std	Y+3, r18	; 0x03
    181a:	1a c0       	rjmp	.+52     	; 0x1850 <fgetc+0x72>
    181c:	31 96       	adiw	r30, 0x01	; 1
    181e:	f9 83       	std	Y+1, r31	; 0x01
    1820:	e8 83       	st	Y, r30
    1822:	0e c0       	rjmp	.+28     	; 0x1840 <fgetc+0x62>
    1824:	ea 85       	ldd	r30, Y+10	; 0x0a
    1826:	fb 85       	ldd	r31, Y+11	; 0x0b
    1828:	09 95       	icall
    182a:	97 ff       	sbrs	r25, 7
    182c:	09 c0       	rjmp	.+18     	; 0x1840 <fgetc+0x62>
    182e:	2b 81       	ldd	r18, Y+3	; 0x03
    1830:	01 96       	adiw	r24, 0x01	; 1
    1832:	11 f0       	breq	.+4      	; 0x1838 <fgetc+0x5a>
    1834:	80 e2       	ldi	r24, 0x20	; 32
    1836:	01 c0       	rjmp	.+2      	; 0x183a <fgetc+0x5c>
    1838:	80 e1       	ldi	r24, 0x10	; 16
    183a:	82 2b       	or	r24, r18
    183c:	8b 83       	std	Y+3, r24	; 0x03
    183e:	08 c0       	rjmp	.+16     	; 0x1850 <fgetc+0x72>
    1840:	2e 81       	ldd	r18, Y+6	; 0x06
    1842:	3f 81       	ldd	r19, Y+7	; 0x07
    1844:	2f 5f       	subi	r18, 0xFF	; 255
    1846:	3f 4f       	sbci	r19, 0xFF	; 255
    1848:	3f 83       	std	Y+7, r19	; 0x07
    184a:	2e 83       	std	Y+6, r18	; 0x06
    184c:	99 27       	eor	r25, r25
    184e:	02 c0       	rjmp	.+4      	; 0x1854 <fgetc+0x76>
    1850:	8f ef       	ldi	r24, 0xFF	; 255
    1852:	9f ef       	ldi	r25, 0xFF	; 255
    1854:	df 91       	pop	r29
    1856:	cf 91       	pop	r28
    1858:	08 95       	ret

0000185a <fputc>:
    185a:	0f 93       	push	r16
    185c:	1f 93       	push	r17
    185e:	cf 93       	push	r28
    1860:	df 93       	push	r29
    1862:	fb 01       	movw	r30, r22
    1864:	23 81       	ldd	r18, Z+3	; 0x03
    1866:	21 fd       	sbrc	r18, 1
    1868:	03 c0       	rjmp	.+6      	; 0x1870 <fputc+0x16>
    186a:	8f ef       	ldi	r24, 0xFF	; 255
    186c:	9f ef       	ldi	r25, 0xFF	; 255
    186e:	2c c0       	rjmp	.+88     	; 0x18c8 <fputc+0x6e>
    1870:	22 ff       	sbrs	r18, 2
    1872:	16 c0       	rjmp	.+44     	; 0x18a0 <fputc+0x46>
    1874:	46 81       	ldd	r20, Z+6	; 0x06
    1876:	57 81       	ldd	r21, Z+7	; 0x07
    1878:	24 81       	ldd	r18, Z+4	; 0x04
    187a:	35 81       	ldd	r19, Z+5	; 0x05
    187c:	42 17       	cp	r20, r18
    187e:	53 07       	cpc	r21, r19
    1880:	44 f4       	brge	.+16     	; 0x1892 <fputc+0x38>
    1882:	a0 81       	ld	r26, Z
    1884:	b1 81       	ldd	r27, Z+1	; 0x01
    1886:	9d 01       	movw	r18, r26
    1888:	2f 5f       	subi	r18, 0xFF	; 255
    188a:	3f 4f       	sbci	r19, 0xFF	; 255
    188c:	31 83       	std	Z+1, r19	; 0x01
    188e:	20 83       	st	Z, r18
    1890:	8c 93       	st	X, r24
    1892:	26 81       	ldd	r18, Z+6	; 0x06
    1894:	37 81       	ldd	r19, Z+7	; 0x07
    1896:	2f 5f       	subi	r18, 0xFF	; 255
    1898:	3f 4f       	sbci	r19, 0xFF	; 255
    189a:	37 83       	std	Z+7, r19	; 0x07
    189c:	26 83       	std	Z+6, r18	; 0x06
    189e:	14 c0       	rjmp	.+40     	; 0x18c8 <fputc+0x6e>
    18a0:	8b 01       	movw	r16, r22
    18a2:	ec 01       	movw	r28, r24
    18a4:	fb 01       	movw	r30, r22
    18a6:	00 84       	ldd	r0, Z+8	; 0x08
    18a8:	f1 85       	ldd	r31, Z+9	; 0x09
    18aa:	e0 2d       	mov	r30, r0
    18ac:	09 95       	icall
    18ae:	89 2b       	or	r24, r25
    18b0:	e1 f6       	brne	.-72     	; 0x186a <fputc+0x10>
    18b2:	d8 01       	movw	r26, r16
    18b4:	16 96       	adiw	r26, 0x06	; 6
    18b6:	8d 91       	ld	r24, X+
    18b8:	9c 91       	ld	r25, X
    18ba:	17 97       	sbiw	r26, 0x07	; 7
    18bc:	01 96       	adiw	r24, 0x01	; 1
    18be:	17 96       	adiw	r26, 0x07	; 7
    18c0:	9c 93       	st	X, r25
    18c2:	8e 93       	st	-X, r24
    18c4:	16 97       	sbiw	r26, 0x06	; 6
    18c6:	ce 01       	movw	r24, r28
    18c8:	df 91       	pop	r29
    18ca:	cf 91       	pop	r28
    18cc:	1f 91       	pop	r17
    18ce:	0f 91       	pop	r16
    18d0:	08 95       	ret

000018d2 <printf>:
    18d2:	a0 e0       	ldi	r26, 0x00	; 0
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	ef e6       	ldi	r30, 0x6F	; 111
    18d8:	fc e0       	ldi	r31, 0x0C	; 12
    18da:	0c 94 46 0f 	jmp	0x1e8c	; 0x1e8c <__prologue_saves__+0x20>
    18de:	ae 01       	movw	r20, r28
    18e0:	4b 5f       	subi	r20, 0xFB	; 251
    18e2:	5f 4f       	sbci	r21, 0xFF	; 255
    18e4:	fa 01       	movw	r30, r20
    18e6:	61 91       	ld	r22, Z+
    18e8:	71 91       	ld	r23, Z+
    18ea:	af 01       	movw	r20, r30
    18ec:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <__iob+0x2>
    18f0:	90 91 b8 03 	lds	r25, 0x03B8	; 0x8003b8 <__iob+0x3>
    18f4:	0e 94 ce 0c 	call	0x199c	; 0x199c <vfprintf>
    18f8:	e2 e0       	ldi	r30, 0x02	; 2
    18fa:	0c 94 62 0f 	jmp	0x1ec4	; 0x1ec4 <__epilogue_restores__+0x20>

000018fe <printf_P>:
    18fe:	a0 e0       	ldi	r26, 0x00	; 0
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	e5 e8       	ldi	r30, 0x85	; 133
    1904:	fc e0       	ldi	r31, 0x0C	; 12
    1906:	0c 94 44 0f 	jmp	0x1e88	; 0x1e88 <__prologue_saves__+0x1c>
    190a:	ae 01       	movw	r20, r28
    190c:	49 5f       	subi	r20, 0xF9	; 249
    190e:	5f 4f       	sbci	r21, 0xFF	; 255
    1910:	da 01       	movw	r26, r20
    1912:	6d 91       	ld	r22, X+
    1914:	7d 91       	ld	r23, X+
    1916:	ad 01       	movw	r20, r26
    1918:	05 eb       	ldi	r16, 0xB5	; 181
    191a:	13 e0       	ldi	r17, 0x03	; 3
    191c:	f8 01       	movw	r30, r16
    191e:	82 81       	ldd	r24, Z+2	; 0x02
    1920:	93 81       	ldd	r25, Z+3	; 0x03
    1922:	dc 01       	movw	r26, r24
    1924:	13 96       	adiw	r26, 0x03	; 3
    1926:	2c 91       	ld	r18, X
    1928:	13 97       	sbiw	r26, 0x03	; 3
    192a:	28 60       	ori	r18, 0x08	; 8
    192c:	13 96       	adiw	r26, 0x03	; 3
    192e:	2c 93       	st	X, r18
    1930:	0e 94 ce 0c 	call	0x199c	; 0x199c <vfprintf>
    1934:	d8 01       	movw	r26, r16
    1936:	12 96       	adiw	r26, 0x02	; 2
    1938:	ed 91       	ld	r30, X+
    193a:	fc 91       	ld	r31, X
    193c:	13 97       	sbiw	r26, 0x03	; 3
    193e:	23 81       	ldd	r18, Z+3	; 0x03
    1940:	27 7f       	andi	r18, 0xF7	; 247
    1942:	23 83       	std	Z+3, r18	; 0x03
    1944:	e4 e0       	ldi	r30, 0x04	; 4
    1946:	0c 94 60 0f 	jmp	0x1ec0	; 0x1ec0 <__epilogue_restores__+0x1c>

0000194a <putchar>:
    194a:	60 91 b7 03 	lds	r22, 0x03B7	; 0x8003b7 <__iob+0x2>
    194e:	70 91 b8 03 	lds	r23, 0x03B8	; 0x8003b8 <__iob+0x3>
    1952:	0e 94 2d 0c 	call	0x185a	; 0x185a <fputc>
    1956:	08 95       	ret

00001958 <sprintf>:
    1958:	ae e0       	ldi	r26, 0x0E	; 14
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	e2 eb       	ldi	r30, 0xB2	; 178
    195e:	fc e0       	ldi	r31, 0x0C	; 12
    1960:	0c 94 44 0f 	jmp	0x1e88	; 0x1e88 <__prologue_saves__+0x1c>
    1964:	0d 89       	ldd	r16, Y+21	; 0x15
    1966:	1e 89       	ldd	r17, Y+22	; 0x16
    1968:	86 e0       	ldi	r24, 0x06	; 6
    196a:	8c 83       	std	Y+4, r24	; 0x04
    196c:	1a 83       	std	Y+2, r17	; 0x02
    196e:	09 83       	std	Y+1, r16	; 0x01
    1970:	8f ef       	ldi	r24, 0xFF	; 255
    1972:	9f e7       	ldi	r25, 0x7F	; 127
    1974:	9e 83       	std	Y+6, r25	; 0x06
    1976:	8d 83       	std	Y+5, r24	; 0x05
    1978:	ae 01       	movw	r20, r28
    197a:	47 5e       	subi	r20, 0xE7	; 231
    197c:	5f 4f       	sbci	r21, 0xFF	; 255
    197e:	6f 89       	ldd	r22, Y+23	; 0x17
    1980:	78 8d       	ldd	r23, Y+24	; 0x18
    1982:	ce 01       	movw	r24, r28
    1984:	01 96       	adiw	r24, 0x01	; 1
    1986:	0e 94 ce 0c 	call	0x199c	; 0x199c <vfprintf>
    198a:	ef 81       	ldd	r30, Y+7	; 0x07
    198c:	f8 85       	ldd	r31, Y+8	; 0x08
    198e:	e0 0f       	add	r30, r16
    1990:	f1 1f       	adc	r31, r17
    1992:	10 82       	st	Z, r1
    1994:	2e 96       	adiw	r28, 0x0e	; 14
    1996:	e4 e0       	ldi	r30, 0x04	; 4
    1998:	0c 94 60 0f 	jmp	0x1ec0	; 0x1ec0 <__epilogue_restores__+0x1c>

0000199c <vfprintf>:
    199c:	ab e0       	ldi	r26, 0x0B	; 11
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	e4 ed       	ldi	r30, 0xD4	; 212
    19a2:	fc e0       	ldi	r31, 0x0C	; 12
    19a4:	0c 94 36 0f 	jmp	0x1e6c	; 0x1e6c <__prologue_saves__>
    19a8:	6c 01       	movw	r12, r24
    19aa:	7b 01       	movw	r14, r22
    19ac:	8a 01       	movw	r16, r20
    19ae:	fc 01       	movw	r30, r24
    19b0:	17 82       	std	Z+7, r1	; 0x07
    19b2:	16 82       	std	Z+6, r1	; 0x06
    19b4:	83 81       	ldd	r24, Z+3	; 0x03
    19b6:	81 ff       	sbrs	r24, 1
    19b8:	cc c1       	rjmp	.+920    	; 0x1d52 <vfprintf+0x3b6>
    19ba:	ce 01       	movw	r24, r28
    19bc:	01 96       	adiw	r24, 0x01	; 1
    19be:	3c 01       	movw	r6, r24
    19c0:	f6 01       	movw	r30, r12
    19c2:	93 81       	ldd	r25, Z+3	; 0x03
    19c4:	f7 01       	movw	r30, r14
    19c6:	93 fd       	sbrc	r25, 3
    19c8:	85 91       	lpm	r24, Z+
    19ca:	93 ff       	sbrs	r25, 3
    19cc:	81 91       	ld	r24, Z+
    19ce:	7f 01       	movw	r14, r30
    19d0:	88 23       	and	r24, r24
    19d2:	09 f4       	brne	.+2      	; 0x19d6 <vfprintf+0x3a>
    19d4:	ba c1       	rjmp	.+884    	; 0x1d4a <vfprintf+0x3ae>
    19d6:	85 32       	cpi	r24, 0x25	; 37
    19d8:	39 f4       	brne	.+14     	; 0x19e8 <vfprintf+0x4c>
    19da:	93 fd       	sbrc	r25, 3
    19dc:	85 91       	lpm	r24, Z+
    19de:	93 ff       	sbrs	r25, 3
    19e0:	81 91       	ld	r24, Z+
    19e2:	7f 01       	movw	r14, r30
    19e4:	85 32       	cpi	r24, 0x25	; 37
    19e6:	29 f4       	brne	.+10     	; 0x19f2 <vfprintf+0x56>
    19e8:	b6 01       	movw	r22, r12
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	0e 94 2d 0c 	call	0x185a	; 0x185a <fputc>
    19f0:	e7 cf       	rjmp	.-50     	; 0x19c0 <vfprintf+0x24>
    19f2:	91 2c       	mov	r9, r1
    19f4:	21 2c       	mov	r2, r1
    19f6:	31 2c       	mov	r3, r1
    19f8:	ff e1       	ldi	r31, 0x1F	; 31
    19fa:	f3 15       	cp	r31, r3
    19fc:	d8 f0       	brcs	.+54     	; 0x1a34 <vfprintf+0x98>
    19fe:	8b 32       	cpi	r24, 0x2B	; 43
    1a00:	79 f0       	breq	.+30     	; 0x1a20 <vfprintf+0x84>
    1a02:	38 f4       	brcc	.+14     	; 0x1a12 <vfprintf+0x76>
    1a04:	80 32       	cpi	r24, 0x20	; 32
    1a06:	79 f0       	breq	.+30     	; 0x1a26 <vfprintf+0x8a>
    1a08:	83 32       	cpi	r24, 0x23	; 35
    1a0a:	a1 f4       	brne	.+40     	; 0x1a34 <vfprintf+0x98>
    1a0c:	23 2d       	mov	r18, r3
    1a0e:	20 61       	ori	r18, 0x10	; 16
    1a10:	1d c0       	rjmp	.+58     	; 0x1a4c <vfprintf+0xb0>
    1a12:	8d 32       	cpi	r24, 0x2D	; 45
    1a14:	61 f0       	breq	.+24     	; 0x1a2e <vfprintf+0x92>
    1a16:	80 33       	cpi	r24, 0x30	; 48
    1a18:	69 f4       	brne	.+26     	; 0x1a34 <vfprintf+0x98>
    1a1a:	23 2d       	mov	r18, r3
    1a1c:	21 60       	ori	r18, 0x01	; 1
    1a1e:	16 c0       	rjmp	.+44     	; 0x1a4c <vfprintf+0xb0>
    1a20:	83 2d       	mov	r24, r3
    1a22:	82 60       	ori	r24, 0x02	; 2
    1a24:	38 2e       	mov	r3, r24
    1a26:	e3 2d       	mov	r30, r3
    1a28:	e4 60       	ori	r30, 0x04	; 4
    1a2a:	3e 2e       	mov	r3, r30
    1a2c:	2a c0       	rjmp	.+84     	; 0x1a82 <vfprintf+0xe6>
    1a2e:	f3 2d       	mov	r31, r3
    1a30:	f8 60       	ori	r31, 0x08	; 8
    1a32:	1d c0       	rjmp	.+58     	; 0x1a6e <vfprintf+0xd2>
    1a34:	37 fc       	sbrc	r3, 7
    1a36:	2d c0       	rjmp	.+90     	; 0x1a92 <vfprintf+0xf6>
    1a38:	20 ed       	ldi	r18, 0xD0	; 208
    1a3a:	28 0f       	add	r18, r24
    1a3c:	2a 30       	cpi	r18, 0x0A	; 10
    1a3e:	40 f0       	brcs	.+16     	; 0x1a50 <vfprintf+0xb4>
    1a40:	8e 32       	cpi	r24, 0x2E	; 46
    1a42:	b9 f4       	brne	.+46     	; 0x1a72 <vfprintf+0xd6>
    1a44:	36 fc       	sbrc	r3, 6
    1a46:	81 c1       	rjmp	.+770    	; 0x1d4a <vfprintf+0x3ae>
    1a48:	23 2d       	mov	r18, r3
    1a4a:	20 64       	ori	r18, 0x40	; 64
    1a4c:	32 2e       	mov	r3, r18
    1a4e:	19 c0       	rjmp	.+50     	; 0x1a82 <vfprintf+0xe6>
    1a50:	36 fe       	sbrs	r3, 6
    1a52:	06 c0       	rjmp	.+12     	; 0x1a60 <vfprintf+0xc4>
    1a54:	8a e0       	ldi	r24, 0x0A	; 10
    1a56:	98 9e       	mul	r9, r24
    1a58:	20 0d       	add	r18, r0
    1a5a:	11 24       	eor	r1, r1
    1a5c:	92 2e       	mov	r9, r18
    1a5e:	11 c0       	rjmp	.+34     	; 0x1a82 <vfprintf+0xe6>
    1a60:	ea e0       	ldi	r30, 0x0A	; 10
    1a62:	2e 9e       	mul	r2, r30
    1a64:	20 0d       	add	r18, r0
    1a66:	11 24       	eor	r1, r1
    1a68:	22 2e       	mov	r2, r18
    1a6a:	f3 2d       	mov	r31, r3
    1a6c:	f0 62       	ori	r31, 0x20	; 32
    1a6e:	3f 2e       	mov	r3, r31
    1a70:	08 c0       	rjmp	.+16     	; 0x1a82 <vfprintf+0xe6>
    1a72:	8c 36       	cpi	r24, 0x6C	; 108
    1a74:	21 f4       	brne	.+8      	; 0x1a7e <vfprintf+0xe2>
    1a76:	83 2d       	mov	r24, r3
    1a78:	80 68       	ori	r24, 0x80	; 128
    1a7a:	38 2e       	mov	r3, r24
    1a7c:	02 c0       	rjmp	.+4      	; 0x1a82 <vfprintf+0xe6>
    1a7e:	88 36       	cpi	r24, 0x68	; 104
    1a80:	41 f4       	brne	.+16     	; 0x1a92 <vfprintf+0xf6>
    1a82:	f7 01       	movw	r30, r14
    1a84:	93 fd       	sbrc	r25, 3
    1a86:	85 91       	lpm	r24, Z+
    1a88:	93 ff       	sbrs	r25, 3
    1a8a:	81 91       	ld	r24, Z+
    1a8c:	7f 01       	movw	r14, r30
    1a8e:	81 11       	cpse	r24, r1
    1a90:	b3 cf       	rjmp	.-154    	; 0x19f8 <vfprintf+0x5c>
    1a92:	98 2f       	mov	r25, r24
    1a94:	9f 7d       	andi	r25, 0xDF	; 223
    1a96:	95 54       	subi	r25, 0x45	; 69
    1a98:	93 30       	cpi	r25, 0x03	; 3
    1a9a:	28 f4       	brcc	.+10     	; 0x1aa6 <vfprintf+0x10a>
    1a9c:	0c 5f       	subi	r16, 0xFC	; 252
    1a9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa0:	9f e3       	ldi	r25, 0x3F	; 63
    1aa2:	99 83       	std	Y+1, r25	; 0x01
    1aa4:	0d c0       	rjmp	.+26     	; 0x1ac0 <vfprintf+0x124>
    1aa6:	83 36       	cpi	r24, 0x63	; 99
    1aa8:	31 f0       	breq	.+12     	; 0x1ab6 <vfprintf+0x11a>
    1aaa:	83 37       	cpi	r24, 0x73	; 115
    1aac:	71 f0       	breq	.+28     	; 0x1aca <vfprintf+0x12e>
    1aae:	83 35       	cpi	r24, 0x53	; 83
    1ab0:	09 f0       	breq	.+2      	; 0x1ab4 <vfprintf+0x118>
    1ab2:	59 c0       	rjmp	.+178    	; 0x1b66 <vfprintf+0x1ca>
    1ab4:	21 c0       	rjmp	.+66     	; 0x1af8 <vfprintf+0x15c>
    1ab6:	f8 01       	movw	r30, r16
    1ab8:	80 81       	ld	r24, Z
    1aba:	89 83       	std	Y+1, r24	; 0x01
    1abc:	0e 5f       	subi	r16, 0xFE	; 254
    1abe:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac0:	88 24       	eor	r8, r8
    1ac2:	83 94       	inc	r8
    1ac4:	91 2c       	mov	r9, r1
    1ac6:	53 01       	movw	r10, r6
    1ac8:	13 c0       	rjmp	.+38     	; 0x1af0 <vfprintf+0x154>
    1aca:	28 01       	movw	r4, r16
    1acc:	f2 e0       	ldi	r31, 0x02	; 2
    1ace:	4f 0e       	add	r4, r31
    1ad0:	51 1c       	adc	r5, r1
    1ad2:	f8 01       	movw	r30, r16
    1ad4:	a0 80       	ld	r10, Z
    1ad6:	b1 80       	ldd	r11, Z+1	; 0x01
    1ad8:	36 fe       	sbrs	r3, 6
    1ada:	03 c0       	rjmp	.+6      	; 0x1ae2 <vfprintf+0x146>
    1adc:	69 2d       	mov	r22, r9
    1ade:	70 e0       	ldi	r23, 0x00	; 0
    1ae0:	02 c0       	rjmp	.+4      	; 0x1ae6 <vfprintf+0x14a>
    1ae2:	6f ef       	ldi	r22, 0xFF	; 255
    1ae4:	7f ef       	ldi	r23, 0xFF	; 255
    1ae6:	c5 01       	movw	r24, r10
    1ae8:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <strnlen>
    1aec:	4c 01       	movw	r8, r24
    1aee:	82 01       	movw	r16, r4
    1af0:	f3 2d       	mov	r31, r3
    1af2:	ff 77       	andi	r31, 0x7F	; 127
    1af4:	3f 2e       	mov	r3, r31
    1af6:	16 c0       	rjmp	.+44     	; 0x1b24 <vfprintf+0x188>
    1af8:	28 01       	movw	r4, r16
    1afa:	22 e0       	ldi	r18, 0x02	; 2
    1afc:	42 0e       	add	r4, r18
    1afe:	51 1c       	adc	r5, r1
    1b00:	f8 01       	movw	r30, r16
    1b02:	a0 80       	ld	r10, Z
    1b04:	b1 80       	ldd	r11, Z+1	; 0x01
    1b06:	36 fe       	sbrs	r3, 6
    1b08:	03 c0       	rjmp	.+6      	; 0x1b10 <vfprintf+0x174>
    1b0a:	69 2d       	mov	r22, r9
    1b0c:	70 e0       	ldi	r23, 0x00	; 0
    1b0e:	02 c0       	rjmp	.+4      	; 0x1b14 <vfprintf+0x178>
    1b10:	6f ef       	ldi	r22, 0xFF	; 255
    1b12:	7f ef       	ldi	r23, 0xFF	; 255
    1b14:	c5 01       	movw	r24, r10
    1b16:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <strnlen_P>
    1b1a:	4c 01       	movw	r8, r24
    1b1c:	f3 2d       	mov	r31, r3
    1b1e:	f0 68       	ori	r31, 0x80	; 128
    1b20:	3f 2e       	mov	r3, r31
    1b22:	82 01       	movw	r16, r4
    1b24:	33 fc       	sbrc	r3, 3
    1b26:	1b c0       	rjmp	.+54     	; 0x1b5e <vfprintf+0x1c2>
    1b28:	82 2d       	mov	r24, r2
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	88 16       	cp	r8, r24
    1b2e:	99 06       	cpc	r9, r25
    1b30:	b0 f4       	brcc	.+44     	; 0x1b5e <vfprintf+0x1c2>
    1b32:	b6 01       	movw	r22, r12
    1b34:	80 e2       	ldi	r24, 0x20	; 32
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	0e 94 2d 0c 	call	0x185a	; 0x185a <fputc>
    1b3c:	2a 94       	dec	r2
    1b3e:	f4 cf       	rjmp	.-24     	; 0x1b28 <vfprintf+0x18c>
    1b40:	f5 01       	movw	r30, r10
    1b42:	37 fc       	sbrc	r3, 7
    1b44:	85 91       	lpm	r24, Z+
    1b46:	37 fe       	sbrs	r3, 7
    1b48:	81 91       	ld	r24, Z+
    1b4a:	5f 01       	movw	r10, r30
    1b4c:	b6 01       	movw	r22, r12
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	0e 94 2d 0c 	call	0x185a	; 0x185a <fputc>
    1b54:	21 10       	cpse	r2, r1
    1b56:	2a 94       	dec	r2
    1b58:	21 e0       	ldi	r18, 0x01	; 1
    1b5a:	82 1a       	sub	r8, r18
    1b5c:	91 08       	sbc	r9, r1
    1b5e:	81 14       	cp	r8, r1
    1b60:	91 04       	cpc	r9, r1
    1b62:	71 f7       	brne	.-36     	; 0x1b40 <vfprintf+0x1a4>
    1b64:	e8 c0       	rjmp	.+464    	; 0x1d36 <vfprintf+0x39a>
    1b66:	84 36       	cpi	r24, 0x64	; 100
    1b68:	11 f0       	breq	.+4      	; 0x1b6e <vfprintf+0x1d2>
    1b6a:	89 36       	cpi	r24, 0x69	; 105
    1b6c:	41 f5       	brne	.+80     	; 0x1bbe <vfprintf+0x222>
    1b6e:	f8 01       	movw	r30, r16
    1b70:	37 fe       	sbrs	r3, 7
    1b72:	07 c0       	rjmp	.+14     	; 0x1b82 <vfprintf+0x1e6>
    1b74:	60 81       	ld	r22, Z
    1b76:	71 81       	ldd	r23, Z+1	; 0x01
    1b78:	82 81       	ldd	r24, Z+2	; 0x02
    1b7a:	93 81       	ldd	r25, Z+3	; 0x03
    1b7c:	0c 5f       	subi	r16, 0xFC	; 252
    1b7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b80:	08 c0       	rjmp	.+16     	; 0x1b92 <vfprintf+0x1f6>
    1b82:	60 81       	ld	r22, Z
    1b84:	71 81       	ldd	r23, Z+1	; 0x01
    1b86:	07 2e       	mov	r0, r23
    1b88:	00 0c       	add	r0, r0
    1b8a:	88 0b       	sbc	r24, r24
    1b8c:	99 0b       	sbc	r25, r25
    1b8e:	0e 5f       	subi	r16, 0xFE	; 254
    1b90:	1f 4f       	sbci	r17, 0xFF	; 255
    1b92:	f3 2d       	mov	r31, r3
    1b94:	ff 76       	andi	r31, 0x6F	; 111
    1b96:	3f 2e       	mov	r3, r31
    1b98:	97 ff       	sbrs	r25, 7
    1b9a:	09 c0       	rjmp	.+18     	; 0x1bae <vfprintf+0x212>
    1b9c:	90 95       	com	r25
    1b9e:	80 95       	com	r24
    1ba0:	70 95       	com	r23
    1ba2:	61 95       	neg	r22
    1ba4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ba8:	9f 4f       	sbci	r25, 0xFF	; 255
    1baa:	f0 68       	ori	r31, 0x80	; 128
    1bac:	3f 2e       	mov	r3, r31
    1bae:	2a e0       	ldi	r18, 0x0A	; 10
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	a3 01       	movw	r20, r6
    1bb4:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__ultoa_invert>
    1bb8:	88 2e       	mov	r8, r24
    1bba:	86 18       	sub	r8, r6
    1bbc:	45 c0       	rjmp	.+138    	; 0x1c48 <vfprintf+0x2ac>
    1bbe:	85 37       	cpi	r24, 0x75	; 117
    1bc0:	31 f4       	brne	.+12     	; 0x1bce <vfprintf+0x232>
    1bc2:	23 2d       	mov	r18, r3
    1bc4:	2f 7e       	andi	r18, 0xEF	; 239
    1bc6:	b2 2e       	mov	r11, r18
    1bc8:	2a e0       	ldi	r18, 0x0A	; 10
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	25 c0       	rjmp	.+74     	; 0x1c18 <vfprintf+0x27c>
    1bce:	93 2d       	mov	r25, r3
    1bd0:	99 7f       	andi	r25, 0xF9	; 249
    1bd2:	b9 2e       	mov	r11, r25
    1bd4:	8f 36       	cpi	r24, 0x6F	; 111
    1bd6:	c1 f0       	breq	.+48     	; 0x1c08 <vfprintf+0x26c>
    1bd8:	18 f4       	brcc	.+6      	; 0x1be0 <vfprintf+0x244>
    1bda:	88 35       	cpi	r24, 0x58	; 88
    1bdc:	79 f0       	breq	.+30     	; 0x1bfc <vfprintf+0x260>
    1bde:	b5 c0       	rjmp	.+362    	; 0x1d4a <vfprintf+0x3ae>
    1be0:	80 37       	cpi	r24, 0x70	; 112
    1be2:	19 f0       	breq	.+6      	; 0x1bea <vfprintf+0x24e>
    1be4:	88 37       	cpi	r24, 0x78	; 120
    1be6:	21 f0       	breq	.+8      	; 0x1bf0 <vfprintf+0x254>
    1be8:	b0 c0       	rjmp	.+352    	; 0x1d4a <vfprintf+0x3ae>
    1bea:	e9 2f       	mov	r30, r25
    1bec:	e0 61       	ori	r30, 0x10	; 16
    1bee:	be 2e       	mov	r11, r30
    1bf0:	b4 fe       	sbrs	r11, 4
    1bf2:	0d c0       	rjmp	.+26     	; 0x1c0e <vfprintf+0x272>
    1bf4:	fb 2d       	mov	r31, r11
    1bf6:	f4 60       	ori	r31, 0x04	; 4
    1bf8:	bf 2e       	mov	r11, r31
    1bfa:	09 c0       	rjmp	.+18     	; 0x1c0e <vfprintf+0x272>
    1bfc:	34 fe       	sbrs	r3, 4
    1bfe:	0a c0       	rjmp	.+20     	; 0x1c14 <vfprintf+0x278>
    1c00:	29 2f       	mov	r18, r25
    1c02:	26 60       	ori	r18, 0x06	; 6
    1c04:	b2 2e       	mov	r11, r18
    1c06:	06 c0       	rjmp	.+12     	; 0x1c14 <vfprintf+0x278>
    1c08:	28 e0       	ldi	r18, 0x08	; 8
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	05 c0       	rjmp	.+10     	; 0x1c18 <vfprintf+0x27c>
    1c0e:	20 e1       	ldi	r18, 0x10	; 16
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	02 c0       	rjmp	.+4      	; 0x1c18 <vfprintf+0x27c>
    1c14:	20 e1       	ldi	r18, 0x10	; 16
    1c16:	32 e0       	ldi	r19, 0x02	; 2
    1c18:	f8 01       	movw	r30, r16
    1c1a:	b7 fe       	sbrs	r11, 7
    1c1c:	07 c0       	rjmp	.+14     	; 0x1c2c <vfprintf+0x290>
    1c1e:	60 81       	ld	r22, Z
    1c20:	71 81       	ldd	r23, Z+1	; 0x01
    1c22:	82 81       	ldd	r24, Z+2	; 0x02
    1c24:	93 81       	ldd	r25, Z+3	; 0x03
    1c26:	0c 5f       	subi	r16, 0xFC	; 252
    1c28:	1f 4f       	sbci	r17, 0xFF	; 255
    1c2a:	06 c0       	rjmp	.+12     	; 0x1c38 <vfprintf+0x29c>
    1c2c:	60 81       	ld	r22, Z
    1c2e:	71 81       	ldd	r23, Z+1	; 0x01
    1c30:	80 e0       	ldi	r24, 0x00	; 0
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	0e 5f       	subi	r16, 0xFE	; 254
    1c36:	1f 4f       	sbci	r17, 0xFF	; 255
    1c38:	a3 01       	movw	r20, r6
    1c3a:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__ultoa_invert>
    1c3e:	88 2e       	mov	r8, r24
    1c40:	86 18       	sub	r8, r6
    1c42:	fb 2d       	mov	r31, r11
    1c44:	ff 77       	andi	r31, 0x7F	; 127
    1c46:	3f 2e       	mov	r3, r31
    1c48:	36 fe       	sbrs	r3, 6
    1c4a:	0d c0       	rjmp	.+26     	; 0x1c66 <vfprintf+0x2ca>
    1c4c:	23 2d       	mov	r18, r3
    1c4e:	2e 7f       	andi	r18, 0xFE	; 254
    1c50:	a2 2e       	mov	r10, r18
    1c52:	89 14       	cp	r8, r9
    1c54:	58 f4       	brcc	.+22     	; 0x1c6c <vfprintf+0x2d0>
    1c56:	34 fe       	sbrs	r3, 4
    1c58:	0b c0       	rjmp	.+22     	; 0x1c70 <vfprintf+0x2d4>
    1c5a:	32 fc       	sbrc	r3, 2
    1c5c:	09 c0       	rjmp	.+18     	; 0x1c70 <vfprintf+0x2d4>
    1c5e:	83 2d       	mov	r24, r3
    1c60:	8e 7e       	andi	r24, 0xEE	; 238
    1c62:	a8 2e       	mov	r10, r24
    1c64:	05 c0       	rjmp	.+10     	; 0x1c70 <vfprintf+0x2d4>
    1c66:	b8 2c       	mov	r11, r8
    1c68:	a3 2c       	mov	r10, r3
    1c6a:	03 c0       	rjmp	.+6      	; 0x1c72 <vfprintf+0x2d6>
    1c6c:	b8 2c       	mov	r11, r8
    1c6e:	01 c0       	rjmp	.+2      	; 0x1c72 <vfprintf+0x2d6>
    1c70:	b9 2c       	mov	r11, r9
    1c72:	a4 fe       	sbrs	r10, 4
    1c74:	0f c0       	rjmp	.+30     	; 0x1c94 <vfprintf+0x2f8>
    1c76:	fe 01       	movw	r30, r28
    1c78:	e8 0d       	add	r30, r8
    1c7a:	f1 1d       	adc	r31, r1
    1c7c:	80 81       	ld	r24, Z
    1c7e:	80 33       	cpi	r24, 0x30	; 48
    1c80:	21 f4       	brne	.+8      	; 0x1c8a <vfprintf+0x2ee>
    1c82:	9a 2d       	mov	r25, r10
    1c84:	99 7e       	andi	r25, 0xE9	; 233
    1c86:	a9 2e       	mov	r10, r25
    1c88:	09 c0       	rjmp	.+18     	; 0x1c9c <vfprintf+0x300>
    1c8a:	a2 fe       	sbrs	r10, 2
    1c8c:	06 c0       	rjmp	.+12     	; 0x1c9a <vfprintf+0x2fe>
    1c8e:	b3 94       	inc	r11
    1c90:	b3 94       	inc	r11
    1c92:	04 c0       	rjmp	.+8      	; 0x1c9c <vfprintf+0x300>
    1c94:	8a 2d       	mov	r24, r10
    1c96:	86 78       	andi	r24, 0x86	; 134
    1c98:	09 f0       	breq	.+2      	; 0x1c9c <vfprintf+0x300>
    1c9a:	b3 94       	inc	r11
    1c9c:	a3 fc       	sbrc	r10, 3
    1c9e:	11 c0       	rjmp	.+34     	; 0x1cc2 <vfprintf+0x326>
    1ca0:	a0 fe       	sbrs	r10, 0
    1ca2:	06 c0       	rjmp	.+12     	; 0x1cb0 <vfprintf+0x314>
    1ca4:	b2 14       	cp	r11, r2
    1ca6:	88 f4       	brcc	.+34     	; 0x1cca <vfprintf+0x32e>
    1ca8:	28 0c       	add	r2, r8
    1caa:	92 2c       	mov	r9, r2
    1cac:	9b 18       	sub	r9, r11
    1cae:	0e c0       	rjmp	.+28     	; 0x1ccc <vfprintf+0x330>
    1cb0:	b2 14       	cp	r11, r2
    1cb2:	60 f4       	brcc	.+24     	; 0x1ccc <vfprintf+0x330>
    1cb4:	b6 01       	movw	r22, r12
    1cb6:	80 e2       	ldi	r24, 0x20	; 32
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	0e 94 2d 0c 	call	0x185a	; 0x185a <fputc>
    1cbe:	b3 94       	inc	r11
    1cc0:	f7 cf       	rjmp	.-18     	; 0x1cb0 <vfprintf+0x314>
    1cc2:	b2 14       	cp	r11, r2
    1cc4:	18 f4       	brcc	.+6      	; 0x1ccc <vfprintf+0x330>
    1cc6:	2b 18       	sub	r2, r11
    1cc8:	02 c0       	rjmp	.+4      	; 0x1cce <vfprintf+0x332>
    1cca:	98 2c       	mov	r9, r8
    1ccc:	21 2c       	mov	r2, r1
    1cce:	a4 fe       	sbrs	r10, 4
    1cd0:	10 c0       	rjmp	.+32     	; 0x1cf2 <vfprintf+0x356>
    1cd2:	b6 01       	movw	r22, r12
    1cd4:	80 e3       	ldi	r24, 0x30	; 48
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	0e 94 2d 0c 	call	0x185a	; 0x185a <fputc>
    1cdc:	a2 fe       	sbrs	r10, 2
    1cde:	17 c0       	rjmp	.+46     	; 0x1d0e <vfprintf+0x372>
    1ce0:	a1 fc       	sbrc	r10, 1
    1ce2:	03 c0       	rjmp	.+6      	; 0x1cea <vfprintf+0x34e>
    1ce4:	88 e7       	ldi	r24, 0x78	; 120
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	02 c0       	rjmp	.+4      	; 0x1cee <vfprintf+0x352>
    1cea:	88 e5       	ldi	r24, 0x58	; 88
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	b6 01       	movw	r22, r12
    1cf0:	0c c0       	rjmp	.+24     	; 0x1d0a <vfprintf+0x36e>
    1cf2:	8a 2d       	mov	r24, r10
    1cf4:	86 78       	andi	r24, 0x86	; 134
    1cf6:	59 f0       	breq	.+22     	; 0x1d0e <vfprintf+0x372>
    1cf8:	a1 fe       	sbrs	r10, 1
    1cfa:	02 c0       	rjmp	.+4      	; 0x1d00 <vfprintf+0x364>
    1cfc:	8b e2       	ldi	r24, 0x2B	; 43
    1cfe:	01 c0       	rjmp	.+2      	; 0x1d02 <vfprintf+0x366>
    1d00:	80 e2       	ldi	r24, 0x20	; 32
    1d02:	a7 fc       	sbrc	r10, 7
    1d04:	8d e2       	ldi	r24, 0x2D	; 45
    1d06:	b6 01       	movw	r22, r12
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	0e 94 2d 0c 	call	0x185a	; 0x185a <fputc>
    1d0e:	89 14       	cp	r8, r9
    1d10:	38 f4       	brcc	.+14     	; 0x1d20 <vfprintf+0x384>
    1d12:	b6 01       	movw	r22, r12
    1d14:	80 e3       	ldi	r24, 0x30	; 48
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	0e 94 2d 0c 	call	0x185a	; 0x185a <fputc>
    1d1c:	9a 94       	dec	r9
    1d1e:	f7 cf       	rjmp	.-18     	; 0x1d0e <vfprintf+0x372>
    1d20:	8a 94       	dec	r8
    1d22:	f3 01       	movw	r30, r6
    1d24:	e8 0d       	add	r30, r8
    1d26:	f1 1d       	adc	r31, r1
    1d28:	80 81       	ld	r24, Z
    1d2a:	b6 01       	movw	r22, r12
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	0e 94 2d 0c 	call	0x185a	; 0x185a <fputc>
    1d32:	81 10       	cpse	r8, r1
    1d34:	f5 cf       	rjmp	.-22     	; 0x1d20 <vfprintf+0x384>
    1d36:	22 20       	and	r2, r2
    1d38:	09 f4       	brne	.+2      	; 0x1d3c <vfprintf+0x3a0>
    1d3a:	42 ce       	rjmp	.-892    	; 0x19c0 <vfprintf+0x24>
    1d3c:	b6 01       	movw	r22, r12
    1d3e:	80 e2       	ldi	r24, 0x20	; 32
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	0e 94 2d 0c 	call	0x185a	; 0x185a <fputc>
    1d46:	2a 94       	dec	r2
    1d48:	f6 cf       	rjmp	.-20     	; 0x1d36 <vfprintf+0x39a>
    1d4a:	f6 01       	movw	r30, r12
    1d4c:	86 81       	ldd	r24, Z+6	; 0x06
    1d4e:	97 81       	ldd	r25, Z+7	; 0x07
    1d50:	02 c0       	rjmp	.+4      	; 0x1d56 <vfprintf+0x3ba>
    1d52:	8f ef       	ldi	r24, 0xFF	; 255
    1d54:	9f ef       	ldi	r25, 0xFF	; 255
    1d56:	2b 96       	adiw	r28, 0x0b	; 11
    1d58:	e2 e1       	ldi	r30, 0x12	; 18
    1d5a:	0c 94 52 0f 	jmp	0x1ea4	; 0x1ea4 <__epilogue_restores__>

00001d5e <strnlen_P>:
    1d5e:	fc 01       	movw	r30, r24
    1d60:	05 90       	lpm	r0, Z+
    1d62:	61 50       	subi	r22, 0x01	; 1
    1d64:	70 40       	sbci	r23, 0x00	; 0
    1d66:	01 10       	cpse	r0, r1
    1d68:	d8 f7       	brcc	.-10     	; 0x1d60 <strnlen_P+0x2>
    1d6a:	80 95       	com	r24
    1d6c:	90 95       	com	r25
    1d6e:	8e 0f       	add	r24, r30
    1d70:	9f 1f       	adc	r25, r31
    1d72:	08 95       	ret

00001d74 <strnlen>:
    1d74:	fc 01       	movw	r30, r24
    1d76:	61 50       	subi	r22, 0x01	; 1
    1d78:	70 40       	sbci	r23, 0x00	; 0
    1d7a:	01 90       	ld	r0, Z+
    1d7c:	01 10       	cpse	r0, r1
    1d7e:	d8 f7       	brcc	.-10     	; 0x1d76 <strnlen+0x2>
    1d80:	80 95       	com	r24
    1d82:	90 95       	com	r25
    1d84:	8e 0f       	add	r24, r30
    1d86:	9f 1f       	adc	r25, r31
    1d88:	08 95       	ret

00001d8a <__ultoa_invert>:
    1d8a:	fa 01       	movw	r30, r20
    1d8c:	aa 27       	eor	r26, r26
    1d8e:	28 30       	cpi	r18, 0x08	; 8
    1d90:	51 f1       	breq	.+84     	; 0x1de6 <__ultoa_invert+0x5c>
    1d92:	20 31       	cpi	r18, 0x10	; 16
    1d94:	81 f1       	breq	.+96     	; 0x1df6 <__ultoa_invert+0x6c>
    1d96:	e8 94       	clt
    1d98:	6f 93       	push	r22
    1d9a:	6e 7f       	andi	r22, 0xFE	; 254
    1d9c:	6e 5f       	subi	r22, 0xFE	; 254
    1d9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1da0:	8f 4f       	sbci	r24, 0xFF	; 255
    1da2:	9f 4f       	sbci	r25, 0xFF	; 255
    1da4:	af 4f       	sbci	r26, 0xFF	; 255
    1da6:	b1 e0       	ldi	r27, 0x01	; 1
    1da8:	3e d0       	rcall	.+124    	; 0x1e26 <__ultoa_invert+0x9c>
    1daa:	b4 e0       	ldi	r27, 0x04	; 4
    1dac:	3c d0       	rcall	.+120    	; 0x1e26 <__ultoa_invert+0x9c>
    1dae:	67 0f       	add	r22, r23
    1db0:	78 1f       	adc	r23, r24
    1db2:	89 1f       	adc	r24, r25
    1db4:	9a 1f       	adc	r25, r26
    1db6:	a1 1d       	adc	r26, r1
    1db8:	68 0f       	add	r22, r24
    1dba:	79 1f       	adc	r23, r25
    1dbc:	8a 1f       	adc	r24, r26
    1dbe:	91 1d       	adc	r25, r1
    1dc0:	a1 1d       	adc	r26, r1
    1dc2:	6a 0f       	add	r22, r26
    1dc4:	71 1d       	adc	r23, r1
    1dc6:	81 1d       	adc	r24, r1
    1dc8:	91 1d       	adc	r25, r1
    1dca:	a1 1d       	adc	r26, r1
    1dcc:	20 d0       	rcall	.+64     	; 0x1e0e <__ultoa_invert+0x84>
    1dce:	09 f4       	brne	.+2      	; 0x1dd2 <__ultoa_invert+0x48>
    1dd0:	68 94       	set
    1dd2:	3f 91       	pop	r19
    1dd4:	2a e0       	ldi	r18, 0x0A	; 10
    1dd6:	26 9f       	mul	r18, r22
    1dd8:	11 24       	eor	r1, r1
    1dda:	30 19       	sub	r19, r0
    1ddc:	30 5d       	subi	r19, 0xD0	; 208
    1dde:	31 93       	st	Z+, r19
    1de0:	de f6       	brtc	.-74     	; 0x1d98 <__ultoa_invert+0xe>
    1de2:	cf 01       	movw	r24, r30
    1de4:	08 95       	ret
    1de6:	46 2f       	mov	r20, r22
    1de8:	47 70       	andi	r20, 0x07	; 7
    1dea:	40 5d       	subi	r20, 0xD0	; 208
    1dec:	41 93       	st	Z+, r20
    1dee:	b3 e0       	ldi	r27, 0x03	; 3
    1df0:	0f d0       	rcall	.+30     	; 0x1e10 <__ultoa_invert+0x86>
    1df2:	c9 f7       	brne	.-14     	; 0x1de6 <__ultoa_invert+0x5c>
    1df4:	f6 cf       	rjmp	.-20     	; 0x1de2 <__ultoa_invert+0x58>
    1df6:	46 2f       	mov	r20, r22
    1df8:	4f 70       	andi	r20, 0x0F	; 15
    1dfa:	40 5d       	subi	r20, 0xD0	; 208
    1dfc:	4a 33       	cpi	r20, 0x3A	; 58
    1dfe:	18 f0       	brcs	.+6      	; 0x1e06 <__ultoa_invert+0x7c>
    1e00:	49 5d       	subi	r20, 0xD9	; 217
    1e02:	31 fd       	sbrc	r19, 1
    1e04:	40 52       	subi	r20, 0x20	; 32
    1e06:	41 93       	st	Z+, r20
    1e08:	02 d0       	rcall	.+4      	; 0x1e0e <__ultoa_invert+0x84>
    1e0a:	a9 f7       	brne	.-22     	; 0x1df6 <__ultoa_invert+0x6c>
    1e0c:	ea cf       	rjmp	.-44     	; 0x1de2 <__ultoa_invert+0x58>
    1e0e:	b4 e0       	ldi	r27, 0x04	; 4
    1e10:	a6 95       	lsr	r26
    1e12:	97 95       	ror	r25
    1e14:	87 95       	ror	r24
    1e16:	77 95       	ror	r23
    1e18:	67 95       	ror	r22
    1e1a:	ba 95       	dec	r27
    1e1c:	c9 f7       	brne	.-14     	; 0x1e10 <__ultoa_invert+0x86>
    1e1e:	00 97       	sbiw	r24, 0x00	; 0
    1e20:	61 05       	cpc	r22, r1
    1e22:	71 05       	cpc	r23, r1
    1e24:	08 95       	ret
    1e26:	9b 01       	movw	r18, r22
    1e28:	ac 01       	movw	r20, r24
    1e2a:	0a 2e       	mov	r0, r26
    1e2c:	06 94       	lsr	r0
    1e2e:	57 95       	ror	r21
    1e30:	47 95       	ror	r20
    1e32:	37 95       	ror	r19
    1e34:	27 95       	ror	r18
    1e36:	ba 95       	dec	r27
    1e38:	c9 f7       	brne	.-14     	; 0x1e2c <__ultoa_invert+0xa2>
    1e3a:	62 0f       	add	r22, r18
    1e3c:	73 1f       	adc	r23, r19
    1e3e:	84 1f       	adc	r24, r20
    1e40:	95 1f       	adc	r25, r21
    1e42:	a0 1d       	adc	r26, r0
    1e44:	08 95       	ret

00001e46 <__muluhisi3>:
    1e46:	0e 94 2c 0b 	call	0x1658	; 0x1658 <__umulhisi3>
    1e4a:	a5 9f       	mul	r26, r21
    1e4c:	90 0d       	add	r25, r0
    1e4e:	b4 9f       	mul	r27, r20
    1e50:	90 0d       	add	r25, r0
    1e52:	a4 9f       	mul	r26, r20
    1e54:	80 0d       	add	r24, r0
    1e56:	91 1d       	adc	r25, r1
    1e58:	11 24       	eor	r1, r1
    1e5a:	08 95       	ret

00001e5c <__mulshisi3>:
    1e5c:	b7 ff       	sbrs	r27, 7
    1e5e:	0c 94 23 0f 	jmp	0x1e46	; 0x1e46 <__muluhisi3>

00001e62 <__mulohisi3>:
    1e62:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <__muluhisi3>
    1e66:	82 1b       	sub	r24, r18
    1e68:	93 0b       	sbc	r25, r19
    1e6a:	08 95       	ret

00001e6c <__prologue_saves__>:
    1e6c:	2f 92       	push	r2
    1e6e:	3f 92       	push	r3
    1e70:	4f 92       	push	r4
    1e72:	5f 92       	push	r5
    1e74:	6f 92       	push	r6
    1e76:	7f 92       	push	r7
    1e78:	8f 92       	push	r8
    1e7a:	9f 92       	push	r9
    1e7c:	af 92       	push	r10
    1e7e:	bf 92       	push	r11
    1e80:	cf 92       	push	r12
    1e82:	df 92       	push	r13
    1e84:	ef 92       	push	r14
    1e86:	ff 92       	push	r15
    1e88:	0f 93       	push	r16
    1e8a:	1f 93       	push	r17
    1e8c:	cf 93       	push	r28
    1e8e:	df 93       	push	r29
    1e90:	cd b7       	in	r28, 0x3d	; 61
    1e92:	de b7       	in	r29, 0x3e	; 62
    1e94:	ca 1b       	sub	r28, r26
    1e96:	db 0b       	sbc	r29, r27
    1e98:	0f b6       	in	r0, 0x3f	; 63
    1e9a:	f8 94       	cli
    1e9c:	de bf       	out	0x3e, r29	; 62
    1e9e:	0f be       	out	0x3f, r0	; 63
    1ea0:	cd bf       	out	0x3d, r28	; 61
    1ea2:	09 94       	ijmp

00001ea4 <__epilogue_restores__>:
    1ea4:	2a 88       	ldd	r2, Y+18	; 0x12
    1ea6:	39 88       	ldd	r3, Y+17	; 0x11
    1ea8:	48 88       	ldd	r4, Y+16	; 0x10
    1eaa:	5f 84       	ldd	r5, Y+15	; 0x0f
    1eac:	6e 84       	ldd	r6, Y+14	; 0x0e
    1eae:	7d 84       	ldd	r7, Y+13	; 0x0d
    1eb0:	8c 84       	ldd	r8, Y+12	; 0x0c
    1eb2:	9b 84       	ldd	r9, Y+11	; 0x0b
    1eb4:	aa 84       	ldd	r10, Y+10	; 0x0a
    1eb6:	b9 84       	ldd	r11, Y+9	; 0x09
    1eb8:	c8 84       	ldd	r12, Y+8	; 0x08
    1eba:	df 80       	ldd	r13, Y+7	; 0x07
    1ebc:	ee 80       	ldd	r14, Y+6	; 0x06
    1ebe:	fd 80       	ldd	r15, Y+5	; 0x05
    1ec0:	0c 81       	ldd	r16, Y+4	; 0x04
    1ec2:	1b 81       	ldd	r17, Y+3	; 0x03
    1ec4:	aa 81       	ldd	r26, Y+2	; 0x02
    1ec6:	b9 81       	ldd	r27, Y+1	; 0x01
    1ec8:	ce 0f       	add	r28, r30
    1eca:	d1 1d       	adc	r29, r1
    1ecc:	0f b6       	in	r0, 0x3f	; 63
    1ece:	f8 94       	cli
    1ed0:	de bf       	out	0x3e, r29	; 62
    1ed2:	0f be       	out	0x3f, r0	; 63
    1ed4:	cd bf       	out	0x3d, r28	; 61
    1ed6:	ed 01       	movw	r28, r26
    1ed8:	08 95       	ret

00001eda <_exit>:
    1eda:	f8 94       	cli

00001edc <__stop_program>:
    1edc:	ff cf       	rjmp	.-2      	; 0x1edc <__stop_program>
