
AVRAssignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000196  00800100  000021ac  00002240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b7  00800296  00800296  000023d6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000023d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002434  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000330  00000000  00000000  00002474  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000344e  00000000  00000000  000027a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000151f  00000000  00000000  00005bf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001d71  00000000  00000000  00007111  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008d4  00000000  00000000  00008e84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000df3  00000000  00000000  00009758  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ef0  00000000  00000000  0000a54b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000330  00000000  00000000  0000c43b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__ctors_end>
       4:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
       8:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
       c:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      10:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      14:	0c 94 05 02 	jmp	0x40a	; 0x40a <__vector_5>
      18:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      1c:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      20:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      24:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      28:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      2c:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      30:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      34:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      38:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      3c:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      40:	0c 94 09 0c 	jmp	0x1812	; 0x1812 <__vector_16>
      44:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      48:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      4c:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      50:	0c 94 02 09 	jmp	0x1204	; 0x1204 <__vector_20>
      54:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <__vector_21>
      58:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      5c:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      60:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      64:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      68:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      6c:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      70:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      74:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      78:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	43 61       	ori	r20, 0x13	; 19
      7e:	6e 6e       	ori	r22, 0xEE	; 238
      80:	6f 74       	andi	r22, 0x4F	; 79
      82:	20 73       	andi	r18, 0x30	; 48
      84:	74 61       	ori	r23, 0x14	; 20
      86:	63 6b       	ori	r22, 0xB3	; 179
      88:	20 62       	ori	r18, 0x20	; 32
      8a:	6f 78       	andi	r22, 0x8F	; 143
      8c:	65 73       	andi	r22, 0x35	; 53
	...

0000008f <__c.2439>:
      8f:	43 61 6e 6e 6f 74 20 70 75 73 68 20 62 6f 78 20     Cannot push box 
      9f:	6f 6e 74 6f 20 77 61 6c 6c 00                       onto wall.

000000a9 <__c.2437>:
      a9:	54 68 65 72 65 20 69 73 20 61 20 77 61 6c 6c 20     There is a wall 
      b9:	69 6e 20 74 68 65 20 77 61 79 00                    in the way.

000000c4 <__c.2435>:
      c4:	57 61 6c 6c 20 68 69 74 00                          Wall hit.

000000cd <__c.2433>:
      cd:	50 6c 61 79 65 72 20 68 69 74 20 61 20 77 61 6c     Player hit a wal
      dd:	6c 00                                               l.

000000df <__c.2624>:
      df:	6f 72 20 70 72 65 73 73 20 27 6e 27 2f 27 4e 27     or press 'n'/'N'
      ef:	20 74 6f 20 70 72 6f 67 72 65 73 73 20 74 6f 20      to progress to 
      ff:	6c 65 76 65 6c 20 32 00                             level 2.

00000107 <__c.2622>:
     107:	50 72 65 73 73 20 27 72 27 2f 27 52 27 20 74 6f     Press 'r'/'R' to
     117:	20 72 65 73 74 61 72 74 2c 20 27 65 27 2f 27 45      restart, 'e'/'E
     127:	27 20 74 6f 20 65 78 69 74 2c 00                    ' to exit,.

00000132 <__c.2620>:
     132:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

0000013c <__c.2591>:
     13c:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 50 72     CSSE2010/7201 Pr
     14c:	6f 6a 65 63 74 20 62 79 20 52 69 6c 65 79 20 53     oject by Riley S
     15c:	74 65 77 61 72 74 20 2d 20 34 38 38 32 38 36 36     tewart - 4882866
     16c:	32 00                                               2.

0000016e <title_data>:
     16e:	60 38 1f 3f 3f 63 7e fe 60 bc b1 b1 61 66 c3 c0     `8.??c~.`...af..
     17e:	60 b6 3f bf 61 7c c3 fe 60 b3 b1 b1 61 66 c3 06     `.?.a|..`...af..
     18e:	e0 b1 31 3f 3f 63 7e fe                             ..1??c~.

00000196 <anim_data>:
     196:	f0 f0 00 f0 f0 f0 f0 00 f0 00 00 f0 00 00 f0 00     ................
     1a6:	f0 00 00 f0 00 00 f0 00 f0 f0 f0 f0 00 f0 f0 00     ................
	...
     1be:	f0 f0 f0 f0 f0 00 00 00 f0 00 00 00 f0 00 00 00     ................
     1ce:	f0 00 00 00 f0 00 00 00 f0 f0 f0 f0 f0 00 00 00     ................
	...
     1e6:	f0 f0 f0 f0 f0 f0 f0 00 00 00 00 f0 00 00 00 00     ................
     1f6:	00 00 f0 00 f0 00 00 00 f0 f0 00 00 00 f0 00 00     ................
	...
     20e:	f0 f0 f0 f0 f0 00 00 00 f0 00 00 00 f0 00 00 00     ................
     21e:	f0 00 00 00 f0 00 00 00 f0 f0 f0 f0 f0 00 00 00     ................
	...
     236:	f0 f0 f0 f0 f0 f0 f0 00 f0 00 00 f0 00 00 00 00     ................
     246:	f0 00 00 f0 00 00 00 00 f0 f0 f0 f0 00 00 00 00     ................
	...
     25e:	f0 f0 f0 00 f0 00 00 00 f0 00 f0 00 f0 00 00 00     ................
     26e:	f0 00 f0 00 f0 00 00 00 f0 f0 f0 f0 f0 00 00 00     ................
	...
     286:	f0 f0 f0 f0 f0 00 00 00 00 00 00 00 f0 00 00 00     ................
     296:	00 00 00 00 f0 00 00 00 f0 f0 f0 f0 f0 00 00 00     ................
	...
     2b6:	3c 3c 3c 3c 3c 3c 00 00 3c 3c 00 00 3c 3c 00 00     <<<<<<..<<..<<..
     2c6:	3c 00 3c 3c 00 3c 00 00 3c 00 3c 3c 00 3c 00 00     <.<<.<..<.<<.<..
     2d6:	3c 3c 00 00 3c 3c 00 00 3c 3c 3c 3c 3c 3c 00 00     <<..<<..<<<<<<..
     2e6:	00 00 00 10 00 10 00 00 10 00 00 10 00 10 00 00     ................
     2f6:	00 10 00 00 10 00 10 10 00 00 10 10 00 10 10 10     ................
     306:	00 10 00 00 00 00 10 10 10 00 00 00 00 00 00 00     ................
	...

00000326 <__c.2187>:
     326:	1b 5b 3f 32 35 6c 00                                .[?25l.

0000032d <__c.2182>:
     32d:	1b 5b 25 64 6d 00                                   .[%dm.

00000333 <__c.2177>:
     333:	1b 5b 4b 00                                         .[K.

00000337 <__c.2172>:
     337:	1b 5b 32 4a 00                                      .[2J.

0000033c <__c.2162>:
     33c:	1b 5b 30 6d 00                                      .[0m.

00000341 <__c.2157>:
     341:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

0000034a <__ctors_end>:
     34a:	11 24       	eor	r1, r1
     34c:	1f be       	out	0x3f, r1	; 63
     34e:	cf ef       	ldi	r28, 0xFF	; 255
     350:	d8 e0       	ldi	r29, 0x08	; 8
     352:	de bf       	out	0x3e, r29	; 62
     354:	cd bf       	out	0x3d, r28	; 61

00000356 <__do_copy_data>:
     356:	12 e0       	ldi	r17, 0x02	; 2
     358:	a0 e0       	ldi	r26, 0x00	; 0
     35a:	b1 e0       	ldi	r27, 0x01	; 1
     35c:	ec ea       	ldi	r30, 0xAC	; 172
     35e:	f1 e2       	ldi	r31, 0x21	; 33
     360:	02 c0       	rjmp	.+4      	; 0x366 <__do_copy_data+0x10>
     362:	05 90       	lpm	r0, Z+
     364:	0d 92       	st	X+, r0
     366:	a6 39       	cpi	r26, 0x96	; 150
     368:	b1 07       	cpc	r27, r17
     36a:	d9 f7       	brne	.-10     	; 0x362 <__do_copy_data+0xc>

0000036c <__do_clear_bss>:
     36c:	24 e0       	ldi	r18, 0x04	; 4
     36e:	a6 e9       	ldi	r26, 0x96	; 150
     370:	b2 e0       	ldi	r27, 0x02	; 2
     372:	01 c0       	rjmp	.+2      	; 0x376 <.do_clear_bss_start>

00000374 <.do_clear_bss_loop>:
     374:	1d 92       	st	X+, r1

00000376 <.do_clear_bss_start>:
     376:	ad 34       	cpi	r26, 0x4D	; 77
     378:	b2 07       	cpc	r27, r18
     37a:	e1 f7       	brne	.-8      	; 0x374 <.do_clear_bss_loop>
     37c:	0e 94 28 08 	call	0x1050	; 0x1050 <main>
     380:	0c 94 d4 10 	jmp	0x21a8	; 0x21a8 <_exit>

00000384 <__bad_interrupt>:
     384:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000388 <init_buttons>:
	// using a pin change interrupt. These pins correspond to pin
	// change interrupts PCINT8 to PCINT11 which are covered by
	// pin change interrupt 1.

	// Empty the button push queue and reset last state.
	queue_length = 0;
     388:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <__data_end>
	last_button_state = 0;
     38c:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <last_button_state>

	// Enable the interrupt (see datasheet page 77).
	PCICR |= (1 << PCIE1);
     390:	e8 e6       	ldi	r30, 0x68	; 104
     392:	f0 e0       	ldi	r31, 0x00	; 0
     394:	80 81       	ld	r24, Z
     396:	82 60       	ori	r24, 0x02	; 2
     398:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78).
	PCIFR |= (1 << PCIF1);
     39a:	8b b3       	in	r24, 0x1b	; 27
     39c:	82 60       	ori	r24, 0x02	; 2
     39e:	8b bb       	out	0x1b, r24	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78).
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT10) |
     3a0:	ec e6       	ldi	r30, 0x6C	; 108
     3a2:	f0 e0       	ldi	r31, 0x00	; 0
     3a4:	80 81       	ld	r24, Z
     3a6:	8f 60       	ori	r24, 0x0F	; 15
     3a8:	80 83       	st	Z, r24
     3aa:	08 95       	ret

000003ac <button_pushed>:

ButtonState button_pushed(void)
{
	ButtonState result = NO_BUTTON_PUSHED; // Default result.

	if (queue_length > 0)
     3ac:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <__data_end>
     3b0:	88 23       	and	r24, r24
     3b2:	f9 f0       	breq	.+62     	; 0x3f2 <button_pushed+0x46>
	{
		// Remove the first element off the queue and move all the
		// other entries closer to the front of the queue. We turn off
		// interrupts (if on) before we make any changes to the queue.
		// If interrupts were on, we turn them back on when done.
		result = button_queue[0];
     3b4:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <button_queue>

		// Save whether interrupts were enabled and turn them off.
		bool interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     3b8:	5f b7       	in	r21, 0x3f	; 63
     3ba:	50 78       	andi	r21, 0x80	; 128
		cli();
     3bc:	f8 94       	cli
		
		for (uint8_t i = 1; i < queue_length; i++)
     3be:	91 e0       	ldi	r25, 0x01	; 1
     3c0:	0b c0       	rjmp	.+22     	; 0x3d8 <button_pushed+0x2c>
		{
			button_queue[i - 1] = button_queue[i];
     3c2:	29 2f       	mov	r18, r25
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	f9 01       	movw	r30, r18
     3c8:	e9 56       	subi	r30, 0x69	; 105
     3ca:	fd 4f       	sbci	r31, 0xFD	; 253
     3cc:	40 81       	ld	r20, Z
     3ce:	f9 01       	movw	r30, r18
     3d0:	ea 56       	subi	r30, 0x6A	; 106
     3d2:	fd 4f       	sbci	r31, 0xFD	; 253
     3d4:	40 83       	st	Z, r20

		// Save whether interrupts were enabled and turn them off.
		bool interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for (uint8_t i = 1; i < queue_length; i++)
     3d6:	9f 5f       	subi	r25, 0xFF	; 255
     3d8:	20 91 96 02 	lds	r18, 0x0296	; 0x800296 <__data_end>
     3dc:	92 17       	cp	r25, r18
     3de:	88 f3       	brcs	.-30     	; 0x3c2 <button_pushed+0x16>
		{
			button_queue[i - 1] = button_queue[i];
		}
		queue_length--;
     3e0:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <__data_end>
     3e4:	91 50       	subi	r25, 0x01	; 1
     3e6:	90 93 96 02 	sts	0x0296, r25	; 0x800296 <__data_end>

		if (interrupts_were_enabled)
     3ea:	55 23       	and	r21, r21
     3ec:	19 f0       	breq	.+6      	; 0x3f4 <button_pushed+0x48>
		{
			// Turn them back on again.
			sei();
     3ee:	78 94       	sei
     3f0:	08 95       	ret
		(1 << PCINT11);
}

ButtonState button_pushed(void)
{
	ButtonState result = NO_BUTTON_PUSHED; // Default result.
     3f2:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again.
			sei();
		}
	}
	return result;
}
     3f4:	08 95       	ret

000003f6 <clear_button_presses>:

void clear_button_presses(void)
{
	// Save whether interrupts were enabled and turn them off.
	bool interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     3f6:	8f b7       	in	r24, 0x3f	; 63
	cli();
     3f8:	f8 94       	cli
	queue_length = 0;
     3fa:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <__data_end>
	last_button_state = 0;
     3fe:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <last_button_state>
	if (interrupts_were_enabled)
     402:	88 23       	and	r24, r24
     404:	0c f4       	brge	.+2      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
	{
		// Turn them back on again.
		sei();
     406:	78 94       	sei
     408:	08 95       	ret

0000040a <__vector_5>:
	}
}

// Interrupt handler for a change on buttons.
ISR(PCINT1_vect)
{
     40a:	1f 92       	push	r1
     40c:	0f 92       	push	r0
     40e:	0f b6       	in	r0, 0x3f	; 63
     410:	0f 92       	push	r0
     412:	11 24       	eor	r1, r1
     414:	2f 93       	push	r18
     416:	3f 93       	push	r19
     418:	4f 93       	push	r20
     41a:	8f 93       	push	r24
     41c:	9f 93       	push	r25
     41e:	ef 93       	push	r30
     420:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     422:	43 b1       	in	r20, 0x03	; 3
     424:	4f 70       	andi	r20, 0x0F	; 15
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++)
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	24 c0       	rjmp	.+72     	; 0x472 <__vector_5+0x68>
	{
		if (queue_length < BUTTON_QUEUE_SIZE
     42a:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <__data_end>
     42e:	94 30       	cpi	r25, 0x04	; 4
     430:	f8 f4       	brcc	.+62     	; 0x470 <__vector_5+0x66>
				&& (button_state & (1 << pin))
     432:	24 2f       	mov	r18, r20
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	08 2e       	mov	r0, r24
     438:	02 c0       	rjmp	.+4      	; 0x43e <__vector_5+0x34>
     43a:	35 95       	asr	r19
     43c:	27 95       	ror	r18
     43e:	0a 94       	dec	r0
     440:	e2 f7       	brpl	.-8      	; 0x43a <__vector_5+0x30>
     442:	20 ff       	sbrs	r18, 0
     444:	15 c0       	rjmp	.+42     	; 0x470 <__vector_5+0x66>
				&& !(last_button_state & (1 << pin)))
     446:	20 91 9b 02 	lds	r18, 0x029B	; 0x80029b <last_button_state>
     44a:	30 e0       	ldi	r19, 0x00	; 0
     44c:	08 2e       	mov	r0, r24
     44e:	02 c0       	rjmp	.+4      	; 0x454 <__vector_5+0x4a>
     450:	35 95       	asr	r19
     452:	27 95       	ror	r18
     454:	0a 94       	dec	r0
     456:	e2 f7       	brpl	.-8      	; 0x450 <__vector_5+0x46>
     458:	20 fd       	sbrc	r18, 0
     45a:	0a c0       	rjmp	.+20     	; 0x470 <__vector_5+0x66>
				{
			// Add the button push to the queue (and update the
			// length of the queue).
			button_queue[queue_length++] = pin;
     45c:	e0 91 96 02 	lds	r30, 0x0296	; 0x800296 <__data_end>
     460:	91 e0       	ldi	r25, 0x01	; 1
     462:	9e 0f       	add	r25, r30
     464:	90 93 96 02 	sts	0x0296, r25	; 0x800296 <__data_end>
     468:	f0 e0       	ldi	r31, 0x00	; 0
     46a:	e9 56       	subi	r30, 0x69	; 105
     46c:	fd 4f       	sbci	r31, 0xFD	; 253
     46e:	80 83       	st	Z, r24
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++)
     470:	8f 5f       	subi	r24, 0xFF	; 255
     472:	84 30       	cpi	r24, 0x04	; 4
     474:	d0 f2       	brcs	.-76     	; 0x42a <__vector_5+0x20>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state.
	last_button_state = button_state;
     476:	40 93 9b 02 	sts	0x029B, r20	; 0x80029b <last_button_state>
}
     47a:	ff 91       	pop	r31
     47c:	ef 91       	pop	r30
     47e:	9f 91       	pop	r25
     480:	8f 91       	pop	r24
     482:	4f 91       	pop	r20
     484:	3f 91       	pop	r19
     486:	2f 91       	pop	r18
     488:	0f 90       	pop	r0
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	0f 90       	pop	r0
     48e:	1f 90       	pop	r1
     490:	18 95       	reti

00000492 <paint_square>:
// ========================== GAME LOGIC FUNCTIONS ===========================

// This function paints a square based on the object(s) currently on it.
static void paint_square(uint8_t row, uint8_t col)
{	
	switch (board[row][col] & OBJECT_MASK)
     492:	90 e1       	ldi	r25, 0x10	; 16
     494:	89 9f       	mul	r24, r25
     496:	f0 01       	movw	r30, r0
     498:	11 24       	eor	r1, r1
     49a:	e1 56       	subi	r30, 0x61	; 97
     49c:	fd 4f       	sbci	r31, 0xFD	; 253
     49e:	e6 0f       	add	r30, r22
     4a0:	f1 1d       	adc	r31, r1
     4a2:	90 81       	ld	r25, Z
     4a4:	97 70       	andi	r25, 0x07	; 7
     4a6:	92 30       	cpi	r25, 0x02	; 2
     4a8:	99 f0       	breq	.+38     	; 0x4d0 <paint_square+0x3e>
     4aa:	28 f4       	brcc	.+10     	; 0x4b6 <paint_square+0x24>
     4ac:	99 23       	and	r25, r25
     4ae:	41 f0       	breq	.+16     	; 0x4c0 <paint_square+0x2e>
     4b0:	91 30       	cpi	r25, 0x01	; 1
     4b2:	51 f0       	breq	.+20     	; 0x4c8 <paint_square+0x36>
     4b4:	08 95       	ret
     4b6:	94 30       	cpi	r25, 0x04	; 4
     4b8:	79 f0       	breq	.+30     	; 0x4d8 <paint_square+0x46>
     4ba:	96 30       	cpi	r25, 0x06	; 6
     4bc:	89 f0       	breq	.+34     	; 0x4e0 <paint_square+0x4e>
     4be:	08 95       	ret
	{
		case ROOM:
			ledmatrix_update_pixel(row, col, COLOUR_BLACK);
     4c0:	40 e0       	ldi	r20, 0x00	; 0
     4c2:	0e 94 66 05 	call	0xacc	; 0xacc <ledmatrix_update_pixel>
			break;
     4c6:	08 95       	ret
		case WALL:
			ledmatrix_update_pixel(row, col, COLOUR_WALL);
     4c8:	4f ef       	ldi	r20, 0xFF	; 255
     4ca:	0e 94 66 05 	call	0xacc	; 0xacc <ledmatrix_update_pixel>
			break;
     4ce:	08 95       	ret
		case BOX:
			ledmatrix_update_pixel(row, col, COLOUR_BOX);
     4d0:	4c e3       	ldi	r20, 0x3C	; 60
     4d2:	0e 94 66 05 	call	0xacc	; 0xacc <ledmatrix_update_pixel>
			break;
     4d6:	08 95       	ret
		case TARGET:
			ledmatrix_update_pixel(row, col, COLOUR_TARGET);
     4d8:	4f e0       	ldi	r20, 0x0F	; 15
     4da:	0e 94 66 05 	call	0xacc	; 0xacc <ledmatrix_update_pixel>
			break;
     4de:	08 95       	ret
		case BOX | TARGET:
			ledmatrix_update_pixel(row, col, COLOUR_DONE);
     4e0:	40 ef       	ldi	r20, 0xF0	; 240
     4e2:	0e 94 66 05 	call	0xacc	; 0xacc <ledmatrix_update_pixel>
     4e6:	08 95       	ret

000004e8 <initialise_level>:
		default:
			break;
	}
}

void initialise_level(int level) {
     4e8:	cf 93       	push	r28
     4ea:	df 93       	push	r29
     4ec:	cd b7       	in	r28, 0x3d	; 61
     4ee:	de b7       	in	r29, 0x3e	; 62
     4f0:	da 95       	dec	r29
     4f2:	0f b6       	in	r0, 0x3f	; 63
     4f4:	f8 94       	cli
     4f6:	de bf       	out	0x3e, r29	; 62
     4f8:	0f be       	out	0x3f, r0	; 63
     4fa:	cd bf       	out	0x3d, r28	; 61
	// identical to how the pixels are oriented on the LED matrix, however
	// the LED matrix treats row 0 as the bottom row and row 7 as the top
	// row.
	
	uint8_t level_layout[MATRIX_NUM_ROWS][MATRIX_NUM_COLUMNS];
	switch (level) {
     4fc:	81 30       	cpi	r24, 0x01	; 1
     4fe:	91 05       	cpc	r25, r1
     500:	19 f0       	breq	.+6      	; 0x508 <initialise_level+0x20>
     502:	02 97       	sbiw	r24, 0x02	; 2
     504:	e1 f0       	breq	.+56     	; 0x53e <initialise_level+0x56>
     506:	35 c0       	rjmp	.+106    	; 0x572 <initialise_level+0x8a>
			case 1:
			{
			uint8_t temp_layout[MATRIX_NUM_ROWS][MATRIX_NUM_COLUMNS] = {
     508:	80 e8       	ldi	r24, 0x80	; 128
     50a:	ec e1       	ldi	r30, 0x1C	; 28
     50c:	f1 e0       	ldi	r31, 0x01	; 1
     50e:	de 01       	movw	r26, r28
     510:	af 57       	subi	r26, 0x7F	; 127
     512:	bf 4f       	sbci	r27, 0xFF	; 255
     514:	01 90       	ld	r0, Z+
     516:	0d 92       	st	X+, r0
     518:	8a 95       	dec	r24
     51a:	e1 f7       	brne	.-8      	; 0x514 <initialise_level+0x2c>
				{ W, _, _, _, W, _, B, _, _, _, _, _, _, _, _, _ },
				{ _, _, _, _, _, _, T, _, _, _, _, _, _, _, _, _ },
				{ _, _, _, W, W, W, W, W, W, T, _, _, _, _, _, W },
				{ W, W, _, _, _, _, _, _, W, W, _, _, W, W, W, W }
			};
			memcpy(level_layout, temp_layout, sizeof(level_layout));
     51c:	80 e8       	ldi	r24, 0x80	; 128
     51e:	fe 01       	movw	r30, r28
     520:	ef 57       	subi	r30, 0x7F	; 127
     522:	ff 4f       	sbci	r31, 0xFF	; 255
     524:	de 01       	movw	r26, r28
     526:	11 96       	adiw	r26, 0x01	; 1
     528:	01 90       	ld	r0, Z+
     52a:	0d 92       	st	X+, r0
     52c:	8a 95       	dec	r24
     52e:	e1 f7       	brne	.-8      	; 0x528 <initialise_level+0x40>
			player_row = 5;
     530:	85 e0       	ldi	r24, 0x05	; 5
     532:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <player_row>
			player_col = 2;
     536:	82 e0       	ldi	r24, 0x02	; 2
     538:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <player_col>
			}
			break;
     53c:	1a c0       	rjmp	.+52     	; 0x572 <initialise_level+0x8a>
		case 2:
			{
			uint8_t temp_layout[MATRIX_NUM_ROWS][MATRIX_NUM_COLUMNS] = {
     53e:	80 e8       	ldi	r24, 0x80	; 128
     540:	ec e9       	ldi	r30, 0x9C	; 156
     542:	f1 e0       	ldi	r31, 0x01	; 1
     544:	de 01       	movw	r26, r28
     546:	af 57       	subi	r26, 0x7F	; 127
     548:	bf 4f       	sbci	r27, 0xFF	; 255
     54a:	01 90       	ld	r0, Z+
     54c:	0d 92       	st	X+, r0
     54e:	8a 95       	dec	r24
     550:	e1 f7       	brne	.-8      	; 0x54a <initialise_level+0x62>
				{W, W, W, W, _, W, _, _, _, _, _, W, _, W, W, _ },
				{W, T, B, _, _, _, _, B, _, _, _, W, W, _, W, W },
				{W, _, _, _, T, _, _, _, _, _, _, B, T, _, _, _ },
				{W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W }
			};
			memcpy(level_layout, temp_layout, sizeof(level_layout));
     552:	80 e8       	ldi	r24, 0x80	; 128
     554:	fe 01       	movw	r30, r28
     556:	ef 57       	subi	r30, 0x7F	; 127
     558:	ff 4f       	sbci	r31, 0xFF	; 255
     55a:	de 01       	movw	r26, r28
     55c:	11 96       	adiw	r26, 0x01	; 1
     55e:	01 90       	ld	r0, Z+
     560:	0d 92       	st	X+, r0
     562:	8a 95       	dec	r24
     564:	e1 f7       	brne	.-8      	; 0x55e <initialise_level+0x76>
			player_row = 6;
     566:	86 e0       	ldi	r24, 0x06	; 6
     568:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <player_row>
			player_col = 15;
     56c:	8f e0       	ldi	r24, 0x0F	; 15
     56e:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <player_col>
     572:	a0 e0       	ldi	r26, 0x00	; 0
     574:	2b c0       	rjmp	.+86     	; 0x5cc <initialise_level+0xe4>
	// all the rows.
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
	{
		for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
		{
			board[MATRIX_NUM_ROWS - 1 - row][col] =
     576:	8a 2f       	mov	r24, r26
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	27 e0       	ldi	r18, 0x07	; 7
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	28 1b       	sub	r18, r24
     580:	39 0b       	sbc	r19, r25
			level_layout[row][col];
     582:	46 2f       	mov	r20, r22
     584:	50 e0       	ldi	r21, 0x00	; 0
     586:	fc 01       	movw	r30, r24
     588:	e2 95       	swap	r30
     58a:	f2 95       	swap	r31
     58c:	f0 7f       	andi	r31, 0xF0	; 240
     58e:	fe 27       	eor	r31, r30
     590:	e0 7f       	andi	r30, 0xF0	; 240
     592:	fe 27       	eor	r31, r30
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	8c 0f       	add	r24, r28
     59a:	9d 1f       	adc	r25, r29
     59c:	e8 0f       	add	r30, r24
     59e:	f9 1f       	adc	r31, r25
     5a0:	e4 0f       	add	r30, r20
     5a2:	f5 1f       	adc	r31, r21
     5a4:	70 81       	ld	r23, Z
	// all the rows.
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
	{
		for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
		{
			board[MATRIX_NUM_ROWS - 1 - row][col] =
     5a6:	c9 01       	movw	r24, r18
     5a8:	82 95       	swap	r24
     5aa:	92 95       	swap	r25
     5ac:	90 7f       	andi	r25, 0xF0	; 240
     5ae:	98 27       	eor	r25, r24
     5b0:	80 7f       	andi	r24, 0xF0	; 240
     5b2:	98 27       	eor	r25, r24
     5b4:	81 56       	subi	r24, 0x61	; 97
     5b6:	9d 4f       	sbci	r25, 0xFD	; 253
     5b8:	fc 01       	movw	r30, r24
     5ba:	e4 0f       	add	r30, r20
     5bc:	f5 1f       	adc	r31, r21
     5be:	70 83       	st	Z, r23
	
	// Copy the starting layout (level map) to the board array, and flip
	// all the rows.
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
	{
		for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
     5c0:	6f 5f       	subi	r22, 0xFF	; 255
     5c2:	01 c0       	rjmp	.+2      	; 0x5c6 <initialise_level+0xde>
     5c4:	60 e0       	ldi	r22, 0x00	; 0
     5c6:	60 31       	cpi	r22, 0x10	; 16
     5c8:	b0 f2       	brcs	.-84     	; 0x576 <initialise_level+0x8e>
	#undef T
	#undef B
	
	// Copy the starting layout (level map) to the board array, and flip
	// all the rows.
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     5ca:	af 5f       	subi	r26, 0xFF	; 255
     5cc:	a8 30       	cpi	r26, 0x08	; 8
     5ce:	d0 f3       	brcs	.-12     	; 0x5c4 <initialise_level+0xdc>
		{
			board[MATRIX_NUM_ROWS - 1 - row][col] =
			level_layout[row][col];
		}
	}
}
     5d0:	d3 95       	inc	r29
     5d2:	0f b6       	in	r0, 0x3f	; 63
     5d4:	f8 94       	cli
     5d6:	de bf       	out	0x3e, r29	; 62
     5d8:	0f be       	out	0x3f, r0	; 63
     5da:	cd bf       	out	0x3d, r28	; 61
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	08 95       	ret

000005e2 <flash_player>:
// currently not visible, it is set to visible and rendered on the display.
// The static global variable "player_visible" indicates whether the player
// icon is currently visible.
void flash_player(void)
{
	player_visible = !player_visible;
     5e2:	90 91 9c 02 	lds	r25, 0x029C	; 0x80029c <player_visible>
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	89 27       	eor	r24, r25
     5ea:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <player_visible>
	if (player_visible)
     5ee:	88 23       	and	r24, r24
     5f0:	41 f0       	breq	.+16     	; 0x602 <flash_player+0x20>
	{
		// The player is visible, paint it with COLOUR_PLAYER.
		ledmatrix_update_pixel(player_row, player_col, COLOUR_PLAYER);
     5f2:	40 e1       	ldi	r20, 0x10	; 16
     5f4:	60 91 9d 02 	lds	r22, 0x029D	; 0x80029d <player_col>
     5f8:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <player_row>
     5fc:	0e 94 66 05 	call	0xacc	; 0xacc <ledmatrix_update_pixel>
     600:	08 95       	ret
	}
	else
	{
		// The player is not visible, paint the underlying square.
		paint_square(player_row, player_col);
     602:	60 91 9d 02 	lds	r22, 0x029D	; 0x80029d <player_col>
     606:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <player_row>
     60a:	0e 94 49 02 	call	0x492	; 0x492 <paint_square>
     60e:	08 95       	ret

00000610 <display_terminal_message>:
	update_terminal_display(player_row, MATRIX_NUM_ROWS-player_row, 1);
	flash_player();
	return true;
}

void display_terminal_message(char type[]) {
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
     614:	ec 01       	movw	r28, r24
	if (strcmp(type, "wall") == 0) {
     616:	60 e2       	ldi	r22, 0x20	; 32
     618:	72 e0       	ldi	r23, 0x02	; 2
     61a:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <strcmp>
     61e:	89 2b       	or	r24, r25
     620:	89 f5       	brne	.+98     	; 0x684 <display_terminal_message+0x74>
		int rand_num;
		int lb = 1;
		int ub = 3;
		rand_num = (rand() % (ub - lb + 1)) + lb;
     622:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <rand>
     626:	63 e0       	ldi	r22, 0x03	; 3
     628:	70 e0       	ldi	r23, 0x00	; 0
     62a:	0e 94 36 0c 	call	0x186c	; 0x186c <__divmodhi4>
     62e:	ec 01       	movw	r28, r24
     630:	21 96       	adiw	r28, 0x01	; 1
		move_terminal_cursor(20, 1);
     632:	61 e0       	ldi	r22, 0x01	; 1
     634:	70 e0       	ldi	r23, 0x00	; 0
     636:	84 e1       	ldi	r24, 0x14	; 20
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	0e 94 9e 0b 	call	0x173c	; 0x173c <move_terminal_cursor>
		if (rand_num == 1) {
     63e:	c1 30       	cpi	r28, 0x01	; 1
     640:	d1 05       	cpc	r29, r1
     642:	49 f4       	brne	.+18     	; 0x656 <display_terminal_message+0x46>
			printf_P(PSTR("Player hit a wall"));
     644:	8d ec       	ldi	r24, 0xCD	; 205
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	9f 93       	push	r25
     64a:	8f 93       	push	r24
     64c:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <printf_P>
     650:	0f 90       	pop	r0
     652:	0f 90       	pop	r0
     654:	42 c0       	rjmp	.+132    	; 0x6da <display_terminal_message+0xca>
		} else if (rand_num == 2) {
     656:	c2 30       	cpi	r28, 0x02	; 2
     658:	d1 05       	cpc	r29, r1
     65a:	49 f4       	brne	.+18     	; 0x66e <display_terminal_message+0x5e>
			printf_P(PSTR("Wall hit"));
     65c:	84 ec       	ldi	r24, 0xC4	; 196
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	9f 93       	push	r25
     662:	8f 93       	push	r24
     664:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <printf_P>
     668:	0f 90       	pop	r0
     66a:	0f 90       	pop	r0
     66c:	36 c0       	rjmp	.+108    	; 0x6da <display_terminal_message+0xca>
		} else if (rand_num == 3) {
     66e:	23 97       	sbiw	r28, 0x03	; 3
     670:	a1 f5       	brne	.+104    	; 0x6da <display_terminal_message+0xca>
			printf_P(PSTR("There is a wall in the way"));
     672:	89 ea       	ldi	r24, 0xA9	; 169
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	9f 93       	push	r25
     678:	8f 93       	push	r24
     67a:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <printf_P>
     67e:	0f 90       	pop	r0
     680:	0f 90       	pop	r0
     682:	2b c0       	rjmp	.+86     	; 0x6da <display_terminal_message+0xca>
		}
	} else if (strcmp(type, "box_wall") == 0) {
     684:	6c e1       	ldi	r22, 0x1C	; 28
     686:	72 e0       	ldi	r23, 0x02	; 2
     688:	ce 01       	movw	r24, r28
     68a:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <strcmp>
     68e:	89 2b       	or	r24, r25
     690:	79 f4       	brne	.+30     	; 0x6b0 <display_terminal_message+0xa0>
		move_terminal_cursor(20, 1);
     692:	61 e0       	ldi	r22, 0x01	; 1
     694:	70 e0       	ldi	r23, 0x00	; 0
     696:	84 e1       	ldi	r24, 0x14	; 20
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	0e 94 9e 0b 	call	0x173c	; 0x173c <move_terminal_cursor>
		printf_P(PSTR("Cannot push box onto wall"));
     69e:	8f e8       	ldi	r24, 0x8F	; 143
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	9f 93       	push	r25
     6a4:	8f 93       	push	r24
     6a6:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <printf_P>
     6aa:	0f 90       	pop	r0
     6ac:	0f 90       	pop	r0
     6ae:	15 c0       	rjmp	.+42     	; 0x6da <display_terminal_message+0xca>
	} else if (strcmp(type, "box_box") == 0) {
     6b0:	65 e2       	ldi	r22, 0x25	; 37
     6b2:	72 e0       	ldi	r23, 0x02	; 2
     6b4:	ce 01       	movw	r24, r28
     6b6:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <strcmp>
     6ba:	89 2b       	or	r24, r25
     6bc:	71 f4       	brne	.+28     	; 0x6da <display_terminal_message+0xca>
		move_terminal_cursor(20, 1);
     6be:	61 e0       	ldi	r22, 0x01	; 1
     6c0:	70 e0       	ldi	r23, 0x00	; 0
     6c2:	84 e1       	ldi	r24, 0x14	; 20
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	0e 94 9e 0b 	call	0x173c	; 0x173c <move_terminal_cursor>
		printf_P(PSTR("Cannot stack boxes"));
     6ca:	8c e7       	ldi	r24, 0x7C	; 124
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	9f 93       	push	r25
     6d0:	8f 93       	push	r24
     6d2:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <printf_P>
     6d6:	0f 90       	pop	r0
     6d8:	0f 90       	pop	r0
	}
	return;
}
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	08 95       	ret

000006e0 <is_game_over>:

// This function checks if the game is over (i.e., the level is solved), and
// returns true iff (if and only if) the game is over.
bool is_game_over(void)
{
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
     6e0:	40 e0       	ldi	r20, 0x00	; 0
     6e2:	50 e0       	ldi	r21, 0x00	; 0
     6e4:	17 c0       	rjmp	.+46     	; 0x714 <is_game_over+0x34>
		for (int col = 0; col < MATRIX_NUM_COLUMNS; col++) {
			if (board[row][col] == TARGET) {
     6e6:	fa 01       	movw	r30, r20
     6e8:	e2 95       	swap	r30
     6ea:	f2 95       	swap	r31
     6ec:	f0 7f       	andi	r31, 0xF0	; 240
     6ee:	fe 27       	eor	r31, r30
     6f0:	e0 7f       	andi	r30, 0xF0	; 240
     6f2:	fe 27       	eor	r31, r30
     6f4:	e1 56       	subi	r30, 0x61	; 97
     6f6:	fd 4f       	sbci	r31, 0xFD	; 253
     6f8:	e8 0f       	add	r30, r24
     6fa:	f9 1f       	adc	r31, r25
     6fc:	20 81       	ld	r18, Z
     6fe:	24 30       	cpi	r18, 0x04	; 4
     700:	a1 f0       	breq	.+40     	; 0x72a <is_game_over+0x4a>
// This function checks if the game is over (i.e., the level is solved), and
// returns true iff (if and only if) the game is over.
bool is_game_over(void)
{
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
		for (int col = 0; col < MATRIX_NUM_COLUMNS; col++) {
     702:	01 96       	adiw	r24, 0x01	; 1
     704:	02 c0       	rjmp	.+4      	; 0x70a <is_game_over+0x2a>
     706:	80 e0       	ldi	r24, 0x00	; 0
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	80 31       	cpi	r24, 0x10	; 16
     70c:	91 05       	cpc	r25, r1
     70e:	5c f3       	brlt	.-42     	; 0x6e6 <is_game_over+0x6>

// This function checks if the game is over (i.e., the level is solved), and
// returns true iff (if and only if) the game is over.
bool is_game_over(void)
{
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
     710:	4f 5f       	subi	r20, 0xFF	; 255
     712:	5f 4f       	sbci	r21, 0xFF	; 255
     714:	48 30       	cpi	r20, 0x08	; 8
     716:	51 05       	cpc	r21, r1
     718:	b4 f3       	brlt	.-20     	; 0x706 <is_game_over+0x26>
			if (board[row][col] == TARGET) {
				return false;
			}
		}
	}
	paint_square(player_row, player_col);
     71a:	60 91 9d 02 	lds	r22, 0x029D	; 0x80029d <player_col>
     71e:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <player_row>
     722:	0e 94 49 02 	call	0x492	; 0x492 <paint_square>
	return true;
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	08 95       	ret
bool is_game_over(void)
{
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
		for (int col = 0; col < MATRIX_NUM_COLUMNS; col++) {
			if (board[row][col] == TARGET) {
				return false;
     72a:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}
	paint_square(player_row, player_col);
	return true;
}
     72c:	08 95       	ret

0000072e <modulo>:

//Calculates the modulus of a number for player movement
int modulo(int x,int y){
     72e:	9b 01       	movw	r18, r22
	return (x % y + y) % y;
     730:	0e 94 36 0c 	call	0x186c	; 0x186c <__divmodhi4>
     734:	82 0f       	add	r24, r18
     736:	93 1f       	adc	r25, r19
     738:	b9 01       	movw	r22, r18
     73a:	0e 94 36 0c 	call	0x186c	; 0x186c <__divmodhi4>
}
     73e:	08 95       	ret

00000740 <update_terminal_display>:
		printf("\n");
		GAME_BOARD_ROW++;
	}
}

void update_terminal_display(int board_row, int terminal_row, int terminal_col) {
     740:	0f 93       	push	r16
     742:	1f 93       	push	r17
     744:	cf 93       	push	r28
     746:	df 93       	push	r29
     748:	8c 01       	movw	r16, r24
     74a:	cb 01       	movw	r24, r22
	move_terminal_cursor(terminal_row, terminal_col);
     74c:	ba 01       	movw	r22, r20
     74e:	0e 94 9e 0b 	call	0x173c	; 0x173c <move_terminal_cursor>
	clear_to_end_of_line();
     752:	0e 94 c4 0b 	call	0x1788	; 0x1788 <clear_to_end_of_line>
	for (int column = 1; column <= MATRIX_NUM_COLUMNS-1; column++) {
     756:	c1 e0       	ldi	r28, 0x01	; 1
     758:	d0 e0       	ldi	r29, 0x00	; 0
     75a:	43 c0       	rjmp	.+134    	; 0x7e2 <update_terminal_display+0xa2>
		if (board[board_row][column] == ROOM) {
     75c:	f8 01       	movw	r30, r16
     75e:	e2 95       	swap	r30
     760:	f2 95       	swap	r31
     762:	f0 7f       	andi	r31, 0xF0	; 240
     764:	fe 27       	eor	r31, r30
     766:	e0 7f       	andi	r30, 0xF0	; 240
     768:	fe 27       	eor	r31, r30
     76a:	e1 56       	subi	r30, 0x61	; 97
     76c:	fd 4f       	sbci	r31, 0xFD	; 253
     76e:	ec 0f       	add	r30, r28
     770:	fd 1f       	adc	r31, r29
     772:	80 81       	ld	r24, Z
     774:	81 11       	cpse	r24, r1
     776:	09 c0       	rjmp	.+18     	; 0x78a <update_terminal_display+0x4a>
			printf("\033[100m   \033[0m");
     778:	8d e2       	ldi	r24, 0x2D	; 45
     77a:	92 e0       	ldi	r25, 0x02	; 2
     77c:	9f 93       	push	r25
     77e:	8f 93       	push	r24
     780:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <printf>
     784:	0f 90       	pop	r0
     786:	0f 90       	pop	r0
     788:	2b c0       	rjmp	.+86     	; 0x7e0 <update_terminal_display+0xa0>
		} else if (board[board_row][column] == WALL) {
     78a:	81 30       	cpi	r24, 0x01	; 1
     78c:	49 f4       	brne	.+18     	; 0x7a0 <update_terminal_display+0x60>
			printf("\033[103m   \033[0m");
     78e:	8b e3       	ldi	r24, 0x3B	; 59
     790:	92 e0       	ldi	r25, 0x02	; 2
     792:	9f 93       	push	r25
     794:	8f 93       	push	r24
     796:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <printf>
     79a:	0f 90       	pop	r0
     79c:	0f 90       	pop	r0
     79e:	20 c0       	rjmp	.+64     	; 0x7e0 <update_terminal_display+0xa0>
		} else if (board[board_row][column] == BOX) {
     7a0:	82 30       	cpi	r24, 0x02	; 2
     7a2:	49 f4       	brne	.+18     	; 0x7b6 <update_terminal_display+0x76>
			printf("\033[43m   \033[0m");
     7a4:	89 e4       	ldi	r24, 0x49	; 73
     7a6:	92 e0       	ldi	r25, 0x02	; 2
     7a8:	9f 93       	push	r25
     7aa:	8f 93       	push	r24
     7ac:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <printf>
     7b0:	0f 90       	pop	r0
     7b2:	0f 90       	pop	r0
     7b4:	15 c0       	rjmp	.+42     	; 0x7e0 <update_terminal_display+0xa0>
		} else if (board[board_row][column] == TARGET) {
     7b6:	84 30       	cpi	r24, 0x04	; 4
     7b8:	49 f4       	brne	.+18     	; 0x7cc <update_terminal_display+0x8c>
			printf("\033[41m   \033[0m");
     7ba:	86 e5       	ldi	r24, 0x56	; 86
     7bc:	92 e0       	ldi	r25, 0x02	; 2
     7be:	9f 93       	push	r25
     7c0:	8f 93       	push	r24
     7c2:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <printf>
     7c6:	0f 90       	pop	r0
     7c8:	0f 90       	pop	r0
     7ca:	0a c0       	rjmp	.+20     	; 0x7e0 <update_terminal_display+0xa0>
		} else if (board[board_row][column] == (BOX | TARGET)) {
     7cc:	86 30       	cpi	r24, 0x06	; 6
     7ce:	41 f4       	brne	.+16     	; 0x7e0 <update_terminal_display+0xa0>
			printf("\033[102m   \033[0m");
     7d0:	83 e6       	ldi	r24, 0x63	; 99
     7d2:	92 e0       	ldi	r25, 0x02	; 2
     7d4:	9f 93       	push	r25
     7d6:	8f 93       	push	r24
     7d8:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <printf>
     7dc:	0f 90       	pop	r0
     7de:	0f 90       	pop	r0
}

void update_terminal_display(int board_row, int terminal_row, int terminal_col) {
	move_terminal_cursor(terminal_row, terminal_col);
	clear_to_end_of_line();
	for (int column = 1; column <= MATRIX_NUM_COLUMNS-1; column++) {
     7e0:	21 96       	adiw	r28, 0x01	; 1
     7e2:	c0 31       	cpi	r28, 0x10	; 16
     7e4:	d1 05       	cpc	r29, r1
     7e6:	0c f4       	brge	.+2      	; 0x7ea <update_terminal_display+0xaa>
     7e8:	b9 cf       	rjmp	.-142    	; 0x75c <update_terminal_display+0x1c>
			printf("\033[41m   \033[0m");
		} else if (board[board_row][column] == (BOX | TARGET)) {
			printf("\033[102m   \033[0m");
		}
	}
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	1f 91       	pop	r17
     7f0:	0f 91       	pop	r16
     7f2:	08 95       	ret

000007f4 <move_player>:
	}
}

// This function handles player movements.
bool move_player(int8_t delta_row, int8_t delta_col)
{
     7f4:	af 92       	push	r10
     7f6:	bf 92       	push	r11
     7f8:	cf 92       	push	r12
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	cf 93       	push	r28
     806:	df 93       	push	r29
     808:	c6 2e       	mov	r12, r22
	// |    message area of the terminal and return a valid indicating a |
	// |    valid move.                                                  |
	// +-----------------------------------------------------------------+
	
	//Calculate next positions
	int next_row = modulo((player_row+delta_row), 8);
     80a:	b0 90 9e 02 	lds	r11, 0x029E	; 0x80029e <player_row>
     80e:	e8 2e       	mov	r14, r24
     810:	88 0f       	add	r24, r24
     812:	ff 08       	sbc	r15, r15
     814:	68 e0       	ldi	r22, 0x08	; 8
     816:	70 e0       	ldi	r23, 0x00	; 0
     818:	c7 01       	movw	r24, r14
     81a:	8b 0d       	add	r24, r11
     81c:	91 1d       	adc	r25, r1
     81e:	0e 94 97 03 	call	0x72e	; 0x72e <modulo>
     822:	ec 01       	movw	r28, r24
	int next_col = modulo((player_col+delta_col), 16);
     824:	a0 90 9d 02 	lds	r10, 0x029D	; 0x80029d <player_col>
     828:	0c 2c       	mov	r0, r12
     82a:	00 0c       	add	r0, r0
     82c:	dd 08       	sbc	r13, r13
     82e:	60 e1       	ldi	r22, 0x10	; 16
     830:	70 e0       	ldi	r23, 0x00	; 0
     832:	c6 01       	movw	r24, r12
     834:	8a 0d       	add	r24, r10
     836:	91 1d       	adc	r25, r1
     838:	0e 94 97 03 	call	0x72e	; 0x72e <modulo>
     83c:	8c 01       	movw	r16, r24
	int next_next_row = modulo((next_row+delta_row), 8);
     83e:	68 e0       	ldi	r22, 0x08	; 8
     840:	70 e0       	ldi	r23, 0x00	; 0
     842:	c7 01       	movw	r24, r14
     844:	8c 0f       	add	r24, r28
     846:	9d 1f       	adc	r25, r29
     848:	0e 94 97 03 	call	0x72e	; 0x72e <modulo>
     84c:	7c 01       	movw	r14, r24
	int next_next_col = modulo((next_col+delta_col), 16);
     84e:	60 e1       	ldi	r22, 0x10	; 16
     850:	70 e0       	ldi	r23, 0x00	; 0
     852:	c6 01       	movw	r24, r12
     854:	80 0f       	add	r24, r16
     856:	91 1f       	adc	r25, r17
     858:	0e 94 97 03 	call	0x72e	; 0x72e <modulo>
     85c:	6c 01       	movw	r12, r24

	paint_square(player_row, player_col);
     85e:	6a 2d       	mov	r22, r10
     860:	8b 2d       	mov	r24, r11
     862:	0e 94 49 02 	call	0x492	; 0x492 <paint_square>
	move_terminal_cursor(20,0);
     866:	60 e0       	ldi	r22, 0x00	; 0
     868:	70 e0       	ldi	r23, 0x00	; 0
     86a:	84 e1       	ldi	r24, 0x14	; 20
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	0e 94 9e 0b 	call	0x173c	; 0x173c <move_terminal_cursor>
	clear_to_end_of_line();
     872:	0e 94 c4 0b 	call	0x1788	; 0x1788 <clear_to_end_of_line>
	
	//checks for wall in front of player
	if (board[next_row][next_col] == WALL) {
     876:	fe 01       	movw	r30, r28
     878:	e2 95       	swap	r30
     87a:	f2 95       	swap	r31
     87c:	f0 7f       	andi	r31, 0xF0	; 240
     87e:	fe 27       	eor	r31, r30
     880:	e0 7f       	andi	r30, 0xF0	; 240
     882:	fe 27       	eor	r31, r30
     884:	e1 56       	subi	r30, 0x61	; 97
     886:	fd 4f       	sbci	r31, 0xFD	; 253
     888:	e0 0f       	add	r30, r16
     88a:	f1 1f       	adc	r31, r17
     88c:	80 81       	ld	r24, Z
     88e:	81 30       	cpi	r24, 0x01	; 1
     890:	31 f4       	brne	.+12     	; 0x89e <__DATA_REGION_LENGTH__+0x9e>
		display_terminal_message("wall");
     892:	80 e2       	ldi	r24, 0x20	; 32
     894:	92 e0       	ldi	r25, 0x02	; 2
     896:	0e 94 08 03 	call	0x610	; 0x610 <display_terminal_message>
		return false;
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	d2 c0       	rjmp	.+420    	; 0xa42 <__stack+0x143>
		
	//checks for filled target in front of player
	} else if (board[next_row][next_col] == (BOX | TARGET)) {
     89e:	86 30       	cpi	r24, 0x06	; 6
     8a0:	09 f0       	breq	.+2      	; 0x8a4 <__DATA_REGION_LENGTH__+0xa4>
     8a2:	4b c0       	rjmp	.+150    	; 0x93a <__stack+0x3b>
		if (board[next_next_row][next_next_col] == WALL) {
     8a4:	f7 01       	movw	r30, r14
     8a6:	e2 95       	swap	r30
     8a8:	f2 95       	swap	r31
     8aa:	f0 7f       	andi	r31, 0xF0	; 240
     8ac:	fe 27       	eor	r31, r30
     8ae:	e0 7f       	andi	r30, 0xF0	; 240
     8b0:	fe 27       	eor	r31, r30
     8b2:	e1 56       	subi	r30, 0x61	; 97
     8b4:	fd 4f       	sbci	r31, 0xFD	; 253
     8b6:	ec 0d       	add	r30, r12
     8b8:	fd 1d       	adc	r31, r13
     8ba:	80 81       	ld	r24, Z
     8bc:	81 30       	cpi	r24, 0x01	; 1
     8be:	31 f4       	brne	.+12     	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
			display_terminal_message("box_wall");
     8c0:	8c e1       	ldi	r24, 0x1C	; 28
     8c2:	92 e0       	ldi	r25, 0x02	; 2
     8c4:	0e 94 08 03 	call	0x610	; 0x610 <display_terminal_message>
			return false;
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	bb c0       	rjmp	.+374    	; 0xa42 <__stack+0x143>
		}
		board[next_row][next_col] = TARGET;
     8cc:	fe 01       	movw	r30, r28
     8ce:	e2 95       	swap	r30
     8d0:	f2 95       	swap	r31
     8d2:	f0 7f       	andi	r31, 0xF0	; 240
     8d4:	fe 27       	eor	r31, r30
     8d6:	e0 7f       	andi	r30, 0xF0	; 240
     8d8:	fe 27       	eor	r31, r30
     8da:	e1 56       	subi	r30, 0x61	; 97
     8dc:	fd 4f       	sbci	r31, 0xFD	; 253
     8de:	e0 0f       	add	r30, r16
     8e0:	f1 1f       	adc	r31, r17
     8e2:	84 e0       	ldi	r24, 0x04	; 4
     8e4:	80 83       	st	Z, r24
		paint_square(next_row, next_col);
     8e6:	60 2f       	mov	r22, r16
     8e8:	8c 2f       	mov	r24, r28
     8ea:	0e 94 49 02 	call	0x492	; 0x492 <paint_square>
		update_terminal_display(next_row, MATRIX_NUM_ROWS-next_row, 1);
     8ee:	68 94       	set
     8f0:	aa 24       	eor	r10, r10
     8f2:	a3 f8       	bld	r10, 3
     8f4:	b1 2c       	mov	r11, r1
     8f6:	b5 01       	movw	r22, r10
     8f8:	6c 1b       	sub	r22, r28
     8fa:	7d 0b       	sbc	r23, r29
     8fc:	41 e0       	ldi	r20, 0x01	; 1
     8fe:	50 e0       	ldi	r21, 0x00	; 0
     900:	ce 01       	movw	r24, r28
     902:	0e 94 a0 03 	call	0x740	; 0x740 <update_terminal_display>
		board[next_next_row][next_next_col] = BOX;
     906:	f7 01       	movw	r30, r14
     908:	e2 95       	swap	r30
     90a:	f2 95       	swap	r31
     90c:	f0 7f       	andi	r31, 0xF0	; 240
     90e:	fe 27       	eor	r31, r30
     910:	e0 7f       	andi	r30, 0xF0	; 240
     912:	fe 27       	eor	r31, r30
     914:	e1 56       	subi	r30, 0x61	; 97
     916:	fd 4f       	sbci	r31, 0xFD	; 253
     918:	ec 0d       	add	r30, r12
     91a:	fd 1d       	adc	r31, r13
     91c:	82 e0       	ldi	r24, 0x02	; 2
     91e:	80 83       	st	Z, r24
		paint_square(next_next_row, next_next_col);
     920:	6c 2d       	mov	r22, r12
     922:	8e 2d       	mov	r24, r14
     924:	0e 94 49 02 	call	0x492	; 0x492 <paint_square>
		update_terminal_display(next_next_row, MATRIX_NUM_ROWS-next_next_row, 1);
     928:	b5 01       	movw	r22, r10
     92a:	6e 19       	sub	r22, r14
     92c:	7f 09       	sbc	r23, r15
     92e:	41 e0       	ldi	r20, 0x01	; 1
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	c7 01       	movw	r24, r14
     934:	0e 94 a0 03 	call	0x740	; 0x740 <update_terminal_display>
     938:	6e c0       	rjmp	.+220    	; 0xa16 <__stack+0x117>
		
	//checks for box in front of player
	} else if (board[next_row][next_col] == BOX) {
     93a:	82 30       	cpi	r24, 0x02	; 2
     93c:	09 f0       	breq	.+2      	; 0x940 <__stack+0x41>
     93e:	6b c0       	rjmp	.+214    	; 0xa16 <__stack+0x117>
		if (board[next_next_row][next_next_col] == WALL) {
     940:	f7 01       	movw	r30, r14
     942:	e2 95       	swap	r30
     944:	f2 95       	swap	r31
     946:	f0 7f       	andi	r31, 0xF0	; 240
     948:	fe 27       	eor	r31, r30
     94a:	e0 7f       	andi	r30, 0xF0	; 240
     94c:	fe 27       	eor	r31, r30
     94e:	e1 56       	subi	r30, 0x61	; 97
     950:	fd 4f       	sbci	r31, 0xFD	; 253
     952:	ec 0d       	add	r30, r12
     954:	fd 1d       	adc	r31, r13
     956:	80 81       	ld	r24, Z
     958:	81 30       	cpi	r24, 0x01	; 1
     95a:	31 f4       	brne	.+12     	; 0x968 <__stack+0x69>
			display_terminal_message("box_wall");
     95c:	8c e1       	ldi	r24, 0x1C	; 28
     95e:	92 e0       	ldi	r25, 0x02	; 2
     960:	0e 94 08 03 	call	0x610	; 0x610 <display_terminal_message>
			return false;
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	6d c0       	rjmp	.+218    	; 0xa42 <__stack+0x143>
		} else if (board[next_next_row][next_next_col] == BOX) {
     968:	82 30       	cpi	r24, 0x02	; 2
     96a:	31 f4       	brne	.+12     	; 0x978 <__stack+0x79>
			display_terminal_message("box_box");
     96c:	85 e2       	ldi	r24, 0x25	; 37
     96e:	92 e0       	ldi	r25, 0x02	; 2
     970:	0e 94 08 03 	call	0x610	; 0x610 <display_terminal_message>
			return false;
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	65 c0       	rjmp	.+202    	; 0xa42 <__stack+0x143>
		} else {
			board[next_row][next_col] = ROOM;
     978:	fe 01       	movw	r30, r28
     97a:	e2 95       	swap	r30
     97c:	f2 95       	swap	r31
     97e:	f0 7f       	andi	r31, 0xF0	; 240
     980:	fe 27       	eor	r31, r30
     982:	e0 7f       	andi	r30, 0xF0	; 240
     984:	fe 27       	eor	r31, r30
     986:	e1 56       	subi	r30, 0x61	; 97
     988:	fd 4f       	sbci	r31, 0xFD	; 253
     98a:	e0 0f       	add	r30, r16
     98c:	f1 1f       	adc	r31, r17
     98e:	10 82       	st	Z, r1
			if (board[next_next_row][next_next_col] == TARGET) {
     990:	f7 01       	movw	r30, r14
     992:	e2 95       	swap	r30
     994:	f2 95       	swap	r31
     996:	f0 7f       	andi	r31, 0xF0	; 240
     998:	fe 27       	eor	r31, r30
     99a:	e0 7f       	andi	r30, 0xF0	; 240
     99c:	fe 27       	eor	r31, r30
     99e:	e1 56       	subi	r30, 0x61	; 97
     9a0:	fd 4f       	sbci	r31, 0xFD	; 253
     9a2:	ec 0d       	add	r30, r12
     9a4:	fd 1d       	adc	r31, r13
     9a6:	80 81       	ld	r24, Z
     9a8:	84 30       	cpi	r24, 0x04	; 4
     9aa:	d9 f4       	brne	.+54     	; 0x9e2 <__stack+0xe3>
				board[next_next_row][next_next_col] = (TARGET | BOX);
     9ac:	f7 01       	movw	r30, r14
     9ae:	e2 95       	swap	r30
     9b0:	f2 95       	swap	r31
     9b2:	f0 7f       	andi	r31, 0xF0	; 240
     9b4:	fe 27       	eor	r31, r30
     9b6:	e0 7f       	andi	r30, 0xF0	; 240
     9b8:	fe 27       	eor	r31, r30
     9ba:	e1 56       	subi	r30, 0x61	; 97
     9bc:	fd 4f       	sbci	r31, 0xFD	; 253
     9be:	ec 0d       	add	r30, r12
     9c0:	fd 1d       	adc	r31, r13
     9c2:	86 e0       	ldi	r24, 0x06	; 6
     9c4:	80 83       	st	Z, r24
				paint_square(next_next_row, next_next_col);
     9c6:	6c 2d       	mov	r22, r12
     9c8:	8e 2d       	mov	r24, r14
     9ca:	0e 94 49 02 	call	0x492	; 0x492 <paint_square>
				update_terminal_display(next_next_row, MATRIX_NUM_ROWS-next_next_row, 1);
     9ce:	68 e0       	ldi	r22, 0x08	; 8
     9d0:	70 e0       	ldi	r23, 0x00	; 0
     9d2:	6e 19       	sub	r22, r14
     9d4:	7f 09       	sbc	r23, r15
     9d6:	41 e0       	ldi	r20, 0x01	; 1
     9d8:	50 e0       	ldi	r21, 0x00	; 0
     9da:	c7 01       	movw	r24, r14
     9dc:	0e 94 a0 03 	call	0x740	; 0x740 <update_terminal_display>
     9e0:	1a c0       	rjmp	.+52     	; 0xa16 <__stack+0x117>
			} else {
				board[next_next_row][next_next_col] = BOX;
     9e2:	f7 01       	movw	r30, r14
     9e4:	e2 95       	swap	r30
     9e6:	f2 95       	swap	r31
     9e8:	f0 7f       	andi	r31, 0xF0	; 240
     9ea:	fe 27       	eor	r31, r30
     9ec:	e0 7f       	andi	r30, 0xF0	; 240
     9ee:	fe 27       	eor	r31, r30
     9f0:	e1 56       	subi	r30, 0x61	; 97
     9f2:	fd 4f       	sbci	r31, 0xFD	; 253
     9f4:	ec 0d       	add	r30, r12
     9f6:	fd 1d       	adc	r31, r13
     9f8:	82 e0       	ldi	r24, 0x02	; 2
     9fa:	80 83       	st	Z, r24
				paint_square(next_next_row, next_next_col);
     9fc:	6c 2d       	mov	r22, r12
     9fe:	8e 2d       	mov	r24, r14
     a00:	0e 94 49 02 	call	0x492	; 0x492 <paint_square>
				update_terminal_display(next_next_row, MATRIX_NUM_ROWS-next_next_row, 1);
     a04:	68 e0       	ldi	r22, 0x08	; 8
     a06:	70 e0       	ldi	r23, 0x00	; 0
     a08:	6e 19       	sub	r22, r14
     a0a:	7f 09       	sbc	r23, r15
     a0c:	41 e0       	ldi	r20, 0x01	; 1
     a0e:	50 e0       	ldi	r21, 0x00	; 0
     a10:	c7 01       	movw	r24, r14
     a12:	0e 94 a0 03 	call	0x740	; 0x740 <update_terminal_display>
			}
		}
	}
	player_row = next_row;
     a16:	8c 2f       	mov	r24, r28
     a18:	c0 93 9e 02 	sts	0x029E, r28	; 0x80029e <player_row>
	player_col = next_col;
     a1c:	00 93 9d 02 	sts	0x029D, r16	; 0x80029d <player_col>
	paint_square(player_row, player_col);
     a20:	60 2f       	mov	r22, r16
     a22:	0e 94 49 02 	call	0x492	; 0x492 <paint_square>
	update_terminal_display(player_row, MATRIX_NUM_ROWS-player_row, 1);
     a26:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <player_row>
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	68 e0       	ldi	r22, 0x08	; 8
     a2e:	70 e0       	ldi	r23, 0x00	; 0
     a30:	68 1b       	sub	r22, r24
     a32:	79 0b       	sbc	r23, r25
     a34:	41 e0       	ldi	r20, 0x01	; 1
     a36:	50 e0       	ldi	r21, 0x00	; 0
     a38:	0e 94 a0 03 	call	0x740	; 0x740 <update_terminal_display>
	flash_player();
     a3c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <flash_player>
	return true;
     a40:	81 e0       	ldi	r24, 0x01	; 1
}
     a42:	df 91       	pop	r29
     a44:	cf 91       	pop	r28
     a46:	1f 91       	pop	r17
     a48:	0f 91       	pop	r16
     a4a:	ff 90       	pop	r15
     a4c:	ef 90       	pop	r14
     a4e:	df 90       	pop	r13
     a50:	cf 90       	pop	r12
     a52:	bf 90       	pop	r11
     a54:	af 90       	pop	r10
     a56:	08 95       	ret

00000a58 <draw_terminal_board>:
int modulo(int x,int y){
	return (x % y + y) % y;
}

//Paints the current board on the terminal display
void draw_terminal_board(void) {
     a58:	0f 93       	push	r16
     a5a:	1f 93       	push	r17
     a5c:	cf 93       	push	r28
     a5e:	df 93       	push	r29
	int GAME_BOARD_ROW = 1;
	int GAME_BOARD_COL = 1;
	for (int row = MATRIX_NUM_ROWS-1; row >= 0; row--) {
     a60:	c7 e0       	ldi	r28, 0x07	; 7
     a62:	d0 e0       	ldi	r29, 0x00	; 0
	return (x % y + y) % y;
}

//Paints the current board on the terminal display
void draw_terminal_board(void) {
	int GAME_BOARD_ROW = 1;
     a64:	01 e0       	ldi	r16, 0x01	; 1
     a66:	10 e0       	ldi	r17, 0x00	; 0
	int GAME_BOARD_COL = 1;
	for (int row = MATRIX_NUM_ROWS-1; row >= 0; row--) {
     a68:	0d c0       	rjmp	.+26     	; 0xa84 <draw_terminal_board+0x2c>
		update_terminal_display(row, GAME_BOARD_ROW, GAME_BOARD_COL);
     a6a:	41 e0       	ldi	r20, 0x01	; 1
     a6c:	50 e0       	ldi	r21, 0x00	; 0
     a6e:	b8 01       	movw	r22, r16
     a70:	ce 01       	movw	r24, r28
     a72:	0e 94 a0 03 	call	0x740	; 0x740 <update_terminal_display>
		printf("\n");
     a76:	8a e0       	ldi	r24, 0x0A	; 10
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <putchar>
		GAME_BOARD_ROW++;
     a7e:	0f 5f       	subi	r16, 0xFF	; 255
     a80:	1f 4f       	sbci	r17, 0xFF	; 255

//Paints the current board on the terminal display
void draw_terminal_board(void) {
	int GAME_BOARD_ROW = 1;
	int GAME_BOARD_COL = 1;
	for (int row = MATRIX_NUM_ROWS-1; row >= 0; row--) {
     a82:	21 97       	sbiw	r28, 0x01	; 1
     a84:	dd 23       	and	r29, r29
     a86:	8c f7       	brge	.-30     	; 0xa6a <draw_terminal_board+0x12>
		update_terminal_display(row, GAME_BOARD_ROW, GAME_BOARD_COL);
		printf("\n");
		GAME_BOARD_ROW++;
	}
}
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	1f 91       	pop	r17
     a8e:	0f 91       	pop	r16
     a90:	08 95       	ret

00000a92 <initialise_game>:
	}
}

// This function initialises the global variables used to store the game
// state, and renders the initial game display.
void initialise_game(int level) {
     a92:	cf 93       	push	r28
     a94:	df 93       	push	r29
	
	initialise_level(level);
     a96:	0e 94 74 02 	call	0x4e8	; 0x4e8 <initialise_level>

	// Make the player icon initially invisible.
	player_visible = false;
     a9a:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <player_visible>

	// Draw the game board (map).
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     a9e:	d0 e0       	ldi	r29, 0x00	; 0
     aa0:	0a c0       	rjmp	.+20     	; 0xab6 <initialise_game+0x24>
	{
		for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
		{
			paint_square(row, col);
     aa2:	6c 2f       	mov	r22, r28
     aa4:	8d 2f       	mov	r24, r29
     aa6:	0e 94 49 02 	call	0x492	; 0x492 <paint_square>
	player_visible = false;

	// Draw the game board (map).
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
	{
		for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
     aaa:	cf 5f       	subi	r28, 0xFF	; 255
     aac:	01 c0       	rjmp	.+2      	; 0xab0 <initialise_game+0x1e>
     aae:	c0 e0       	ldi	r28, 0x00	; 0
     ab0:	c0 31       	cpi	r28, 0x10	; 16
     ab2:	b8 f3       	brcs	.-18     	; 0xaa2 <initialise_game+0x10>

	// Make the player icon initially invisible.
	player_visible = false;

	// Draw the game board (map).
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     ab4:	df 5f       	subi	r29, 0xFF	; 255
     ab6:	d8 30       	cpi	r29, 0x08	; 8
     ab8:	d0 f3       	brcs	.-12     	; 0xaae <initialise_game+0x1c>
			paint_square(row, col);
		}
	}
	
	//Draw the game board on the terminal
	draw_terminal_board();
     aba:	0e 94 2c 05 	call	0xa58	; 0xa58 <draw_terminal_board>
}
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	08 95       	ret

00000ac4 <init_ledmatrix>:
}

void ledmatrix_shift_display_down(void)
{
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     ac4:	80 e8       	ldi	r24, 0x80	; 128
     ac6:	0e 94 a8 09 	call	0x1350	; 0x1350 <spi_setup_master>
     aca:	08 95       	ret

00000acc <ledmatrix_update_pixel>:
     acc:	1f 93       	push	r17
     ace:	cf 93       	push	r28
     ad0:	df 93       	push	r29
     ad2:	60 31       	cpi	r22, 0x10	; 16
     ad4:	b0 f4       	brcc	.+44     	; 0xb02 <ledmatrix_update_pixel+0x36>
     ad6:	88 30       	cpi	r24, 0x08	; 8
     ad8:	a0 f4       	brcc	.+40     	; 0xb02 <ledmatrix_update_pixel+0x36>
     ada:	14 2f       	mov	r17, r20
     adc:	d6 2f       	mov	r29, r22
     ade:	c8 2f       	mov	r28, r24
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <spi_send_byte>
     ae6:	8c 2f       	mov	r24, r28
     ae8:	87 70       	andi	r24, 0x07	; 7
     aea:	20 e1       	ldi	r18, 0x10	; 16
     aec:	82 9f       	mul	r24, r18
     aee:	c0 01       	movw	r24, r0
     af0:	11 24       	eor	r1, r1
     af2:	6d 2f       	mov	r22, r29
     af4:	6f 70       	andi	r22, 0x0F	; 15
     af6:	86 2b       	or	r24, r22
     af8:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <spi_send_byte>
     afc:	81 2f       	mov	r24, r17
     afe:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <spi_send_byte>
     b02:	df 91       	pop	r29
     b04:	cf 91       	pop	r28
     b06:	1f 91       	pop	r17
     b08:	08 95       	ret

00000b0a <ledmatrix_update_column>:
     b0a:	0f 93       	push	r16
     b0c:	1f 93       	push	r17
     b0e:	cf 93       	push	r28
     b10:	80 31       	cpi	r24, 0x10	; 16
     b12:	a0 f4       	brcc	.+40     	; 0xb3c <ledmatrix_update_column+0x32>
     b14:	8b 01       	movw	r16, r22
     b16:	c8 2f       	mov	r28, r24
     b18:	83 e0       	ldi	r24, 0x03	; 3
     b1a:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <spi_send_byte>
     b1e:	8c 2f       	mov	r24, r28
     b20:	8f 70       	andi	r24, 0x0F	; 15
     b22:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <spi_send_byte>
     b26:	c0 e0       	ldi	r28, 0x00	; 0
     b28:	07 c0       	rjmp	.+14     	; 0xb38 <ledmatrix_update_column+0x2e>
     b2a:	f8 01       	movw	r30, r16
     b2c:	ec 0f       	add	r30, r28
     b2e:	f1 1d       	adc	r31, r1
     b30:	80 81       	ld	r24, Z
     b32:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <spi_send_byte>
     b36:	cf 5f       	subi	r28, 0xFF	; 255
     b38:	c8 30       	cpi	r28, 0x08	; 8
     b3a:	b8 f3       	brcs	.-18     	; 0xb2a <ledmatrix_update_column+0x20>
     b3c:	cf 91       	pop	r28
     b3e:	1f 91       	pop	r17
     b40:	0f 91       	pop	r16
     b42:	08 95       	ret

00000b44 <ledmatrix_shift_display_left>:
     b44:	84 e0       	ldi	r24, 0x04	; 4
     b46:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <spi_send_byte>
     b4a:	82 e0       	ldi	r24, 0x02	; 2
     b4c:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <spi_send_byte>
     b50:	08 95       	ret

00000b52 <ledmatrix_clear>:
}

void ledmatrix_clear(void)
{
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     b52:	8f e0       	ldi	r24, 0x0F	; 15
     b54:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <spi_send_byte>
     b58:	08 95       	ret

00000b5a <initialise_hardware>:
	}
	handle_game_over();
}

void increment_step_counter(void) {
	step_counter++;
     b5a:	0e 94 62 05 	call	0xac4	; 0xac4 <init_ledmatrix>
     b5e:	0e 94 c4 01 	call	0x388	; 0x388 <init_buttons>
     b62:	40 e0       	ldi	r20, 0x00	; 0
     b64:	60 e0       	ldi	r22, 0x00	; 0
     b66:	7b e4       	ldi	r23, 0x4B	; 75
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	0e 94 55 09 	call	0x12aa	; 0x12aa <init_serial_stdio>
     b70:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <init_timer0>
     b74:	0e 94 2e 0c 	call	0x185c	; 0x185c <init_timer1>
     b78:	0e 94 33 0c 	call	0x1866	; 0x1866 <init_timer2>
     b7c:	78 94       	sei
     b7e:	08 95       	ret

00000b80 <start_screen>:
     b80:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <hide_cursor>
     b84:	0e 94 b2 0b 	call	0x1764	; 0x1764 <normal_display_mode>
     b88:	0e 94 bb 0b 	call	0x1776	; 0x1776 <clear_terminal>
     b8c:	65 e0       	ldi	r22, 0x05	; 5
     b8e:	83 e0       	ldi	r24, 0x03	; 3
     b90:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <display_terminal_title>
     b94:	65 e0       	ldi	r22, 0x05	; 5
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	8b e0       	ldi	r24, 0x0B	; 11
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	0e 94 9e 0b 	call	0x173c	; 0x173c <move_terminal_cursor>
     ba0:	8c e3       	ldi	r24, 0x3C	; 60
     ba2:	91 e0       	ldi	r25, 0x01	; 1
     ba4:	9f 93       	push	r25
     ba6:	8f 93       	push	r24
     ba8:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <printf_P>
     bac:	0e 94 c3 0a 	call	0x1586	; 0x1586 <setup_start_screen>
     bb0:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <clear_button_presses>
     bb4:	0f 90       	pop	r0
     bb6:	0f 90       	pop	r0
     bb8:	0e 94 d6 01 	call	0x3ac	; 0x3ac <button_pushed>
     bbc:	8f 3f       	cpi	r24, 0xFF	; 255
     bbe:	99 f4       	brne	.+38     	; 0xbe6 <start_screen+0x66>
     bc0:	0e 94 9c 09 	call	0x1338	; 0x1338 <serial_input_available>
     bc4:	88 23       	and	r24, r24
     bc6:	61 f0       	breq	.+24     	; 0xbe0 <start_screen+0x60>
     bc8:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <__iob>
     bcc:	90 91 48 04 	lds	r25, 0x0448	; 0x800448 <__iob+0x1>
     bd0:	0e 94 56 0d 	call	0x1aac	; 0x1aac <fgetc>
     bd4:	83 37       	cpi	r24, 0x73	; 115
     bd6:	91 05       	cpc	r25, r1
     bd8:	31 f0       	breq	.+12     	; 0xbe6 <start_screen+0x66>
     bda:	83 35       	cpi	r24, 0x53	; 83
     bdc:	91 05       	cpc	r25, r1
     bde:	19 f0       	breq	.+6      	; 0xbe6 <start_screen+0x66>
     be0:	0e 94 cd 0a 	call	0x159a	; 0x159a <update_start_screen>
     be4:	e9 cf       	rjmp	.-46     	; 0xbb8 <start_screen+0x38>
     be6:	08 95       	ret

00000be8 <new_game>:
     be8:	cf 93       	push	r28
     bea:	df 93       	push	r29
     bec:	ec 01       	movw	r28, r24
     bee:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <hide_cursor>
     bf2:	0e 94 bb 0b 	call	0x1776	; 0x1776 <clear_terminal>
     bf6:	ce 01       	movw	r24, r28
     bf8:	0e 94 49 05 	call	0xa92	; 0xa92 <initialise_game>
     bfc:	61 e0       	ldi	r22, 0x01	; 1
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	8a e0       	ldi	r24, 0x0A	; 10
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	0e 94 9e 0b 	call	0x173c	; 0x173c <move_terminal_cursor>
     c08:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <current_level>
     c0c:	1f 92       	push	r1
     c0e:	8f 93       	push	r24
     c10:	81 e7       	ldi	r24, 0x71	; 113
     c12:	92 e0       	ldi	r25, 0x02	; 2
     c14:	9f 93       	push	r25
     c16:	8f 93       	push	r24
     c18:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <printf>
     c1c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <clear_button_presses>
     c20:	0e 94 a3 09 	call	0x1346	; 0x1346 <clear_serial_input_buffer>
     c24:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <step_counter>
     c28:	0f 90       	pop	r0
     c2a:	0f 90       	pop	r0
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	df 91       	pop	r29
     c32:	cf 91       	pop	r28
     c34:	08 95       	ret

00000c36 <handle_game_over>:
}

void handle_game_over(void)
{
	move_terminal_cursor(14, 10);
     c36:	6a e0       	ldi	r22, 0x0A	; 10
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	8e e0       	ldi	r24, 0x0E	; 14
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	0e 94 9e 0b 	call	0x173c	; 0x173c <move_terminal_cursor>
	printf_P(PSTR("GAME OVER"));
     c42:	82 e3       	ldi	r24, 0x32	; 50
     c44:	91 e0       	ldi	r25, 0x01	; 1
     c46:	9f 93       	push	r25
     c48:	8f 93       	push	r24
     c4a:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <printf_P>
	move_terminal_cursor(15, 10);
     c4e:	6a e0       	ldi	r22, 0x0A	; 10
     c50:	70 e0       	ldi	r23, 0x00	; 0
     c52:	8f e0       	ldi	r24, 0x0F	; 15
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	0e 94 9e 0b 	call	0x173c	; 0x173c <move_terminal_cursor>
	printf_P(PSTR("Press 'r'/'R' to restart, 'e'/'E' to exit,"));
     c5a:	87 e0       	ldi	r24, 0x07	; 7
     c5c:	91 e0       	ldi	r25, 0x01	; 1
     c5e:	9f 93       	push	r25
     c60:	8f 93       	push	r24
     c62:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <printf_P>
	move_terminal_cursor(16, 10);
     c66:	6a e0       	ldi	r22, 0x0A	; 10
     c68:	70 e0       	ldi	r23, 0x00	; 0
     c6a:	80 e1       	ldi	r24, 0x10	; 16
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	0e 94 9e 0b 	call	0x173c	; 0x173c <move_terminal_cursor>
	printf_P(PSTR("or press 'n'/'N' to progress to level 2"));
     c72:	8f ed       	ldi	r24, 0xDF	; 223
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	9f 93       	push	r25
     c78:	8f 93       	push	r24
     c7a:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <printf_P>
	
	//calculate and print score
	int score = 0;
	if (200-step_counter > 0) {
     c7e:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <step_counter>
     c82:	c8 ec       	ldi	r28, 0xC8	; 200
     c84:	d0 e0       	ldi	r29, 0x00	; 0
     c86:	c8 1b       	sub	r28, r24
     c88:	d1 09       	sbc	r29, r1
     c8a:	0f 90       	pop	r0
     c8c:	0f 90       	pop	r0
     c8e:	0f 90       	pop	r0
     c90:	0f 90       	pop	r0
     c92:	0f 90       	pop	r0
     c94:	0f 90       	pop	r0
     c96:	1c 16       	cp	r1, r28
     c98:	1d 06       	cpc	r1, r29
     c9a:	14 f0       	brlt	.+4      	; 0xca0 <handle_game_over+0x6a>
	printf_P(PSTR("Press 'r'/'R' to restart, 'e'/'E' to exit,"));
	move_terminal_cursor(16, 10);
	printf_P(PSTR("or press 'n'/'N' to progress to level 2"));
	
	//calculate and print score
	int score = 0;
     c9c:	c0 e0       	ldi	r28, 0x00	; 0
     c9e:	d0 e0       	ldi	r29, 0x00	; 0
	if (200-step_counter > 0) {
		score += 200-step_counter;
	}
	if (1200-play_time > 0) {
     ca0:	20 91 32 03 	lds	r18, 0x0332	; 0x800332 <play_time>
     ca4:	80 eb       	ldi	r24, 0xB0	; 176
     ca6:	94 e0       	ldi	r25, 0x04	; 4
     ca8:	82 1b       	sub	r24, r18
     caa:	91 09       	sbc	r25, r1
     cac:	18 16       	cp	r1, r24
     cae:	19 06       	cpc	r1, r25
     cb0:	14 f4       	brge	.+4      	; 0xcb6 <handle_game_over+0x80>
		score += 1200-play_time;
     cb2:	c8 0f       	add	r28, r24
     cb4:	d9 1f       	adc	r29, r25
	}
	move_terminal_cursor(18, 10);
     cb6:	6a e0       	ldi	r22, 0x0A	; 10
     cb8:	70 e0       	ldi	r23, 0x00	; 0
     cba:	82 e1       	ldi	r24, 0x12	; 18
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	0e 94 9e 0b 	call	0x173c	; 0x173c <move_terminal_cursor>
	printf("Score: %d", score);
     cc2:	df 93       	push	r29
     cc4:	cf 93       	push	r28
     cc6:	8b e7       	ldi	r24, 0x7B	; 123
     cc8:	92 e0       	ldi	r25, 0x02	; 2
     cca:	9f 93       	push	r25
     ccc:	8f 93       	push	r24
     cce:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <printf>
     cd2:	0f 90       	pop	r0
     cd4:	0f 90       	pop	r0
     cd6:	0f 90       	pop	r0
     cd8:	0f 90       	pop	r0

	//For ssd
	int digit = 0;
     cda:	c0 e0       	ldi	r28, 0x00	; 0
     cdc:	d0 e0       	ldi	r29, 0x00	; 0
	while (1)
	{
		// Get serial input. If no serial input is ready, serial_input
		// would be -1 (not a valid character).
		int serial_input = -1;
		if (serial_input_available())
     cde:	0e 94 9c 09 	call	0x1338	; 0x1338 <serial_input_available>
     ce2:	88 23       	and	r24, r24
     ce4:	39 f0       	breq	.+14     	; 0xcf4 <handle_game_over+0xbe>
		{
			serial_input = fgetc(stdin);
     ce6:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <__iob>
     cea:	90 91 48 04 	lds	r25, 0x0448	; 0x800448 <__iob+0x1>
     cee:	0e 94 56 0d 	call	0x1aac	; 0x1aac <fgetc>
     cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <handle_game_over+0xc2>
	// Do nothing until a valid input is made.
	while (1)
	{
		// Get serial input. If no serial input is ready, serial_input
		// would be -1 (not a valid character).
		int serial_input = -1;
     cf4:	8f ef       	ldi	r24, 0xFF	; 255
     cf6:	9f ef       	ldi	r25, 0xFF	; 255
		{
			serial_input = fgetc(stdin);
		}

		// Check serial input.
		if (toupper(serial_input) == 'R') {
     cf8:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <toupper>
     cfc:	82 35       	cpi	r24, 0x52	; 82
     cfe:	91 05       	cpc	r25, r1
     d00:	41 f4       	brne	.+16     	; 0xd12 <handle_game_over+0xdc>
			new_game(current_level);
     d02:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <current_level>
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <new_game>
			play_game();
     d0c:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <play_game>
     d10:	1c c0       	rjmp	.+56     	; 0xd4a <handle_game_over+0x114>
		} else if (toupper(serial_input) == 'E') {
     d12:	85 34       	cpi	r24, 0x45	; 69
     d14:	91 05       	cpc	r25, r1
     d16:	69 f4       	brne	.+26     	; 0xd32 <handle_game_over+0xfc>
			current_level = 1;
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <current_level>
			start_screen();
     d1e:	0e 94 c0 05 	call	0xb80	; 0xb80 <start_screen>
			new_game(current_level);
     d22:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <current_level>
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <new_game>
			play_game();
     d2c:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <play_game>
     d30:	0c c0       	rjmp	.+24     	; 0xd4a <handle_game_over+0x114>
		} else if (toupper(serial_input) == 'N') {
     d32:	8e 34       	cpi	r24, 0x4E	; 78
     d34:	91 05       	cpc	r25, r1
     d36:	49 f4       	brne	.+18     	; 0xd4a <handle_game_over+0x114>
			current_level = 2;
     d38:	82 e0       	ldi	r24, 0x02	; 2
     d3a:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <current_level>
			new_game(current_level);
     d3e:	82 e0       	ldi	r24, 0x02	; 2
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <new_game>
			play_game();
     d46:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <play_game>
		}
		
		if(digit == 0) {
     d4a:	20 97       	sbiw	r28, 0x00	; 0
     d4c:	91 f4       	brne	.+36     	; 0xd72 <handle_game_over+0x13c>
			value = step_counter % 10;
     d4e:	90 91 30 03 	lds	r25, 0x0330	; 0x800330 <step_counter>
     d52:	ed ec       	ldi	r30, 0xCD	; 205
     d54:	9e 9f       	mul	r25, r30
     d56:	e1 2d       	mov	r30, r1
     d58:	11 24       	eor	r1, r1
     d5a:	e6 95       	lsr	r30
     d5c:	e6 95       	lsr	r30
     d5e:	e6 95       	lsr	r30
     d60:	ee 0f       	add	r30, r30
     d62:	8e 2f       	mov	r24, r30
     d64:	88 0f       	add	r24, r24
     d66:	88 0f       	add	r24, r24
     d68:	e8 0f       	add	r30, r24
     d6a:	9e 1b       	sub	r25, r30
     d6c:	e9 2f       	mov	r30, r25
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	17 c0       	rjmp	.+46     	; 0xda0 <handle_game_over+0x16a>
			} else {
			value = (step_counter / 10) % 10;
     d72:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <step_counter>
     d76:	ed ec       	ldi	r30, 0xCD	; 205
     d78:	8e 9f       	mul	r24, r30
     d7a:	81 2d       	mov	r24, r1
     d7c:	11 24       	eor	r1, r1
     d7e:	86 95       	lsr	r24
     d80:	86 95       	lsr	r24
     d82:	86 95       	lsr	r24
     d84:	8e 9f       	mul	r24, r30
     d86:	e1 2d       	mov	r30, r1
     d88:	11 24       	eor	r1, r1
     d8a:	e6 95       	lsr	r30
     d8c:	e6 95       	lsr	r30
     d8e:	e6 95       	lsr	r30
     d90:	ee 0f       	add	r30, r30
     d92:	9e 2f       	mov	r25, r30
     d94:	99 0f       	add	r25, r25
     d96:	99 0f       	add	r25, r25
     d98:	e9 0f       	add	r30, r25
     d9a:	8e 1b       	sub	r24, r30
     d9c:	e8 2f       	mov	r30, r24
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
		}
		PORTA = seven_seg[value];
     da0:	ec 5f       	subi	r30, 0xFC	; 252
     da2:	fe 4f       	sbci	r31, 0xFE	; 254
     da4:	80 81       	ld	r24, Z
     da6:	82 b9       	out	0x02, r24	; 2
		PORTC = digit;
     da8:	c8 b9       	out	0x08, r28	; 8
		digit = 1- digit;
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	9c 01       	movw	r18, r24
     db0:	2c 1b       	sub	r18, r28
     db2:	3d 0b       	sbc	r19, r29
     db4:	e9 01       	movw	r28, r18
	}
     db6:	93 cf       	rjmp	.-218    	; 0xcde <handle_game_over+0xa8>

00000db8 <play_game>:
	//Reset step counter
	step_counter = 0;
}

void play_game(void)
{
     db8:	cf 93       	push	r28
     dba:	df 93       	push	r29
     dbc:	cd b7       	in	r28, 0x3d	; 61
     dbe:	de b7       	in	r29, 0x3e	; 62
     dc0:	64 97       	sbiw	r28, 0x14	; 20
     dc2:	0f b6       	in	r0, 0x3f	; 63
     dc4:	f8 94       	cli
     dc6:	de bf       	out	0x3e, r29	; 62
     dc8:	0f be       	out	0x3f, r0	; 63
     dca:	cd bf       	out	0x3d, r28	; 61
	//Initialise step counter
	step_counter = 0;
     dcc:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <step_counter>
	uint8_t value = 0;
	uint8_t digit = 0; /* 0 = right, 1 = left */
	DDRA = 0xFF;
     dd0:	8f ef       	ldi	r24, 0xFF	; 255
     dd2:	81 b9       	out	0x01, r24	; 1
	DDRC = (1 << 0);
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	87 b9       	out	0x07, r24	; 7
	
	uint32_t last_flash_time = get_current_time();
     dd8:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <get_current_time>
     ddc:	4b 01       	movw	r8, r22
     dde:	5c 01       	movw	r10, r24
	
	play_time = 0;
     de0:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <play_time>
void play_game(void)
{
	//Initialise step counter
	step_counter = 0;
	uint8_t value = 0;
	uint8_t digit = 0; /* 0 = right, 1 = left */
     de4:	f1 2c       	mov	r15, r1
	
	play_time = 0;
	char play_time_str[20];

	// We play the game until it's over.
	while (!is_game_over())
     de6:	2d c1       	rjmp	.+602    	; 0x1042 <play_game+0x28a>
	{
		// We need to check if any buttons have been pushed, this will
		// be NO_BUTTON_PUSHED if no button has been pushed. If button
		// 0 has been pushed, we get BUTTON0_PUSHED, and likewise, if
		// button 1 has been pushed, we get BUTTON1_PUSHED, and so on.
		ButtonState btn = button_pushed();
     de8:	0e 94 d6 01 	call	0x3ac	; 0x3ac <button_pushed>
     dec:	e8 2e       	mov	r14, r24
		int serial_input = -1;

		if (serial_input_available()) {
     dee:	0e 94 9c 09 	call	0x1338	; 0x1338 <serial_input_available>
     df2:	88 23       	and	r24, r24
     df4:	39 f0       	breq	.+14     	; 0xe04 <play_game+0x4c>
			serial_input = fgetc(stdin);
     df6:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <__iob>
     dfa:	90 91 48 04 	lds	r25, 0x0448	; 0x800448 <__iob+0x1>
     dfe:	0e 94 56 0d 	call	0x1aac	; 0x1aac <fgetc>
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <play_game+0x50>
		// We need to check if any buttons have been pushed, this will
		// be NO_BUTTON_PUSHED if no button has been pushed. If button
		// 0 has been pushed, we get BUTTON0_PUSHED, and likewise, if
		// button 1 has been pushed, we get BUTTON1_PUSHED, and so on.
		ButtonState btn = button_pushed();
		int serial_input = -1;
     e04:	8f ef       	ldi	r24, 0xFF	; 255
     e06:	9f ef       	ldi	r25, 0xFF	; 255

		if (serial_input_available()) {
			serial_input = fgetc(stdin);
		}
		
		if (tolower(serial_input) == 'p') {
     e08:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <tolower>
     e0c:	8c 01       	movw	r16, r24
     e0e:	80 37       	cpi	r24, 0x70	; 112
     e10:	91 05       	cpc	r25, r1
     e12:	09 f0       	breq	.+2      	; 0xe16 <play_game+0x5e>
     e14:	42 c0       	rjmp	.+132    	; 0xe9a <play_game+0xe2>
			while (1) {
				if (serial_input_available()) {
     e16:	0e 94 9c 09 	call	0x1338	; 0x1338 <serial_input_available>
     e1a:	88 23       	and	r24, r24
     e1c:	59 f0       	breq	.+22     	; 0xe34 <play_game+0x7c>
					if (tolower(fgetc(stdin)) == 'p') {
     e1e:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <__iob>
     e22:	90 91 48 04 	lds	r25, 0x0448	; 0x800448 <__iob+0x1>
     e26:	0e 94 56 0d 	call	0x1aac	; 0x1aac <fgetc>
     e2a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <tolower>
     e2e:	80 37       	cpi	r24, 0x70	; 112
     e30:	91 05       	cpc	r25, r1
     e32:	99 f1       	breq	.+102    	; 0xe9a <play_game+0xe2>
						break;
					}
				}
				//Keep ssd looping
				if(digit == 0) {
     e34:	f1 10       	cpse	r15, r1
     e36:	11 c0       	rjmp	.+34     	; 0xe5a <play_game+0xa2>
					value = step_counter % 10;
     e38:	90 91 30 03 	lds	r25, 0x0330	; 0x800330 <step_counter>
     e3c:	ed ec       	ldi	r30, 0xCD	; 205
     e3e:	9e 9f       	mul	r25, r30
     e40:	e1 2d       	mov	r30, r1
     e42:	11 24       	eor	r1, r1
     e44:	e6 95       	lsr	r30
     e46:	e6 95       	lsr	r30
     e48:	e6 95       	lsr	r30
     e4a:	ee 0f       	add	r30, r30
     e4c:	8e 2f       	mov	r24, r30
     e4e:	88 0f       	add	r24, r24
     e50:	88 0f       	add	r24, r24
     e52:	e8 0f       	add	r30, r24
     e54:	9e 1b       	sub	r25, r30
     e56:	e9 2f       	mov	r30, r25
     e58:	16 c0       	rjmp	.+44     	; 0xe86 <play_game+0xce>
					} else {
					value = (step_counter / 10) % 10;
     e5a:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <step_counter>
     e5e:	ed ec       	ldi	r30, 0xCD	; 205
     e60:	8e 9f       	mul	r24, r30
     e62:	81 2d       	mov	r24, r1
     e64:	11 24       	eor	r1, r1
     e66:	86 95       	lsr	r24
     e68:	86 95       	lsr	r24
     e6a:	86 95       	lsr	r24
     e6c:	8e 9f       	mul	r24, r30
     e6e:	e1 2d       	mov	r30, r1
     e70:	11 24       	eor	r1, r1
     e72:	e6 95       	lsr	r30
     e74:	e6 95       	lsr	r30
     e76:	e6 95       	lsr	r30
     e78:	ee 0f       	add	r30, r30
     e7a:	9e 2f       	mov	r25, r30
     e7c:	99 0f       	add	r25, r25
     e7e:	99 0f       	add	r25, r25
     e80:	e9 0f       	add	r30, r25
     e82:	8e 1b       	sub	r24, r30
     e84:	e8 2f       	mov	r30, r24
				}
				PORTA = seven_seg[value];
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	ec 5f       	subi	r30, 0xFC	; 252
     e8a:	fe 4f       	sbci	r31, 0xFE	; 254
     e8c:	80 81       	ld	r24, Z
     e8e:	82 b9       	out	0x02, r24	; 2
				PORTC = digit;
     e90:	f8 b8       	out	0x08, r15	; 8
				digit = 1 - digit;
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	8f 19       	sub	r24, r15
     e96:	f8 2e       	mov	r15, r24
			}
     e98:	be cf       	rjmp	.-132    	; 0xe16 <play_game+0x5e>
		}

		if (btn == BUTTON0_PUSHED || tolower(serial_input) == 'd') {
     e9a:	ee 20       	and	r14, r14
     e9c:	19 f0       	breq	.+6      	; 0xea4 <play_game+0xec>
     e9e:	04 36       	cpi	r16, 0x64	; 100
     ea0:	11 05       	cpc	r17, r1
     ea2:	81 f4       	brne	.+32     	; 0xec4 <play_game+0x10c>
			if (move_player(0, 1)) {step_counter++;}
     ea4:	61 e0       	ldi	r22, 0x01	; 1
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <move_player>
     eac:	88 23       	and	r24, r24
     eae:	29 f0       	breq	.+10     	; 0xeba <play_game+0x102>
     eb0:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <step_counter>
     eb4:	8f 5f       	subi	r24, 0xFF	; 255
     eb6:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <step_counter>
			last_flash_time = get_current_time();
     eba:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <get_current_time>
     ebe:	4b 01       	movw	r8, r22
     ec0:	5c 01       	movw	r10, r24
     ec2:	41 c0       	rjmp	.+130    	; 0xf46 <play_game+0x18e>
		} else if (btn == BUTTON1_PUSHED || tolower(serial_input) == 's') {
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	e8 16       	cp	r14, r24
     ec8:	19 f0       	breq	.+6      	; 0xed0 <play_game+0x118>
     eca:	03 37       	cpi	r16, 0x73	; 115
     ecc:	11 05       	cpc	r17, r1
     ece:	81 f4       	brne	.+32     	; 0xef0 <play_game+0x138>
			if (move_player(-1, 0)) {step_counter++;}
     ed0:	60 e0       	ldi	r22, 0x00	; 0
     ed2:	8f ef       	ldi	r24, 0xFF	; 255
     ed4:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <move_player>
     ed8:	88 23       	and	r24, r24
     eda:	29 f0       	breq	.+10     	; 0xee6 <play_game+0x12e>
     edc:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <step_counter>
     ee0:	8f 5f       	subi	r24, 0xFF	; 255
     ee2:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <step_counter>
			last_flash_time = get_current_time();
     ee6:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <get_current_time>
     eea:	4b 01       	movw	r8, r22
     eec:	5c 01       	movw	r10, r24
     eee:	2b c0       	rjmp	.+86     	; 0xf46 <play_game+0x18e>
		} else if (btn == BUTTON2_PUSHED || tolower(serial_input) == 'w') {
     ef0:	92 e0       	ldi	r25, 0x02	; 2
     ef2:	e9 16       	cp	r14, r25
     ef4:	19 f0       	breq	.+6      	; 0xefc <play_game+0x144>
     ef6:	07 37       	cpi	r16, 0x77	; 119
     ef8:	11 05       	cpc	r17, r1
     efa:	81 f4       	brne	.+32     	; 0xf1c <play_game+0x164>
			if (move_player(1, 0)) {step_counter++;}
     efc:	60 e0       	ldi	r22, 0x00	; 0
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <move_player>
     f04:	88 23       	and	r24, r24
     f06:	29 f0       	breq	.+10     	; 0xf12 <play_game+0x15a>
     f08:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <step_counter>
     f0c:	8f 5f       	subi	r24, 0xFF	; 255
     f0e:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <step_counter>
			last_flash_time = get_current_time();
     f12:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <get_current_time>
     f16:	4b 01       	movw	r8, r22
     f18:	5c 01       	movw	r10, r24
     f1a:	15 c0       	rjmp	.+42     	; 0xf46 <play_game+0x18e>
		} else if (btn == BUTTON3_PUSHED || tolower(serial_input) == 'a') {
     f1c:	83 e0       	ldi	r24, 0x03	; 3
     f1e:	e8 16       	cp	r14, r24
     f20:	19 f0       	breq	.+6      	; 0xf28 <play_game+0x170>
     f22:	01 36       	cpi	r16, 0x61	; 97
     f24:	11 05       	cpc	r17, r1
     f26:	79 f4       	brne	.+30     	; 0xf46 <play_game+0x18e>
			if (move_player(0, -1)) {step_counter++;}
     f28:	6f ef       	ldi	r22, 0xFF	; 255
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <move_player>
     f30:	88 23       	and	r24, r24
     f32:	29 f0       	breq	.+10     	; 0xf3e <play_game+0x186>
     f34:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <step_counter>
     f38:	8f 5f       	subi	r24, 0xFF	; 255
     f3a:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <step_counter>
			last_flash_time = get_current_time();
     f3e:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <get_current_time>
     f42:	4b 01       	movw	r8, r22
     f44:	5c 01       	movw	r10, r24
		}

		uint32_t current_time = get_current_time();
     f46:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <get_current_time>
     f4a:	2b 01       	movw	r4, r22
     f4c:	3c 01       	movw	r6, r24
		if (current_time >= last_flash_time + 200)
     f4e:	d5 01       	movw	r26, r10
     f50:	c4 01       	movw	r24, r8
     f52:	88 53       	subi	r24, 0x38	; 56
     f54:	9f 4f       	sbci	r25, 0xFF	; 255
     f56:	af 4f       	sbci	r26, 0xFF	; 255
     f58:	bf 4f       	sbci	r27, 0xFF	; 255
     f5a:	48 16       	cp	r4, r24
     f5c:	59 06       	cpc	r5, r25
     f5e:	6a 06       	cpc	r6, r26
     f60:	7b 06       	cpc	r7, r27
     f62:	20 f0       	brcs	.+8      	; 0xf6c <play_game+0x1b4>
		{
			// 200ms (0.2 seconds) has passed since the last time
			// we flashed the player icon, flash it now.
			flash_player();
     f64:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <flash_player>

			// Update the most recent icon flash time.
			last_flash_time = current_time;
     f68:	53 01       	movw	r10, r6
     f6a:	42 01       	movw	r8, r4
		}
		
		//Display step counter on seven segment display
		if(digit == 0) {
     f6c:	f1 10       	cpse	r15, r1
     f6e:	11 c0       	rjmp	.+34     	; 0xf92 <play_game+0x1da>
			value = step_counter % 10;
     f70:	90 91 30 03 	lds	r25, 0x0330	; 0x800330 <step_counter>
     f74:	ed ec       	ldi	r30, 0xCD	; 205
     f76:	9e 9f       	mul	r25, r30
     f78:	e1 2d       	mov	r30, r1
     f7a:	11 24       	eor	r1, r1
     f7c:	e6 95       	lsr	r30
     f7e:	e6 95       	lsr	r30
     f80:	e6 95       	lsr	r30
     f82:	ee 0f       	add	r30, r30
     f84:	8e 2f       	mov	r24, r30
     f86:	88 0f       	add	r24, r24
     f88:	88 0f       	add	r24, r24
     f8a:	e8 0f       	add	r30, r24
     f8c:	9e 1b       	sub	r25, r30
     f8e:	e9 2f       	mov	r30, r25
     f90:	16 c0       	rjmp	.+44     	; 0xfbe <play_game+0x206>
			} else {
			value = (step_counter / 10) % 10;
     f92:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <step_counter>
     f96:	ed ec       	ldi	r30, 0xCD	; 205
     f98:	8e 9f       	mul	r24, r30
     f9a:	81 2d       	mov	r24, r1
     f9c:	11 24       	eor	r1, r1
     f9e:	86 95       	lsr	r24
     fa0:	86 95       	lsr	r24
     fa2:	86 95       	lsr	r24
     fa4:	8e 9f       	mul	r24, r30
     fa6:	e1 2d       	mov	r30, r1
     fa8:	11 24       	eor	r1, r1
     faa:	e6 95       	lsr	r30
     fac:	e6 95       	lsr	r30
     fae:	e6 95       	lsr	r30
     fb0:	ee 0f       	add	r30, r30
     fb2:	9e 2f       	mov	r25, r30
     fb4:	99 0f       	add	r25, r25
     fb6:	99 0f       	add	r25, r25
     fb8:	e9 0f       	add	r30, r25
     fba:	8e 1b       	sub	r24, r30
     fbc:	e8 2f       	mov	r30, r24
		}
		PORTA = seven_seg[value];
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	ec 5f       	subi	r30, 0xFC	; 252
     fc2:	fe 4f       	sbci	r31, 0xFE	; 254
     fc4:	80 81       	ld	r24, Z
     fc6:	82 b9       	out	0x02, r24	; 2
		PORTC = digit;
     fc8:	f8 b8       	out	0x08, r15	; 8
		/* Change the digit flag for next time. if 0 becomes 1, if 1 becomes 0. */
		digit = 1 - digit;
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	8f 19       	sub	r24, r15
     fce:	f8 2e       	mov	r15, r24
		
		//Increment timer if necessary
		if (get_current_time() % 1000 == 0) {
     fd0:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <get_current_time>
     fd4:	28 ee       	ldi	r18, 0xE8	; 232
     fd6:	33 e0       	ldi	r19, 0x03	; 3
     fd8:	40 e0       	ldi	r20, 0x00	; 0
     fda:	50 e0       	ldi	r21, 0x00	; 0
     fdc:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__udivmodsi4>
     fe0:	67 2b       	or	r22, r23
     fe2:	68 2b       	or	r22, r24
     fe4:	69 2b       	or	r22, r25
     fe6:	69 f5       	brne	.+90     	; 0x1042 <play_game+0x28a>
			move_terminal_cursor(22, 1);
     fe8:	61 e0       	ldi	r22, 0x01	; 1
     fea:	70 e0       	ldi	r23, 0x00	; 0
     fec:	86 e1       	ldi	r24, 0x16	; 22
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	0e 94 9e 0b 	call	0x173c	; 0x173c <move_terminal_cursor>
			sprintf(play_time_str, "%d", play_time);
     ff4:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <play_time>
     ff8:	1f 92       	push	r1
     ffa:	8f 93       	push	r24
     ffc:	82 e8       	ldi	r24, 0x82	; 130
     ffe:	92 e0       	ldi	r25, 0x02	; 2
    1000:	9f 93       	push	r25
    1002:	8f 93       	push	r24
    1004:	8e 01       	movw	r16, r28
    1006:	0f 5f       	subi	r16, 0xFF	; 255
    1008:	1f 4f       	sbci	r17, 0xFF	; 255
    100a:	1f 93       	push	r17
    100c:	0f 93       	push	r16
    100e:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <sprintf>
			printf("%s", play_time_str);
    1012:	1f 93       	push	r17
    1014:	0f 93       	push	r16
    1016:	85 e8       	ldi	r24, 0x85	; 133
    1018:	92 e0       	ldi	r25, 0x02	; 2
    101a:	9f 93       	push	r25
    101c:	8f 93       	push	r24
    101e:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <printf>
			play_time++;
    1022:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <play_time>
    1026:	8f 5f       	subi	r24, 0xFF	; 255
    1028:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <play_time>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    102c:	8f e1       	ldi	r24, 0x1F	; 31
    102e:	9e e4       	ldi	r25, 0x4E	; 78
    1030:	01 97       	sbiw	r24, 0x01	; 1
    1032:	f1 f7       	brne	.-4      	; 0x1030 <play_game+0x278>
    1034:	00 c0       	rjmp	.+0      	; 0x1036 <play_game+0x27e>
    1036:	00 00       	nop
    1038:	0f b6       	in	r0, 0x3f	; 63
    103a:	f8 94       	cli
    103c:	de bf       	out	0x3e, r29	; 62
    103e:	0f be       	out	0x3f, r0	; 63
    1040:	cd bf       	out	0x3d, r28	; 61
	
	play_time = 0;
	char play_time_str[20];

	// We play the game until it's over.
	while (!is_game_over())
    1042:	0e 94 70 03 	call	0x6e0	; 0x6e0 <is_game_over>
    1046:	88 23       	and	r24, r24
    1048:	09 f4       	brne	.+2      	; 0x104c <play_game+0x294>
    104a:	ce ce       	rjmp	.-612    	; 0xde8 <play_game+0x30>
			printf("%s", play_time_str);
			play_time++;
			_delay_ms(10);
		}
	}
	handle_game_over();
    104c:	0e 94 1b 06 	call	0xc36	; 0xc36 <handle_game_over>

00001050 <main>:

/////////////////////////////// main //////////////////////////////////
int main(void)
{
	//Set a seed for the random number generator
	srand(get_current_time());
    1050:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <get_current_time>
    1054:	cb 01       	movw	r24, r22
    1056:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <srand>
	
	// Setup hardware and callbacks. This will turn on interrupts.
	initialise_hardware();
    105a:	0e 94 ad 05 	call	0xb5a	; 0xb5a <initialise_hardware>

	// Show the start screen. Returns when the player starts the game.
	start_screen();
    105e:	0e 94 c0 05 	call	0xb80	; 0xb80 <start_screen>
	
	//Set the level to 1
	current_level = 1;
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <current_level>

	// Loop forever and continuously play the game.
	while (1)
	{
		new_game(current_level);
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <new_game>
		play_game();
    1070:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <play_game>

00001074 <uart_put_char>:
// Variable to keep track of whether incoming characters are to be echoed
// back or not.
static bool do_echo;

static int uart_put_char(char c, FILE *stream)
{
    1074:	cf 93       	push	r28
    1076:	c8 2f       	mov	r28, r24
	// Add the character to the buffer for transmission (if there is space
	// to do so). If not we wait until the buffer has space.

	// If the character is linefeed, we output carriage return.
	if (c == '\n')
    1078:	8a 30       	cpi	r24, 0x0A	; 10
    107a:	19 f4       	brne	.+6      	; 0x1082 <uart_put_char+0xe>
	{
		uart_put_char('\r', stream);
    107c:	8d e0       	ldi	r24, 0x0D	; 13
    107e:	0e 94 3a 08 	call	0x1074	; 0x1074 <uart_put_char>
	// we don't output the character since the buffer will never be
	// emptied if interrupts are disabled. If the buffer is full and
	// interrupts are enabled, then we loop until the buffer has enough
	// space. The bytes_in_buffer variable will get modified by the ISR
	// which extracts bytes from the buffer.
	bool interrupts_enabled = bit_is_set(SREG, SREG_I);
    1082:	9f b7       	in	r25, 0x3f	; 63
    1084:	90 78       	andi	r25, 0x80	; 128
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
    1086:	02 c0       	rjmp	.+4      	; 0x108c <uart_put_char+0x18>
	{
		if (!interrupts_enabled)
    1088:	99 23       	and	r25, r25
    108a:	29 f1       	breq	.+74     	; 0x10d6 <uart_put_char+0x62>
	// emptied if interrupts are disabled. If the buffer is full and
	// interrupts are enabled, then we loop until the buffer has enough
	// space. The bytes_in_buffer variable will get modified by the ISR
	// which extracts bytes from the buffer.
	bool interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
    108c:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <bytes_in_out_buffer>
    1090:	8f 3f       	cpi	r24, 0xFF	; 255
    1092:	d1 f3       	breq	.-12     	; 0x1088 <uart_put_char+0x14>
	// If this is beyond the end of the buffer, we wrap around back to the
	// beginning of the buffer. NOTE: We disable interrupts before
	// modifying the buffer. This prevents the ISR from modifying the
	// buffer at the same time. We reenable them if they were enabled when
	// we entered the function.
	cli();
    1094:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    1096:	e0 91 33 03 	lds	r30, 0x0333	; 0x800333 <out_insert_pos>
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	8e 0f       	add	r24, r30
    109e:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <out_insert_pos>
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	eb 5c       	subi	r30, 0xCB	; 203
    10a6:	fc 4f       	sbci	r31, 0xFC	; 252
    10a8:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    10aa:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <bytes_in_out_buffer>
    10ae:	8f 5f       	subi	r24, 0xFF	; 255
    10b0:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <bytes_in_out_buffer>
	if (out_insert_pos == OUTPUT_BUFFER_SIZE)
    10b4:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <out_insert_pos>
    10b8:	8f 3f       	cpi	r24, 0xFF	; 255
    10ba:	11 f4       	brne	.+4      	; 0x10c0 <uart_put_char+0x4c>
	{
		// Wrap around buffer pointer if necessary.
		out_insert_pos = 0;
    10bc:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <out_insert_pos>
	}

	// Reenable interrupts (UDR Empty interrupt may have been disabled) -
	// we ensure it is now enabled so that it will fire and deal with the
	// next character in the buffer.
	UCSR0B |= (1 << UDRIE0);
    10c0:	e1 ec       	ldi	r30, 0xC1	; 193
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	80 62       	ori	r24, 0x20	; 32
    10c8:	80 83       	st	Z, r24
	if (interrupts_enabled)
    10ca:	99 23       	and	r25, r25
    10cc:	39 f0       	breq	.+14     	; 0x10dc <uart_put_char+0x68>
	{
		sei();
    10ce:	78 94       	sei
	}
	return 0;
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	05 c0       	rjmp	.+10     	; 0x10e0 <uart_put_char+0x6c>
	bool interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
	{
		if (!interrupts_enabled)
		{
			return 1;
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <uart_put_char+0x6c>
	UCSR0B |= (1 << UDRIE0);
	if (interrupts_enabled)
	{
		sei();
	}
	return 0;
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	90 e0       	ldi	r25, 0x00	; 0
}
    10e0:	cf 91       	pop	r28
    10e2:	08 95       	ret

000010e4 <uart_get_char>:

static int uart_get_char(FILE *stream)
{
	// Wait until we've received a character.
	while (bytes_in_input_buffer == 0)
    10e4:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <bytes_in_input_buffer>
    10e8:	88 23       	and	r24, r24
    10ea:	e1 f3       	breq	.-8      	; 0x10e4 <uart_get_char>

	// Turn interrupts off and remove a character from the input buffer.
	// We reenable interrupts if they were on. The pending character is
	// the one which is byte_in_input_buffer characters before the insert
	// position (taking into account that we may need to wrap around).
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    10ec:	2f b7       	in	r18, 0x3f	; 63
    10ee:	20 78       	andi	r18, 0x80	; 128
	cli();
    10f0:	f8 94       	cli
	char c;
	if (input_insert_pos - bytes_in_input_buffer < 0)
    10f2:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <input_insert_pos>
    10f6:	30 91 46 04 	lds	r19, 0x0446	; 0x800446 <bytes_in_input_buffer>
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	83 1b       	sub	r24, r19
    10fe:	91 09       	sbc	r25, r1
    1100:	5a f4       	brpl	.+22     	; 0x1118 <uart_get_char+0x34>
	{
		// Need to wrap around.
		c = input_buffer[input_insert_pos - bytes_in_input_buffer +
    1102:	e0 91 34 04 	lds	r30, 0x0434	; 0x800434 <input_insert_pos>
    1106:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <bytes_in_input_buffer>
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	e8 1b       	sub	r30, r24
    110e:	f1 09       	sbc	r31, r1
    1110:	eb 5b       	subi	r30, 0xBB	; 187
    1112:	fb 4f       	sbci	r31, 0xFB	; 251
    1114:	80 81       	ld	r24, Z
    1116:	0a c0       	rjmp	.+20     	; 0x112c <uart_get_char+0x48>
			INPUT_BUFFER_SIZE];
	}
	else
	{
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    1118:	e0 91 34 04 	lds	r30, 0x0434	; 0x800434 <input_insert_pos>
    111c:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <bytes_in_input_buffer>
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	e8 1b       	sub	r30, r24
    1124:	f1 09       	sbc	r31, r1
    1126:	eb 5c       	subi	r30, 0xCB	; 203
    1128:	fb 4f       	sbci	r31, 0xFB	; 251
    112a:	80 81       	ld	r24, Z
	}

	// Decrement our count of bytes in the input buffer.
	bytes_in_input_buffer--;
    112c:	90 91 46 04 	lds	r25, 0x0446	; 0x800446 <bytes_in_input_buffer>
    1130:	91 50       	subi	r25, 0x01	; 1
    1132:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <bytes_in_input_buffer>
	if (interrupts_enabled)
    1136:	22 23       	and	r18, r18
    1138:	09 f0       	breq	.+2      	; 0x113c <uart_get_char+0x58>
	{
		sei();
    113a:	78 94       	sei
	// as WASD. If you're a student reading this, pretend you didn't see
	// it XD. Honestly, you cannot rely on the arrow keys to work like
	// WASD, this is what we call undocumented behaviour.
	static char first = 0;
	static char second = 0;
	if (first == 0x1B && second == '[')
    113c:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <first.1835>
    1140:	9b 31       	cpi	r25, 0x1B	; 27
    1142:	b1 f4       	brne	.+44     	; 0x1170 <uart_get_char+0x8c>
    1144:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <second.1836>
    1148:	9b 35       	cpi	r25, 0x5B	; 91
    114a:	91 f4       	brne	.+36     	; 0x1170 <uart_get_char+0x8c>
	{
		switch (c)
    114c:	82 34       	cpi	r24, 0x42	; 66
    114e:	49 f0       	breq	.+18     	; 0x1162 <uart_get_char+0x7e>
    1150:	18 f4       	brcc	.+6      	; 0x1158 <uart_get_char+0x74>
    1152:	81 34       	cpi	r24, 0x41	; 65
    1154:	61 f0       	breq	.+24     	; 0x116e <uart_get_char+0x8a>
    1156:	0c c0       	rjmp	.+24     	; 0x1170 <uart_get_char+0x8c>
    1158:	83 34       	cpi	r24, 0x43	; 67
    115a:	29 f0       	breq	.+10     	; 0x1166 <uart_get_char+0x82>
    115c:	84 34       	cpi	r24, 0x44	; 68
    115e:	29 f0       	breq	.+10     	; 0x116a <uart_get_char+0x86>
    1160:	07 c0       	rjmp	.+14     	; 0x1170 <uart_get_char+0x8c>
		{
			case 'A':
				c = 'w';
				break;
			case 'B':
				c = 's';
    1162:	83 e7       	ldi	r24, 0x73	; 115
				break;
    1164:	05 c0       	rjmp	.+10     	; 0x1170 <uart_get_char+0x8c>
			case 'C':
				c = 'd';
    1166:	84 e6       	ldi	r24, 0x64	; 100
				break;
    1168:	03 c0       	rjmp	.+6      	; 0x1170 <uart_get_char+0x8c>
			case 'D':
				c = 'a';
    116a:	81 e6       	ldi	r24, 0x61	; 97
				break;
    116c:	01 c0       	rjmp	.+2      	; 0x1170 <uart_get_char+0x8c>
	if (first == 0x1B && second == '[')
	{
		switch (c)
		{
			case 'A':
				c = 'w';
    116e:	87 e7       	ldi	r24, 0x77	; 119
				break;
			default:
				break;
		}
	}
	first = second;
    1170:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <second.1836>
    1174:	90 93 20 03 	sts	0x0320, r25	; 0x800320 <first.1835>
	second = c;
    1178:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <second.1836>

	return c;
}
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	08 95       	ret

00001180 <__vector_21>:
	_FDEV_SETUP_RW);

// Interrupt handler for UART Data Register Empty (i.e., another character
// can be taken from our buffer and written out).
ISR(USART0_UDRE_vect)
{
    1180:	1f 92       	push	r1
    1182:	0f 92       	push	r0
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	0f 92       	push	r0
    1188:	11 24       	eor	r1, r1
    118a:	2f 93       	push	r18
    118c:	8f 93       	push	r24
    118e:	9f 93       	push	r25
    1190:	ef 93       	push	r30
    1192:	ff 93       	push	r31
	// Check if we have data in our buffer.
	if (bytes_in_out_buffer > 0)
    1194:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <bytes_in_out_buffer>
    1198:	88 23       	and	r24, r24
    119a:	29 f1       	breq	.+74     	; 0x11e6 <__vector_21+0x66>
		// UART. The pending byte (character) is the one which is
		// bytes_in_buffer characters before the insert_pos (taking
		// into account that we may need to wrap around to the end of
		// the buffer).
		char c;
		if (out_insert_pos - bytes_in_out_buffer < 0)
    119c:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <out_insert_pos>
    11a0:	20 91 34 03 	lds	r18, 0x0334	; 0x800334 <bytes_in_out_buffer>
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	82 1b       	sub	r24, r18
    11a8:	91 09       	sbc	r25, r1
    11aa:	5a f4       	brpl	.+22     	; 0x11c2 <__vector_21+0x42>
		{
			// Need to wrap around.
			c = out_buffer[out_insert_pos - bytes_in_out_buffer +
    11ac:	e0 91 33 03 	lds	r30, 0x0333	; 0x800333 <out_insert_pos>
    11b0:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <bytes_in_out_buffer>
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	e8 1b       	sub	r30, r24
    11b8:	f1 09       	sbc	r31, r1
    11ba:	ec 5c       	subi	r30, 0xCC	; 204
    11bc:	fb 4f       	sbci	r31, 0xFB	; 251
    11be:	90 81       	ld	r25, Z
    11c0:	0a c0       	rjmp	.+20     	; 0x11d6 <__vector_21+0x56>
				OUTPUT_BUFFER_SIZE];
		}
		else
		{
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    11c2:	e0 91 33 03 	lds	r30, 0x0333	; 0x800333 <out_insert_pos>
    11c6:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <bytes_in_out_buffer>
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	e8 1b       	sub	r30, r24
    11ce:	f1 09       	sbc	r31, r1
    11d0:	eb 5c       	subi	r30, 0xCB	; 203
    11d2:	fc 4f       	sbci	r31, 0xFC	; 252
    11d4:	90 81       	ld	r25, Z
		}

		// Decrement our count of the number of bytes in the buffer.
		bytes_in_out_buffer--;
    11d6:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <bytes_in_out_buffer>
    11da:	81 50       	subi	r24, 0x01	; 1
    11dc:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <bytes_in_out_buffer>

		// Output the character via the UART.
		UDR0 = c;
    11e0:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    11e4:	05 c0       	rjmp	.+10     	; 0x11f0 <__vector_21+0x70>
	{
		// No data in the buffer. We disable the UART Data Register
		// Empty interrupt because otherwise it will trigger again
		// immediately when this ISR exits. The interrupt is reenabled
		// when a character is placed in the buffer.
		UCSR0B &= ~(1 << UDRIE0);
    11e6:	e1 ec       	ldi	r30, 0xC1	; 193
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	8f 7d       	andi	r24, 0xDF	; 223
    11ee:	80 83       	st	Z, r24
	}
}
    11f0:	ff 91       	pop	r31
    11f2:	ef 91       	pop	r30
    11f4:	9f 91       	pop	r25
    11f6:	8f 91       	pop	r24
    11f8:	2f 91       	pop	r18
    11fa:	0f 90       	pop	r0
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	0f 90       	pop	r0
    1200:	1f 90       	pop	r1
    1202:	18 95       	reti

00001204 <__vector_20>:

// Interrupt handler for UART Receive Complete (i.e., can read a character).
// The character is read and placed in the input buffer.
ISR(USART0_RX_vect)
{
    1204:	1f 92       	push	r1
    1206:	0f 92       	push	r0
    1208:	0f b6       	in	r0, 0x3f	; 63
    120a:	0f 92       	push	r0
    120c:	11 24       	eor	r1, r1
    120e:	2f 93       	push	r18
    1210:	3f 93       	push	r19
    1212:	4f 93       	push	r20
    1214:	5f 93       	push	r21
    1216:	6f 93       	push	r22
    1218:	7f 93       	push	r23
    121a:	8f 93       	push	r24
    121c:	9f 93       	push	r25
    121e:	af 93       	push	r26
    1220:	bf 93       	push	r27
    1222:	cf 93       	push	r28
    1224:	ef 93       	push	r30
    1226:	ff 93       	push	r31
	// Read the character - we ignore the possibility of overrun.
	char c = UDR0;
    1228:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

	if (do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE)
    122c:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <do_echo>
    1230:	88 23       	and	r24, r24
    1232:	49 f0       	breq	.+18     	; 0x1246 <__vector_20+0x42>
    1234:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <bytes_in_out_buffer>
    1238:	8f 3f       	cpi	r24, 0xFF	; 255
    123a:	29 f0       	breq	.+10     	; 0x1246 <__vector_20+0x42>
	{
		// If echoing is enabled and there is output buffer space,
		// echo the received character back to the UART. If there
		// is no output buffer space, characters will be lost.
		uart_put_char(c, 0);
    123c:	60 e0       	ldi	r22, 0x00	; 0
    123e:	70 e0       	ldi	r23, 0x00	; 0
    1240:	8c 2f       	mov	r24, r28
    1242:	0e 94 3a 08 	call	0x1074	; 0x1074 <uart_put_char>
	}

	// Check if we have space in our buffer. If not, set the overrun flag
	// and throw away the character. We never clear the overrun flag -
	// it's up to the programmer to check/clear this flag if desired.
	if (bytes_in_input_buffer >= INPUT_BUFFER_SIZE)
    1246:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <bytes_in_input_buffer>
    124a:	80 31       	cpi	r24, 0x10	; 16
    124c:	20 f0       	brcs	.+8      	; 0x1256 <__vector_20+0x52>
	{
		input_overrun = 1;
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <input_overrun>
    1254:	18 c0       	rjmp	.+48     	; 0x1286 <__vector_20+0x82>
	}
	else
	{
		// If the character is carriage return, turn it into linefeed.
		if (c == '\r')
    1256:	cd 30       	cpi	r28, 0x0D	; 13
    1258:	09 f4       	brne	.+2      	; 0x125c <__vector_20+0x58>
		{
			c = '\n';
    125a:	ca e0       	ldi	r28, 0x0A	; 10
		}

		// There is room in the input buffer.
		input_buffer[input_insert_pos++] = c;
    125c:	e0 91 34 04 	lds	r30, 0x0434	; 0x800434 <input_insert_pos>
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	8e 0f       	add	r24, r30
    1264:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <input_insert_pos>
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	eb 5c       	subi	r30, 0xCB	; 203
    126c:	fb 4f       	sbci	r31, 0xFB	; 251
    126e:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    1270:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <bytes_in_input_buffer>
    1274:	8f 5f       	subi	r24, 0xFF	; 255
    1276:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <bytes_in_input_buffer>
		if (input_insert_pos == INPUT_BUFFER_SIZE)
    127a:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <input_insert_pos>
    127e:	80 31       	cpi	r24, 0x10	; 16
    1280:	11 f4       	brne	.+4      	; 0x1286 <__vector_20+0x82>
		{
			// Wrap around buffer pointer if necessary.
			input_insert_pos = 0;
    1282:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <input_insert_pos>
		}
	}
}
    1286:	ff 91       	pop	r31
    1288:	ef 91       	pop	r30
    128a:	cf 91       	pop	r28
    128c:	bf 91       	pop	r27
    128e:	af 91       	pop	r26
    1290:	9f 91       	pop	r25
    1292:	8f 91       	pop	r24
    1294:	7f 91       	pop	r23
    1296:	6f 91       	pop	r22
    1298:	5f 91       	pop	r21
    129a:	4f 91       	pop	r20
    129c:	3f 91       	pop	r19
    129e:	2f 91       	pop	r18
    12a0:	0f 90       	pop	r0
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	0f 90       	pop	r0
    12a6:	1f 90       	pop	r1
    12a8:	18 95       	reti

000012aa <init_serial_stdio>:

void init_serial_stdio(long baudrate, bool echo)
{
	// Initialise our buffers.
	out_insert_pos = 0;
    12aa:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <out_insert_pos>
	bytes_in_out_buffer = 0;
    12ae:	10 92 34 03 	sts	0x0334, r1	; 0x800334 <bytes_in_out_buffer>
	input_insert_pos = 0;
    12b2:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <input_insert_pos>
	bytes_in_input_buffer = 0;
    12b6:	10 92 46 04 	sts	0x0446, r1	; 0x800446 <bytes_in_input_buffer>
	input_overrun = 0;
    12ba:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <input_overrun>

	// Record whether we're going to echo characters or not.
	do_echo = echo;
    12be:	40 93 21 03 	sts	0x0321, r20	; 0x800321 <do_echo>

	// Configure the baud rate. This differs from the datasheet formula so
	// that we get rounding to the nearest integer while using integer
	// division (which truncates).
	UBRR0 = (uint16_t)((((SYSCLK / (8 * baudrate)) + 1) / 2) - 1);
    12c2:	dc 01       	movw	r26, r24
    12c4:	cb 01       	movw	r24, r22
    12c6:	88 0f       	add	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	aa 1f       	adc	r26, r26
    12cc:	bb 1f       	adc	r27, r27
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	aa 1f       	adc	r26, r26
    12d4:	bb 1f       	adc	r27, r27
    12d6:	9c 01       	movw	r18, r24
    12d8:	ad 01       	movw	r20, r26
    12da:	22 0f       	add	r18, r18
    12dc:	33 1f       	adc	r19, r19
    12de:	44 1f       	adc	r20, r20
    12e0:	55 1f       	adc	r21, r21
    12e2:	60 e0       	ldi	r22, 0x00	; 0
    12e4:	72 e1       	ldi	r23, 0x12	; 18
    12e6:	8a e7       	ldi	r24, 0x7A	; 122
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__divmodsi4>
    12ee:	ba 01       	movw	r22, r20
    12f0:	a9 01       	movw	r20, r18
    12f2:	4f 5f       	subi	r20, 0xFF	; 255
    12f4:	5f 4f       	sbci	r21, 0xFF	; 255
    12f6:	6f 4f       	sbci	r22, 0xFF	; 255
    12f8:	7f 4f       	sbci	r23, 0xFF	; 255
    12fa:	db 01       	movw	r26, r22
    12fc:	ca 01       	movw	r24, r20
    12fe:	1a f4       	brpl	.+6      	; 0x1306 <init_serial_stdio+0x5c>
    1300:	01 96       	adiw	r24, 0x01	; 1
    1302:	a1 1d       	adc	r26, r1
    1304:	b1 1d       	adc	r27, r1
    1306:	b5 95       	asr	r27
    1308:	a7 95       	ror	r26
    130a:	97 95       	ror	r25
    130c:	87 95       	ror	r24
    130e:	01 97       	sbiw	r24, 0x01	; 1
    1310:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    1314:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Enable transmission and receiving via UART. We don't enable the UDR
	// empty interrupt here (we wait until we've got a character to
	// transmit). NOTE: Interrupts must be enabled globally for this
	// module to work, but we do not do this here.
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
    1318:	e1 ec       	ldi	r30, 0xC1	; 193
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	88 e1       	ldi	r24, 0x18	; 24
    131e:	80 83       	st	Z, r24

	// Enable receive complete interrupt.
	UCSR0B |= (1 << RXCIE0);
    1320:	80 81       	ld	r24, Z
    1322:	80 68       	ori	r24, 0x80	; 128
    1324:	80 83       	st	Z, r24

	// Set up our stream so the get and put functions are used to
	// read/write characters via the serial port when we use stdio
	// functions.
	stdout = &serialio;
    1326:	e7 e4       	ldi	r30, 0x47	; 71
    1328:	f4 e0       	ldi	r31, 0x04	; 4
    132a:	8e e0       	ldi	r24, 0x0E	; 14
    132c:	91 e0       	ldi	r25, 0x01	; 1
    132e:	93 83       	std	Z+3, r25	; 0x03
    1330:	82 83       	std	Z+2, r24	; 0x02
	stdin = &serialio;
    1332:	91 83       	std	Z+1, r25	; 0x01
    1334:	80 83       	st	Z, r24
    1336:	08 95       	ret

00001338 <serial_input_available>:
}

bool serial_input_available(void)
{
	return bytes_in_input_buffer != 0;
    1338:	90 91 46 04 	lds	r25, 0x0446	; 0x800446 <bytes_in_input_buffer>
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	91 11       	cpse	r25, r1
    1340:	01 c0       	rjmp	.+2      	; 0x1344 <serial_input_available+0xc>
    1342:	80 e0       	ldi	r24, 0x00	; 0
}
    1344:	08 95       	ret

00001346 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void)
{
	// Just adjust our buffer data so it looks empty.
	input_insert_pos = 0;
    1346:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <input_insert_pos>
	bytes_in_input_buffer = 0;
    134a:	10 92 46 04 	sts	0x0446, r1	; 0x800446 <bytes_in_input_buffer>
    134e:	08 95       	ret

00001350 <spi_setup_master>:

void spi_setup_master(uint8_t clockdivider)
{
	// Make the SS, MOSI and SCK pins outputs. These are pins 4, 5 and 7
	// of port B on the ATmega324A.
	DDRB |= (1 << DDB7) | (1 << DDB5) | (1 << DDB4);
    1350:	94 b1       	in	r25, 0x04	; 4
    1352:	90 6b       	ori	r25, 0xB0	; 176
    1354:	94 b9       	out	0x04, r25	; 4

	// Set the slave select (SS) line high.
	PORTB |= (1 << PORTB4);
    1356:	95 b1       	in	r25, 0x05	; 5
    1358:	90 61       	ori	r25, 0x10	; 16
    135a:	95 b9       	out	0x05, r25	; 5
	
	// Set up the SPI control registers SPCR and SPSR. Enable SPI as use
	// Master Mode by setting the SPE and MSTR bits of SPCR0.
	SPCR0 = (1 << SPE0) | (1 << MSTR0);
    135c:	90 e5       	ldi	r25, 0x50	; 80
    135e:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR based on the
	// given clock divider. Invalid values default to the slowest speed.
	// We consider each bit in turn.
	switch (clockdivider)
    1360:	88 30       	cpi	r24, 0x08	; 8
    1362:	21 f0       	breq	.+8      	; 0x136c <spi_setup_master+0x1c>
    1364:	80 32       	cpi	r24, 0x20	; 32
    1366:	11 f0       	breq	.+4      	; 0x136c <spi_setup_master+0x1c>
    1368:	82 30       	cpi	r24, 0x02	; 2
    136a:	19 f4       	brne	.+6      	; 0x1372 <spi_setup_master+0x22>
	{
		case 2: // Fallthrough.
		case 8: // Fallthrough.
		case 32:
			SPSR0 = (1 << SPI2X0);
    136c:	91 e0       	ldi	r25, 0x01	; 1
    136e:	9d bd       	out	0x2d, r25	; 45
			break;
    1370:	01 c0       	rjmp	.+2      	; 0x1374 <spi_setup_master+0x24>
		default:
			SPSR0 = 0;
    1372:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch (clockdivider)
    1374:	80 32       	cpi	r24, 0x20	; 32
    1376:	69 f0       	breq	.+26     	; 0x1392 <spi_setup_master+0x42>
    1378:	28 f4       	brcc	.+10     	; 0x1384 <spi_setup_master+0x34>
    137a:	88 30       	cpi	r24, 0x08	; 8
    137c:	71 f0       	breq	.+28     	; 0x139a <spi_setup_master+0x4a>
    137e:	80 31       	cpi	r24, 0x10	; 16
    1380:	61 f0       	breq	.+24     	; 0x139a <spi_setup_master+0x4a>
    1382:	0e c0       	rjmp	.+28     	; 0x13a0 <spi_setup_master+0x50>
    1384:	80 34       	cpi	r24, 0x40	; 64
    1386:	29 f0       	breq	.+10     	; 0x1392 <spi_setup_master+0x42>
    1388:	80 38       	cpi	r24, 0x80	; 128
    138a:	51 f4       	brne	.+20     	; 0x13a0 <spi_setup_master+0x50>
	{
		case 128:
			SPCR0 |= (1 << SPR00);
    138c:	8c b5       	in	r24, 0x2c	; 44
    138e:	81 60       	ori	r24, 0x01	; 1
    1390:	8c bd       	out	0x2c, r24	; 44
			// Fallthrough.
		case 32: // Fallthrough.
		case 64:
			SPCR0 |= (1 << SPR10);
    1392:	8c b5       	in	r24, 0x2c	; 44
    1394:	82 60       	ori	r24, 0x02	; 2
    1396:	8c bd       	out	0x2c, r24	; 44
			break;
    1398:	03 c0       	rjmp	.+6      	; 0x13a0 <spi_setup_master+0x50>
		case 8: // Fallthrough.
		case 16:
			SPCR0 |= (1 << SPR00);
    139a:	8c b5       	in	r24, 0x2c	; 44
    139c:	81 60       	ori	r24, 0x01	; 1
    139e:	8c bd       	out	0x2c, r24	; 44
			break;
	}

	// Take SS (slave select) line low.
	PORTB &= ~(1 << PORTB4);
    13a0:	85 b1       	in	r24, 0x05	; 5
    13a2:	8f 7e       	andi	r24, 0xEF	; 239
    13a4:	85 b9       	out	0x05, r24	; 5
    13a6:	08 95       	ret

000013a8 <spi_send_byte>:
	// transfer. We then wait until the most significant bit of SPSR0
	// (SPIF0) is set - this indicates that the transfer is complete. The
	// final read of SPSR0 followed by a read of SPDR0 will cause the SPIF
	// bit to be reset to 0. See page 173 of the ATmega324A datasheet for
	// more info.
	SPDR0 = byte;
    13a8:	8e bd       	out	0x2e, r24	; 46
	while ((SPSR0 & (1 << SPIF0)) == 0)
    13aa:	0d b4       	in	r0, 0x2d	; 45
    13ac:	07 fe       	sbrs	r0, 7
    13ae:	fd cf       	rjmp	.-6      	; 0x13aa <spi_send_byte+0x2>
	{
		; // Wait.
	}
	return SPDR0;
    13b0:	8e b5       	in	r24, 0x2e	; 46
}
    13b2:	08 95       	ret

000013b4 <display_initial_image>:
// Macro for getting next column number.
#define GET_NEXT_COLUMN(x, d) (((x) + 1) % countof((d)))

// Displays the initial image of the start screen.
static void display_initial_image(void)
{
    13b4:	1f 93       	push	r17
    13b6:	cf 93       	push	r28
    13b8:	df 93       	push	r29
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
    13be:	28 97       	sbiw	r28, 0x08	; 8
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	f8 94       	cli
    13c4:	de bf       	out	0x3e, r29	; 62
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	cd bf       	out	0x3d, r28	; 61
	for (uint8_t col = 0; col < min(MATRIX_NUM_COLUMNS,
    13ca:	10 e0       	ldi	r17, 0x00	; 0
    13cc:	17 c0       	rjmp	.+46     	; 0x13fc <display_initial_image+0x48>
		countof(anim_data)); col++)
	{
		MatrixColumn column_data;
		memcpy_P(column_data, &anim_data[col], sizeof(column_data));
    13ce:	61 2f       	mov	r22, r17
    13d0:	70 e0       	ldi	r23, 0x00	; 0
    13d2:	66 0f       	add	r22, r22
    13d4:	77 1f       	adc	r23, r23
    13d6:	66 0f       	add	r22, r22
    13d8:	77 1f       	adc	r23, r23
    13da:	66 0f       	add	r22, r22
    13dc:	77 1f       	adc	r23, r23
    13de:	6a 56       	subi	r22, 0x6A	; 106
    13e0:	7e 4f       	sbci	r23, 0xFE	; 254
    13e2:	48 e0       	ldi	r20, 0x08	; 8
    13e4:	50 e0       	ldi	r21, 0x00	; 0
    13e6:	ce 01       	movw	r24, r28
    13e8:	01 96       	adiw	r24, 0x01	; 1
    13ea:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <memcpy_P>
		ledmatrix_update_column(col, column_data);
    13ee:	be 01       	movw	r22, r28
    13f0:	6f 5f       	subi	r22, 0xFF	; 255
    13f2:	7f 4f       	sbci	r23, 0xFF	; 255
    13f4:	81 2f       	mov	r24, r17
    13f6:	0e 94 85 05 	call	0xb0a	; 0xb0a <ledmatrix_update_column>

// Displays the initial image of the start screen.
static void display_initial_image(void)
{
	for (uint8_t col = 0; col < min(MATRIX_NUM_COLUMNS,
		countof(anim_data)); col++)
    13fa:	1f 5f       	subi	r17, 0xFF	; 255
#define GET_NEXT_COLUMN(x, d) (((x) + 1) % countof((d)))

// Displays the initial image of the start screen.
static void display_initial_image(void)
{
	for (uint8_t col = 0; col < min(MATRIX_NUM_COLUMNS,
    13fc:	10 31       	cpi	r17, 0x10	; 16
    13fe:	38 f3       	brcs	.-50     	; 0x13ce <display_initial_image+0x1a>
	{
		MatrixColumn column_data;
		memcpy_P(column_data, &anim_data[col], sizeof(column_data));
		ledmatrix_update_column(col, column_data);
	}
}
    1400:	28 96       	adiw	r28, 0x08	; 8
    1402:	0f b6       	in	r0, 0x3f	; 63
    1404:	f8 94       	cli
    1406:	de bf       	out	0x3e, r29	; 62
    1408:	0f be       	out	0x3f, r0	; 63
    140a:	cd bf       	out	0x3d, r28	; 61
    140c:	df 91       	pop	r29
    140e:	cf 91       	pop	r28
    1410:	1f 91       	pop	r17
    1412:	08 95       	ret

00001414 <display_next_column>:

// Displays the next column of the start screen.
static void display_next_column(void)
{
    1414:	cf 93       	push	r28
    1416:	df 93       	push	r29
    1418:	cd b7       	in	r28, 0x3d	; 61
    141a:	de b7       	in	r29, 0x3e	; 62
    141c:	28 97       	sbiw	r28, 0x08	; 8
    141e:	0f b6       	in	r0, 0x3f	; 63
    1420:	f8 94       	cli
    1422:	de bf       	out	0x3e, r29	; 62
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	cd bf       	out	0x3d, r28	; 61
	ledmatrix_shift_display_left();
    1428:	0e 94 a2 05 	call	0xb44	; 0xb44 <ledmatrix_shift_display_left>
	MatrixColumn column_data;
	memcpy_P(column_data, &anim_data[next_column], sizeof(column_data));
    142c:	60 91 22 03 	lds	r22, 0x0322	; 0x800322 <next_column>
    1430:	70 e0       	ldi	r23, 0x00	; 0
    1432:	66 0f       	add	r22, r22
    1434:	77 1f       	adc	r23, r23
    1436:	66 0f       	add	r22, r22
    1438:	77 1f       	adc	r23, r23
    143a:	66 0f       	add	r22, r22
    143c:	77 1f       	adc	r23, r23
    143e:	6a 56       	subi	r22, 0x6A	; 106
    1440:	7e 4f       	sbci	r23, 0xFE	; 254
    1442:	48 e0       	ldi	r20, 0x08	; 8
    1444:	50 e0       	ldi	r21, 0x00	; 0
    1446:	ce 01       	movw	r24, r28
    1448:	01 96       	adiw	r24, 0x01	; 1
    144a:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <memcpy_P>
	ledmatrix_update_column(MATRIX_NUM_COLUMNS - 1, column_data);
    144e:	be 01       	movw	r22, r28
    1450:	6f 5f       	subi	r22, 0xFF	; 255
    1452:	7f 4f       	sbci	r23, 0xFF	; 255
    1454:	8f e0       	ldi	r24, 0x0F	; 15
    1456:	0e 94 85 05 	call	0xb0a	; 0xb0a <ledmatrix_update_column>
	next_column = GET_NEXT_COLUMN(next_column, anim_data);
    145a:	40 91 22 03 	lds	r20, 0x0322	; 0x800322 <next_column>
    145e:	50 e0       	ldi	r21, 0x00	; 0
    1460:	4f 5f       	subi	r20, 0xFF	; 255
    1462:	5f 4f       	sbci	r21, 0xFF	; 255
    1464:	9a 01       	movw	r18, r20
    1466:	36 95       	lsr	r19
    1468:	27 95       	ror	r18
    146a:	ab e7       	ldi	r26, 0x7B	; 123
    146c:	b4 e1       	ldi	r27, 0x14	; 20
    146e:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__umulhisi3>
    1472:	96 95       	lsr	r25
    1474:	87 95       	ror	r24
    1476:	62 e3       	ldi	r22, 0x32	; 50
    1478:	68 9f       	mul	r22, r24
    147a:	90 01       	movw	r18, r0
    147c:	69 9f       	mul	r22, r25
    147e:	30 0d       	add	r19, r0
    1480:	11 24       	eor	r1, r1
    1482:	ca 01       	movw	r24, r20
    1484:	82 1b       	sub	r24, r18
    1486:	93 0b       	sbc	r25, r19
    1488:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <next_column>
	if (next_column == MATRIX_NUM_COLUMNS)
    148c:	80 31       	cpi	r24, 0x10	; 16
    148e:	29 f4       	brne	.+10     	; 0x149a <display_next_column+0x86>
	{
		flags |= FLG_IS_NEW_CYCLE;
    1490:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <flags>
    1494:	81 60       	ori	r24, 0x01	; 1
    1496:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <flags>
	}
}
    149a:	28 96       	adiw	r28, 0x08	; 8
    149c:	0f b6       	in	r0, 0x3f	; 63
    149e:	f8 94       	cli
    14a0:	de bf       	out	0x3e, r29	; 62
    14a2:	0f be       	out	0x3f, r0	; 63
    14a4:	cd bf       	out	0x3d, r28	; 61
    14a6:	df 91       	pop	r29
    14a8:	cf 91       	pop	r28
    14aa:	08 95       	ret

000014ac <display_title_pixel>:
		}
	}
}

static bool display_title_pixel(uint8_t line, uint8_t col, bool coloured)
{
    14ac:	ef 92       	push	r14
    14ae:	ff 92       	push	r15
    14b0:	0f 93       	push	r16
    14b2:	1f 93       	push	r17
    14b4:	cf 93       	push	r28
    14b6:	df 93       	push	r29
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62
    14bc:	28 97       	sbiw	r28, 0x08	; 8
    14be:	0f b6       	in	r0, 0x3f	; 63
    14c0:	f8 94       	cli
    14c2:	de bf       	out	0x3e, r29	; 62
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	cd bf       	out	0x3d, r28	; 61
    14c8:	f6 2e       	mov	r15, r22
    14ca:	e4 2e       	mov	r14, r20
	uint64_t data;
	memcpy_P(&data, &title_data[line], sizeof(data));
    14cc:	68 2f       	mov	r22, r24
    14ce:	70 e0       	ldi	r23, 0x00	; 0
    14d0:	66 0f       	add	r22, r22
    14d2:	77 1f       	adc	r23, r23
    14d4:	66 0f       	add	r22, r22
    14d6:	77 1f       	adc	r23, r23
    14d8:	66 0f       	add	r22, r22
    14da:	77 1f       	adc	r23, r23
    14dc:	62 59       	subi	r22, 0x92	; 146
    14de:	7e 4f       	sbci	r23, 0xFE	; 254
    14e0:	48 e0       	ldi	r20, 0x08	; 8
    14e2:	50 e0       	ldi	r21, 0x00	; 0
    14e4:	ce 01       	movw	r24, r28
    14e6:	01 96       	adiw	r24, 0x01	; 1
    14e8:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <memcpy_P>
	if (data & ((uint64_t)1U << (63 - col)))
    14ec:	0f e3       	ldi	r16, 0x3F	; 63
    14ee:	10 e0       	ldi	r17, 0x00	; 0
    14f0:	0f 19       	sub	r16, r15
    14f2:	11 09       	sbc	r17, r1
    14f4:	29 81       	ldd	r18, Y+1	; 0x01
    14f6:	3a 81       	ldd	r19, Y+2	; 0x02
    14f8:	4b 81       	ldd	r20, Y+3	; 0x03
    14fa:	5c 81       	ldd	r21, Y+4	; 0x04
    14fc:	6d 81       	ldd	r22, Y+5	; 0x05
    14fe:	7e 81       	ldd	r23, Y+6	; 0x06
    1500:	8f 81       	ldd	r24, Y+7	; 0x07
    1502:	98 85       	ldd	r25, Y+8	; 0x08
    1504:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__lshrdi3>
    1508:	21 70       	andi	r18, 0x01	; 1
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	40 e0       	ldi	r20, 0x00	; 0
    150e:	50 e0       	ldi	r21, 0x00	; 0
    1510:	60 e0       	ldi	r22, 0x00	; 0
    1512:	70 e0       	ldi	r23, 0x00	; 0
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	a0 e0       	ldi	r26, 0x00	; 0
    151a:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__cmpdi2_s8>
    151e:	c1 f0       	breq	.+48     	; 0x1550 <display_title_pixel+0xa4>
	{
		if (!coloured)
    1520:	e1 10       	cpse	r14, r1
    1522:	1b c0       	rjmp	.+54     	; 0x155a <display_title_pixel+0xae>
    1524:	10 e0       	ldi	r17, 0x00	; 0
    1526:	0f c0       	rjmp	.+30     	; 0x1546 <display_title_pixel+0x9a>
		{
			for (uint8_t j = 0; j < countof(title_pos); j++)
			{
				if (col <= title_pos[j])
    1528:	81 2f       	mov	r24, r17
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	fc 01       	movw	r30, r24
    152e:	e1 57       	subi	r30, 0x71	; 113
    1530:	fd 4f       	sbci	r31, 0xFD	; 253
    1532:	20 81       	ld	r18, Z
    1534:	2f 15       	cp	r18, r15
    1536:	30 f0       	brcs	.+12     	; 0x1544 <display_title_pixel+0x98>
				{
					set_display_attribute(title_attr[j]);
    1538:	fc 01       	movw	r30, r24
    153a:	e8 57       	subi	r30, 0x78	; 120
    153c:	fd 4f       	sbci	r31, 0xFD	; 253
    153e:	80 81       	ld	r24, Z
    1540:	0e 94 cd 0b 	call	0x179a	; 0x179a <set_display_attribute>
	memcpy_P(&data, &title_data[line], sizeof(data));
	if (data & ((uint64_t)1U << (63 - col)))
	{
		if (!coloured)
		{
			for (uint8_t j = 0; j < countof(title_pos); j++)
    1544:	1f 5f       	subi	r17, 0xFF	; 255
    1546:	17 30       	cpi	r17, 0x07	; 7
    1548:	78 f3       	brcs	.-34     	; 0x1528 <display_title_pixel+0x7c>
				if (col <= title_pos[j])
				{
					set_display_attribute(title_attr[j]);
				}
			}
			coloured = true;
    154a:	ee 24       	eor	r14, r14
    154c:	e3 94       	inc	r14
    154e:	05 c0       	rjmp	.+10     	; 0x155a <display_title_pixel+0xae>
		}
	}
	else
	{
		if (coloured)
    1550:	ee 20       	and	r14, r14
    1552:	19 f0       	breq	.+6      	; 0x155a <display_title_pixel+0xae>
		{
			normal_display_mode();
    1554:	0e 94 b2 0b 	call	0x1764	; 0x1764 <normal_display_mode>
			coloured = false;
    1558:	e1 2c       	mov	r14, r1
		}
		
	}
	putchar(' ');
    155a:	60 91 49 04 	lds	r22, 0x0449	; 0x800449 <__iob+0x2>
    155e:	70 91 4a 04 	lds	r23, 0x044A	; 0x80044a <__iob+0x3>
    1562:	80 e2       	ldi	r24, 0x20	; 32
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <fputc>
	return coloured;
}
    156a:	8e 2d       	mov	r24, r14
    156c:	28 96       	adiw	r28, 0x08	; 8
    156e:	0f b6       	in	r0, 0x3f	; 63
    1570:	f8 94       	cli
    1572:	de bf       	out	0x3e, r29	; 62
    1574:	0f be       	out	0x3f, r0	; 63
    1576:	cd bf       	out	0x3d, r28	; 61
    1578:	df 91       	pop	r29
    157a:	cf 91       	pop	r28
    157c:	1f 91       	pop	r17
    157e:	0f 91       	pop	r16
    1580:	ff 90       	pop	r15
    1582:	ef 90       	pop	r14
    1584:	08 95       	ret

00001586 <setup_start_screen>:
	}
}

void setup_start_screen(void)
{
	ledmatrix_clear();
    1586:	0e 94 a9 05 	call	0xb52	; 0xb52 <ledmatrix_clear>
	display_initial_image();
    158a:	0e 94 da 09 	call	0x13b4	; 0x13b4 <display_initial_image>
	flags |= FLG_IS_NEW_CYCLE;
    158e:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <flags>
    1592:	81 60       	ori	r24, 0x01	; 1
    1594:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <flags>
    1598:	08 95       	ret

0000159a <update_start_screen>:
}

void update_start_screen(void)
{
    159a:	cf 92       	push	r12
    159c:	df 92       	push	r13
    159e:	ef 92       	push	r14
    15a0:	ff 92       	push	r15
	uint32_t time = get_current_time();
    15a2:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <get_current_time>
    15a6:	6b 01       	movw	r12, r22
    15a8:	7c 01       	movw	r14, r24

	if (flags & FLG_IS_NEW_CYCLE)
    15aa:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <flags>
    15ae:	80 ff       	sbrs	r24, 0
    15b0:	16 c0       	rjmp	.+44     	; 0x15de <update_start_screen+0x44>
	{
		flashing_start_time = time;
    15b2:	c0 92 27 03 	sts	0x0327, r12	; 0x800327 <flashing_start_time>
    15b6:	d0 92 28 03 	sts	0x0328, r13	; 0x800328 <flashing_start_time+0x1>
    15ba:	e0 92 29 03 	sts	0x0329, r14	; 0x800329 <flashing_start_time+0x2>
    15be:	f0 92 2a 03 	sts	0x032A, r15	; 0x80032a <flashing_start_time+0x3>
		last_update_time = time;
    15c2:	c0 92 23 03 	sts	0x0323, r12	; 0x800323 <last_update_time>
    15c6:	d0 92 24 03 	sts	0x0324, r13	; 0x800324 <last_update_time+0x1>
    15ca:	e0 92 25 03 	sts	0x0325, r14	; 0x800325 <last_update_time+0x2>
    15ce:	f0 92 26 03 	sts	0x0326, r15	; 0x800326 <last_update_time+0x3>
		next_column = MATRIX_NUM_COLUMNS;
    15d2:	90 e1       	ldi	r25, 0x10	; 16
    15d4:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <next_column>
		flags &= ((~FLG_IS_NEW_CYCLE) & (~FLG_IS_FLASH_DONE) &
    15d8:	88 7f       	andi	r24, 0xF8	; 248
    15da:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <flags>
			(~FLG_TOGGLE_ON));
	}

	if (next_column == MATRIX_NUM_COLUMNS)
    15de:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <next_column>
    15e2:	80 31       	cpi	r24, 0x10	; 16
    15e4:	09 f0       	breq	.+2      	; 0x15e8 <update_start_screen+0x4e>
    15e6:	64 c0       	rjmp	.+200    	; 0x16b0 <update_start_screen+0x116>
	{
		if (time > flashing_start_time + FLASH_TIME + STATIC_TIME)
    15e8:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <flashing_start_time>
    15ec:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <flashing_start_time+0x1>
    15f0:	a0 91 29 03 	lds	r26, 0x0329	; 0x800329 <flashing_start_time+0x2>
    15f4:	b0 91 2a 03 	lds	r27, 0x032A	; 0x80032a <flashing_start_time+0x3>
    15f8:	ac 01       	movw	r20, r24
    15fa:	bd 01       	movw	r22, r26
    15fc:	40 53       	subi	r20, 0x30	; 48
    15fe:	58 4f       	sbci	r21, 0xF8	; 248
    1600:	6f 4f       	sbci	r22, 0xFF	; 255
    1602:	7f 4f       	sbci	r23, 0xFF	; 255
    1604:	4c 15       	cp	r20, r12
    1606:	5d 05       	cpc	r21, r13
    1608:	6e 05       	cpc	r22, r14
    160a:	7f 05       	cpc	r23, r15
    160c:	58 f4       	brcc	.+22     	; 0x1624 <update_start_screen+0x8a>
		{
			// Two seconds have passed since start of flashing,
			// display next column.
			display_next_column();
    160e:	0e 94 0a 0a 	call	0x1414	; 0x1414 <display_next_column>
			last_update_time = time;
    1612:	c0 92 23 03 	sts	0x0323, r12	; 0x800323 <last_update_time>
    1616:	d0 92 24 03 	sts	0x0324, r13	; 0x800324 <last_update_time+0x1>
    161a:	e0 92 25 03 	sts	0x0325, r14	; 0x800325 <last_update_time+0x2>
    161e:	f0 92 26 03 	sts	0x0326, r15	; 0x800326 <last_update_time+0x3>
    1622:	61 c0       	rjmp	.+194    	; 0x16e6 <update_start_screen+0x14c>
		}
		else if (!(flags & FLG_IS_FLASH_DONE) && time >
    1624:	20 91 2b 03 	lds	r18, 0x032B	; 0x80032b <flags>
    1628:	32 2f       	mov	r19, r18
    162a:	32 70       	andi	r19, 0x02	; 2
    162c:	21 fd       	sbrc	r18, 1
    162e:	19 c0       	rjmp	.+50     	; 0x1662 <update_start_screen+0xc8>
			flashing_start_time + FLASH_TIME)
    1630:	88 51       	subi	r24, 0x18	; 24
    1632:	9c 4f       	sbci	r25, 0xFC	; 252
    1634:	af 4f       	sbci	r26, 0xFF	; 255
    1636:	bf 4f       	sbci	r27, 0xFF	; 255
			// Two seconds have passed since start of flashing,
			// display next column.
			display_next_column();
			last_update_time = time;
		}
		else if (!(flags & FLG_IS_FLASH_DONE) && time >
    1638:	8c 15       	cp	r24, r12
    163a:	9d 05       	cpc	r25, r13
    163c:	ae 05       	cpc	r26, r14
    163e:	bf 05       	cpc	r27, r15
    1640:	80 f4       	brcc	.+32     	; 0x1662 <update_start_screen+0xc8>
			flashing_start_time + FLASH_TIME)
		{
			// One second has passed since the start of flashing,
			// turn off flashing.
			display_initial_image();
    1642:	0e 94 da 09 	call	0x13b4	; 0x13b4 <display_initial_image>
			flags |= FLG_IS_FLASH_DONE;
    1646:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <flags>
    164a:	82 60       	ori	r24, 0x02	; 2
    164c:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <flags>
			last_update_time = time;
    1650:	c0 92 23 03 	sts	0x0323, r12	; 0x800323 <last_update_time>
    1654:	d0 92 24 03 	sts	0x0324, r13	; 0x800324 <last_update_time+0x1>
    1658:	e0 92 25 03 	sts	0x0325, r14	; 0x800325 <last_update_time+0x2>
    165c:	f0 92 26 03 	sts	0x0326, r15	; 0x800326 <last_update_time+0x3>
    1660:	42 c0       	rjmp	.+132    	; 0x16e6 <update_start_screen+0x14c>
		}
		else if (!(flags & FLG_IS_FLASH_DONE) && time >
    1662:	31 11       	cpse	r19, r1
    1664:	40 c0       	rjmp	.+128    	; 0x16e6 <update_start_screen+0x14c>
			last_update_time + FLASH_SPEED)
    1666:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <last_update_time>
    166a:	90 91 24 03 	lds	r25, 0x0324	; 0x800324 <last_update_time+0x1>
    166e:	a0 91 25 03 	lds	r26, 0x0325	; 0x800325 <last_update_time+0x2>
    1672:	b0 91 26 03 	lds	r27, 0x0326	; 0x800326 <last_update_time+0x3>
    1676:	8c 59       	subi	r24, 0x9C	; 156
    1678:	9f 4f       	sbci	r25, 0xFF	; 255
    167a:	af 4f       	sbci	r26, 0xFF	; 255
    167c:	bf 4f       	sbci	r27, 0xFF	; 255
			// turn off flashing.
			display_initial_image();
			flags |= FLG_IS_FLASH_DONE;
			last_update_time = time;
		}
		else if (!(flags & FLG_IS_FLASH_DONE) && time >
    167e:	8c 15       	cp	r24, r12
    1680:	9d 05       	cpc	r25, r13
    1682:	ae 05       	cpc	r26, r14
    1684:	bf 05       	cpc	r27, r15
    1686:	78 f5       	brcc	.+94     	; 0x16e6 <update_start_screen+0x14c>
			last_update_time + FLASH_SPEED)
		{
			// 0.1 seconds passed since last flash, flash the LED
			// matrix.
			if ((flags ^= FLG_TOGGLE_ON) & FLG_TOGGLE_ON)
    1688:	84 e0       	ldi	r24, 0x04	; 4
    168a:	28 27       	eor	r18, r24
    168c:	20 93 2b 03 	sts	0x032B, r18	; 0x80032b <flags>
    1690:	22 ff       	sbrs	r18, 2
    1692:	03 c0       	rjmp	.+6      	; 0x169a <update_start_screen+0x100>
			{
				ledmatrix_clear();
    1694:	0e 94 a9 05 	call	0xb52	; 0xb52 <ledmatrix_clear>
    1698:	02 c0       	rjmp	.+4      	; 0x169e <update_start_screen+0x104>
			}
			else
			{
				display_initial_image();
    169a:	0e 94 da 09 	call	0x13b4	; 0x13b4 <display_initial_image>
			}
			last_update_time = time;
    169e:	c0 92 23 03 	sts	0x0323, r12	; 0x800323 <last_update_time>
    16a2:	d0 92 24 03 	sts	0x0324, r13	; 0x800324 <last_update_time+0x1>
    16a6:	e0 92 25 03 	sts	0x0325, r14	; 0x800325 <last_update_time+0x2>
    16aa:	f0 92 26 03 	sts	0x0326, r15	; 0x800326 <last_update_time+0x3>
    16ae:	1b c0       	rjmp	.+54     	; 0x16e6 <update_start_screen+0x14c>
		}
	}
	else
	{
		if (time > last_update_time + SCROLL_SPEED)
    16b0:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <last_update_time>
    16b4:	90 91 24 03 	lds	r25, 0x0324	; 0x800324 <last_update_time+0x1>
    16b8:	a0 91 25 03 	lds	r26, 0x0325	; 0x800325 <last_update_time+0x2>
    16bc:	b0 91 26 03 	lds	r27, 0x0326	; 0x800326 <last_update_time+0x3>
    16c0:	88 53       	subi	r24, 0x38	; 56
    16c2:	9f 4f       	sbci	r25, 0xFF	; 255
    16c4:	af 4f       	sbci	r26, 0xFF	; 255
    16c6:	bf 4f       	sbci	r27, 0xFF	; 255
    16c8:	8c 15       	cp	r24, r12
    16ca:	9d 05       	cpc	r25, r13
    16cc:	ae 05       	cpc	r26, r14
    16ce:	bf 05       	cpc	r27, r15
    16d0:	50 f4       	brcc	.+20     	; 0x16e6 <update_start_screen+0x14c>
		{
			display_next_column();
    16d2:	0e 94 0a 0a 	call	0x1414	; 0x1414 <display_next_column>
			last_update_time = time;
    16d6:	c0 92 23 03 	sts	0x0323, r12	; 0x800323 <last_update_time>
    16da:	d0 92 24 03 	sts	0x0324, r13	; 0x800324 <last_update_time+0x1>
    16de:	e0 92 25 03 	sts	0x0325, r14	; 0x800325 <last_update_time+0x2>
    16e2:	f0 92 26 03 	sts	0x0326, r15	; 0x800326 <last_update_time+0x3>
		}
	}
}
    16e6:	ff 90       	pop	r15
    16e8:	ef 90       	pop	r14
    16ea:	df 90       	pop	r13
    16ec:	cf 90       	pop	r12
    16ee:	08 95       	ret

000016f0 <display_terminal_title>:
	putchar(' ');
	return coloured;
}

void display_terminal_title(uint8_t row, uint8_t col)
{
    16f0:	ff 92       	push	r15
    16f2:	0f 93       	push	r16
    16f4:	1f 93       	push	r17
    16f6:	cf 93       	push	r28
    16f8:	df 93       	push	r29
    16fa:	f8 2e       	mov	r15, r24
    16fc:	06 2f       	mov	r16, r22
	bool coloured = false;
	for (uint8_t line = 0; line < countof(title_data); line++)
    16fe:	10 e0       	ldi	r17, 0x00	; 0
	return coloured;
}

void display_terminal_title(uint8_t row, uint8_t col)
{
	bool coloured = false;
    1700:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t line = 0; line < countof(title_data); line++)
    1702:	14 c0       	rjmp	.+40     	; 0x172c <display_terminal_title+0x3c>
	{
		move_terminal_cursor(line + row, col);
    1704:	60 2f       	mov	r22, r16
    1706:	70 e0       	ldi	r23, 0x00	; 0
    1708:	8f 2d       	mov	r24, r15
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	81 0f       	add	r24, r17
    170e:	91 1d       	adc	r25, r1
    1710:	0e 94 9e 0b 	call	0x173c	; 0x173c <move_terminal_cursor>
		for (uint8_t i = 0; i < 64; i++)
    1714:	c0 e0       	ldi	r28, 0x00	; 0
    1716:	07 c0       	rjmp	.+14     	; 0x1726 <display_terminal_title+0x36>
		{
			coloured = display_title_pixel(line, i, coloured);
    1718:	4d 2f       	mov	r20, r29
    171a:	6c 2f       	mov	r22, r28
    171c:	81 2f       	mov	r24, r17
    171e:	0e 94 56 0a 	call	0x14ac	; 0x14ac <display_title_pixel>
    1722:	d8 2f       	mov	r29, r24
{
	bool coloured = false;
	for (uint8_t line = 0; line < countof(title_data); line++)
	{
		move_terminal_cursor(line + row, col);
		for (uint8_t i = 0; i < 64; i++)
    1724:	cf 5f       	subi	r28, 0xFF	; 255
    1726:	c0 34       	cpi	r28, 0x40	; 64
    1728:	b8 f3       	brcs	.-18     	; 0x1718 <display_terminal_title+0x28>
}

void display_terminal_title(uint8_t row, uint8_t col)
{
	bool coloured = false;
	for (uint8_t line = 0; line < countof(title_data); line++)
    172a:	1f 5f       	subi	r17, 0xFF	; 255
    172c:	15 30       	cpi	r17, 0x05	; 5
    172e:	50 f3       	brcs	.-44     	; 0x1704 <display_terminal_title+0x14>
		for (uint8_t i = 0; i < 64; i++)
		{
			coloured = display_title_pixel(line, i, coloured);
		}
	}
}
    1730:	df 91       	pop	r29
    1732:	cf 91       	pop	r28
    1734:	1f 91       	pop	r17
    1736:	0f 91       	pop	r16
    1738:	ff 90       	pop	r15
    173a:	08 95       	ret

0000173c <move_terminal_cursor>:
}

void reverse_video(void)
{
	printf_P(PSTR("\x1b[7m"));
}
    173c:	6f 5f       	subi	r22, 0xFF	; 255
    173e:	7f 4f       	sbci	r23, 0xFF	; 255
    1740:	7f 93       	push	r23
    1742:	6f 93       	push	r22
    1744:	01 96       	adiw	r24, 0x01	; 1
    1746:	9f 93       	push	r25
    1748:	8f 93       	push	r24
    174a:	81 e4       	ldi	r24, 0x41	; 65
    174c:	93 e0       	ldi	r25, 0x03	; 3
    174e:	9f 93       	push	r25
    1750:	8f 93       	push	r24
    1752:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <printf_P>
    1756:	0f 90       	pop	r0
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	0f 90       	pop	r0
    175e:	0f 90       	pop	r0
    1760:	0f 90       	pop	r0
    1762:	08 95       	ret

00001764 <normal_display_mode>:
    1764:	8c e3       	ldi	r24, 0x3C	; 60
    1766:	93 e0       	ldi	r25, 0x03	; 3
    1768:	9f 93       	push	r25
    176a:	8f 93       	push	r24
    176c:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <printf_P>
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	08 95       	ret

00001776 <clear_terminal>:

void clear_terminal(void)
{
	printf_P(PSTR("\x1b[2J"));
    1776:	87 e3       	ldi	r24, 0x37	; 55
    1778:	93 e0       	ldi	r25, 0x03	; 3
    177a:	9f 93       	push	r25
    177c:	8f 93       	push	r24
    177e:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <printf_P>
}
    1782:	0f 90       	pop	r0
    1784:	0f 90       	pop	r0
    1786:	08 95       	ret

00001788 <clear_to_end_of_line>:

void clear_to_end_of_line(void)
{
	printf_P(PSTR("\x1b[K"));
    1788:	83 e3       	ldi	r24, 0x33	; 51
    178a:	93 e0       	ldi	r25, 0x03	; 3
    178c:	9f 93       	push	r25
    178e:	8f 93       	push	r24
    1790:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <printf_P>
}
    1794:	0f 90       	pop	r0
    1796:	0f 90       	pop	r0
    1798:	08 95       	ret

0000179a <set_display_attribute>:

void set_display_attribute(DisplayParameter parameter)
{
	printf_P(PSTR("\x1b[%dm"), parameter);
    179a:	1f 92       	push	r1
    179c:	8f 93       	push	r24
    179e:	8d e2       	ldi	r24, 0x2D	; 45
    17a0:	93 e0       	ldi	r25, 0x03	; 3
    17a2:	9f 93       	push	r25
    17a4:	8f 93       	push	r24
    17a6:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <printf_P>
}
    17aa:	0f 90       	pop	r0
    17ac:	0f 90       	pop	r0
    17ae:	0f 90       	pop	r0
    17b0:	0f 90       	pop	r0
    17b2:	08 95       	ret

000017b4 <hide_cursor>:

void hide_cursor(void)
{
	printf_P(PSTR("\x1b[?25l"));
    17b4:	86 e2       	ldi	r24, 0x26	; 38
    17b6:	93 e0       	ldi	r25, 0x03	; 3
    17b8:	9f 93       	push	r25
    17ba:	8f 93       	push	r24
    17bc:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <printf_P>
}
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	08 95       	ret

000017c6 <init_timer0>:
static volatile uint32_t clock_ticks_ms;

void init_timer0(void)
{
	// Reset clock tick count. L indicates a long (32 bit) constant.
	clock_ticks_ms = 0L;
    17c6:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <clock_ticks_ms>
    17ca:	10 92 2d 03 	sts	0x032D, r1	; 0x80032d <clock_ticks_ms+0x1>
    17ce:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <clock_ticks_ms+0x2>
    17d2:	10 92 2f 03 	sts	0x032F, r1	; 0x80032f <clock_ticks_ms+0x3>
	// interrupt every 64 x 125 clock cycles, i.e. every 1 milliseconds
	// with an 8MHz clock. The counter will be reset to 0 when it reaches
	// it's output compare value.

	// Clear the timer.
	TCNT0 = 0;
    17d6:	16 bc       	out	0x26, r1	; 38

	// Set the output compare value to be 124.
	OCR0A = 124;
    17d8:	8c e7       	ldi	r24, 0x7C	; 124
    17da:	87 bd       	out	0x27, r24	; 39

	// Set the timer to clear on compare match (CTC mode) and to
	// divide the clock by 64. This starts the timer running.
	TCCR0A = (1 << WGM01);
    17dc:	92 e0       	ldi	r25, 0x02	; 2
    17de:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1 << CS01) | (1 << CS00);
    17e0:	83 e0       	ldi	r24, 0x03	; 3
    17e2:	85 bd       	out	0x25, r24	; 37

	// Enable an interrupt on output compare match. Note that
	// interrupts have to be enabled globally before the interrupts
	// will fire.
	TIMSK0 |= (1 << OCIE0A);
    17e4:	ee e6       	ldi	r30, 0x6E	; 110
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	82 60       	ori	r24, 0x02	; 2
    17ec:	80 83       	st	Z, r24

	// Make sure the interrupt flag is cleared by writing a 1 to it.
	TIFR0 = (1 << OCF0A);
    17ee:	95 bb       	out	0x15, r25	; 21
    17f0:	08 95       	ret

000017f2 <get_current_time>:
uint32_t get_current_time(void)
{
	// Disable interrupts so we can be sure that the interrupt doesn't
	// fire when we've copied just a couple of bytes of the value.
	// Interrupts are re-enabled if they were enabled at the start.
	uint8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
    17f2:	8f b7       	in	r24, 0x3f	; 63
    17f4:	28 2f       	mov	r18, r24
    17f6:	20 78       	andi	r18, 0x80	; 128
	cli();
    17f8:	f8 94       	cli
	uint32_t result = clock_ticks_ms;
    17fa:	60 91 2c 03 	lds	r22, 0x032C	; 0x80032c <clock_ticks_ms>
    17fe:	70 91 2d 03 	lds	r23, 0x032D	; 0x80032d <clock_ticks_ms+0x1>
    1802:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <clock_ticks_ms+0x2>
    1806:	90 91 2f 03 	lds	r25, 0x032F	; 0x80032f <clock_ticks_ms+0x3>
	if (interrupts_were_enabled)
    180a:	22 23       	and	r18, r18
    180c:	09 f0       	breq	.+2      	; 0x1810 <get_current_time+0x1e>
	{
		sei();
    180e:	78 94       	sei
	}
	return result;
}
    1810:	08 95       	ret

00001812 <__vector_16>:

// Interrupt handler for clock tick.
ISR(TIMER0_COMPA_vect)
{
    1812:	1f 92       	push	r1
    1814:	0f 92       	push	r0
    1816:	0f b6       	in	r0, 0x3f	; 63
    1818:	0f 92       	push	r0
    181a:	11 24       	eor	r1, r1
    181c:	8f 93       	push	r24
    181e:	9f 93       	push	r25
    1820:	af 93       	push	r26
    1822:	bf 93       	push	r27
	// Increment our clock tick count.
	clock_ticks_ms++;
    1824:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <clock_ticks_ms>
    1828:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <clock_ticks_ms+0x1>
    182c:	a0 91 2e 03 	lds	r26, 0x032E	; 0x80032e <clock_ticks_ms+0x2>
    1830:	b0 91 2f 03 	lds	r27, 0x032F	; 0x80032f <clock_ticks_ms+0x3>
    1834:	01 96       	adiw	r24, 0x01	; 1
    1836:	a1 1d       	adc	r26, r1
    1838:	b1 1d       	adc	r27, r1
    183a:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <clock_ticks_ms>
    183e:	90 93 2d 03 	sts	0x032D, r25	; 0x80032d <clock_ticks_ms+0x1>
    1842:	a0 93 2e 03 	sts	0x032E, r26	; 0x80032e <clock_ticks_ms+0x2>
    1846:	b0 93 2f 03 	sts	0x032F, r27	; 0x80032f <clock_ticks_ms+0x3>
}
    184a:	bf 91       	pop	r27
    184c:	af 91       	pop	r26
    184e:	9f 91       	pop	r25
    1850:	8f 91       	pop	r24
    1852:	0f 90       	pop	r0
    1854:	0f be       	out	0x3f, r0	; 63
    1856:	0f 90       	pop	r0
    1858:	1f 90       	pop	r1
    185a:	18 95       	reti

0000185c <init_timer1>:
#include <avr/interrupt.h>

void init_timer1(void)
{
	// Setup timer 1.
	TCNT1 = 0;
    185c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    1860:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    1864:	08 95       	ret

00001866 <init_timer2>:
#include <avr/interrupt.h>

void init_timer2(void)
{
	// Setup timer 2.
	TCNT2 = 0;
    1866:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    186a:	08 95       	ret

0000186c <__divmodhi4>:
    186c:	97 fb       	bst	r25, 7
    186e:	07 2e       	mov	r0, r23
    1870:	16 f4       	brtc	.+4      	; 0x1876 <__divmodhi4+0xa>
    1872:	00 94       	com	r0
    1874:	07 d0       	rcall	.+14     	; 0x1884 <__divmodhi4_neg1>
    1876:	77 fd       	sbrc	r23, 7
    1878:	09 d0       	rcall	.+18     	; 0x188c <__divmodhi4_neg2>
    187a:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__udivmodhi4>
    187e:	07 fc       	sbrc	r0, 7
    1880:	05 d0       	rcall	.+10     	; 0x188c <__divmodhi4_neg2>
    1882:	3e f4       	brtc	.+14     	; 0x1892 <__divmodhi4_exit>

00001884 <__divmodhi4_neg1>:
    1884:	90 95       	com	r25
    1886:	81 95       	neg	r24
    1888:	9f 4f       	sbci	r25, 0xFF	; 255
    188a:	08 95       	ret

0000188c <__divmodhi4_neg2>:
    188c:	70 95       	com	r23
    188e:	61 95       	neg	r22
    1890:	7f 4f       	sbci	r23, 0xFF	; 255

00001892 <__divmodhi4_exit>:
    1892:	08 95       	ret

00001894 <__udivmodsi4>:
    1894:	a1 e2       	ldi	r26, 0x21	; 33
    1896:	1a 2e       	mov	r1, r26
    1898:	aa 1b       	sub	r26, r26
    189a:	bb 1b       	sub	r27, r27
    189c:	fd 01       	movw	r30, r26
    189e:	0d c0       	rjmp	.+26     	; 0x18ba <__udivmodsi4_ep>

000018a0 <__udivmodsi4_loop>:
    18a0:	aa 1f       	adc	r26, r26
    18a2:	bb 1f       	adc	r27, r27
    18a4:	ee 1f       	adc	r30, r30
    18a6:	ff 1f       	adc	r31, r31
    18a8:	a2 17       	cp	r26, r18
    18aa:	b3 07       	cpc	r27, r19
    18ac:	e4 07       	cpc	r30, r20
    18ae:	f5 07       	cpc	r31, r21
    18b0:	20 f0       	brcs	.+8      	; 0x18ba <__udivmodsi4_ep>
    18b2:	a2 1b       	sub	r26, r18
    18b4:	b3 0b       	sbc	r27, r19
    18b6:	e4 0b       	sbc	r30, r20
    18b8:	f5 0b       	sbc	r31, r21

000018ba <__udivmodsi4_ep>:
    18ba:	66 1f       	adc	r22, r22
    18bc:	77 1f       	adc	r23, r23
    18be:	88 1f       	adc	r24, r24
    18c0:	99 1f       	adc	r25, r25
    18c2:	1a 94       	dec	r1
    18c4:	69 f7       	brne	.-38     	; 0x18a0 <__udivmodsi4_loop>
    18c6:	60 95       	com	r22
    18c8:	70 95       	com	r23
    18ca:	80 95       	com	r24
    18cc:	90 95       	com	r25
    18ce:	9b 01       	movw	r18, r22
    18d0:	ac 01       	movw	r20, r24
    18d2:	bd 01       	movw	r22, r26
    18d4:	cf 01       	movw	r24, r30
    18d6:	08 95       	ret

000018d8 <__divmodsi4>:
    18d8:	05 2e       	mov	r0, r21
    18da:	97 fb       	bst	r25, 7
    18dc:	1e f4       	brtc	.+6      	; 0x18e4 <__divmodsi4+0xc>
    18de:	00 94       	com	r0
    18e0:	0e 94 83 0c 	call	0x1906	; 0x1906 <__negsi2>
    18e4:	57 fd       	sbrc	r21, 7
    18e6:	07 d0       	rcall	.+14     	; 0x18f6 <__divmodsi4_neg2>
    18e8:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__udivmodsi4>
    18ec:	07 fc       	sbrc	r0, 7
    18ee:	03 d0       	rcall	.+6      	; 0x18f6 <__divmodsi4_neg2>
    18f0:	4e f4       	brtc	.+18     	; 0x1904 <__divmodsi4_exit>
    18f2:	0c 94 83 0c 	jmp	0x1906	; 0x1906 <__negsi2>

000018f6 <__divmodsi4_neg2>:
    18f6:	50 95       	com	r21
    18f8:	40 95       	com	r20
    18fa:	30 95       	com	r19
    18fc:	21 95       	neg	r18
    18fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1900:	4f 4f       	sbci	r20, 0xFF	; 255
    1902:	5f 4f       	sbci	r21, 0xFF	; 255

00001904 <__divmodsi4_exit>:
    1904:	08 95       	ret

00001906 <__negsi2>:
    1906:	90 95       	com	r25
    1908:	80 95       	com	r24
    190a:	70 95       	com	r23
    190c:	61 95       	neg	r22
    190e:	7f 4f       	sbci	r23, 0xFF	; 255
    1910:	8f 4f       	sbci	r24, 0xFF	; 255
    1912:	9f 4f       	sbci	r25, 0xFF	; 255
    1914:	08 95       	ret

00001916 <__umulhisi3>:
    1916:	a2 9f       	mul	r26, r18
    1918:	b0 01       	movw	r22, r0
    191a:	b3 9f       	mul	r27, r19
    191c:	c0 01       	movw	r24, r0
    191e:	a3 9f       	mul	r26, r19
    1920:	70 0d       	add	r23, r0
    1922:	81 1d       	adc	r24, r1
    1924:	11 24       	eor	r1, r1
    1926:	91 1d       	adc	r25, r1
    1928:	b2 9f       	mul	r27, r18
    192a:	70 0d       	add	r23, r0
    192c:	81 1d       	adc	r24, r1
    192e:	11 24       	eor	r1, r1
    1930:	91 1d       	adc	r25, r1
    1932:	08 95       	ret

00001934 <__ashrdi3>:
    1934:	97 fb       	bst	r25, 7
    1936:	10 f8       	bld	r1, 0

00001938 <__lshrdi3>:
    1938:	16 94       	lsr	r1
    193a:	00 08       	sbc	r0, r0
    193c:	0f 93       	push	r16
    193e:	08 30       	cpi	r16, 0x08	; 8
    1940:	98 f0       	brcs	.+38     	; 0x1968 <__lshrdi3+0x30>
    1942:	08 50       	subi	r16, 0x08	; 8
    1944:	23 2f       	mov	r18, r19
    1946:	34 2f       	mov	r19, r20
    1948:	45 2f       	mov	r20, r21
    194a:	56 2f       	mov	r21, r22
    194c:	67 2f       	mov	r22, r23
    194e:	78 2f       	mov	r23, r24
    1950:	89 2f       	mov	r24, r25
    1952:	90 2d       	mov	r25, r0
    1954:	f4 cf       	rjmp	.-24     	; 0x193e <__lshrdi3+0x6>
    1956:	05 94       	asr	r0
    1958:	97 95       	ror	r25
    195a:	87 95       	ror	r24
    195c:	77 95       	ror	r23
    195e:	67 95       	ror	r22
    1960:	57 95       	ror	r21
    1962:	47 95       	ror	r20
    1964:	37 95       	ror	r19
    1966:	27 95       	ror	r18
    1968:	0a 95       	dec	r16
    196a:	aa f7       	brpl	.-22     	; 0x1956 <__lshrdi3+0x1e>
    196c:	0f 91       	pop	r16
    196e:	08 95       	ret

00001970 <__cmpdi2_s8>:
    1970:	00 24       	eor	r0, r0
    1972:	a7 fd       	sbrc	r26, 7
    1974:	00 94       	com	r0
    1976:	2a 17       	cp	r18, r26
    1978:	30 05       	cpc	r19, r0
    197a:	40 05       	cpc	r20, r0
    197c:	50 05       	cpc	r21, r0
    197e:	60 05       	cpc	r22, r0
    1980:	70 05       	cpc	r23, r0
    1982:	80 05       	cpc	r24, r0
    1984:	90 05       	cpc	r25, r0
    1986:	08 95       	ret

00001988 <__udivmodhi4>:
    1988:	aa 1b       	sub	r26, r26
    198a:	bb 1b       	sub	r27, r27
    198c:	51 e1       	ldi	r21, 0x11	; 17
    198e:	07 c0       	rjmp	.+14     	; 0x199e <__udivmodhi4_ep>

00001990 <__udivmodhi4_loop>:
    1990:	aa 1f       	adc	r26, r26
    1992:	bb 1f       	adc	r27, r27
    1994:	a6 17       	cp	r26, r22
    1996:	b7 07       	cpc	r27, r23
    1998:	10 f0       	brcs	.+4      	; 0x199e <__udivmodhi4_ep>
    199a:	a6 1b       	sub	r26, r22
    199c:	b7 0b       	sbc	r27, r23

0000199e <__udivmodhi4_ep>:
    199e:	88 1f       	adc	r24, r24
    19a0:	99 1f       	adc	r25, r25
    19a2:	5a 95       	dec	r21
    19a4:	a9 f7       	brne	.-22     	; 0x1990 <__udivmodhi4_loop>
    19a6:	80 95       	com	r24
    19a8:	90 95       	com	r25
    19aa:	bc 01       	movw	r22, r24
    19ac:	cd 01       	movw	r24, r26
    19ae:	08 95       	ret

000019b0 <do_rand>:
    19b0:	8f 92       	push	r8
    19b2:	9f 92       	push	r9
    19b4:	af 92       	push	r10
    19b6:	bf 92       	push	r11
    19b8:	cf 92       	push	r12
    19ba:	df 92       	push	r13
    19bc:	ef 92       	push	r14
    19be:	ff 92       	push	r15
    19c0:	cf 93       	push	r28
    19c2:	df 93       	push	r29
    19c4:	ec 01       	movw	r28, r24
    19c6:	68 81       	ld	r22, Y
    19c8:	79 81       	ldd	r23, Y+1	; 0x01
    19ca:	8a 81       	ldd	r24, Y+2	; 0x02
    19cc:	9b 81       	ldd	r25, Y+3	; 0x03
    19ce:	61 15       	cp	r22, r1
    19d0:	71 05       	cpc	r23, r1
    19d2:	81 05       	cpc	r24, r1
    19d4:	91 05       	cpc	r25, r1
    19d6:	21 f4       	brne	.+8      	; 0x19e0 <do_rand+0x30>
    19d8:	64 e2       	ldi	r22, 0x24	; 36
    19da:	79 ed       	ldi	r23, 0xD9	; 217
    19dc:	8b e5       	ldi	r24, 0x5B	; 91
    19de:	97 e0       	ldi	r25, 0x07	; 7
    19e0:	2d e1       	ldi	r18, 0x1D	; 29
    19e2:	33 ef       	ldi	r19, 0xF3	; 243
    19e4:	41 e0       	ldi	r20, 0x01	; 1
    19e6:	50 e0       	ldi	r21, 0x00	; 0
    19e8:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__divmodsi4>
    19ec:	49 01       	movw	r8, r18
    19ee:	5a 01       	movw	r10, r20
    19f0:	9b 01       	movw	r18, r22
    19f2:	ac 01       	movw	r20, r24
    19f4:	a7 ea       	ldi	r26, 0xA7	; 167
    19f6:	b1 e4       	ldi	r27, 0x41	; 65
    19f8:	0e 94 8a 10 	call	0x2114	; 0x2114 <__muluhisi3>
    19fc:	6b 01       	movw	r12, r22
    19fe:	7c 01       	movw	r14, r24
    1a00:	ac ee       	ldi	r26, 0xEC	; 236
    1a02:	b4 ef       	ldi	r27, 0xF4	; 244
    1a04:	a5 01       	movw	r20, r10
    1a06:	94 01       	movw	r18, r8
    1a08:	0e 94 98 10 	call	0x2130	; 0x2130 <__mulohisi3>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	8c 0d       	add	r24, r12
    1a12:	9d 1d       	adc	r25, r13
    1a14:	ae 1d       	adc	r26, r14
    1a16:	bf 1d       	adc	r27, r15
    1a18:	b7 ff       	sbrs	r27, 7
    1a1a:	03 c0       	rjmp	.+6      	; 0x1a22 <do_rand+0x72>
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	a1 09       	sbc	r26, r1
    1a20:	b0 48       	sbci	r27, 0x80	; 128
    1a22:	88 83       	st	Y, r24
    1a24:	99 83       	std	Y+1, r25	; 0x01
    1a26:	aa 83       	std	Y+2, r26	; 0x02
    1a28:	bb 83       	std	Y+3, r27	; 0x03
    1a2a:	9f 77       	andi	r25, 0x7F	; 127
    1a2c:	df 91       	pop	r29
    1a2e:	cf 91       	pop	r28
    1a30:	ff 90       	pop	r15
    1a32:	ef 90       	pop	r14
    1a34:	df 90       	pop	r13
    1a36:	cf 90       	pop	r12
    1a38:	bf 90       	pop	r11
    1a3a:	af 90       	pop	r10
    1a3c:	9f 90       	pop	r9
    1a3e:	8f 90       	pop	r8
    1a40:	08 95       	ret

00001a42 <rand_r>:
    1a42:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <do_rand>
    1a46:	08 95       	ret

00001a48 <rand>:
    1a48:	80 e0       	ldi	r24, 0x00	; 0
    1a4a:	91 e0       	ldi	r25, 0x01	; 1
    1a4c:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <do_rand>
    1a50:	08 95       	ret

00001a52 <srand>:
    1a52:	a0 e0       	ldi	r26, 0x00	; 0
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    1a5a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1a5e:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    1a62:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    1a66:	08 95       	ret

00001a68 <tolower>:
    1a68:	91 11       	cpse	r25, r1
    1a6a:	08 95       	ret
    1a6c:	81 54       	subi	r24, 0x41	; 65
    1a6e:	8a 51       	subi	r24, 0x1A	; 26
    1a70:	08 f4       	brcc	.+2      	; 0x1a74 <tolower+0xc>
    1a72:	80 5e       	subi	r24, 0xE0	; 224
    1a74:	85 5a       	subi	r24, 0xA5	; 165
    1a76:	08 95       	ret

00001a78 <toupper>:
    1a78:	91 11       	cpse	r25, r1
    1a7a:	08 95       	ret
    1a7c:	81 56       	subi	r24, 0x61	; 97
    1a7e:	8a 51       	subi	r24, 0x1A	; 26
    1a80:	08 f4       	brcc	.+2      	; 0x1a84 <toupper+0xc>
    1a82:	80 52       	subi	r24, 0x20	; 32
    1a84:	85 58       	subi	r24, 0x85	; 133
    1a86:	08 95       	ret

00001a88 <memcpy_P>:
    1a88:	fb 01       	movw	r30, r22
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	02 c0       	rjmp	.+4      	; 0x1a92 <memcpy_P+0xa>
    1a8e:	05 90       	lpm	r0, Z+
    1a90:	0d 92       	st	X+, r0
    1a92:	41 50       	subi	r20, 0x01	; 1
    1a94:	50 40       	sbci	r21, 0x00	; 0
    1a96:	d8 f7       	brcc	.-10     	; 0x1a8e <memcpy_P+0x6>
    1a98:	08 95       	ret

00001a9a <strcmp>:
    1a9a:	fb 01       	movw	r30, r22
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	8d 91       	ld	r24, X+
    1aa0:	01 90       	ld	r0, Z+
    1aa2:	80 19       	sub	r24, r0
    1aa4:	01 10       	cpse	r0, r1
    1aa6:	d9 f3       	breq	.-10     	; 0x1a9e <strcmp+0x4>
    1aa8:	99 0b       	sbc	r25, r25
    1aaa:	08 95       	ret

00001aac <fgetc>:
    1aac:	cf 93       	push	r28
    1aae:	df 93       	push	r29
    1ab0:	ec 01       	movw	r28, r24
    1ab2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ab4:	20 ff       	sbrs	r18, 0
    1ab6:	33 c0       	rjmp	.+102    	; 0x1b1e <fgetc+0x72>
    1ab8:	26 ff       	sbrs	r18, 6
    1aba:	0a c0       	rjmp	.+20     	; 0x1ad0 <fgetc+0x24>
    1abc:	2f 7b       	andi	r18, 0xBF	; 191
    1abe:	2b 83       	std	Y+3, r18	; 0x03
    1ac0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ac2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ac4:	01 96       	adiw	r24, 0x01	; 1
    1ac6:	9f 83       	std	Y+7, r25	; 0x07
    1ac8:	8e 83       	std	Y+6, r24	; 0x06
    1aca:	8a 81       	ldd	r24, Y+2	; 0x02
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	29 c0       	rjmp	.+82     	; 0x1b22 <fgetc+0x76>
    1ad0:	22 ff       	sbrs	r18, 2
    1ad2:	0f c0       	rjmp	.+30     	; 0x1af2 <fgetc+0x46>
    1ad4:	e8 81       	ld	r30, Y
    1ad6:	f9 81       	ldd	r31, Y+1	; 0x01
    1ad8:	80 81       	ld	r24, Z
    1ada:	08 2e       	mov	r0, r24
    1adc:	00 0c       	add	r0, r0
    1ade:	99 0b       	sbc	r25, r25
    1ae0:	00 97       	sbiw	r24, 0x00	; 0
    1ae2:	19 f4       	brne	.+6      	; 0x1aea <fgetc+0x3e>
    1ae4:	20 62       	ori	r18, 0x20	; 32
    1ae6:	2b 83       	std	Y+3, r18	; 0x03
    1ae8:	1a c0       	rjmp	.+52     	; 0x1b1e <fgetc+0x72>
    1aea:	31 96       	adiw	r30, 0x01	; 1
    1aec:	f9 83       	std	Y+1, r31	; 0x01
    1aee:	e8 83       	st	Y, r30
    1af0:	0e c0       	rjmp	.+28     	; 0x1b0e <fgetc+0x62>
    1af2:	ea 85       	ldd	r30, Y+10	; 0x0a
    1af4:	fb 85       	ldd	r31, Y+11	; 0x0b
    1af6:	09 95       	icall
    1af8:	97 ff       	sbrs	r25, 7
    1afa:	09 c0       	rjmp	.+18     	; 0x1b0e <fgetc+0x62>
    1afc:	2b 81       	ldd	r18, Y+3	; 0x03
    1afe:	01 96       	adiw	r24, 0x01	; 1
    1b00:	11 f0       	breq	.+4      	; 0x1b06 <fgetc+0x5a>
    1b02:	80 e2       	ldi	r24, 0x20	; 32
    1b04:	01 c0       	rjmp	.+2      	; 0x1b08 <fgetc+0x5c>
    1b06:	80 e1       	ldi	r24, 0x10	; 16
    1b08:	82 2b       	or	r24, r18
    1b0a:	8b 83       	std	Y+3, r24	; 0x03
    1b0c:	08 c0       	rjmp	.+16     	; 0x1b1e <fgetc+0x72>
    1b0e:	2e 81       	ldd	r18, Y+6	; 0x06
    1b10:	3f 81       	ldd	r19, Y+7	; 0x07
    1b12:	2f 5f       	subi	r18, 0xFF	; 255
    1b14:	3f 4f       	sbci	r19, 0xFF	; 255
    1b16:	3f 83       	std	Y+7, r19	; 0x07
    1b18:	2e 83       	std	Y+6, r18	; 0x06
    1b1a:	99 27       	eor	r25, r25
    1b1c:	02 c0       	rjmp	.+4      	; 0x1b22 <fgetc+0x76>
    1b1e:	8f ef       	ldi	r24, 0xFF	; 255
    1b20:	9f ef       	ldi	r25, 0xFF	; 255
    1b22:	df 91       	pop	r29
    1b24:	cf 91       	pop	r28
    1b26:	08 95       	ret

00001b28 <fputc>:
    1b28:	0f 93       	push	r16
    1b2a:	1f 93       	push	r17
    1b2c:	cf 93       	push	r28
    1b2e:	df 93       	push	r29
    1b30:	fb 01       	movw	r30, r22
    1b32:	23 81       	ldd	r18, Z+3	; 0x03
    1b34:	21 fd       	sbrc	r18, 1
    1b36:	03 c0       	rjmp	.+6      	; 0x1b3e <fputc+0x16>
    1b38:	8f ef       	ldi	r24, 0xFF	; 255
    1b3a:	9f ef       	ldi	r25, 0xFF	; 255
    1b3c:	2c c0       	rjmp	.+88     	; 0x1b96 <fputc+0x6e>
    1b3e:	22 ff       	sbrs	r18, 2
    1b40:	16 c0       	rjmp	.+44     	; 0x1b6e <fputc+0x46>
    1b42:	46 81       	ldd	r20, Z+6	; 0x06
    1b44:	57 81       	ldd	r21, Z+7	; 0x07
    1b46:	24 81       	ldd	r18, Z+4	; 0x04
    1b48:	35 81       	ldd	r19, Z+5	; 0x05
    1b4a:	42 17       	cp	r20, r18
    1b4c:	53 07       	cpc	r21, r19
    1b4e:	44 f4       	brge	.+16     	; 0x1b60 <fputc+0x38>
    1b50:	a0 81       	ld	r26, Z
    1b52:	b1 81       	ldd	r27, Z+1	; 0x01
    1b54:	9d 01       	movw	r18, r26
    1b56:	2f 5f       	subi	r18, 0xFF	; 255
    1b58:	3f 4f       	sbci	r19, 0xFF	; 255
    1b5a:	31 83       	std	Z+1, r19	; 0x01
    1b5c:	20 83       	st	Z, r18
    1b5e:	8c 93       	st	X, r24
    1b60:	26 81       	ldd	r18, Z+6	; 0x06
    1b62:	37 81       	ldd	r19, Z+7	; 0x07
    1b64:	2f 5f       	subi	r18, 0xFF	; 255
    1b66:	3f 4f       	sbci	r19, 0xFF	; 255
    1b68:	37 83       	std	Z+7, r19	; 0x07
    1b6a:	26 83       	std	Z+6, r18	; 0x06
    1b6c:	14 c0       	rjmp	.+40     	; 0x1b96 <fputc+0x6e>
    1b6e:	8b 01       	movw	r16, r22
    1b70:	ec 01       	movw	r28, r24
    1b72:	fb 01       	movw	r30, r22
    1b74:	00 84       	ldd	r0, Z+8	; 0x08
    1b76:	f1 85       	ldd	r31, Z+9	; 0x09
    1b78:	e0 2d       	mov	r30, r0
    1b7a:	09 95       	icall
    1b7c:	89 2b       	or	r24, r25
    1b7e:	e1 f6       	brne	.-72     	; 0x1b38 <fputc+0x10>
    1b80:	d8 01       	movw	r26, r16
    1b82:	16 96       	adiw	r26, 0x06	; 6
    1b84:	8d 91       	ld	r24, X+
    1b86:	9c 91       	ld	r25, X
    1b88:	17 97       	sbiw	r26, 0x07	; 7
    1b8a:	01 96       	adiw	r24, 0x01	; 1
    1b8c:	17 96       	adiw	r26, 0x07	; 7
    1b8e:	9c 93       	st	X, r25
    1b90:	8e 93       	st	-X, r24
    1b92:	16 97       	sbiw	r26, 0x06	; 6
    1b94:	ce 01       	movw	r24, r28
    1b96:	df 91       	pop	r29
    1b98:	cf 91       	pop	r28
    1b9a:	1f 91       	pop	r17
    1b9c:	0f 91       	pop	r16
    1b9e:	08 95       	ret

00001ba0 <printf>:
    1ba0:	a0 e0       	ldi	r26, 0x00	; 0
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	e6 ed       	ldi	r30, 0xD6	; 214
    1ba6:	fd e0       	ldi	r31, 0x0D	; 13
    1ba8:	0c 94 ad 10 	jmp	0x215a	; 0x215a <__prologue_saves__+0x20>
    1bac:	ae 01       	movw	r20, r28
    1bae:	4b 5f       	subi	r20, 0xFB	; 251
    1bb0:	5f 4f       	sbci	r21, 0xFF	; 255
    1bb2:	fa 01       	movw	r30, r20
    1bb4:	61 91       	ld	r22, Z+
    1bb6:	71 91       	ld	r23, Z+
    1bb8:	af 01       	movw	r20, r30
    1bba:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__iob+0x2>
    1bbe:	90 91 4a 04 	lds	r25, 0x044A	; 0x80044a <__iob+0x3>
    1bc2:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <vfprintf>
    1bc6:	e2 e0       	ldi	r30, 0x02	; 2
    1bc8:	0c 94 c9 10 	jmp	0x2192	; 0x2192 <__epilogue_restores__+0x20>

00001bcc <printf_P>:
    1bcc:	a0 e0       	ldi	r26, 0x00	; 0
    1bce:	b0 e0       	ldi	r27, 0x00	; 0
    1bd0:	ec ee       	ldi	r30, 0xEC	; 236
    1bd2:	fd e0       	ldi	r31, 0x0D	; 13
    1bd4:	0c 94 ab 10 	jmp	0x2156	; 0x2156 <__prologue_saves__+0x1c>
    1bd8:	ae 01       	movw	r20, r28
    1bda:	49 5f       	subi	r20, 0xF9	; 249
    1bdc:	5f 4f       	sbci	r21, 0xFF	; 255
    1bde:	da 01       	movw	r26, r20
    1be0:	6d 91       	ld	r22, X+
    1be2:	7d 91       	ld	r23, X+
    1be4:	ad 01       	movw	r20, r26
    1be6:	07 e4       	ldi	r16, 0x47	; 71
    1be8:	14 e0       	ldi	r17, 0x04	; 4
    1bea:	f8 01       	movw	r30, r16
    1bec:	82 81       	ldd	r24, Z+2	; 0x02
    1bee:	93 81       	ldd	r25, Z+3	; 0x03
    1bf0:	dc 01       	movw	r26, r24
    1bf2:	13 96       	adiw	r26, 0x03	; 3
    1bf4:	2c 91       	ld	r18, X
    1bf6:	13 97       	sbiw	r26, 0x03	; 3
    1bf8:	28 60       	ori	r18, 0x08	; 8
    1bfa:	13 96       	adiw	r26, 0x03	; 3
    1bfc:	2c 93       	st	X, r18
    1bfe:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <vfprintf>
    1c02:	d8 01       	movw	r26, r16
    1c04:	12 96       	adiw	r26, 0x02	; 2
    1c06:	ed 91       	ld	r30, X+
    1c08:	fc 91       	ld	r31, X
    1c0a:	13 97       	sbiw	r26, 0x03	; 3
    1c0c:	23 81       	ldd	r18, Z+3	; 0x03
    1c0e:	27 7f       	andi	r18, 0xF7	; 247
    1c10:	23 83       	std	Z+3, r18	; 0x03
    1c12:	e4 e0       	ldi	r30, 0x04	; 4
    1c14:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__epilogue_restores__+0x1c>

00001c18 <putchar>:
    1c18:	60 91 49 04 	lds	r22, 0x0449	; 0x800449 <__iob+0x2>
    1c1c:	70 91 4a 04 	lds	r23, 0x044A	; 0x80044a <__iob+0x3>
    1c20:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <fputc>
    1c24:	08 95       	ret

00001c26 <sprintf>:
    1c26:	ae e0       	ldi	r26, 0x0E	; 14
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	e9 e1       	ldi	r30, 0x19	; 25
    1c2c:	fe e0       	ldi	r31, 0x0E	; 14
    1c2e:	0c 94 ab 10 	jmp	0x2156	; 0x2156 <__prologue_saves__+0x1c>
    1c32:	0d 89       	ldd	r16, Y+21	; 0x15
    1c34:	1e 89       	ldd	r17, Y+22	; 0x16
    1c36:	86 e0       	ldi	r24, 0x06	; 6
    1c38:	8c 83       	std	Y+4, r24	; 0x04
    1c3a:	1a 83       	std	Y+2, r17	; 0x02
    1c3c:	09 83       	std	Y+1, r16	; 0x01
    1c3e:	8f ef       	ldi	r24, 0xFF	; 255
    1c40:	9f e7       	ldi	r25, 0x7F	; 127
    1c42:	9e 83       	std	Y+6, r25	; 0x06
    1c44:	8d 83       	std	Y+5, r24	; 0x05
    1c46:	ae 01       	movw	r20, r28
    1c48:	47 5e       	subi	r20, 0xE7	; 231
    1c4a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c4c:	6f 89       	ldd	r22, Y+23	; 0x17
    1c4e:	78 8d       	ldd	r23, Y+24	; 0x18
    1c50:	ce 01       	movw	r24, r28
    1c52:	01 96       	adiw	r24, 0x01	; 1
    1c54:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <vfprintf>
    1c58:	ef 81       	ldd	r30, Y+7	; 0x07
    1c5a:	f8 85       	ldd	r31, Y+8	; 0x08
    1c5c:	e0 0f       	add	r30, r16
    1c5e:	f1 1f       	adc	r31, r17
    1c60:	10 82       	st	Z, r1
    1c62:	2e 96       	adiw	r28, 0x0e	; 14
    1c64:	e4 e0       	ldi	r30, 0x04	; 4
    1c66:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__epilogue_restores__+0x1c>

00001c6a <vfprintf>:
    1c6a:	ab e0       	ldi	r26, 0x0B	; 11
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	eb e3       	ldi	r30, 0x3B	; 59
    1c70:	fe e0       	ldi	r31, 0x0E	; 14
    1c72:	0c 94 9d 10 	jmp	0x213a	; 0x213a <__prologue_saves__>
    1c76:	6c 01       	movw	r12, r24
    1c78:	7b 01       	movw	r14, r22
    1c7a:	8a 01       	movw	r16, r20
    1c7c:	fc 01       	movw	r30, r24
    1c7e:	17 82       	std	Z+7, r1	; 0x07
    1c80:	16 82       	std	Z+6, r1	; 0x06
    1c82:	83 81       	ldd	r24, Z+3	; 0x03
    1c84:	81 ff       	sbrs	r24, 1
    1c86:	cc c1       	rjmp	.+920    	; 0x2020 <vfprintf+0x3b6>
    1c88:	ce 01       	movw	r24, r28
    1c8a:	01 96       	adiw	r24, 0x01	; 1
    1c8c:	3c 01       	movw	r6, r24
    1c8e:	f6 01       	movw	r30, r12
    1c90:	93 81       	ldd	r25, Z+3	; 0x03
    1c92:	f7 01       	movw	r30, r14
    1c94:	93 fd       	sbrc	r25, 3
    1c96:	85 91       	lpm	r24, Z+
    1c98:	93 ff       	sbrs	r25, 3
    1c9a:	81 91       	ld	r24, Z+
    1c9c:	7f 01       	movw	r14, r30
    1c9e:	88 23       	and	r24, r24
    1ca0:	09 f4       	brne	.+2      	; 0x1ca4 <vfprintf+0x3a>
    1ca2:	ba c1       	rjmp	.+884    	; 0x2018 <vfprintf+0x3ae>
    1ca4:	85 32       	cpi	r24, 0x25	; 37
    1ca6:	39 f4       	brne	.+14     	; 0x1cb6 <vfprintf+0x4c>
    1ca8:	93 fd       	sbrc	r25, 3
    1caa:	85 91       	lpm	r24, Z+
    1cac:	93 ff       	sbrs	r25, 3
    1cae:	81 91       	ld	r24, Z+
    1cb0:	7f 01       	movw	r14, r30
    1cb2:	85 32       	cpi	r24, 0x25	; 37
    1cb4:	29 f4       	brne	.+10     	; 0x1cc0 <vfprintf+0x56>
    1cb6:	b6 01       	movw	r22, r12
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <fputc>
    1cbe:	e7 cf       	rjmp	.-50     	; 0x1c8e <vfprintf+0x24>
    1cc0:	91 2c       	mov	r9, r1
    1cc2:	21 2c       	mov	r2, r1
    1cc4:	31 2c       	mov	r3, r1
    1cc6:	ff e1       	ldi	r31, 0x1F	; 31
    1cc8:	f3 15       	cp	r31, r3
    1cca:	d8 f0       	brcs	.+54     	; 0x1d02 <vfprintf+0x98>
    1ccc:	8b 32       	cpi	r24, 0x2B	; 43
    1cce:	79 f0       	breq	.+30     	; 0x1cee <vfprintf+0x84>
    1cd0:	38 f4       	brcc	.+14     	; 0x1ce0 <vfprintf+0x76>
    1cd2:	80 32       	cpi	r24, 0x20	; 32
    1cd4:	79 f0       	breq	.+30     	; 0x1cf4 <vfprintf+0x8a>
    1cd6:	83 32       	cpi	r24, 0x23	; 35
    1cd8:	a1 f4       	brne	.+40     	; 0x1d02 <vfprintf+0x98>
    1cda:	23 2d       	mov	r18, r3
    1cdc:	20 61       	ori	r18, 0x10	; 16
    1cde:	1d c0       	rjmp	.+58     	; 0x1d1a <vfprintf+0xb0>
    1ce0:	8d 32       	cpi	r24, 0x2D	; 45
    1ce2:	61 f0       	breq	.+24     	; 0x1cfc <vfprintf+0x92>
    1ce4:	80 33       	cpi	r24, 0x30	; 48
    1ce6:	69 f4       	brne	.+26     	; 0x1d02 <vfprintf+0x98>
    1ce8:	23 2d       	mov	r18, r3
    1cea:	21 60       	ori	r18, 0x01	; 1
    1cec:	16 c0       	rjmp	.+44     	; 0x1d1a <vfprintf+0xb0>
    1cee:	83 2d       	mov	r24, r3
    1cf0:	82 60       	ori	r24, 0x02	; 2
    1cf2:	38 2e       	mov	r3, r24
    1cf4:	e3 2d       	mov	r30, r3
    1cf6:	e4 60       	ori	r30, 0x04	; 4
    1cf8:	3e 2e       	mov	r3, r30
    1cfa:	2a c0       	rjmp	.+84     	; 0x1d50 <vfprintf+0xe6>
    1cfc:	f3 2d       	mov	r31, r3
    1cfe:	f8 60       	ori	r31, 0x08	; 8
    1d00:	1d c0       	rjmp	.+58     	; 0x1d3c <vfprintf+0xd2>
    1d02:	37 fc       	sbrc	r3, 7
    1d04:	2d c0       	rjmp	.+90     	; 0x1d60 <vfprintf+0xf6>
    1d06:	20 ed       	ldi	r18, 0xD0	; 208
    1d08:	28 0f       	add	r18, r24
    1d0a:	2a 30       	cpi	r18, 0x0A	; 10
    1d0c:	40 f0       	brcs	.+16     	; 0x1d1e <vfprintf+0xb4>
    1d0e:	8e 32       	cpi	r24, 0x2E	; 46
    1d10:	b9 f4       	brne	.+46     	; 0x1d40 <vfprintf+0xd6>
    1d12:	36 fc       	sbrc	r3, 6
    1d14:	81 c1       	rjmp	.+770    	; 0x2018 <vfprintf+0x3ae>
    1d16:	23 2d       	mov	r18, r3
    1d18:	20 64       	ori	r18, 0x40	; 64
    1d1a:	32 2e       	mov	r3, r18
    1d1c:	19 c0       	rjmp	.+50     	; 0x1d50 <vfprintf+0xe6>
    1d1e:	36 fe       	sbrs	r3, 6
    1d20:	06 c0       	rjmp	.+12     	; 0x1d2e <vfprintf+0xc4>
    1d22:	8a e0       	ldi	r24, 0x0A	; 10
    1d24:	98 9e       	mul	r9, r24
    1d26:	20 0d       	add	r18, r0
    1d28:	11 24       	eor	r1, r1
    1d2a:	92 2e       	mov	r9, r18
    1d2c:	11 c0       	rjmp	.+34     	; 0x1d50 <vfprintf+0xe6>
    1d2e:	ea e0       	ldi	r30, 0x0A	; 10
    1d30:	2e 9e       	mul	r2, r30
    1d32:	20 0d       	add	r18, r0
    1d34:	11 24       	eor	r1, r1
    1d36:	22 2e       	mov	r2, r18
    1d38:	f3 2d       	mov	r31, r3
    1d3a:	f0 62       	ori	r31, 0x20	; 32
    1d3c:	3f 2e       	mov	r3, r31
    1d3e:	08 c0       	rjmp	.+16     	; 0x1d50 <vfprintf+0xe6>
    1d40:	8c 36       	cpi	r24, 0x6C	; 108
    1d42:	21 f4       	brne	.+8      	; 0x1d4c <vfprintf+0xe2>
    1d44:	83 2d       	mov	r24, r3
    1d46:	80 68       	ori	r24, 0x80	; 128
    1d48:	38 2e       	mov	r3, r24
    1d4a:	02 c0       	rjmp	.+4      	; 0x1d50 <vfprintf+0xe6>
    1d4c:	88 36       	cpi	r24, 0x68	; 104
    1d4e:	41 f4       	brne	.+16     	; 0x1d60 <vfprintf+0xf6>
    1d50:	f7 01       	movw	r30, r14
    1d52:	93 fd       	sbrc	r25, 3
    1d54:	85 91       	lpm	r24, Z+
    1d56:	93 ff       	sbrs	r25, 3
    1d58:	81 91       	ld	r24, Z+
    1d5a:	7f 01       	movw	r14, r30
    1d5c:	81 11       	cpse	r24, r1
    1d5e:	b3 cf       	rjmp	.-154    	; 0x1cc6 <vfprintf+0x5c>
    1d60:	98 2f       	mov	r25, r24
    1d62:	9f 7d       	andi	r25, 0xDF	; 223
    1d64:	95 54       	subi	r25, 0x45	; 69
    1d66:	93 30       	cpi	r25, 0x03	; 3
    1d68:	28 f4       	brcc	.+10     	; 0x1d74 <vfprintf+0x10a>
    1d6a:	0c 5f       	subi	r16, 0xFC	; 252
    1d6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d6e:	9f e3       	ldi	r25, 0x3F	; 63
    1d70:	99 83       	std	Y+1, r25	; 0x01
    1d72:	0d c0       	rjmp	.+26     	; 0x1d8e <vfprintf+0x124>
    1d74:	83 36       	cpi	r24, 0x63	; 99
    1d76:	31 f0       	breq	.+12     	; 0x1d84 <vfprintf+0x11a>
    1d78:	83 37       	cpi	r24, 0x73	; 115
    1d7a:	71 f0       	breq	.+28     	; 0x1d98 <vfprintf+0x12e>
    1d7c:	83 35       	cpi	r24, 0x53	; 83
    1d7e:	09 f0       	breq	.+2      	; 0x1d82 <vfprintf+0x118>
    1d80:	59 c0       	rjmp	.+178    	; 0x1e34 <vfprintf+0x1ca>
    1d82:	21 c0       	rjmp	.+66     	; 0x1dc6 <vfprintf+0x15c>
    1d84:	f8 01       	movw	r30, r16
    1d86:	80 81       	ld	r24, Z
    1d88:	89 83       	std	Y+1, r24	; 0x01
    1d8a:	0e 5f       	subi	r16, 0xFE	; 254
    1d8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d8e:	88 24       	eor	r8, r8
    1d90:	83 94       	inc	r8
    1d92:	91 2c       	mov	r9, r1
    1d94:	53 01       	movw	r10, r6
    1d96:	13 c0       	rjmp	.+38     	; 0x1dbe <vfprintf+0x154>
    1d98:	28 01       	movw	r4, r16
    1d9a:	f2 e0       	ldi	r31, 0x02	; 2
    1d9c:	4f 0e       	add	r4, r31
    1d9e:	51 1c       	adc	r5, r1
    1da0:	f8 01       	movw	r30, r16
    1da2:	a0 80       	ld	r10, Z
    1da4:	b1 80       	ldd	r11, Z+1	; 0x01
    1da6:	36 fe       	sbrs	r3, 6
    1da8:	03 c0       	rjmp	.+6      	; 0x1db0 <vfprintf+0x146>
    1daa:	69 2d       	mov	r22, r9
    1dac:	70 e0       	ldi	r23, 0x00	; 0
    1dae:	02 c0       	rjmp	.+4      	; 0x1db4 <vfprintf+0x14a>
    1db0:	6f ef       	ldi	r22, 0xFF	; 255
    1db2:	7f ef       	ldi	r23, 0xFF	; 255
    1db4:	c5 01       	movw	r24, r10
    1db6:	0e 94 21 10 	call	0x2042	; 0x2042 <strnlen>
    1dba:	4c 01       	movw	r8, r24
    1dbc:	82 01       	movw	r16, r4
    1dbe:	f3 2d       	mov	r31, r3
    1dc0:	ff 77       	andi	r31, 0x7F	; 127
    1dc2:	3f 2e       	mov	r3, r31
    1dc4:	16 c0       	rjmp	.+44     	; 0x1df2 <vfprintf+0x188>
    1dc6:	28 01       	movw	r4, r16
    1dc8:	22 e0       	ldi	r18, 0x02	; 2
    1dca:	42 0e       	add	r4, r18
    1dcc:	51 1c       	adc	r5, r1
    1dce:	f8 01       	movw	r30, r16
    1dd0:	a0 80       	ld	r10, Z
    1dd2:	b1 80       	ldd	r11, Z+1	; 0x01
    1dd4:	36 fe       	sbrs	r3, 6
    1dd6:	03 c0       	rjmp	.+6      	; 0x1dde <vfprintf+0x174>
    1dd8:	69 2d       	mov	r22, r9
    1dda:	70 e0       	ldi	r23, 0x00	; 0
    1ddc:	02 c0       	rjmp	.+4      	; 0x1de2 <vfprintf+0x178>
    1dde:	6f ef       	ldi	r22, 0xFF	; 255
    1de0:	7f ef       	ldi	r23, 0xFF	; 255
    1de2:	c5 01       	movw	r24, r10
    1de4:	0e 94 16 10 	call	0x202c	; 0x202c <strnlen_P>
    1de8:	4c 01       	movw	r8, r24
    1dea:	f3 2d       	mov	r31, r3
    1dec:	f0 68       	ori	r31, 0x80	; 128
    1dee:	3f 2e       	mov	r3, r31
    1df0:	82 01       	movw	r16, r4
    1df2:	33 fc       	sbrc	r3, 3
    1df4:	1b c0       	rjmp	.+54     	; 0x1e2c <vfprintf+0x1c2>
    1df6:	82 2d       	mov	r24, r2
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	88 16       	cp	r8, r24
    1dfc:	99 06       	cpc	r9, r25
    1dfe:	b0 f4       	brcc	.+44     	; 0x1e2c <vfprintf+0x1c2>
    1e00:	b6 01       	movw	r22, r12
    1e02:	80 e2       	ldi	r24, 0x20	; 32
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <fputc>
    1e0a:	2a 94       	dec	r2
    1e0c:	f4 cf       	rjmp	.-24     	; 0x1df6 <vfprintf+0x18c>
    1e0e:	f5 01       	movw	r30, r10
    1e10:	37 fc       	sbrc	r3, 7
    1e12:	85 91       	lpm	r24, Z+
    1e14:	37 fe       	sbrs	r3, 7
    1e16:	81 91       	ld	r24, Z+
    1e18:	5f 01       	movw	r10, r30
    1e1a:	b6 01       	movw	r22, r12
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <fputc>
    1e22:	21 10       	cpse	r2, r1
    1e24:	2a 94       	dec	r2
    1e26:	21 e0       	ldi	r18, 0x01	; 1
    1e28:	82 1a       	sub	r8, r18
    1e2a:	91 08       	sbc	r9, r1
    1e2c:	81 14       	cp	r8, r1
    1e2e:	91 04       	cpc	r9, r1
    1e30:	71 f7       	brne	.-36     	; 0x1e0e <vfprintf+0x1a4>
    1e32:	e8 c0       	rjmp	.+464    	; 0x2004 <vfprintf+0x39a>
    1e34:	84 36       	cpi	r24, 0x64	; 100
    1e36:	11 f0       	breq	.+4      	; 0x1e3c <vfprintf+0x1d2>
    1e38:	89 36       	cpi	r24, 0x69	; 105
    1e3a:	41 f5       	brne	.+80     	; 0x1e8c <vfprintf+0x222>
    1e3c:	f8 01       	movw	r30, r16
    1e3e:	37 fe       	sbrs	r3, 7
    1e40:	07 c0       	rjmp	.+14     	; 0x1e50 <vfprintf+0x1e6>
    1e42:	60 81       	ld	r22, Z
    1e44:	71 81       	ldd	r23, Z+1	; 0x01
    1e46:	82 81       	ldd	r24, Z+2	; 0x02
    1e48:	93 81       	ldd	r25, Z+3	; 0x03
    1e4a:	0c 5f       	subi	r16, 0xFC	; 252
    1e4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e4e:	08 c0       	rjmp	.+16     	; 0x1e60 <vfprintf+0x1f6>
    1e50:	60 81       	ld	r22, Z
    1e52:	71 81       	ldd	r23, Z+1	; 0x01
    1e54:	07 2e       	mov	r0, r23
    1e56:	00 0c       	add	r0, r0
    1e58:	88 0b       	sbc	r24, r24
    1e5a:	99 0b       	sbc	r25, r25
    1e5c:	0e 5f       	subi	r16, 0xFE	; 254
    1e5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e60:	f3 2d       	mov	r31, r3
    1e62:	ff 76       	andi	r31, 0x6F	; 111
    1e64:	3f 2e       	mov	r3, r31
    1e66:	97 ff       	sbrs	r25, 7
    1e68:	09 c0       	rjmp	.+18     	; 0x1e7c <vfprintf+0x212>
    1e6a:	90 95       	com	r25
    1e6c:	80 95       	com	r24
    1e6e:	70 95       	com	r23
    1e70:	61 95       	neg	r22
    1e72:	7f 4f       	sbci	r23, 0xFF	; 255
    1e74:	8f 4f       	sbci	r24, 0xFF	; 255
    1e76:	9f 4f       	sbci	r25, 0xFF	; 255
    1e78:	f0 68       	ori	r31, 0x80	; 128
    1e7a:	3f 2e       	mov	r3, r31
    1e7c:	2a e0       	ldi	r18, 0x0A	; 10
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	a3 01       	movw	r20, r6
    1e82:	0e 94 2c 10 	call	0x2058	; 0x2058 <__ultoa_invert>
    1e86:	88 2e       	mov	r8, r24
    1e88:	86 18       	sub	r8, r6
    1e8a:	45 c0       	rjmp	.+138    	; 0x1f16 <vfprintf+0x2ac>
    1e8c:	85 37       	cpi	r24, 0x75	; 117
    1e8e:	31 f4       	brne	.+12     	; 0x1e9c <vfprintf+0x232>
    1e90:	23 2d       	mov	r18, r3
    1e92:	2f 7e       	andi	r18, 0xEF	; 239
    1e94:	b2 2e       	mov	r11, r18
    1e96:	2a e0       	ldi	r18, 0x0A	; 10
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	25 c0       	rjmp	.+74     	; 0x1ee6 <vfprintf+0x27c>
    1e9c:	93 2d       	mov	r25, r3
    1e9e:	99 7f       	andi	r25, 0xF9	; 249
    1ea0:	b9 2e       	mov	r11, r25
    1ea2:	8f 36       	cpi	r24, 0x6F	; 111
    1ea4:	c1 f0       	breq	.+48     	; 0x1ed6 <vfprintf+0x26c>
    1ea6:	18 f4       	brcc	.+6      	; 0x1eae <vfprintf+0x244>
    1ea8:	88 35       	cpi	r24, 0x58	; 88
    1eaa:	79 f0       	breq	.+30     	; 0x1eca <vfprintf+0x260>
    1eac:	b5 c0       	rjmp	.+362    	; 0x2018 <vfprintf+0x3ae>
    1eae:	80 37       	cpi	r24, 0x70	; 112
    1eb0:	19 f0       	breq	.+6      	; 0x1eb8 <vfprintf+0x24e>
    1eb2:	88 37       	cpi	r24, 0x78	; 120
    1eb4:	21 f0       	breq	.+8      	; 0x1ebe <vfprintf+0x254>
    1eb6:	b0 c0       	rjmp	.+352    	; 0x2018 <vfprintf+0x3ae>
    1eb8:	e9 2f       	mov	r30, r25
    1eba:	e0 61       	ori	r30, 0x10	; 16
    1ebc:	be 2e       	mov	r11, r30
    1ebe:	b4 fe       	sbrs	r11, 4
    1ec0:	0d c0       	rjmp	.+26     	; 0x1edc <vfprintf+0x272>
    1ec2:	fb 2d       	mov	r31, r11
    1ec4:	f4 60       	ori	r31, 0x04	; 4
    1ec6:	bf 2e       	mov	r11, r31
    1ec8:	09 c0       	rjmp	.+18     	; 0x1edc <vfprintf+0x272>
    1eca:	34 fe       	sbrs	r3, 4
    1ecc:	0a c0       	rjmp	.+20     	; 0x1ee2 <vfprintf+0x278>
    1ece:	29 2f       	mov	r18, r25
    1ed0:	26 60       	ori	r18, 0x06	; 6
    1ed2:	b2 2e       	mov	r11, r18
    1ed4:	06 c0       	rjmp	.+12     	; 0x1ee2 <vfprintf+0x278>
    1ed6:	28 e0       	ldi	r18, 0x08	; 8
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	05 c0       	rjmp	.+10     	; 0x1ee6 <vfprintf+0x27c>
    1edc:	20 e1       	ldi	r18, 0x10	; 16
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	02 c0       	rjmp	.+4      	; 0x1ee6 <vfprintf+0x27c>
    1ee2:	20 e1       	ldi	r18, 0x10	; 16
    1ee4:	32 e0       	ldi	r19, 0x02	; 2
    1ee6:	f8 01       	movw	r30, r16
    1ee8:	b7 fe       	sbrs	r11, 7
    1eea:	07 c0       	rjmp	.+14     	; 0x1efa <vfprintf+0x290>
    1eec:	60 81       	ld	r22, Z
    1eee:	71 81       	ldd	r23, Z+1	; 0x01
    1ef0:	82 81       	ldd	r24, Z+2	; 0x02
    1ef2:	93 81       	ldd	r25, Z+3	; 0x03
    1ef4:	0c 5f       	subi	r16, 0xFC	; 252
    1ef6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ef8:	06 c0       	rjmp	.+12     	; 0x1f06 <vfprintf+0x29c>
    1efa:	60 81       	ld	r22, Z
    1efc:	71 81       	ldd	r23, Z+1	; 0x01
    1efe:	80 e0       	ldi	r24, 0x00	; 0
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	0e 5f       	subi	r16, 0xFE	; 254
    1f04:	1f 4f       	sbci	r17, 0xFF	; 255
    1f06:	a3 01       	movw	r20, r6
    1f08:	0e 94 2c 10 	call	0x2058	; 0x2058 <__ultoa_invert>
    1f0c:	88 2e       	mov	r8, r24
    1f0e:	86 18       	sub	r8, r6
    1f10:	fb 2d       	mov	r31, r11
    1f12:	ff 77       	andi	r31, 0x7F	; 127
    1f14:	3f 2e       	mov	r3, r31
    1f16:	36 fe       	sbrs	r3, 6
    1f18:	0d c0       	rjmp	.+26     	; 0x1f34 <vfprintf+0x2ca>
    1f1a:	23 2d       	mov	r18, r3
    1f1c:	2e 7f       	andi	r18, 0xFE	; 254
    1f1e:	a2 2e       	mov	r10, r18
    1f20:	89 14       	cp	r8, r9
    1f22:	58 f4       	brcc	.+22     	; 0x1f3a <vfprintf+0x2d0>
    1f24:	34 fe       	sbrs	r3, 4
    1f26:	0b c0       	rjmp	.+22     	; 0x1f3e <vfprintf+0x2d4>
    1f28:	32 fc       	sbrc	r3, 2
    1f2a:	09 c0       	rjmp	.+18     	; 0x1f3e <vfprintf+0x2d4>
    1f2c:	83 2d       	mov	r24, r3
    1f2e:	8e 7e       	andi	r24, 0xEE	; 238
    1f30:	a8 2e       	mov	r10, r24
    1f32:	05 c0       	rjmp	.+10     	; 0x1f3e <vfprintf+0x2d4>
    1f34:	b8 2c       	mov	r11, r8
    1f36:	a3 2c       	mov	r10, r3
    1f38:	03 c0       	rjmp	.+6      	; 0x1f40 <vfprintf+0x2d6>
    1f3a:	b8 2c       	mov	r11, r8
    1f3c:	01 c0       	rjmp	.+2      	; 0x1f40 <vfprintf+0x2d6>
    1f3e:	b9 2c       	mov	r11, r9
    1f40:	a4 fe       	sbrs	r10, 4
    1f42:	0f c0       	rjmp	.+30     	; 0x1f62 <vfprintf+0x2f8>
    1f44:	fe 01       	movw	r30, r28
    1f46:	e8 0d       	add	r30, r8
    1f48:	f1 1d       	adc	r31, r1
    1f4a:	80 81       	ld	r24, Z
    1f4c:	80 33       	cpi	r24, 0x30	; 48
    1f4e:	21 f4       	brne	.+8      	; 0x1f58 <vfprintf+0x2ee>
    1f50:	9a 2d       	mov	r25, r10
    1f52:	99 7e       	andi	r25, 0xE9	; 233
    1f54:	a9 2e       	mov	r10, r25
    1f56:	09 c0       	rjmp	.+18     	; 0x1f6a <vfprintf+0x300>
    1f58:	a2 fe       	sbrs	r10, 2
    1f5a:	06 c0       	rjmp	.+12     	; 0x1f68 <vfprintf+0x2fe>
    1f5c:	b3 94       	inc	r11
    1f5e:	b3 94       	inc	r11
    1f60:	04 c0       	rjmp	.+8      	; 0x1f6a <vfprintf+0x300>
    1f62:	8a 2d       	mov	r24, r10
    1f64:	86 78       	andi	r24, 0x86	; 134
    1f66:	09 f0       	breq	.+2      	; 0x1f6a <vfprintf+0x300>
    1f68:	b3 94       	inc	r11
    1f6a:	a3 fc       	sbrc	r10, 3
    1f6c:	11 c0       	rjmp	.+34     	; 0x1f90 <vfprintf+0x326>
    1f6e:	a0 fe       	sbrs	r10, 0
    1f70:	06 c0       	rjmp	.+12     	; 0x1f7e <vfprintf+0x314>
    1f72:	b2 14       	cp	r11, r2
    1f74:	88 f4       	brcc	.+34     	; 0x1f98 <vfprintf+0x32e>
    1f76:	28 0c       	add	r2, r8
    1f78:	92 2c       	mov	r9, r2
    1f7a:	9b 18       	sub	r9, r11
    1f7c:	0e c0       	rjmp	.+28     	; 0x1f9a <vfprintf+0x330>
    1f7e:	b2 14       	cp	r11, r2
    1f80:	60 f4       	brcc	.+24     	; 0x1f9a <vfprintf+0x330>
    1f82:	b6 01       	movw	r22, r12
    1f84:	80 e2       	ldi	r24, 0x20	; 32
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <fputc>
    1f8c:	b3 94       	inc	r11
    1f8e:	f7 cf       	rjmp	.-18     	; 0x1f7e <vfprintf+0x314>
    1f90:	b2 14       	cp	r11, r2
    1f92:	18 f4       	brcc	.+6      	; 0x1f9a <vfprintf+0x330>
    1f94:	2b 18       	sub	r2, r11
    1f96:	02 c0       	rjmp	.+4      	; 0x1f9c <vfprintf+0x332>
    1f98:	98 2c       	mov	r9, r8
    1f9a:	21 2c       	mov	r2, r1
    1f9c:	a4 fe       	sbrs	r10, 4
    1f9e:	10 c0       	rjmp	.+32     	; 0x1fc0 <vfprintf+0x356>
    1fa0:	b6 01       	movw	r22, r12
    1fa2:	80 e3       	ldi	r24, 0x30	; 48
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <fputc>
    1faa:	a2 fe       	sbrs	r10, 2
    1fac:	17 c0       	rjmp	.+46     	; 0x1fdc <vfprintf+0x372>
    1fae:	a1 fc       	sbrc	r10, 1
    1fb0:	03 c0       	rjmp	.+6      	; 0x1fb8 <vfprintf+0x34e>
    1fb2:	88 e7       	ldi	r24, 0x78	; 120
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	02 c0       	rjmp	.+4      	; 0x1fbc <vfprintf+0x352>
    1fb8:	88 e5       	ldi	r24, 0x58	; 88
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	b6 01       	movw	r22, r12
    1fbe:	0c c0       	rjmp	.+24     	; 0x1fd8 <vfprintf+0x36e>
    1fc0:	8a 2d       	mov	r24, r10
    1fc2:	86 78       	andi	r24, 0x86	; 134
    1fc4:	59 f0       	breq	.+22     	; 0x1fdc <vfprintf+0x372>
    1fc6:	a1 fe       	sbrs	r10, 1
    1fc8:	02 c0       	rjmp	.+4      	; 0x1fce <vfprintf+0x364>
    1fca:	8b e2       	ldi	r24, 0x2B	; 43
    1fcc:	01 c0       	rjmp	.+2      	; 0x1fd0 <vfprintf+0x366>
    1fce:	80 e2       	ldi	r24, 0x20	; 32
    1fd0:	a7 fc       	sbrc	r10, 7
    1fd2:	8d e2       	ldi	r24, 0x2D	; 45
    1fd4:	b6 01       	movw	r22, r12
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <fputc>
    1fdc:	89 14       	cp	r8, r9
    1fde:	38 f4       	brcc	.+14     	; 0x1fee <vfprintf+0x384>
    1fe0:	b6 01       	movw	r22, r12
    1fe2:	80 e3       	ldi	r24, 0x30	; 48
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <fputc>
    1fea:	9a 94       	dec	r9
    1fec:	f7 cf       	rjmp	.-18     	; 0x1fdc <vfprintf+0x372>
    1fee:	8a 94       	dec	r8
    1ff0:	f3 01       	movw	r30, r6
    1ff2:	e8 0d       	add	r30, r8
    1ff4:	f1 1d       	adc	r31, r1
    1ff6:	80 81       	ld	r24, Z
    1ff8:	b6 01       	movw	r22, r12
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <fputc>
    2000:	81 10       	cpse	r8, r1
    2002:	f5 cf       	rjmp	.-22     	; 0x1fee <vfprintf+0x384>
    2004:	22 20       	and	r2, r2
    2006:	09 f4       	brne	.+2      	; 0x200a <vfprintf+0x3a0>
    2008:	42 ce       	rjmp	.-892    	; 0x1c8e <vfprintf+0x24>
    200a:	b6 01       	movw	r22, r12
    200c:	80 e2       	ldi	r24, 0x20	; 32
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <fputc>
    2014:	2a 94       	dec	r2
    2016:	f6 cf       	rjmp	.-20     	; 0x2004 <vfprintf+0x39a>
    2018:	f6 01       	movw	r30, r12
    201a:	86 81       	ldd	r24, Z+6	; 0x06
    201c:	97 81       	ldd	r25, Z+7	; 0x07
    201e:	02 c0       	rjmp	.+4      	; 0x2024 <vfprintf+0x3ba>
    2020:	8f ef       	ldi	r24, 0xFF	; 255
    2022:	9f ef       	ldi	r25, 0xFF	; 255
    2024:	2b 96       	adiw	r28, 0x0b	; 11
    2026:	e2 e1       	ldi	r30, 0x12	; 18
    2028:	0c 94 b9 10 	jmp	0x2172	; 0x2172 <__epilogue_restores__>

0000202c <strnlen_P>:
    202c:	fc 01       	movw	r30, r24
    202e:	05 90       	lpm	r0, Z+
    2030:	61 50       	subi	r22, 0x01	; 1
    2032:	70 40       	sbci	r23, 0x00	; 0
    2034:	01 10       	cpse	r0, r1
    2036:	d8 f7       	brcc	.-10     	; 0x202e <strnlen_P+0x2>
    2038:	80 95       	com	r24
    203a:	90 95       	com	r25
    203c:	8e 0f       	add	r24, r30
    203e:	9f 1f       	adc	r25, r31
    2040:	08 95       	ret

00002042 <strnlen>:
    2042:	fc 01       	movw	r30, r24
    2044:	61 50       	subi	r22, 0x01	; 1
    2046:	70 40       	sbci	r23, 0x00	; 0
    2048:	01 90       	ld	r0, Z+
    204a:	01 10       	cpse	r0, r1
    204c:	d8 f7       	brcc	.-10     	; 0x2044 <strnlen+0x2>
    204e:	80 95       	com	r24
    2050:	90 95       	com	r25
    2052:	8e 0f       	add	r24, r30
    2054:	9f 1f       	adc	r25, r31
    2056:	08 95       	ret

00002058 <__ultoa_invert>:
    2058:	fa 01       	movw	r30, r20
    205a:	aa 27       	eor	r26, r26
    205c:	28 30       	cpi	r18, 0x08	; 8
    205e:	51 f1       	breq	.+84     	; 0x20b4 <__ultoa_invert+0x5c>
    2060:	20 31       	cpi	r18, 0x10	; 16
    2062:	81 f1       	breq	.+96     	; 0x20c4 <__ultoa_invert+0x6c>
    2064:	e8 94       	clt
    2066:	6f 93       	push	r22
    2068:	6e 7f       	andi	r22, 0xFE	; 254
    206a:	6e 5f       	subi	r22, 0xFE	; 254
    206c:	7f 4f       	sbci	r23, 0xFF	; 255
    206e:	8f 4f       	sbci	r24, 0xFF	; 255
    2070:	9f 4f       	sbci	r25, 0xFF	; 255
    2072:	af 4f       	sbci	r26, 0xFF	; 255
    2074:	b1 e0       	ldi	r27, 0x01	; 1
    2076:	3e d0       	rcall	.+124    	; 0x20f4 <__ultoa_invert+0x9c>
    2078:	b4 e0       	ldi	r27, 0x04	; 4
    207a:	3c d0       	rcall	.+120    	; 0x20f4 <__ultoa_invert+0x9c>
    207c:	67 0f       	add	r22, r23
    207e:	78 1f       	adc	r23, r24
    2080:	89 1f       	adc	r24, r25
    2082:	9a 1f       	adc	r25, r26
    2084:	a1 1d       	adc	r26, r1
    2086:	68 0f       	add	r22, r24
    2088:	79 1f       	adc	r23, r25
    208a:	8a 1f       	adc	r24, r26
    208c:	91 1d       	adc	r25, r1
    208e:	a1 1d       	adc	r26, r1
    2090:	6a 0f       	add	r22, r26
    2092:	71 1d       	adc	r23, r1
    2094:	81 1d       	adc	r24, r1
    2096:	91 1d       	adc	r25, r1
    2098:	a1 1d       	adc	r26, r1
    209a:	20 d0       	rcall	.+64     	; 0x20dc <__ultoa_invert+0x84>
    209c:	09 f4       	brne	.+2      	; 0x20a0 <__ultoa_invert+0x48>
    209e:	68 94       	set
    20a0:	3f 91       	pop	r19
    20a2:	2a e0       	ldi	r18, 0x0A	; 10
    20a4:	26 9f       	mul	r18, r22
    20a6:	11 24       	eor	r1, r1
    20a8:	30 19       	sub	r19, r0
    20aa:	30 5d       	subi	r19, 0xD0	; 208
    20ac:	31 93       	st	Z+, r19
    20ae:	de f6       	brtc	.-74     	; 0x2066 <__ultoa_invert+0xe>
    20b0:	cf 01       	movw	r24, r30
    20b2:	08 95       	ret
    20b4:	46 2f       	mov	r20, r22
    20b6:	47 70       	andi	r20, 0x07	; 7
    20b8:	40 5d       	subi	r20, 0xD0	; 208
    20ba:	41 93       	st	Z+, r20
    20bc:	b3 e0       	ldi	r27, 0x03	; 3
    20be:	0f d0       	rcall	.+30     	; 0x20de <__ultoa_invert+0x86>
    20c0:	c9 f7       	brne	.-14     	; 0x20b4 <__ultoa_invert+0x5c>
    20c2:	f6 cf       	rjmp	.-20     	; 0x20b0 <__ultoa_invert+0x58>
    20c4:	46 2f       	mov	r20, r22
    20c6:	4f 70       	andi	r20, 0x0F	; 15
    20c8:	40 5d       	subi	r20, 0xD0	; 208
    20ca:	4a 33       	cpi	r20, 0x3A	; 58
    20cc:	18 f0       	brcs	.+6      	; 0x20d4 <__ultoa_invert+0x7c>
    20ce:	49 5d       	subi	r20, 0xD9	; 217
    20d0:	31 fd       	sbrc	r19, 1
    20d2:	40 52       	subi	r20, 0x20	; 32
    20d4:	41 93       	st	Z+, r20
    20d6:	02 d0       	rcall	.+4      	; 0x20dc <__ultoa_invert+0x84>
    20d8:	a9 f7       	brne	.-22     	; 0x20c4 <__ultoa_invert+0x6c>
    20da:	ea cf       	rjmp	.-44     	; 0x20b0 <__ultoa_invert+0x58>
    20dc:	b4 e0       	ldi	r27, 0x04	; 4
    20de:	a6 95       	lsr	r26
    20e0:	97 95       	ror	r25
    20e2:	87 95       	ror	r24
    20e4:	77 95       	ror	r23
    20e6:	67 95       	ror	r22
    20e8:	ba 95       	dec	r27
    20ea:	c9 f7       	brne	.-14     	; 0x20de <__ultoa_invert+0x86>
    20ec:	00 97       	sbiw	r24, 0x00	; 0
    20ee:	61 05       	cpc	r22, r1
    20f0:	71 05       	cpc	r23, r1
    20f2:	08 95       	ret
    20f4:	9b 01       	movw	r18, r22
    20f6:	ac 01       	movw	r20, r24
    20f8:	0a 2e       	mov	r0, r26
    20fa:	06 94       	lsr	r0
    20fc:	57 95       	ror	r21
    20fe:	47 95       	ror	r20
    2100:	37 95       	ror	r19
    2102:	27 95       	ror	r18
    2104:	ba 95       	dec	r27
    2106:	c9 f7       	brne	.-14     	; 0x20fa <__ultoa_invert+0xa2>
    2108:	62 0f       	add	r22, r18
    210a:	73 1f       	adc	r23, r19
    210c:	84 1f       	adc	r24, r20
    210e:	95 1f       	adc	r25, r21
    2110:	a0 1d       	adc	r26, r0
    2112:	08 95       	ret

00002114 <__muluhisi3>:
    2114:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__umulhisi3>
    2118:	a5 9f       	mul	r26, r21
    211a:	90 0d       	add	r25, r0
    211c:	b4 9f       	mul	r27, r20
    211e:	90 0d       	add	r25, r0
    2120:	a4 9f       	mul	r26, r20
    2122:	80 0d       	add	r24, r0
    2124:	91 1d       	adc	r25, r1
    2126:	11 24       	eor	r1, r1
    2128:	08 95       	ret

0000212a <__mulshisi3>:
    212a:	b7 ff       	sbrs	r27, 7
    212c:	0c 94 8a 10 	jmp	0x2114	; 0x2114 <__muluhisi3>

00002130 <__mulohisi3>:
    2130:	0e 94 8a 10 	call	0x2114	; 0x2114 <__muluhisi3>
    2134:	82 1b       	sub	r24, r18
    2136:	93 0b       	sbc	r25, r19
    2138:	08 95       	ret

0000213a <__prologue_saves__>:
    213a:	2f 92       	push	r2
    213c:	3f 92       	push	r3
    213e:	4f 92       	push	r4
    2140:	5f 92       	push	r5
    2142:	6f 92       	push	r6
    2144:	7f 92       	push	r7
    2146:	8f 92       	push	r8
    2148:	9f 92       	push	r9
    214a:	af 92       	push	r10
    214c:	bf 92       	push	r11
    214e:	cf 92       	push	r12
    2150:	df 92       	push	r13
    2152:	ef 92       	push	r14
    2154:	ff 92       	push	r15
    2156:	0f 93       	push	r16
    2158:	1f 93       	push	r17
    215a:	cf 93       	push	r28
    215c:	df 93       	push	r29
    215e:	cd b7       	in	r28, 0x3d	; 61
    2160:	de b7       	in	r29, 0x3e	; 62
    2162:	ca 1b       	sub	r28, r26
    2164:	db 0b       	sbc	r29, r27
    2166:	0f b6       	in	r0, 0x3f	; 63
    2168:	f8 94       	cli
    216a:	de bf       	out	0x3e, r29	; 62
    216c:	0f be       	out	0x3f, r0	; 63
    216e:	cd bf       	out	0x3d, r28	; 61
    2170:	09 94       	ijmp

00002172 <__epilogue_restores__>:
    2172:	2a 88       	ldd	r2, Y+18	; 0x12
    2174:	39 88       	ldd	r3, Y+17	; 0x11
    2176:	48 88       	ldd	r4, Y+16	; 0x10
    2178:	5f 84       	ldd	r5, Y+15	; 0x0f
    217a:	6e 84       	ldd	r6, Y+14	; 0x0e
    217c:	7d 84       	ldd	r7, Y+13	; 0x0d
    217e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2180:	9b 84       	ldd	r9, Y+11	; 0x0b
    2182:	aa 84       	ldd	r10, Y+10	; 0x0a
    2184:	b9 84       	ldd	r11, Y+9	; 0x09
    2186:	c8 84       	ldd	r12, Y+8	; 0x08
    2188:	df 80       	ldd	r13, Y+7	; 0x07
    218a:	ee 80       	ldd	r14, Y+6	; 0x06
    218c:	fd 80       	ldd	r15, Y+5	; 0x05
    218e:	0c 81       	ldd	r16, Y+4	; 0x04
    2190:	1b 81       	ldd	r17, Y+3	; 0x03
    2192:	aa 81       	ldd	r26, Y+2	; 0x02
    2194:	b9 81       	ldd	r27, Y+1	; 0x01
    2196:	ce 0f       	add	r28, r30
    2198:	d1 1d       	adc	r29, r1
    219a:	0f b6       	in	r0, 0x3f	; 63
    219c:	f8 94       	cli
    219e:	de bf       	out	0x3e, r29	; 62
    21a0:	0f be       	out	0x3f, r0	; 63
    21a2:	cd bf       	out	0x3d, r28	; 61
    21a4:	ed 01       	movw	r28, r26
    21a6:	08 95       	ret

000021a8 <_exit>:
    21a8:	f8 94       	cli

000021aa <__stop_program>:
    21aa:	ff cf       	rjmp	.-2      	; 0x21aa <__stop_program>
