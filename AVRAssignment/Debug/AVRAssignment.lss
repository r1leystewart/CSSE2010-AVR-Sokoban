
AVRAssignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000196  00800100  000024f6  0000258a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b9  00800296  00800296  00002720  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002720  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000277c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a0  00000000  00000000  000027bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003b17  00000000  00000000  00002b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001702  00000000  00000000  00006673  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002227  00000000  00000000  00007d75  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009c0  00000000  00000000  00009f9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f3b  00000000  00000000  0000a95c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000252d  00000000  00000000  0000b897  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000398  00000000  00000000  0000ddc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__ctors_end>
       4:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
       8:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
       c:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      10:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      14:	0c 94 05 02 	jmp	0x40a	; 0x40a <__vector_5>
      18:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      1c:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      20:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      24:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      28:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      2c:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      30:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      34:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      38:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      3c:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      40:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__vector_16>
      44:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      48:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      4c:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      50:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__vector_20>
      54:	0c 94 65 0a 	jmp	0x14ca	; 0x14ca <__vector_21>
      58:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      5c:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      60:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      64:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      68:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      6c:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      70:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      74:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>
      78:	0c 94 c2 01 	jmp	0x384	; 0x384 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	43 61       	ori	r20, 0x13	; 19
      7e:	6e 6e       	ori	r22, 0xEE	; 238
      80:	6f 74       	andi	r22, 0x4F	; 79
      82:	20 73       	andi	r18, 0x30	; 48
      84:	74 61       	ori	r23, 0x14	; 20
      86:	63 6b       	ori	r22, 0xB3	; 179
      88:	20 62       	ori	r18, 0x20	; 32
      8a:	6f 78       	andi	r22, 0x8F	; 143
      8c:	65 73       	andi	r22, 0x35	; 53
	...

0000008f <__c.2461>:
      8f:	43 61 6e 6e 6f 74 20 70 75 73 68 20 62 6f 78 20     Cannot push box 
      9f:	6f 6e 74 6f 20 77 61 6c 6c 00                       onto wall.

000000a9 <__c.2459>:
      a9:	54 68 65 72 65 20 69 73 20 61 20 77 61 6c 6c 20     There is a wall 
      b9:	69 6e 20 74 68 65 20 77 61 79 00                    in the way.

000000c4 <__c.2457>:
      c4:	57 61 6c 6c 20 68 69 74 00                          Wall hit.

000000cd <__c.2455>:
      cd:	50 6c 61 79 65 72 20 68 69 74 20 61 20 77 61 6c     Player hit a wal
      dd:	6c 00                                               l.

000000df <__c.2649>:
      df:	6f 72 20 70 72 65 73 73 20 27 6e 27 2f 27 4e 27     or press 'n'/'N'
      ef:	20 74 6f 20 70 72 6f 67 72 65 73 73 20 74 6f 20      to progress to 
      ff:	6c 65 76 65 6c 20 32 00                             level 2.

00000107 <__c.2647>:
     107:	50 72 65 73 73 20 27 72 27 2f 27 52 27 20 74 6f     Press 'r'/'R' to
     117:	20 72 65 73 74 61 72 74 2c 20 27 65 27 2f 27 45      restart, 'e'/'E
     127:	27 20 74 6f 20 65 78 69 74 2c 00                    ' to exit,.

00000132 <__c.2645>:
     132:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

0000013c <__c.2604>:
     13c:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 50 72     CSSE2010/7201 Pr
     14c:	6f 6a 65 63 74 20 62 79 20 52 69 6c 65 79 20 53     oject by Riley S
     15c:	74 65 77 61 72 74 20 2d 20 34 38 38 32 38 36 36     tewart - 4882866
     16c:	32 00                                               2.

0000016e <title_data>:
     16e:	60 38 1f 3f 3f 63 7e fe 60 bc b1 b1 61 66 c3 c0     `8.??c~.`...af..
     17e:	60 b6 3f bf 61 7c c3 fe 60 b3 b1 b1 61 66 c3 06     `.?.a|..`...af..
     18e:	e0 b1 31 3f 3f 63 7e fe                             ..1??c~.

00000196 <anim_data>:
     196:	f0 f0 00 f0 f0 f0 f0 00 f0 00 00 f0 00 00 f0 00     ................
     1a6:	f0 00 00 f0 00 00 f0 00 f0 f0 f0 f0 00 f0 f0 00     ................
	...
     1be:	f0 f0 f0 f0 f0 00 00 00 f0 00 00 00 f0 00 00 00     ................
     1ce:	f0 00 00 00 f0 00 00 00 f0 f0 f0 f0 f0 00 00 00     ................
	...
     1e6:	f0 f0 f0 f0 f0 f0 f0 00 00 00 00 f0 00 00 00 00     ................
     1f6:	00 00 f0 00 f0 00 00 00 f0 f0 00 00 00 f0 00 00     ................
	...
     20e:	f0 f0 f0 f0 f0 00 00 00 f0 00 00 00 f0 00 00 00     ................
     21e:	f0 00 00 00 f0 00 00 00 f0 f0 f0 f0 f0 00 00 00     ................
	...
     236:	f0 f0 f0 f0 f0 f0 f0 00 f0 00 00 f0 00 00 00 00     ................
     246:	f0 00 00 f0 00 00 00 00 f0 f0 f0 f0 00 00 00 00     ................
	...
     25e:	f0 f0 f0 00 f0 00 00 00 f0 00 f0 00 f0 00 00 00     ................
     26e:	f0 00 f0 00 f0 00 00 00 f0 f0 f0 f0 f0 00 00 00     ................
	...
     286:	f0 f0 f0 f0 f0 00 00 00 00 00 00 00 f0 00 00 00     ................
     296:	00 00 00 00 f0 00 00 00 f0 f0 f0 f0 f0 00 00 00     ................
	...
     2b6:	3c 3c 3c 3c 3c 3c 00 00 3c 3c 00 00 3c 3c 00 00     <<<<<<..<<..<<..
     2c6:	3c 00 3c 3c 00 3c 00 00 3c 00 3c 3c 00 3c 00 00     <.<<.<..<.<<.<..
     2d6:	3c 3c 00 00 3c 3c 00 00 3c 3c 3c 3c 3c 3c 00 00     <<..<<..<<<<<<..
     2e6:	00 00 00 10 00 10 00 00 10 00 00 10 00 10 00 00     ................
     2f6:	00 10 00 00 10 00 10 10 00 00 10 10 00 10 10 10     ................
     306:	00 10 00 00 00 00 10 10 10 00 00 00 00 00 00 00     ................
	...

00000326 <__c.2187>:
     326:	1b 5b 3f 32 35 6c 00                                .[?25l.

0000032d <__c.2182>:
     32d:	1b 5b 25 64 6d 00                                   .[%dm.

00000333 <__c.2177>:
     333:	1b 5b 4b 00                                         .[K.

00000337 <__c.2172>:
     337:	1b 5b 32 4a 00                                      .[2J.

0000033c <__c.2162>:
     33c:	1b 5b 30 6d 00                                      .[0m.

00000341 <__c.2157>:
     341:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

0000034a <__ctors_end>:
     34a:	11 24       	eor	r1, r1
     34c:	1f be       	out	0x3f, r1	; 63
     34e:	cf ef       	ldi	r28, 0xFF	; 255
     350:	d8 e0       	ldi	r29, 0x08	; 8
     352:	de bf       	out	0x3e, r29	; 62
     354:	cd bf       	out	0x3d, r28	; 61

00000356 <__do_copy_data>:
     356:	12 e0       	ldi	r17, 0x02	; 2
     358:	a0 e0       	ldi	r26, 0x00	; 0
     35a:	b1 e0       	ldi	r27, 0x01	; 1
     35c:	e6 ef       	ldi	r30, 0xF6	; 246
     35e:	f4 e2       	ldi	r31, 0x24	; 36
     360:	02 c0       	rjmp	.+4      	; 0x366 <__do_copy_data+0x10>
     362:	05 90       	lpm	r0, Z+
     364:	0d 92       	st	X+, r0
     366:	a6 39       	cpi	r26, 0x96	; 150
     368:	b1 07       	cpc	r27, r17
     36a:	d9 f7       	brne	.-10     	; 0x362 <__do_copy_data+0xc>

0000036c <__do_clear_bss>:
     36c:	24 e0       	ldi	r18, 0x04	; 4
     36e:	a6 e9       	ldi	r26, 0x96	; 150
     370:	b2 e0       	ldi	r27, 0x02	; 2
     372:	01 c0       	rjmp	.+2      	; 0x376 <.do_clear_bss_start>

00000374 <.do_clear_bss_loop>:
     374:	1d 92       	st	X+, r1

00000376 <.do_clear_bss_start>:
     376:	af 34       	cpi	r26, 0x4F	; 79
     378:	b2 07       	cpc	r27, r18
     37a:	e1 f7       	brne	.-8      	; 0x374 <.do_clear_bss_loop>
     37c:	0e 94 cb 09 	call	0x1396	; 0x1396 <main>
     380:	0c 94 79 12 	jmp	0x24f2	; 0x24f2 <_exit>

00000384 <__bad_interrupt>:
     384:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000388 <init_buttons>:
	// using a pin change interrupt. These pins correspond to pin
	// change interrupts PCINT8 to PCINT11 which are covered by
	// pin change interrupt 1.

	// Empty the button push queue and reset last state.
	queue_length = 0;
     388:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <__data_end>
	last_button_state = 0;
     38c:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <last_button_state>

	// Enable the interrupt (see datasheet page 77).
	PCICR |= (1 << PCIE1);
     390:	e8 e6       	ldi	r30, 0x68	; 104
     392:	f0 e0       	ldi	r31, 0x00	; 0
     394:	80 81       	ld	r24, Z
     396:	82 60       	ori	r24, 0x02	; 2
     398:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78).
	PCIFR |= (1 << PCIF1);
     39a:	8b b3       	in	r24, 0x1b	; 27
     39c:	82 60       	ori	r24, 0x02	; 2
     39e:	8b bb       	out	0x1b, r24	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78).
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT10) |
     3a0:	ec e6       	ldi	r30, 0x6C	; 108
     3a2:	f0 e0       	ldi	r31, 0x00	; 0
     3a4:	80 81       	ld	r24, Z
     3a6:	8f 60       	ori	r24, 0x0F	; 15
     3a8:	80 83       	st	Z, r24
     3aa:	08 95       	ret

000003ac <button_pushed>:

ButtonState button_pushed(void)
{
	ButtonState result = NO_BUTTON_PUSHED; // Default result.

	if (queue_length > 0)
     3ac:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <__data_end>
     3b0:	88 23       	and	r24, r24
     3b2:	f9 f0       	breq	.+62     	; 0x3f2 <button_pushed+0x46>
	{
		// Remove the first element off the queue and move all the
		// other entries closer to the front of the queue. We turn off
		// interrupts (if on) before we make any changes to the queue.
		// If interrupts were on, we turn them back on when done.
		result = button_queue[0];
     3b4:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <button_queue>

		// Save whether interrupts were enabled and turn them off.
		bool interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     3b8:	5f b7       	in	r21, 0x3f	; 63
     3ba:	50 78       	andi	r21, 0x80	; 128
		cli();
     3bc:	f8 94       	cli
		
		for (uint8_t i = 1; i < queue_length; i++)
     3be:	91 e0       	ldi	r25, 0x01	; 1
     3c0:	0b c0       	rjmp	.+22     	; 0x3d8 <button_pushed+0x2c>
		{
			button_queue[i - 1] = button_queue[i];
     3c2:	29 2f       	mov	r18, r25
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	f9 01       	movw	r30, r18
     3c8:	e9 56       	subi	r30, 0x69	; 105
     3ca:	fd 4f       	sbci	r31, 0xFD	; 253
     3cc:	40 81       	ld	r20, Z
     3ce:	f9 01       	movw	r30, r18
     3d0:	ea 56       	subi	r30, 0x6A	; 106
     3d2:	fd 4f       	sbci	r31, 0xFD	; 253
     3d4:	40 83       	st	Z, r20

		// Save whether interrupts were enabled and turn them off.
		bool interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for (uint8_t i = 1; i < queue_length; i++)
     3d6:	9f 5f       	subi	r25, 0xFF	; 255
     3d8:	20 91 96 02 	lds	r18, 0x0296	; 0x800296 <__data_end>
     3dc:	92 17       	cp	r25, r18
     3de:	88 f3       	brcs	.-30     	; 0x3c2 <button_pushed+0x16>
		{
			button_queue[i - 1] = button_queue[i];
		}
		queue_length--;
     3e0:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <__data_end>
     3e4:	91 50       	subi	r25, 0x01	; 1
     3e6:	90 93 96 02 	sts	0x0296, r25	; 0x800296 <__data_end>

		if (interrupts_were_enabled)
     3ea:	55 23       	and	r21, r21
     3ec:	19 f0       	breq	.+6      	; 0x3f4 <button_pushed+0x48>
		{
			// Turn them back on again.
			sei();
     3ee:	78 94       	sei
     3f0:	08 95       	ret
		(1 << PCINT11);
}

ButtonState button_pushed(void)
{
	ButtonState result = NO_BUTTON_PUSHED; // Default result.
     3f2:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again.
			sei();
		}
	}
	return result;
}
     3f4:	08 95       	ret

000003f6 <clear_button_presses>:

void clear_button_presses(void)
{
	// Save whether interrupts were enabled and turn them off.
	bool interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     3f6:	8f b7       	in	r24, 0x3f	; 63
	cli();
     3f8:	f8 94       	cli
	queue_length = 0;
     3fa:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <__data_end>
	last_button_state = 0;
     3fe:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <last_button_state>
	if (interrupts_were_enabled)
     402:	88 23       	and	r24, r24
     404:	0c f4       	brge	.+2      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
	{
		// Turn them back on again.
		sei();
     406:	78 94       	sei
     408:	08 95       	ret

0000040a <__vector_5>:
	}
}

// Interrupt handler for a change on buttons.
ISR(PCINT1_vect)
{
     40a:	1f 92       	push	r1
     40c:	0f 92       	push	r0
     40e:	0f b6       	in	r0, 0x3f	; 63
     410:	0f 92       	push	r0
     412:	11 24       	eor	r1, r1
     414:	2f 93       	push	r18
     416:	3f 93       	push	r19
     418:	4f 93       	push	r20
     41a:	8f 93       	push	r24
     41c:	9f 93       	push	r25
     41e:	ef 93       	push	r30
     420:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     422:	43 b1       	in	r20, 0x03	; 3
     424:	4f 70       	andi	r20, 0x0F	; 15
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++)
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	24 c0       	rjmp	.+72     	; 0x472 <__vector_5+0x68>
	{
		if (queue_length < BUTTON_QUEUE_SIZE
     42a:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <__data_end>
     42e:	94 30       	cpi	r25, 0x04	; 4
     430:	f8 f4       	brcc	.+62     	; 0x470 <__vector_5+0x66>
				&& (button_state & (1 << pin))
     432:	24 2f       	mov	r18, r20
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	08 2e       	mov	r0, r24
     438:	02 c0       	rjmp	.+4      	; 0x43e <__vector_5+0x34>
     43a:	35 95       	asr	r19
     43c:	27 95       	ror	r18
     43e:	0a 94       	dec	r0
     440:	e2 f7       	brpl	.-8      	; 0x43a <__vector_5+0x30>
     442:	20 ff       	sbrs	r18, 0
     444:	15 c0       	rjmp	.+42     	; 0x470 <__vector_5+0x66>
				&& !(last_button_state & (1 << pin)))
     446:	20 91 9b 02 	lds	r18, 0x029B	; 0x80029b <last_button_state>
     44a:	30 e0       	ldi	r19, 0x00	; 0
     44c:	08 2e       	mov	r0, r24
     44e:	02 c0       	rjmp	.+4      	; 0x454 <__vector_5+0x4a>
     450:	35 95       	asr	r19
     452:	27 95       	ror	r18
     454:	0a 94       	dec	r0
     456:	e2 f7       	brpl	.-8      	; 0x450 <__vector_5+0x46>
     458:	20 fd       	sbrc	r18, 0
     45a:	0a c0       	rjmp	.+20     	; 0x470 <__vector_5+0x66>
				{
			// Add the button push to the queue (and update the
			// length of the queue).
			button_queue[queue_length++] = pin;
     45c:	e0 91 96 02 	lds	r30, 0x0296	; 0x800296 <__data_end>
     460:	91 e0       	ldi	r25, 0x01	; 1
     462:	9e 0f       	add	r25, r30
     464:	90 93 96 02 	sts	0x0296, r25	; 0x800296 <__data_end>
     468:	f0 e0       	ldi	r31, 0x00	; 0
     46a:	e9 56       	subi	r30, 0x69	; 105
     46c:	fd 4f       	sbci	r31, 0xFD	; 253
     46e:	80 83       	st	Z, r24
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++)
     470:	8f 5f       	subi	r24, 0xFF	; 255
     472:	84 30       	cpi	r24, 0x04	; 4
     474:	d0 f2       	brcs	.-76     	; 0x42a <__vector_5+0x20>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state.
	last_button_state = button_state;
     476:	40 93 9b 02 	sts	0x029B, r20	; 0x80029b <last_button_state>
}
     47a:	ff 91       	pop	r31
     47c:	ef 91       	pop	r30
     47e:	9f 91       	pop	r25
     480:	8f 91       	pop	r24
     482:	4f 91       	pop	r20
     484:	3f 91       	pop	r19
     486:	2f 91       	pop	r18
     488:	0f 90       	pop	r0
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	0f 90       	pop	r0
     48e:	1f 90       	pop	r1
     490:	18 95       	reti

00000492 <freq_to_clock_period>:

// Return the width of a pulse (in clock cycles) given a duty cycle (%) and
// the period of the clock (measured in clock cycles)
uint16_t duty_cycle_to_pulse_width(float dutycycle, uint16_t clockperiod) {
	return (dutycycle * clockperiod) / 100;
}
     492:	9c 01       	movw	r18, r24
     494:	40 e0       	ldi	r20, 0x00	; 0
     496:	50 e0       	ldi	r21, 0x00	; 0
     498:	60 e4       	ldi	r22, 0x40	; 64
     49a:	72 e4       	ldi	r23, 0x42	; 66
     49c:	8f e0       	ldi	r24, 0x0F	; 15
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <__udivmodsi4>
     4a4:	c9 01       	movw	r24, r18
     4a6:	08 95       	ret

000004a8 <init_buzzer>:
	// Make pin OC2B be an output
	//DDRD = (1 << 6);
	//Done by project.c

	// Set the maximum count value for timer/counter 2 to be one less than the clockperiod
	OCR2A = 0;
     4a8:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>

	// Set up timer/counter 2 for Fast PWM, counting from 0 to the value in OCR2A
	// before reseting to 0. Count at 1MHz (CLK/8).
	// Configure output OC2B to be clear on compare match and set on timer/counter
	// overflow (non-inverting mode).
	TCCR2A = (1 << COM2A1) | (1 << COM2B1) | (1 << WGM21) | (1 << WGM20);
     4ac:	83 ea       	ldi	r24, 0xA3	; 163
     4ae:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (1 << WGM22) | (1 << CS21);
     4b2:	8a e0       	ldi	r24, 0x0A	; 10
     4b4:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     4b8:	08 95       	ret

000004ba <play_move_sound>:
}

void play_move_sound(bool enabled) {
	if (enabled) {
     4ba:	88 23       	and	r24, r24
     4bc:	89 f0       	breq	.+34     	; 0x4e0 <play_move_sound+0x26>
		OCR2A = freq_to_clock_period(2000);
     4be:	80 ed       	ldi	r24, 0xD0	; 208
     4c0:	97 e0       	ldi	r25, 0x07	; 7
     4c2:	0e 94 49 02 	call	0x492	; 0x492 <freq_to_clock_period>
     4c6:	e3 eb       	ldi	r30, 0xB3	; 179
     4c8:	f0 e0       	ldi	r31, 0x00	; 0
     4ca:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4cc:	2f ef       	ldi	r18, 0xFF	; 255
     4ce:	83 ef       	ldi	r24, 0xF3	; 243
     4d0:	91 e0       	ldi	r25, 0x01	; 1
     4d2:	21 50       	subi	r18, 0x01	; 1
     4d4:	80 40       	sbci	r24, 0x00	; 0
     4d6:	90 40       	sbci	r25, 0x00	; 0
     4d8:	e1 f7       	brne	.-8      	; 0x4d2 <play_move_sound+0x18>
     4da:	00 c0       	rjmp	.+0      	; 0x4dc <play_move_sound+0x22>
     4dc:	00 00       	nop
		_delay_ms(80);
		OCR2A = 0;
     4de:	10 82       	st	Z, r1
     4e0:	08 95       	ret

000004e2 <play_start_sound>:
	}
}

void play_start_sound(bool enabled) {
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
	if (enabled) {
     4e6:	88 23       	and	r24, r24
     4e8:	f9 f0       	breq	.+62     	; 0x528 <play_start_sound+0x46>
		OCR2A = freq_to_clock_period(2000);
     4ea:	80 ed       	ldi	r24, 0xD0	; 208
     4ec:	97 e0       	ldi	r25, 0x07	; 7
     4ee:	0e 94 49 02 	call	0x492	; 0x492 <freq_to_clock_period>
     4f2:	c3 eb       	ldi	r28, 0xB3	; 179
     4f4:	d0 e0       	ldi	r29, 0x00	; 0
     4f6:	88 83       	st	Y, r24
     4f8:	2f ef       	ldi	r18, 0xFF	; 255
     4fa:	82 e5       	ldi	r24, 0x52	; 82
     4fc:	97 e0       	ldi	r25, 0x07	; 7
     4fe:	21 50       	subi	r18, 0x01	; 1
     500:	80 40       	sbci	r24, 0x00	; 0
     502:	90 40       	sbci	r25, 0x00	; 0
     504:	e1 f7       	brne	.-8      	; 0x4fe <play_start_sound+0x1c>
     506:	00 c0       	rjmp	.+0      	; 0x508 <play_start_sound+0x26>
     508:	00 00       	nop
		_delay_ms(300);
		OCR2A = freq_to_clock_period(400);
     50a:	80 e9       	ldi	r24, 0x90	; 144
     50c:	91 e0       	ldi	r25, 0x01	; 1
     50e:	0e 94 49 02 	call	0x492	; 0x492 <freq_to_clock_period>
     512:	88 83       	st	Y, r24
     514:	2f ef       	ldi	r18, 0xFF	; 255
     516:	82 e5       	ldi	r24, 0x52	; 82
     518:	97 e0       	ldi	r25, 0x07	; 7
     51a:	21 50       	subi	r18, 0x01	; 1
     51c:	80 40       	sbci	r24, 0x00	; 0
     51e:	90 40       	sbci	r25, 0x00	; 0
     520:	e1 f7       	brne	.-8      	; 0x51a <play_start_sound+0x38>
     522:	00 c0       	rjmp	.+0      	; 0x524 <play_start_sound+0x42>
     524:	00 00       	nop
		_delay_ms(300);
		OCR2A = 0;
     526:	18 82       	st	Y, r1
	}
}
     528:	df 91       	pop	r29
     52a:	cf 91       	pop	r28
     52c:	08 95       	ret

0000052e <play_victory_sound>:

void play_victory_sound(bool enabled) {
     52e:	1f 93       	push	r17
     530:	cf 93       	push	r28
     532:	df 93       	push	r29
	if (enabled) {
     534:	88 23       	and	r24, r24
     536:	c1 f1       	breq	.+112    	; 0x5a8 <play_victory_sound+0x7a>
		OCR2A = freq_to_clock_period(2000);
     538:	80 ed       	ldi	r24, 0xD0	; 208
     53a:	97 e0       	ldi	r25, 0x07	; 7
     53c:	0e 94 49 02 	call	0x492	; 0x492 <freq_to_clock_period>
     540:	18 2f       	mov	r17, r24
     542:	c3 eb       	ldi	r28, 0xB3	; 179
     544:	d0 e0       	ldi	r29, 0x00	; 0
     546:	88 83       	st	Y, r24
     548:	2f ef       	ldi	r18, 0xFF	; 255
     54a:	82 e5       	ldi	r24, 0x52	; 82
     54c:	97 e0       	ldi	r25, 0x07	; 7
     54e:	21 50       	subi	r18, 0x01	; 1
     550:	80 40       	sbci	r24, 0x00	; 0
     552:	90 40       	sbci	r25, 0x00	; 0
     554:	e1 f7       	brne	.-8      	; 0x54e <play_victory_sound+0x20>
     556:	00 c0       	rjmp	.+0      	; 0x558 <play_victory_sound+0x2a>
     558:	00 00       	nop
		_delay_ms(300);
		OCR2A = freq_to_clock_period(5000);
     55a:	88 e8       	ldi	r24, 0x88	; 136
     55c:	93 e1       	ldi	r25, 0x13	; 19
     55e:	0e 94 49 02 	call	0x492	; 0x492 <freq_to_clock_period>
     562:	88 83       	st	Y, r24
     564:	2f ef       	ldi	r18, 0xFF	; 255
     566:	82 e5       	ldi	r24, 0x52	; 82
     568:	97 e0       	ldi	r25, 0x07	; 7
     56a:	21 50       	subi	r18, 0x01	; 1
     56c:	80 40       	sbci	r24, 0x00	; 0
     56e:	90 40       	sbci	r25, 0x00	; 0
     570:	e1 f7       	brne	.-8      	; 0x56a <play_victory_sound+0x3c>
     572:	00 c0       	rjmp	.+0      	; 0x574 <play_victory_sound+0x46>
     574:	00 00       	nop
		_delay_ms(300);
		OCR2A = freq_to_clock_period(2000);
     576:	18 83       	st	Y, r17
     578:	2f ef       	ldi	r18, 0xFF	; 255
     57a:	82 e5       	ldi	r24, 0x52	; 82
     57c:	97 e0       	ldi	r25, 0x07	; 7
     57e:	21 50       	subi	r18, 0x01	; 1
     580:	80 40       	sbci	r24, 0x00	; 0
     582:	90 40       	sbci	r25, 0x00	; 0
     584:	e1 f7       	brne	.-8      	; 0x57e <play_victory_sound+0x50>
     586:	00 c0       	rjmp	.+0      	; 0x588 <play_victory_sound+0x5a>
     588:	00 00       	nop
		_delay_ms(300);
		OCR2A = freq_to_clock_period(2500);
     58a:	84 ec       	ldi	r24, 0xC4	; 196
     58c:	99 e0       	ldi	r25, 0x09	; 9
     58e:	0e 94 49 02 	call	0x492	; 0x492 <freq_to_clock_period>
     592:	88 83       	st	Y, r24
     594:	2f ef       	ldi	r18, 0xFF	; 255
     596:	82 e5       	ldi	r24, 0x52	; 82
     598:	97 e0       	ldi	r25, 0x07	; 7
     59a:	21 50       	subi	r18, 0x01	; 1
     59c:	80 40       	sbci	r24, 0x00	; 0
     59e:	90 40       	sbci	r25, 0x00	; 0
     5a0:	e1 f7       	brne	.-8      	; 0x59a <play_victory_sound+0x6c>
     5a2:	00 c0       	rjmp	.+0      	; 0x5a4 <play_victory_sound+0x76>
     5a4:	00 00       	nop
		_delay_ms(300);
		OCR2A = 0;
     5a6:	18 82       	st	Y, r1
	}
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	1f 91       	pop	r17
     5ae:	08 95       	ret

000005b0 <paint_square>:
// ========================== GAME LOGIC FUNCTIONS ===========================

// This function paints a square based on the object(s) currently on it.
static void paint_square(uint8_t row, uint8_t col)
{	
	switch (board[row][col] & OBJECT_MASK)
     5b0:	90 e1       	ldi	r25, 0x10	; 16
     5b2:	89 9f       	mul	r24, r25
     5b4:	f0 01       	movw	r30, r0
     5b6:	11 24       	eor	r1, r1
     5b8:	e0 56       	subi	r30, 0x60	; 96
     5ba:	fd 4f       	sbci	r31, 0xFD	; 253
     5bc:	e6 0f       	add	r30, r22
     5be:	f1 1d       	adc	r31, r1
     5c0:	90 81       	ld	r25, Z
     5c2:	97 70       	andi	r25, 0x07	; 7
     5c4:	92 30       	cpi	r25, 0x02	; 2
     5c6:	99 f0       	breq	.+38     	; 0x5ee <paint_square+0x3e>
     5c8:	28 f4       	brcc	.+10     	; 0x5d4 <paint_square+0x24>
     5ca:	99 23       	and	r25, r25
     5cc:	41 f0       	breq	.+16     	; 0x5de <paint_square+0x2e>
     5ce:	91 30       	cpi	r25, 0x01	; 1
     5d0:	51 f0       	breq	.+20     	; 0x5e6 <paint_square+0x36>
     5d2:	08 95       	ret
     5d4:	94 30       	cpi	r25, 0x04	; 4
     5d6:	79 f0       	breq	.+30     	; 0x5f6 <paint_square+0x46>
     5d8:	96 30       	cpi	r25, 0x06	; 6
     5da:	89 f0       	breq	.+34     	; 0x5fe <paint_square+0x4e>
     5dc:	08 95       	ret
	{
		case ROOM:
			ledmatrix_update_pixel(row, col, COLOUR_BLACK);
     5de:	40 e0       	ldi	r20, 0x00	; 0
     5e0:	0e 94 3e 06 	call	0xc7c	; 0xc7c <ledmatrix_update_pixel>
			break;
     5e4:	08 95       	ret
		case WALL:
			ledmatrix_update_pixel(row, col, COLOUR_WALL);
     5e6:	4f ef       	ldi	r20, 0xFF	; 255
     5e8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <ledmatrix_update_pixel>
			break;
     5ec:	08 95       	ret
		case BOX:
			ledmatrix_update_pixel(row, col, COLOUR_BOX);
     5ee:	4c e3       	ldi	r20, 0x3C	; 60
     5f0:	0e 94 3e 06 	call	0xc7c	; 0xc7c <ledmatrix_update_pixel>
			break;
     5f4:	08 95       	ret
		case TARGET:
			ledmatrix_update_pixel(row, col, COLOUR_TARGET);
     5f6:	4f e0       	ldi	r20, 0x0F	; 15
     5f8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <ledmatrix_update_pixel>
			break;
     5fc:	08 95       	ret
		case BOX | TARGET:
			ledmatrix_update_pixel(row, col, COLOUR_DONE);
     5fe:	40 ef       	ldi	r20, 0xF0	; 240
     600:	0e 94 3e 06 	call	0xc7c	; 0xc7c <ledmatrix_update_pixel>
     604:	08 95       	ret

00000606 <initialise_level>:
		default:
			break;
	}
}

void initialise_level(int level) {
     606:	cf 93       	push	r28
     608:	df 93       	push	r29
     60a:	cd b7       	in	r28, 0x3d	; 61
     60c:	de b7       	in	r29, 0x3e	; 62
     60e:	da 95       	dec	r29
     610:	0f b6       	in	r0, 0x3f	; 63
     612:	f8 94       	cli
     614:	de bf       	out	0x3e, r29	; 62
     616:	0f be       	out	0x3f, r0	; 63
     618:	cd bf       	out	0x3d, r28	; 61
	// identical to how the pixels are oriented on the LED matrix, however
	// the LED matrix treats row 0 as the bottom row and row 7 as the top
	// row.
	
	uint8_t level_layout[MATRIX_NUM_ROWS][MATRIX_NUM_COLUMNS];
	switch (level) {
     61a:	81 30       	cpi	r24, 0x01	; 1
     61c:	91 05       	cpc	r25, r1
     61e:	19 f0       	breq	.+6      	; 0x626 <initialise_level+0x20>
     620:	02 97       	sbiw	r24, 0x02	; 2
     622:	e1 f0       	breq	.+56     	; 0x65c <initialise_level+0x56>
     624:	35 c0       	rjmp	.+106    	; 0x690 <initialise_level+0x8a>
			case 1:
			{
			uint8_t temp_layout[MATRIX_NUM_ROWS][MATRIX_NUM_COLUMNS] = {
     626:	80 e8       	ldi	r24, 0x80	; 128
     628:	ec e1       	ldi	r30, 0x1C	; 28
     62a:	f1 e0       	ldi	r31, 0x01	; 1
     62c:	de 01       	movw	r26, r28
     62e:	af 57       	subi	r26, 0x7F	; 127
     630:	bf 4f       	sbci	r27, 0xFF	; 255
     632:	01 90       	ld	r0, Z+
     634:	0d 92       	st	X+, r0
     636:	8a 95       	dec	r24
     638:	e1 f7       	brne	.-8      	; 0x632 <initialise_level+0x2c>
				{ W, _, _, _, W, _, B, _, _, _, _, _, _, _, _, _ },
				{ _, _, _, _, _, _, T, _, _, _, _, _, _, _, _, _ },
				{ _, _, _, W, W, W, W, W, W, T, _, _, _, _, _, W },
				{ W, W, _, _, _, _, _, _, W, W, _, _, W, W, W, W }
			};
			memcpy(level_layout, temp_layout, sizeof(level_layout));
     63a:	80 e8       	ldi	r24, 0x80	; 128
     63c:	fe 01       	movw	r30, r28
     63e:	ef 57       	subi	r30, 0x7F	; 127
     640:	ff 4f       	sbci	r31, 0xFF	; 255
     642:	de 01       	movw	r26, r28
     644:	11 96       	adiw	r26, 0x01	; 1
     646:	01 90       	ld	r0, Z+
     648:	0d 92       	st	X+, r0
     64a:	8a 95       	dec	r24
     64c:	e1 f7       	brne	.-8      	; 0x646 <initialise_level+0x40>
			player_row = 5;
     64e:	85 e0       	ldi	r24, 0x05	; 5
     650:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <player_row>
			player_col = 2;
     654:	82 e0       	ldi	r24, 0x02	; 2
     656:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <player_col>
			}
			break;
     65a:	1a c0       	rjmp	.+52     	; 0x690 <initialise_level+0x8a>
		case 2:
			{
			uint8_t temp_layout[MATRIX_NUM_ROWS][MATRIX_NUM_COLUMNS] = {
     65c:	80 e8       	ldi	r24, 0x80	; 128
     65e:	ec e9       	ldi	r30, 0x9C	; 156
     660:	f1 e0       	ldi	r31, 0x01	; 1
     662:	de 01       	movw	r26, r28
     664:	af 57       	subi	r26, 0x7F	; 127
     666:	bf 4f       	sbci	r27, 0xFF	; 255
     668:	01 90       	ld	r0, Z+
     66a:	0d 92       	st	X+, r0
     66c:	8a 95       	dec	r24
     66e:	e1 f7       	brne	.-8      	; 0x668 <initialise_level+0x62>
				{W, W, W, W, _, W, _, _, _, _, _, W, _, W, W, _ },
				{W, T, B, _, _, _, _, B, _, _, _, W, W, _, W, W },
				{W, _, _, _, T, _, _, _, _, _, _, B, T, _, _, _ },
				{W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W }
			};
			memcpy(level_layout, temp_layout, sizeof(level_layout));
     670:	80 e8       	ldi	r24, 0x80	; 128
     672:	fe 01       	movw	r30, r28
     674:	ef 57       	subi	r30, 0x7F	; 127
     676:	ff 4f       	sbci	r31, 0xFF	; 255
     678:	de 01       	movw	r26, r28
     67a:	11 96       	adiw	r26, 0x01	; 1
     67c:	01 90       	ld	r0, Z+
     67e:	0d 92       	st	X+, r0
     680:	8a 95       	dec	r24
     682:	e1 f7       	brne	.-8      	; 0x67c <initialise_level+0x76>
			player_row = 6;
     684:	86 e0       	ldi	r24, 0x06	; 6
     686:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <player_row>
			player_col = 15;
     68a:	8f e0       	ldi	r24, 0x0F	; 15
     68c:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <player_col>
     690:	a0 e0       	ldi	r26, 0x00	; 0
     692:	2b c0       	rjmp	.+86     	; 0x6ea <initialise_level+0xe4>
	// all the rows.
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
	{
		for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
		{
			board[MATRIX_NUM_ROWS - 1 - row][col] =
     694:	8a 2f       	mov	r24, r26
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	27 e0       	ldi	r18, 0x07	; 7
     69a:	30 e0       	ldi	r19, 0x00	; 0
     69c:	28 1b       	sub	r18, r24
     69e:	39 0b       	sbc	r19, r25
			level_layout[row][col];
     6a0:	46 2f       	mov	r20, r22
     6a2:	50 e0       	ldi	r21, 0x00	; 0
     6a4:	fc 01       	movw	r30, r24
     6a6:	e2 95       	swap	r30
     6a8:	f2 95       	swap	r31
     6aa:	f0 7f       	andi	r31, 0xF0	; 240
     6ac:	fe 27       	eor	r31, r30
     6ae:	e0 7f       	andi	r30, 0xF0	; 240
     6b0:	fe 27       	eor	r31, r30
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	8c 0f       	add	r24, r28
     6b8:	9d 1f       	adc	r25, r29
     6ba:	e8 0f       	add	r30, r24
     6bc:	f9 1f       	adc	r31, r25
     6be:	e4 0f       	add	r30, r20
     6c0:	f5 1f       	adc	r31, r21
     6c2:	70 81       	ld	r23, Z
	// all the rows.
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
	{
		for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
		{
			board[MATRIX_NUM_ROWS - 1 - row][col] =
     6c4:	c9 01       	movw	r24, r18
     6c6:	82 95       	swap	r24
     6c8:	92 95       	swap	r25
     6ca:	90 7f       	andi	r25, 0xF0	; 240
     6cc:	98 27       	eor	r25, r24
     6ce:	80 7f       	andi	r24, 0xF0	; 240
     6d0:	98 27       	eor	r25, r24
     6d2:	80 56       	subi	r24, 0x60	; 96
     6d4:	9d 4f       	sbci	r25, 0xFD	; 253
     6d6:	fc 01       	movw	r30, r24
     6d8:	e4 0f       	add	r30, r20
     6da:	f5 1f       	adc	r31, r21
     6dc:	70 83       	st	Z, r23
	
	// Copy the starting layout (level map) to the board array, and flip
	// all the rows.
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
	{
		for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
     6de:	6f 5f       	subi	r22, 0xFF	; 255
     6e0:	01 c0       	rjmp	.+2      	; 0x6e4 <initialise_level+0xde>
     6e2:	60 e0       	ldi	r22, 0x00	; 0
     6e4:	60 31       	cpi	r22, 0x10	; 16
     6e6:	b0 f2       	brcs	.-84     	; 0x694 <initialise_level+0x8e>
	#undef T
	#undef B
	
	// Copy the starting layout (level map) to the board array, and flip
	// all the rows.
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     6e8:	af 5f       	subi	r26, 0xFF	; 255
     6ea:	a8 30       	cpi	r26, 0x08	; 8
     6ec:	d0 f3       	brcs	.-12     	; 0x6e2 <initialise_level+0xdc>
		{
			board[MATRIX_NUM_ROWS - 1 - row][col] =
			level_layout[row][col];
		}
	}
}
     6ee:	d3 95       	inc	r29
     6f0:	0f b6       	in	r0, 0x3f	; 63
     6f2:	f8 94       	cli
     6f4:	de bf       	out	0x3e, r29	; 62
     6f6:	0f be       	out	0x3f, r0	; 63
     6f8:	cd bf       	out	0x3d, r28	; 61
     6fa:	df 91       	pop	r29
     6fc:	cf 91       	pop	r28
     6fe:	08 95       	ret

00000700 <flash_player>:
// currently not visible, it is set to visible and rendered on the display.
// The static global variable "player_visible" indicates whether the player
// icon is currently visible.
void flash_player(void)
{
	player_visible = !player_visible;
     700:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <player_visible>
     704:	81 e0       	ldi	r24, 0x01	; 1
     706:	89 27       	eor	r24, r25
     708:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <player_visible>
	if (player_visible)
     70c:	88 23       	and	r24, r24
     70e:	41 f0       	breq	.+16     	; 0x720 <flash_player+0x20>
	{
		// The player is visible, paint it with COLOUR_PLAYER.
		ledmatrix_update_pixel(player_row, player_col, COLOUR_PLAYER);
     710:	40 e1       	ldi	r20, 0x10	; 16
     712:	60 91 9e 02 	lds	r22, 0x029E	; 0x80029e <player_col>
     716:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <player_row>
     71a:	0e 94 3e 06 	call	0xc7c	; 0xc7c <ledmatrix_update_pixel>
     71e:	08 95       	ret
	}
	else
	{
		// The player is not visible, paint the underlying square.
		paint_square(player_row, player_col);
     720:	60 91 9e 02 	lds	r22, 0x029E	; 0x80029e <player_col>
     724:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <player_row>
     728:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <paint_square>
     72c:	08 95       	ret

0000072e <flash_targets>:
	}
}

void flash_targets(void) {
     72e:	0f 93       	push	r16
     730:	1f 93       	push	r17
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
	targets_visible = !targets_visible;
     736:	90 91 9c 02 	lds	r25, 0x029C	; 0x80029c <targets_visible>
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	89 27       	eor	r24, r25
     73e:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <targets_visible>
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
     742:	00 e0       	ldi	r16, 0x00	; 0
     744:	10 e0       	ldi	r17, 0x00	; 0
     746:	26 c0       	rjmp	.+76     	; 0x794 <flash_targets+0x66>
		for (int col = 0; col < MATRIX_NUM_COLUMNS; col++) {
			if (board[row][col] == TARGET) {
     748:	f8 01       	movw	r30, r16
     74a:	e2 95       	swap	r30
     74c:	f2 95       	swap	r31
     74e:	f0 7f       	andi	r31, 0xF0	; 240
     750:	fe 27       	eor	r31, r30
     752:	e0 7f       	andi	r30, 0xF0	; 240
     754:	fe 27       	eor	r31, r30
     756:	e0 56       	subi	r30, 0x60	; 96
     758:	fd 4f       	sbci	r31, 0xFD	; 253
     75a:	ec 0f       	add	r30, r28
     75c:	fd 1f       	adc	r31, r29
     75e:	80 81       	ld	r24, Z
     760:	84 30       	cpi	r24, 0x04	; 4
     762:	79 f4       	brne	.+30     	; 0x782 <flash_targets+0x54>
				if (targets_visible) {
     764:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <targets_visible>
     768:	88 23       	and	r24, r24
     76a:	31 f0       	breq	.+12     	; 0x778 <flash_targets+0x4a>
					ledmatrix_update_pixel(row, col, COLOUR_TARGET);
     76c:	4f e0       	ldi	r20, 0x0F	; 15
     76e:	6c 2f       	mov	r22, r28
     770:	80 2f       	mov	r24, r16
     772:	0e 94 3e 06 	call	0xc7c	; 0xc7c <ledmatrix_update_pixel>
     776:	05 c0       	rjmp	.+10     	; 0x782 <flash_targets+0x54>
				} else {
					ledmatrix_update_pixel(row, col, COLOUR_BLACK);
     778:	40 e0       	ldi	r20, 0x00	; 0
     77a:	6c 2f       	mov	r22, r28
     77c:	80 2f       	mov	r24, r16
     77e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <ledmatrix_update_pixel>
}

void flash_targets(void) {
	targets_visible = !targets_visible;
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
		for (int col = 0; col < MATRIX_NUM_COLUMNS; col++) {
     782:	21 96       	adiw	r28, 0x01	; 1
     784:	02 c0       	rjmp	.+4      	; 0x78a <flash_targets+0x5c>
     786:	c0 e0       	ldi	r28, 0x00	; 0
     788:	d0 e0       	ldi	r29, 0x00	; 0
     78a:	c0 31       	cpi	r28, 0x10	; 16
     78c:	d1 05       	cpc	r29, r1
     78e:	e4 f2       	brlt	.-72     	; 0x748 <flash_targets+0x1a>
	}
}

void flash_targets(void) {
	targets_visible = !targets_visible;
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
     790:	0f 5f       	subi	r16, 0xFF	; 255
     792:	1f 4f       	sbci	r17, 0xFF	; 255
     794:	08 30       	cpi	r16, 0x08	; 8
     796:	11 05       	cpc	r17, r1
     798:	b4 f3       	brlt	.-20     	; 0x786 <flash_targets+0x58>
					ledmatrix_update_pixel(row, col, COLOUR_BLACK);
				}
			}
		}
	}
}
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	1f 91       	pop	r17
     7a0:	0f 91       	pop	r16
     7a2:	08 95       	ret

000007a4 <display_terminal_message>:
	update_terminal_display(player_row, MATRIX_NUM_ROWS-player_row, 1);
	flash_player();
	return true;
}

void display_terminal_message(char type[]) {
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
     7a8:	ec 01       	movw	r28, r24
	if (strcmp(type, "wall") == 0) {
     7aa:	60 e2       	ldi	r22, 0x20	; 32
     7ac:	72 e0       	ldi	r23, 0x02	; 2
     7ae:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <strcmp>
     7b2:	89 2b       	or	r24, r25
     7b4:	89 f5       	brne	.+98     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
		int rand_num;
		int lb = 1;
		int ub = 3;
		rand_num = (rand() % (ub - lb + 1)) + lb;
     7b6:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <rand>
     7ba:	63 e0       	ldi	r22, 0x03	; 3
     7bc:	70 e0       	ldi	r23, 0x00	; 0
     7be:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__divmodhi4>
     7c2:	ec 01       	movw	r28, r24
     7c4:	21 96       	adiw	r28, 0x01	; 1
		move_terminal_cursor(20, 1);
     7c6:	61 e0       	ldi	r22, 0x01	; 1
     7c8:	70 e0       	ldi	r23, 0x00	; 0
     7ca:	84 e1       	ldi	r24, 0x14	; 20
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <move_terminal_cursor>
		if (rand_num == 1) {
     7d2:	c1 30       	cpi	r28, 0x01	; 1
     7d4:	d1 05       	cpc	r29, r1
     7d6:	49 f4       	brne	.+18     	; 0x7ea <display_terminal_message+0x46>
			printf_P(PSTR("Player hit a wall"));
     7d8:	8d ec       	ldi	r24, 0xCD	; 205
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	9f 93       	push	r25
     7de:	8f 93       	push	r24
     7e0:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <printf_P>
     7e4:	0f 90       	pop	r0
     7e6:	0f 90       	pop	r0
     7e8:	42 c0       	rjmp	.+132    	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
		} else if (rand_num == 2) {
     7ea:	c2 30       	cpi	r28, 0x02	; 2
     7ec:	d1 05       	cpc	r29, r1
     7ee:	49 f4       	brne	.+18     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
			printf_P(PSTR("Wall hit"));
     7f0:	84 ec       	ldi	r24, 0xC4	; 196
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	9f 93       	push	r25
     7f6:	8f 93       	push	r24
     7f8:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <printf_P>
     7fc:	0f 90       	pop	r0
     7fe:	0f 90       	pop	r0
     800:	36 c0       	rjmp	.+108    	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
		} else if (rand_num == 3) {
     802:	23 97       	sbiw	r28, 0x03	; 3
     804:	a1 f5       	brne	.+104    	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
			printf_P(PSTR("There is a wall in the way"));
     806:	89 ea       	ldi	r24, 0xA9	; 169
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	9f 93       	push	r25
     80c:	8f 93       	push	r24
     80e:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <printf_P>
     812:	0f 90       	pop	r0
     814:	0f 90       	pop	r0
     816:	2b c0       	rjmp	.+86     	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
		}
	} else if (strcmp(type, "box_wall") == 0) {
     818:	6c e1       	ldi	r22, 0x1C	; 28
     81a:	72 e0       	ldi	r23, 0x02	; 2
     81c:	ce 01       	movw	r24, r28
     81e:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <strcmp>
     822:	89 2b       	or	r24, r25
     824:	79 f4       	brne	.+30     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
		move_terminal_cursor(20, 1);
     826:	61 e0       	ldi	r22, 0x01	; 1
     828:	70 e0       	ldi	r23, 0x00	; 0
     82a:	84 e1       	ldi	r24, 0x14	; 20
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <move_terminal_cursor>
		printf_P(PSTR("Cannot push box onto wall"));
     832:	8f e8       	ldi	r24, 0x8F	; 143
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	9f 93       	push	r25
     838:	8f 93       	push	r24
     83a:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <printf_P>
     83e:	0f 90       	pop	r0
     840:	0f 90       	pop	r0
     842:	15 c0       	rjmp	.+42     	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
	} else if (strcmp(type, "box_box") == 0) {
     844:	65 e2       	ldi	r22, 0x25	; 37
     846:	72 e0       	ldi	r23, 0x02	; 2
     848:	ce 01       	movw	r24, r28
     84a:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <strcmp>
     84e:	89 2b       	or	r24, r25
     850:	71 f4       	brne	.+28     	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
		move_terminal_cursor(20, 1);
     852:	61 e0       	ldi	r22, 0x01	; 1
     854:	70 e0       	ldi	r23, 0x00	; 0
     856:	84 e1       	ldi	r24, 0x14	; 20
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <move_terminal_cursor>
		printf_P(PSTR("Cannot stack boxes"));
     85e:	8c e7       	ldi	r24, 0x7C	; 124
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	9f 93       	push	r25
     864:	8f 93       	push	r24
     866:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <printf_P>
     86a:	0f 90       	pop	r0
     86c:	0f 90       	pop	r0
	}
	return;
}
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	08 95       	ret

00000874 <is_game_over>:

// This function checks if the game is over (i.e., the level is solved), and
// returns true iff (if and only if) the game is over.
bool is_game_over(void)
{
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
     874:	40 e0       	ldi	r20, 0x00	; 0
     876:	50 e0       	ldi	r21, 0x00	; 0
     878:	17 c0       	rjmp	.+46     	; 0x8a8 <is_game_over+0x34>
		for (int col = 0; col < MATRIX_NUM_COLUMNS; col++) {
			if (board[row][col] == TARGET) {
     87a:	fa 01       	movw	r30, r20
     87c:	e2 95       	swap	r30
     87e:	f2 95       	swap	r31
     880:	f0 7f       	andi	r31, 0xF0	; 240
     882:	fe 27       	eor	r31, r30
     884:	e0 7f       	andi	r30, 0xF0	; 240
     886:	fe 27       	eor	r31, r30
     888:	e0 56       	subi	r30, 0x60	; 96
     88a:	fd 4f       	sbci	r31, 0xFD	; 253
     88c:	e8 0f       	add	r30, r24
     88e:	f9 1f       	adc	r31, r25
     890:	20 81       	ld	r18, Z
     892:	24 30       	cpi	r18, 0x04	; 4
     894:	a1 f0       	breq	.+40     	; 0x8be <is_game_over+0x4a>
// This function checks if the game is over (i.e., the level is solved), and
// returns true iff (if and only if) the game is over.
bool is_game_over(void)
{
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
		for (int col = 0; col < MATRIX_NUM_COLUMNS; col++) {
     896:	01 96       	adiw	r24, 0x01	; 1
     898:	02 c0       	rjmp	.+4      	; 0x89e <is_game_over+0x2a>
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	80 31       	cpi	r24, 0x10	; 16
     8a0:	91 05       	cpc	r25, r1
     8a2:	5c f3       	brlt	.-42     	; 0x87a <is_game_over+0x6>

// This function checks if the game is over (i.e., the level is solved), and
// returns true iff (if and only if) the game is over.
bool is_game_over(void)
{
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
     8a4:	4f 5f       	subi	r20, 0xFF	; 255
     8a6:	5f 4f       	sbci	r21, 0xFF	; 255
     8a8:	48 30       	cpi	r20, 0x08	; 8
     8aa:	51 05       	cpc	r21, r1
     8ac:	b4 f3       	brlt	.-20     	; 0x89a <is_game_over+0x26>
			if (board[row][col] == TARGET) {
				return false;
			}
		}
	}
	paint_square(player_row, player_col);
     8ae:	60 91 9e 02 	lds	r22, 0x029E	; 0x80029e <player_col>
     8b2:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <player_row>
     8b6:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <paint_square>
	return true;
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	08 95       	ret
bool is_game_over(void)
{
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
		for (int col = 0; col < MATRIX_NUM_COLUMNS; col++) {
			if (board[row][col] == TARGET) {
				return false;
     8be:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}
	paint_square(player_row, player_col);
	return true;
}
     8c0:	08 95       	ret

000008c2 <modulo>:

//Calculates the modulus of a number for player movement
int modulo(int x,int y){
     8c2:	9b 01       	movw	r18, r22
	return (x % y + y) % y;
     8c4:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__divmodhi4>
     8c8:	82 0f       	add	r24, r18
     8ca:	93 1f       	adc	r25, r19
     8cc:	b9 01       	movw	r22, r18
     8ce:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__divmodhi4>
}
     8d2:	08 95       	ret

000008d4 <update_terminal_display>:
		printf("\n");
		GAME_BOARD_ROW++;
	}
}

void update_terminal_display(int board_row, int terminal_row, int terminal_col) {
     8d4:	0f 93       	push	r16
     8d6:	1f 93       	push	r17
     8d8:	cf 93       	push	r28
     8da:	df 93       	push	r29
     8dc:	8c 01       	movw	r16, r24
     8de:	cb 01       	movw	r24, r22
	move_terminal_cursor(terminal_row, terminal_col);
     8e0:	ba 01       	movw	r22, r20
     8e2:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <move_terminal_cursor>
	clear_to_end_of_line();
     8e6:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <clear_to_end_of_line>
	for (int column = 1; column <= MATRIX_NUM_COLUMNS-1; column++) {
     8ea:	c1 e0       	ldi	r28, 0x01	; 1
     8ec:	d0 e0       	ldi	r29, 0x00	; 0
     8ee:	43 c0       	rjmp	.+134    	; 0x976 <__stack+0x77>
		if (board[board_row][column] == ROOM) {
     8f0:	f8 01       	movw	r30, r16
     8f2:	e2 95       	swap	r30
     8f4:	f2 95       	swap	r31
     8f6:	f0 7f       	andi	r31, 0xF0	; 240
     8f8:	fe 27       	eor	r31, r30
     8fa:	e0 7f       	andi	r30, 0xF0	; 240
     8fc:	fe 27       	eor	r31, r30
     8fe:	e0 56       	subi	r30, 0x60	; 96
     900:	fd 4f       	sbci	r31, 0xFD	; 253
     902:	ec 0f       	add	r30, r28
     904:	fd 1f       	adc	r31, r29
     906:	80 81       	ld	r24, Z
     908:	81 11       	cpse	r24, r1
     90a:	09 c0       	rjmp	.+18     	; 0x91e <__stack+0x1f>
			printf("\033[100m   \033[0m");
     90c:	8d e2       	ldi	r24, 0x2D	; 45
     90e:	92 e0       	ldi	r25, 0x02	; 2
     910:	9f 93       	push	r25
     912:	8f 93       	push	r24
     914:	0e 94 75 0f 	call	0x1eea	; 0x1eea <printf>
     918:	0f 90       	pop	r0
     91a:	0f 90       	pop	r0
     91c:	2b c0       	rjmp	.+86     	; 0x974 <__stack+0x75>
		} else if (board[board_row][column] == WALL) {
     91e:	81 30       	cpi	r24, 0x01	; 1
     920:	49 f4       	brne	.+18     	; 0x934 <__stack+0x35>
			printf("\033[103m   \033[0m");
     922:	8b e3       	ldi	r24, 0x3B	; 59
     924:	92 e0       	ldi	r25, 0x02	; 2
     926:	9f 93       	push	r25
     928:	8f 93       	push	r24
     92a:	0e 94 75 0f 	call	0x1eea	; 0x1eea <printf>
     92e:	0f 90       	pop	r0
     930:	0f 90       	pop	r0
     932:	20 c0       	rjmp	.+64     	; 0x974 <__stack+0x75>
		} else if (board[board_row][column] == BOX) {
     934:	82 30       	cpi	r24, 0x02	; 2
     936:	49 f4       	brne	.+18     	; 0x94a <__stack+0x4b>
			printf("\033[43m   \033[0m");
     938:	89 e4       	ldi	r24, 0x49	; 73
     93a:	92 e0       	ldi	r25, 0x02	; 2
     93c:	9f 93       	push	r25
     93e:	8f 93       	push	r24
     940:	0e 94 75 0f 	call	0x1eea	; 0x1eea <printf>
     944:	0f 90       	pop	r0
     946:	0f 90       	pop	r0
     948:	15 c0       	rjmp	.+42     	; 0x974 <__stack+0x75>
		} else if (board[board_row][column] == TARGET) {
     94a:	84 30       	cpi	r24, 0x04	; 4
     94c:	49 f4       	brne	.+18     	; 0x960 <__stack+0x61>
			printf("\033[41m   \033[0m");
     94e:	86 e5       	ldi	r24, 0x56	; 86
     950:	92 e0       	ldi	r25, 0x02	; 2
     952:	9f 93       	push	r25
     954:	8f 93       	push	r24
     956:	0e 94 75 0f 	call	0x1eea	; 0x1eea <printf>
     95a:	0f 90       	pop	r0
     95c:	0f 90       	pop	r0
     95e:	0a c0       	rjmp	.+20     	; 0x974 <__stack+0x75>
		} else if (board[board_row][column] == (BOX | TARGET)) {
     960:	86 30       	cpi	r24, 0x06	; 6
     962:	41 f4       	brne	.+16     	; 0x974 <__stack+0x75>
			printf("\033[102m   \033[0m");
     964:	83 e6       	ldi	r24, 0x63	; 99
     966:	92 e0       	ldi	r25, 0x02	; 2
     968:	9f 93       	push	r25
     96a:	8f 93       	push	r24
     96c:	0e 94 75 0f 	call	0x1eea	; 0x1eea <printf>
     970:	0f 90       	pop	r0
     972:	0f 90       	pop	r0
}

void update_terminal_display(int board_row, int terminal_row, int terminal_col) {
	move_terminal_cursor(terminal_row, terminal_col);
	clear_to_end_of_line();
	for (int column = 1; column <= MATRIX_NUM_COLUMNS-1; column++) {
     974:	21 96       	adiw	r28, 0x01	; 1
     976:	c0 31       	cpi	r28, 0x10	; 16
     978:	d1 05       	cpc	r29, r1
     97a:	0c f4       	brge	.+2      	; 0x97e <__stack+0x7f>
     97c:	b9 cf       	rjmp	.-142    	; 0x8f0 <update_terminal_display+0x1c>
			printf("\033[41m   \033[0m");
		} else if (board[board_row][column] == (BOX | TARGET)) {
			printf("\033[102m   \033[0m");
		}
	}
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
     982:	1f 91       	pop	r17
     984:	0f 91       	pop	r16
     986:	08 95       	ret

00000988 <move_player>:
	}
}

// This function handles player movements.
bool move_player(int8_t delta_row, int8_t delta_col)
{
     988:	af 92       	push	r10
     98a:	bf 92       	push	r11
     98c:	cf 92       	push	r12
     98e:	df 92       	push	r13
     990:	ef 92       	push	r14
     992:	ff 92       	push	r15
     994:	0f 93       	push	r16
     996:	1f 93       	push	r17
     998:	cf 93       	push	r28
     99a:	df 93       	push	r29
     99c:	c6 2e       	mov	r12, r22
	// |    message area of the terminal and return a valid indicating a |
	// |    valid move.                                                  |
	// +-----------------------------------------------------------------+
	
	//Calculate next positions
	int next_row = modulo((player_row+delta_row), 8);
     99e:	b0 90 9f 02 	lds	r11, 0x029F	; 0x80029f <player_row>
     9a2:	e8 2e       	mov	r14, r24
     9a4:	88 0f       	add	r24, r24
     9a6:	ff 08       	sbc	r15, r15
     9a8:	68 e0       	ldi	r22, 0x08	; 8
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	c7 01       	movw	r24, r14
     9ae:	8b 0d       	add	r24, r11
     9b0:	91 1d       	adc	r25, r1
     9b2:	0e 94 61 04 	call	0x8c2	; 0x8c2 <modulo>
     9b6:	ec 01       	movw	r28, r24
	int next_col = modulo((player_col+delta_col), 16);
     9b8:	a0 90 9e 02 	lds	r10, 0x029E	; 0x80029e <player_col>
     9bc:	0c 2c       	mov	r0, r12
     9be:	00 0c       	add	r0, r0
     9c0:	dd 08       	sbc	r13, r13
     9c2:	60 e1       	ldi	r22, 0x10	; 16
     9c4:	70 e0       	ldi	r23, 0x00	; 0
     9c6:	c6 01       	movw	r24, r12
     9c8:	8a 0d       	add	r24, r10
     9ca:	91 1d       	adc	r25, r1
     9cc:	0e 94 61 04 	call	0x8c2	; 0x8c2 <modulo>
     9d0:	8c 01       	movw	r16, r24
	int next_next_row = modulo((next_row+delta_row), 8);
     9d2:	68 e0       	ldi	r22, 0x08	; 8
     9d4:	70 e0       	ldi	r23, 0x00	; 0
     9d6:	c7 01       	movw	r24, r14
     9d8:	8c 0f       	add	r24, r28
     9da:	9d 1f       	adc	r25, r29
     9dc:	0e 94 61 04 	call	0x8c2	; 0x8c2 <modulo>
     9e0:	7c 01       	movw	r14, r24
	int next_next_col = modulo((next_col+delta_col), 16);
     9e2:	60 e1       	ldi	r22, 0x10	; 16
     9e4:	70 e0       	ldi	r23, 0x00	; 0
     9e6:	c6 01       	movw	r24, r12
     9e8:	80 0f       	add	r24, r16
     9ea:	91 1f       	adc	r25, r17
     9ec:	0e 94 61 04 	call	0x8c2	; 0x8c2 <modulo>
     9f0:	6c 01       	movw	r12, r24

	paint_square(player_row, player_col);
     9f2:	6a 2d       	mov	r22, r10
     9f4:	8b 2d       	mov	r24, r11
     9f6:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <paint_square>
	move_terminal_cursor(20,0);
     9fa:	60 e0       	ldi	r22, 0x00	; 0
     9fc:	70 e0       	ldi	r23, 0x00	; 0
     9fe:	84 e1       	ldi	r24, 0x14	; 20
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <move_terminal_cursor>
	clear_to_end_of_line();
     a06:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <clear_to_end_of_line>
	
	//checks for wall in front of player
	if (board[next_row][next_col] == WALL) {
     a0a:	fe 01       	movw	r30, r28
     a0c:	e2 95       	swap	r30
     a0e:	f2 95       	swap	r31
     a10:	f0 7f       	andi	r31, 0xF0	; 240
     a12:	fe 27       	eor	r31, r30
     a14:	e0 7f       	andi	r30, 0xF0	; 240
     a16:	fe 27       	eor	r31, r30
     a18:	e0 56       	subi	r30, 0x60	; 96
     a1a:	fd 4f       	sbci	r31, 0xFD	; 253
     a1c:	e0 0f       	add	r30, r16
     a1e:	f1 1f       	adc	r31, r17
     a20:	80 81       	ld	r24, Z
     a22:	81 30       	cpi	r24, 0x01	; 1
     a24:	31 f4       	brne	.+12     	; 0xa32 <move_player+0xaa>
		display_terminal_message("wall");
     a26:	80 e2       	ldi	r24, 0x20	; 32
     a28:	92 e0       	ldi	r25, 0x02	; 2
     a2a:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <display_terminal_message>
		return false;
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	d2 c0       	rjmp	.+420    	; 0xbd6 <move_player+0x24e>
		
	//checks for filled target in front of player
	} else if (board[next_row][next_col] == (BOX | TARGET)) {
     a32:	86 30       	cpi	r24, 0x06	; 6
     a34:	09 f0       	breq	.+2      	; 0xa38 <move_player+0xb0>
     a36:	4b c0       	rjmp	.+150    	; 0xace <move_player+0x146>
		if (board[next_next_row][next_next_col] == WALL) {
     a38:	f7 01       	movw	r30, r14
     a3a:	e2 95       	swap	r30
     a3c:	f2 95       	swap	r31
     a3e:	f0 7f       	andi	r31, 0xF0	; 240
     a40:	fe 27       	eor	r31, r30
     a42:	e0 7f       	andi	r30, 0xF0	; 240
     a44:	fe 27       	eor	r31, r30
     a46:	e0 56       	subi	r30, 0x60	; 96
     a48:	fd 4f       	sbci	r31, 0xFD	; 253
     a4a:	ec 0d       	add	r30, r12
     a4c:	fd 1d       	adc	r31, r13
     a4e:	80 81       	ld	r24, Z
     a50:	81 30       	cpi	r24, 0x01	; 1
     a52:	31 f4       	brne	.+12     	; 0xa60 <move_player+0xd8>
			display_terminal_message("box_wall");
     a54:	8c e1       	ldi	r24, 0x1C	; 28
     a56:	92 e0       	ldi	r25, 0x02	; 2
     a58:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <display_terminal_message>
			return false;
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	bb c0       	rjmp	.+374    	; 0xbd6 <move_player+0x24e>
		}
		board[next_row][next_col] = TARGET;
     a60:	fe 01       	movw	r30, r28
     a62:	e2 95       	swap	r30
     a64:	f2 95       	swap	r31
     a66:	f0 7f       	andi	r31, 0xF0	; 240
     a68:	fe 27       	eor	r31, r30
     a6a:	e0 7f       	andi	r30, 0xF0	; 240
     a6c:	fe 27       	eor	r31, r30
     a6e:	e0 56       	subi	r30, 0x60	; 96
     a70:	fd 4f       	sbci	r31, 0xFD	; 253
     a72:	e0 0f       	add	r30, r16
     a74:	f1 1f       	adc	r31, r17
     a76:	84 e0       	ldi	r24, 0x04	; 4
     a78:	80 83       	st	Z, r24
		paint_square(next_row, next_col);
     a7a:	60 2f       	mov	r22, r16
     a7c:	8c 2f       	mov	r24, r28
     a7e:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <paint_square>
		update_terminal_display(next_row, MATRIX_NUM_ROWS-next_row, 1);
     a82:	68 94       	set
     a84:	aa 24       	eor	r10, r10
     a86:	a3 f8       	bld	r10, 3
     a88:	b1 2c       	mov	r11, r1
     a8a:	b5 01       	movw	r22, r10
     a8c:	6c 1b       	sub	r22, r28
     a8e:	7d 0b       	sbc	r23, r29
     a90:	41 e0       	ldi	r20, 0x01	; 1
     a92:	50 e0       	ldi	r21, 0x00	; 0
     a94:	ce 01       	movw	r24, r28
     a96:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <update_terminal_display>
		board[next_next_row][next_next_col] = BOX;
     a9a:	f7 01       	movw	r30, r14
     a9c:	e2 95       	swap	r30
     a9e:	f2 95       	swap	r31
     aa0:	f0 7f       	andi	r31, 0xF0	; 240
     aa2:	fe 27       	eor	r31, r30
     aa4:	e0 7f       	andi	r30, 0xF0	; 240
     aa6:	fe 27       	eor	r31, r30
     aa8:	e0 56       	subi	r30, 0x60	; 96
     aaa:	fd 4f       	sbci	r31, 0xFD	; 253
     aac:	ec 0d       	add	r30, r12
     aae:	fd 1d       	adc	r31, r13
     ab0:	82 e0       	ldi	r24, 0x02	; 2
     ab2:	80 83       	st	Z, r24
		paint_square(next_next_row, next_next_col);
     ab4:	6c 2d       	mov	r22, r12
     ab6:	8e 2d       	mov	r24, r14
     ab8:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <paint_square>
		update_terminal_display(next_next_row, MATRIX_NUM_ROWS-next_next_row, 1);
     abc:	b5 01       	movw	r22, r10
     abe:	6e 19       	sub	r22, r14
     ac0:	7f 09       	sbc	r23, r15
     ac2:	41 e0       	ldi	r20, 0x01	; 1
     ac4:	50 e0       	ldi	r21, 0x00	; 0
     ac6:	c7 01       	movw	r24, r14
     ac8:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <update_terminal_display>
     acc:	6e c0       	rjmp	.+220    	; 0xbaa <move_player+0x222>
		
	//checks for box in front of player
	} else if (board[next_row][next_col] == BOX) {
     ace:	82 30       	cpi	r24, 0x02	; 2
     ad0:	09 f0       	breq	.+2      	; 0xad4 <move_player+0x14c>
     ad2:	6b c0       	rjmp	.+214    	; 0xbaa <move_player+0x222>
		if (board[next_next_row][next_next_col] == WALL) {
     ad4:	f7 01       	movw	r30, r14
     ad6:	e2 95       	swap	r30
     ad8:	f2 95       	swap	r31
     ada:	f0 7f       	andi	r31, 0xF0	; 240
     adc:	fe 27       	eor	r31, r30
     ade:	e0 7f       	andi	r30, 0xF0	; 240
     ae0:	fe 27       	eor	r31, r30
     ae2:	e0 56       	subi	r30, 0x60	; 96
     ae4:	fd 4f       	sbci	r31, 0xFD	; 253
     ae6:	ec 0d       	add	r30, r12
     ae8:	fd 1d       	adc	r31, r13
     aea:	80 81       	ld	r24, Z
     aec:	81 30       	cpi	r24, 0x01	; 1
     aee:	31 f4       	brne	.+12     	; 0xafc <move_player+0x174>
			display_terminal_message("box_wall");
     af0:	8c e1       	ldi	r24, 0x1C	; 28
     af2:	92 e0       	ldi	r25, 0x02	; 2
     af4:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <display_terminal_message>
			return false;
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	6d c0       	rjmp	.+218    	; 0xbd6 <move_player+0x24e>
		} else if (board[next_next_row][next_next_col] == BOX) {
     afc:	82 30       	cpi	r24, 0x02	; 2
     afe:	31 f4       	brne	.+12     	; 0xb0c <move_player+0x184>
			display_terminal_message("box_box");
     b00:	85 e2       	ldi	r24, 0x25	; 37
     b02:	92 e0       	ldi	r25, 0x02	; 2
     b04:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <display_terminal_message>
			return false;
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	65 c0       	rjmp	.+202    	; 0xbd6 <move_player+0x24e>
		} else {
			board[next_row][next_col] = ROOM;
     b0c:	fe 01       	movw	r30, r28
     b0e:	e2 95       	swap	r30
     b10:	f2 95       	swap	r31
     b12:	f0 7f       	andi	r31, 0xF0	; 240
     b14:	fe 27       	eor	r31, r30
     b16:	e0 7f       	andi	r30, 0xF0	; 240
     b18:	fe 27       	eor	r31, r30
     b1a:	e0 56       	subi	r30, 0x60	; 96
     b1c:	fd 4f       	sbci	r31, 0xFD	; 253
     b1e:	e0 0f       	add	r30, r16
     b20:	f1 1f       	adc	r31, r17
     b22:	10 82       	st	Z, r1
			if (board[next_next_row][next_next_col] == TARGET) {
     b24:	f7 01       	movw	r30, r14
     b26:	e2 95       	swap	r30
     b28:	f2 95       	swap	r31
     b2a:	f0 7f       	andi	r31, 0xF0	; 240
     b2c:	fe 27       	eor	r31, r30
     b2e:	e0 7f       	andi	r30, 0xF0	; 240
     b30:	fe 27       	eor	r31, r30
     b32:	e0 56       	subi	r30, 0x60	; 96
     b34:	fd 4f       	sbci	r31, 0xFD	; 253
     b36:	ec 0d       	add	r30, r12
     b38:	fd 1d       	adc	r31, r13
     b3a:	80 81       	ld	r24, Z
     b3c:	84 30       	cpi	r24, 0x04	; 4
     b3e:	d9 f4       	brne	.+54     	; 0xb76 <move_player+0x1ee>
				board[next_next_row][next_next_col] = (TARGET | BOX);
     b40:	f7 01       	movw	r30, r14
     b42:	e2 95       	swap	r30
     b44:	f2 95       	swap	r31
     b46:	f0 7f       	andi	r31, 0xF0	; 240
     b48:	fe 27       	eor	r31, r30
     b4a:	e0 7f       	andi	r30, 0xF0	; 240
     b4c:	fe 27       	eor	r31, r30
     b4e:	e0 56       	subi	r30, 0x60	; 96
     b50:	fd 4f       	sbci	r31, 0xFD	; 253
     b52:	ec 0d       	add	r30, r12
     b54:	fd 1d       	adc	r31, r13
     b56:	86 e0       	ldi	r24, 0x06	; 6
     b58:	80 83       	st	Z, r24
				paint_square(next_next_row, next_next_col);
     b5a:	6c 2d       	mov	r22, r12
     b5c:	8e 2d       	mov	r24, r14
     b5e:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <paint_square>
				update_terminal_display(next_next_row, MATRIX_NUM_ROWS-next_next_row, 1);
     b62:	68 e0       	ldi	r22, 0x08	; 8
     b64:	70 e0       	ldi	r23, 0x00	; 0
     b66:	6e 19       	sub	r22, r14
     b68:	7f 09       	sbc	r23, r15
     b6a:	41 e0       	ldi	r20, 0x01	; 1
     b6c:	50 e0       	ldi	r21, 0x00	; 0
     b6e:	c7 01       	movw	r24, r14
     b70:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <update_terminal_display>
     b74:	1a c0       	rjmp	.+52     	; 0xbaa <move_player+0x222>
			} else {
				board[next_next_row][next_next_col] = BOX;
     b76:	f7 01       	movw	r30, r14
     b78:	e2 95       	swap	r30
     b7a:	f2 95       	swap	r31
     b7c:	f0 7f       	andi	r31, 0xF0	; 240
     b7e:	fe 27       	eor	r31, r30
     b80:	e0 7f       	andi	r30, 0xF0	; 240
     b82:	fe 27       	eor	r31, r30
     b84:	e0 56       	subi	r30, 0x60	; 96
     b86:	fd 4f       	sbci	r31, 0xFD	; 253
     b88:	ec 0d       	add	r30, r12
     b8a:	fd 1d       	adc	r31, r13
     b8c:	82 e0       	ldi	r24, 0x02	; 2
     b8e:	80 83       	st	Z, r24
				paint_square(next_next_row, next_next_col);
     b90:	6c 2d       	mov	r22, r12
     b92:	8e 2d       	mov	r24, r14
     b94:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <paint_square>
				update_terminal_display(next_next_row, MATRIX_NUM_ROWS-next_next_row, 1);
     b98:	68 e0       	ldi	r22, 0x08	; 8
     b9a:	70 e0       	ldi	r23, 0x00	; 0
     b9c:	6e 19       	sub	r22, r14
     b9e:	7f 09       	sbc	r23, r15
     ba0:	41 e0       	ldi	r20, 0x01	; 1
     ba2:	50 e0       	ldi	r21, 0x00	; 0
     ba4:	c7 01       	movw	r24, r14
     ba6:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <update_terminal_display>
			}
		}
	}
	player_row = next_row;
     baa:	8c 2f       	mov	r24, r28
     bac:	c0 93 9f 02 	sts	0x029F, r28	; 0x80029f <player_row>
	player_col = next_col;
     bb0:	00 93 9e 02 	sts	0x029E, r16	; 0x80029e <player_col>
	paint_square(player_row, player_col);
     bb4:	60 2f       	mov	r22, r16
     bb6:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <paint_square>
	update_terminal_display(player_row, MATRIX_NUM_ROWS-player_row, 1);
     bba:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <player_row>
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	68 e0       	ldi	r22, 0x08	; 8
     bc2:	70 e0       	ldi	r23, 0x00	; 0
     bc4:	68 1b       	sub	r22, r24
     bc6:	79 0b       	sbc	r23, r25
     bc8:	41 e0       	ldi	r20, 0x01	; 1
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <update_terminal_display>
	flash_player();
     bd0:	0e 94 80 03 	call	0x700	; 0x700 <flash_player>
	return true;
     bd4:	81 e0       	ldi	r24, 0x01	; 1
}
     bd6:	df 91       	pop	r29
     bd8:	cf 91       	pop	r28
     bda:	1f 91       	pop	r17
     bdc:	0f 91       	pop	r16
     bde:	ff 90       	pop	r15
     be0:	ef 90       	pop	r14
     be2:	df 90       	pop	r13
     be4:	cf 90       	pop	r12
     be6:	bf 90       	pop	r11
     be8:	af 90       	pop	r10
     bea:	08 95       	ret

00000bec <draw_terminal_board>:
int modulo(int x,int y){
	return (x % y + y) % y;
}

//Paints the current board on the terminal display
void draw_terminal_board(void) {
     bec:	0f 93       	push	r16
     bee:	1f 93       	push	r17
     bf0:	cf 93       	push	r28
     bf2:	df 93       	push	r29
	int GAME_BOARD_ROW = 1;
	int GAME_BOARD_COL = 1;
	for (int row = MATRIX_NUM_ROWS-1; row >= 0; row--) {
     bf4:	c7 e0       	ldi	r28, 0x07	; 7
     bf6:	d0 e0       	ldi	r29, 0x00	; 0
	return (x % y + y) % y;
}

//Paints the current board on the terminal display
void draw_terminal_board(void) {
	int GAME_BOARD_ROW = 1;
     bf8:	01 e0       	ldi	r16, 0x01	; 1
     bfa:	10 e0       	ldi	r17, 0x00	; 0
	int GAME_BOARD_COL = 1;
	for (int row = MATRIX_NUM_ROWS-1; row >= 0; row--) {
     bfc:	0d c0       	rjmp	.+26     	; 0xc18 <draw_terminal_board+0x2c>
		update_terminal_display(row, GAME_BOARD_ROW, GAME_BOARD_COL);
     bfe:	41 e0       	ldi	r20, 0x01	; 1
     c00:	50 e0       	ldi	r21, 0x00	; 0
     c02:	b8 01       	movw	r22, r16
     c04:	ce 01       	movw	r24, r28
     c06:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <update_terminal_display>
		printf("\n");
     c0a:	8a e0       	ldi	r24, 0x0A	; 10
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <putchar>
		GAME_BOARD_ROW++;
     c12:	0f 5f       	subi	r16, 0xFF	; 255
     c14:	1f 4f       	sbci	r17, 0xFF	; 255

//Paints the current board on the terminal display
void draw_terminal_board(void) {
	int GAME_BOARD_ROW = 1;
	int GAME_BOARD_COL = 1;
	for (int row = MATRIX_NUM_ROWS-1; row >= 0; row--) {
     c16:	21 97       	sbiw	r28, 0x01	; 1
     c18:	dd 23       	and	r29, r29
     c1a:	8c f7       	brge	.-30     	; 0xbfe <draw_terminal_board+0x12>
		update_terminal_display(row, GAME_BOARD_ROW, GAME_BOARD_COL);
		printf("\n");
		GAME_BOARD_ROW++;
	}
}
     c1c:	df 91       	pop	r29
     c1e:	cf 91       	pop	r28
     c20:	1f 91       	pop	r17
     c22:	0f 91       	pop	r16
     c24:	08 95       	ret

00000c26 <initialise_game>:
	}
}

// This function initialises the global variables used to store the game
// state, and renders the initial game display.
void initialise_game(int level) {
     c26:	cf 93       	push	r28
     c28:	df 93       	push	r29
	
	initialise_level(level);
     c2a:	0e 94 03 03 	call	0x606	; 0x606 <initialise_level>

	// Make the player icon initially invisible.
	player_visible = false;
     c2e:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <player_visible>

	// Draw the game board (map).
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     c32:	d0 e0       	ldi	r29, 0x00	; 0
     c34:	0a c0       	rjmp	.+20     	; 0xc4a <initialise_game+0x24>
	{
		for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
		{
			paint_square(row, col);
     c36:	6c 2f       	mov	r22, r28
     c38:	8d 2f       	mov	r24, r29
     c3a:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <paint_square>
	player_visible = false;

	// Draw the game board (map).
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
	{
		for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
     c3e:	cf 5f       	subi	r28, 0xFF	; 255
     c40:	01 c0       	rjmp	.+2      	; 0xc44 <initialise_game+0x1e>
     c42:	c0 e0       	ldi	r28, 0x00	; 0
     c44:	c0 31       	cpi	r28, 0x10	; 16
     c46:	b8 f3       	brcs	.-18     	; 0xc36 <initialise_game+0x10>

	// Make the player icon initially invisible.
	player_visible = false;

	// Draw the game board (map).
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     c48:	df 5f       	subi	r29, 0xFF	; 255
     c4a:	d8 30       	cpi	r29, 0x08	; 8
     c4c:	d0 f3       	brcs	.-12     	; 0xc42 <initialise_game+0x1c>
			paint_square(row, col);
		}
	}
	
	//Draw the game board on the terminal
	draw_terminal_board();
     c4e:	0e 94 f6 05 	call	0xbec	; 0xbec <draw_terminal_board>
}
     c52:	df 91       	pop	r29
     c54:	cf 91       	pop	r28
     c56:	08 95       	ret

00000c58 <init_joystick>:

#include <stdio.h>
#include <avr/interrupt.h>

void init_joystick(void) {
	init_serial_stdio(19200,0);
     c58:	40 e0       	ldi	r20, 0x00	; 0
     c5a:	60 e0       	ldi	r22, 0x00	; 0
     c5c:	7b e4       	ldi	r23, 0x4B	; 75
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <init_serial_stdio>

	// Set up ADC - AVCC reference, right adjust
	// Input selection doesn't matter yet - we'll swap this around in the while
	// loop below.
	ADMUX = (1<<REFS0);
     c66:	80 e4       	ldi	r24, 0x40	; 64
     c68:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	// Turn on the ADC (but don't start a conversion yet). Choose a clock
	// divider of 64. (The ADC clock must be somewhere
	// between 50kHz and 200kHz. We will divide our 8MHz clock by 64
	// to give us 125kHz.)
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1);
     c6c:	86 e8       	ldi	r24, 0x86	; 134
     c6e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c72:	08 95       	ret

00000c74 <init_ledmatrix>:
}

void ledmatrix_shift_display_down(void)
{
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     c74:	80 e8       	ldi	r24, 0x80	; 128
     c76:	0e 94 4d 0b 	call	0x169a	; 0x169a <spi_setup_master>
     c7a:	08 95       	ret

00000c7c <ledmatrix_update_pixel>:
     c7c:	1f 93       	push	r17
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	60 31       	cpi	r22, 0x10	; 16
     c84:	b0 f4       	brcc	.+44     	; 0xcb2 <ledmatrix_update_pixel+0x36>
     c86:	88 30       	cpi	r24, 0x08	; 8
     c88:	a0 f4       	brcc	.+40     	; 0xcb2 <ledmatrix_update_pixel+0x36>
     c8a:	14 2f       	mov	r17, r20
     c8c:	d6 2f       	mov	r29, r22
     c8e:	c8 2f       	mov	r28, r24
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <spi_send_byte>
     c96:	8c 2f       	mov	r24, r28
     c98:	87 70       	andi	r24, 0x07	; 7
     c9a:	20 e1       	ldi	r18, 0x10	; 16
     c9c:	82 9f       	mul	r24, r18
     c9e:	c0 01       	movw	r24, r0
     ca0:	11 24       	eor	r1, r1
     ca2:	6d 2f       	mov	r22, r29
     ca4:	6f 70       	andi	r22, 0x0F	; 15
     ca6:	86 2b       	or	r24, r22
     ca8:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <spi_send_byte>
     cac:	81 2f       	mov	r24, r17
     cae:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <spi_send_byte>
     cb2:	df 91       	pop	r29
     cb4:	cf 91       	pop	r28
     cb6:	1f 91       	pop	r17
     cb8:	08 95       	ret

00000cba <ledmatrix_update_column>:
     cba:	0f 93       	push	r16
     cbc:	1f 93       	push	r17
     cbe:	cf 93       	push	r28
     cc0:	80 31       	cpi	r24, 0x10	; 16
     cc2:	a0 f4       	brcc	.+40     	; 0xcec <ledmatrix_update_column+0x32>
     cc4:	8b 01       	movw	r16, r22
     cc6:	c8 2f       	mov	r28, r24
     cc8:	83 e0       	ldi	r24, 0x03	; 3
     cca:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <spi_send_byte>
     cce:	8c 2f       	mov	r24, r28
     cd0:	8f 70       	andi	r24, 0x0F	; 15
     cd2:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <spi_send_byte>
     cd6:	c0 e0       	ldi	r28, 0x00	; 0
     cd8:	07 c0       	rjmp	.+14     	; 0xce8 <ledmatrix_update_column+0x2e>
     cda:	f8 01       	movw	r30, r16
     cdc:	ec 0f       	add	r30, r28
     cde:	f1 1d       	adc	r31, r1
     ce0:	80 81       	ld	r24, Z
     ce2:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <spi_send_byte>
     ce6:	cf 5f       	subi	r28, 0xFF	; 255
     ce8:	c8 30       	cpi	r28, 0x08	; 8
     cea:	b8 f3       	brcs	.-18     	; 0xcda <ledmatrix_update_column+0x20>
     cec:	cf 91       	pop	r28
     cee:	1f 91       	pop	r17
     cf0:	0f 91       	pop	r16
     cf2:	08 95       	ret

00000cf4 <ledmatrix_shift_display_left>:
     cf4:	84 e0       	ldi	r24, 0x04	; 4
     cf6:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <spi_send_byte>
     cfa:	82 e0       	ldi	r24, 0x02	; 2
     cfc:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <spi_send_byte>
     d00:	08 95       	ret

00000d02 <ledmatrix_clear>:
}

void ledmatrix_clear(void)
{
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     d02:	8f e0       	ldi	r24, 0x0F	; 15
     d04:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <spi_send_byte>
     d08:	08 95       	ret

00000d0a <initialise_hardware>:
	DDRD &= (11111101);
	handle_game_over();
}

void increment_step_counter(void) {
	step_counter++;
     d0a:	0e 94 3a 06 	call	0xc74	; 0xc74 <init_ledmatrix>
     d0e:	0e 94 c4 01 	call	0x388	; 0x388 <init_buttons>
     d12:	40 e0       	ldi	r20, 0x00	; 0
     d14:	60 e0       	ldi	r22, 0x00	; 0
     d16:	7b e4       	ldi	r23, 0x4B	; 75
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <init_serial_stdio>
     d20:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <init_timer0>
     d24:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <init_timer1>
     d28:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <init_timer2>
     d2c:	0e 94 54 02 	call	0x4a8	; 0x4a8 <init_buzzer>
     d30:	0e 94 2c 06 	call	0xc58	; 0xc58 <init_joystick>
     d34:	78 94       	sei
     d36:	08 95       	ret

00000d38 <start_screen>:
     d38:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <hide_cursor>
     d3c:	0e 94 57 0d 	call	0x1aae	; 0x1aae <normal_display_mode>
     d40:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <clear_terminal>
     d44:	65 e0       	ldi	r22, 0x05	; 5
     d46:	83 e0       	ldi	r24, 0x03	; 3
     d48:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <display_terminal_title>
     d4c:	65 e0       	ldi	r22, 0x05	; 5
     d4e:	70 e0       	ldi	r23, 0x00	; 0
     d50:	8b e0       	ldi	r24, 0x0B	; 11
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <move_terminal_cursor>
     d58:	8c e3       	ldi	r24, 0x3C	; 60
     d5a:	91 e0       	ldi	r25, 0x01	; 1
     d5c:	9f 93       	push	r25
     d5e:	8f 93       	push	r24
     d60:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <printf_P>
     d64:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <setup_start_screen>
     d68:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <clear_button_presses>
     d6c:	0f 90       	pop	r0
     d6e:	0f 90       	pop	r0
     d70:	0e 94 d6 01 	call	0x3ac	; 0x3ac <button_pushed>
     d74:	8f 3f       	cpi	r24, 0xFF	; 255
     d76:	99 f4       	brne	.+38     	; 0xd9e <start_screen+0x66>
     d78:	0e 94 41 0b 	call	0x1682	; 0x1682 <serial_input_available>
     d7c:	88 23       	and	r24, r24
     d7e:	61 f0       	breq	.+24     	; 0xd98 <start_screen+0x60>
     d80:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__iob>
     d84:	90 91 4a 04 	lds	r25, 0x044A	; 0x80044a <__iob+0x1>
     d88:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <fgetc>
     d8c:	83 37       	cpi	r24, 0x73	; 115
     d8e:	91 05       	cpc	r25, r1
     d90:	31 f0       	breq	.+12     	; 0xd9e <start_screen+0x66>
     d92:	83 35       	cpi	r24, 0x53	; 83
     d94:	91 05       	cpc	r25, r1
     d96:	19 f0       	breq	.+6      	; 0xd9e <start_screen+0x66>
     d98:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <update_start_screen>
     d9c:	e9 cf       	rjmp	.-46     	; 0xd70 <start_screen+0x38>
     d9e:	08 95       	ret

00000da0 <new_game>:
     da0:	cf 93       	push	r28
     da2:	df 93       	push	r29
     da4:	ec 01       	movw	r28, r24
     da6:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <hide_cursor>
     daa:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <clear_terminal>
     dae:	ce 01       	movw	r24, r28
     db0:	0e 94 13 06 	call	0xc26	; 0xc26 <initialise_game>
     db4:	61 e0       	ldi	r22, 0x01	; 1
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	8a e0       	ldi	r24, 0x0A	; 10
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <move_terminal_cursor>
     dc0:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <current_level>
     dc4:	1f 92       	push	r1
     dc6:	8f 93       	push	r24
     dc8:	81 e7       	ldi	r24, 0x71	; 113
     dca:	92 e0       	ldi	r25, 0x02	; 2
     dcc:	9f 93       	push	r25
     dce:	8f 93       	push	r24
     dd0:	0e 94 75 0f 	call	0x1eea	; 0x1eea <printf>
     dd4:	8a b1       	in	r24, 0x0a	; 10
     dd6:	80 64       	ori	r24, 0x40	; 64
     dd8:	8a b9       	out	0x0a, r24	; 10
     dda:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <buzzer_enabled>
     dde:	0e 94 71 02 	call	0x4e2	; 0x4e2 <play_start_sound>
     de2:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <clear_button_presses>
     de6:	0e 94 48 0b 	call	0x1690	; 0x1690 <clear_serial_input_buffer>
     dea:	10 92 31 03 	sts	0x0331, r1	; 0x800331 <step_counter>
     dee:	0f 90       	pop	r0
     df0:	0f 90       	pop	r0
     df2:	0f 90       	pop	r0
     df4:	0f 90       	pop	r0
     df6:	df 91       	pop	r29
     df8:	cf 91       	pop	r28
     dfa:	08 95       	ret

00000dfc <handle_game_over>:
}

void handle_game_over(void)
{
	move_terminal_cursor(14, 10);
     dfc:	6a e0       	ldi	r22, 0x0A	; 10
     dfe:	70 e0       	ldi	r23, 0x00	; 0
     e00:	8e e0       	ldi	r24, 0x0E	; 14
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <move_terminal_cursor>
	printf_P(PSTR("GAME OVER"));
     e08:	82 e3       	ldi	r24, 0x32	; 50
     e0a:	91 e0       	ldi	r25, 0x01	; 1
     e0c:	9f 93       	push	r25
     e0e:	8f 93       	push	r24
     e10:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <printf_P>
	move_terminal_cursor(15, 10);
     e14:	6a e0       	ldi	r22, 0x0A	; 10
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	8f e0       	ldi	r24, 0x0F	; 15
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <move_terminal_cursor>
	printf_P(PSTR("Press 'r'/'R' to restart, 'e'/'E' to exit,"));
     e20:	87 e0       	ldi	r24, 0x07	; 7
     e22:	91 e0       	ldi	r25, 0x01	; 1
     e24:	9f 93       	push	r25
     e26:	8f 93       	push	r24
     e28:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <printf_P>
	move_terminal_cursor(16, 10);
     e2c:	6a e0       	ldi	r22, 0x0A	; 10
     e2e:	70 e0       	ldi	r23, 0x00	; 0
     e30:	80 e1       	ldi	r24, 0x10	; 16
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <move_terminal_cursor>
	printf_P(PSTR("or press 'n'/'N' to progress to level 2"));
     e38:	8f ed       	ldi	r24, 0xDF	; 223
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	9f 93       	push	r25
     e3e:	8f 93       	push	r24
     e40:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <printf_P>
	
	//calculate and print score
	int score = 0;
	if (200-step_counter > 0) {
     e44:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <step_counter>
     e48:	c8 ec       	ldi	r28, 0xC8	; 200
     e4a:	d0 e0       	ldi	r29, 0x00	; 0
     e4c:	c8 1b       	sub	r28, r24
     e4e:	d1 09       	sbc	r29, r1
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	1c 16       	cp	r1, r28
     e5e:	1d 06       	cpc	r1, r29
     e60:	14 f0       	brlt	.+4      	; 0xe66 <handle_game_over+0x6a>
	printf_P(PSTR("Press 'r'/'R' to restart, 'e'/'E' to exit,"));
	move_terminal_cursor(16, 10);
	printf_P(PSTR("or press 'n'/'N' to progress to level 2"));
	
	//calculate and print score
	int score = 0;
     e62:	c0 e0       	ldi	r28, 0x00	; 0
     e64:	d0 e0       	ldi	r29, 0x00	; 0
	if (200-step_counter > 0) {
		score += 200-step_counter;
	}
	if (1200-play_time > 0) {
     e66:	20 91 34 03 	lds	r18, 0x0334	; 0x800334 <play_time>
     e6a:	80 eb       	ldi	r24, 0xB0	; 176
     e6c:	94 e0       	ldi	r25, 0x04	; 4
     e6e:	82 1b       	sub	r24, r18
     e70:	91 09       	sbc	r25, r1
     e72:	18 16       	cp	r1, r24
     e74:	19 06       	cpc	r1, r25
     e76:	14 f4       	brge	.+4      	; 0xe7c <handle_game_over+0x80>
		score += 1200-play_time;
     e78:	c8 0f       	add	r28, r24
     e7a:	d9 1f       	adc	r29, r25
	}
	move_terminal_cursor(18, 10);
     e7c:	6a e0       	ldi	r22, 0x0A	; 10
     e7e:	70 e0       	ldi	r23, 0x00	; 0
     e80:	82 e1       	ldi	r24, 0x12	; 18
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <move_terminal_cursor>
	printf("Score: %d", score);
     e88:	df 93       	push	r29
     e8a:	cf 93       	push	r28
     e8c:	8b e7       	ldi	r24, 0x7B	; 123
     e8e:	92 e0       	ldi	r25, 0x02	; 2
     e90:	9f 93       	push	r25
     e92:	8f 93       	push	r24
     e94:	0e 94 75 0f 	call	0x1eea	; 0x1eea <printf>
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	0f 90       	pop	r0

	//For ssd
	int digit = 0;
     ea0:	c0 e0       	ldi	r28, 0x00	; 0
     ea2:	d0 e0       	ldi	r29, 0x00	; 0
	while (1)
	{
		// Get serial input. If no serial input is ready, serial_input
		// would be -1 (not a valid character).
		int serial_input = -1;
		if (serial_input_available())
     ea4:	0e 94 41 0b 	call	0x1682	; 0x1682 <serial_input_available>
     ea8:	88 23       	and	r24, r24
     eaa:	39 f0       	breq	.+14     	; 0xeba <handle_game_over+0xbe>
		{
			serial_input = fgetc(stdin);
     eac:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__iob>
     eb0:	90 91 4a 04 	lds	r25, 0x044A	; 0x80044a <__iob+0x1>
     eb4:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <fgetc>
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <handle_game_over+0xc2>
	// Do nothing until a valid input is made.
	while (1)
	{
		// Get serial input. If no serial input is ready, serial_input
		// would be -1 (not a valid character).
		int serial_input = -1;
     eba:	8f ef       	ldi	r24, 0xFF	; 255
     ebc:	9f ef       	ldi	r25, 0xFF	; 255
		{
			serial_input = fgetc(stdin);
		}

		// Check serial input.
		if (toupper(serial_input) == 'R') {
     ebe:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <toupper>
     ec2:	82 35       	cpi	r24, 0x52	; 82
     ec4:	91 05       	cpc	r25, r1
     ec6:	41 f4       	brne	.+16     	; 0xed8 <handle_game_over+0xdc>
			new_game(current_level);
     ec8:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <current_level>
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	0e 94 d0 06 	call	0xda0	; 0xda0 <new_game>
			play_game();
     ed2:	0e 94 c3 07 	call	0xf86	; 0xf86 <play_game>
     ed6:	1c c0       	rjmp	.+56     	; 0xf10 <handle_game_over+0x114>
		} else if (toupper(serial_input) == 'E') {
     ed8:	85 34       	cpi	r24, 0x45	; 69
     eda:	91 05       	cpc	r25, r1
     edc:	69 f4       	brne	.+26     	; 0xef8 <handle_game_over+0xfc>
			current_level = 1;
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <current_level>
			start_screen();
     ee4:	0e 94 9c 06 	call	0xd38	; 0xd38 <start_screen>
			new_game(current_level);
     ee8:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <current_level>
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	0e 94 d0 06 	call	0xda0	; 0xda0 <new_game>
			play_game();
     ef2:	0e 94 c3 07 	call	0xf86	; 0xf86 <play_game>
     ef6:	0c c0       	rjmp	.+24     	; 0xf10 <handle_game_over+0x114>
		} else if (toupper(serial_input) == 'N') {
     ef8:	8e 34       	cpi	r24, 0x4E	; 78
     efa:	91 05       	cpc	r25, r1
     efc:	49 f4       	brne	.+18     	; 0xf10 <handle_game_over+0x114>
			current_level = 2;
     efe:	82 e0       	ldi	r24, 0x02	; 2
     f00:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <current_level>
			new_game(current_level);
     f04:	82 e0       	ldi	r24, 0x02	; 2
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	0e 94 d0 06 	call	0xda0	; 0xda0 <new_game>
			play_game();
     f0c:	0e 94 c3 07 	call	0xf86	; 0xf86 <play_game>
		}
		
		if(digit == 0) {
     f10:	20 97       	sbiw	r28, 0x00	; 0
     f12:	91 f4       	brne	.+36     	; 0xf38 <handle_game_over+0x13c>
			value = step_counter % 10;
     f14:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <step_counter>
     f18:	ed ec       	ldi	r30, 0xCD	; 205
     f1a:	9e 9f       	mul	r25, r30
     f1c:	e1 2d       	mov	r30, r1
     f1e:	11 24       	eor	r1, r1
     f20:	e6 95       	lsr	r30
     f22:	e6 95       	lsr	r30
     f24:	e6 95       	lsr	r30
     f26:	ee 0f       	add	r30, r30
     f28:	8e 2f       	mov	r24, r30
     f2a:	88 0f       	add	r24, r24
     f2c:	88 0f       	add	r24, r24
     f2e:	e8 0f       	add	r30, r24
     f30:	9e 1b       	sub	r25, r30
     f32:	e9 2f       	mov	r30, r25
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	17 c0       	rjmp	.+46     	; 0xf66 <handle_game_over+0x16a>
			} else {
			value = (step_counter / 10) % 10;
     f38:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <step_counter>
     f3c:	ed ec       	ldi	r30, 0xCD	; 205
     f3e:	8e 9f       	mul	r24, r30
     f40:	81 2d       	mov	r24, r1
     f42:	11 24       	eor	r1, r1
     f44:	86 95       	lsr	r24
     f46:	86 95       	lsr	r24
     f48:	86 95       	lsr	r24
     f4a:	8e 9f       	mul	r24, r30
     f4c:	e1 2d       	mov	r30, r1
     f4e:	11 24       	eor	r1, r1
     f50:	e6 95       	lsr	r30
     f52:	e6 95       	lsr	r30
     f54:	e6 95       	lsr	r30
     f56:	ee 0f       	add	r30, r30
     f58:	9e 2f       	mov	r25, r30
     f5a:	99 0f       	add	r25, r25
     f5c:	99 0f       	add	r25, r25
     f5e:	e9 0f       	add	r30, r25
     f60:	8e 1b       	sub	r24, r30
     f62:	e8 2f       	mov	r30, r24
     f64:	f0 e0       	ldi	r31, 0x00	; 0
		}
		PORTC = seven_seg[value];
     f66:	ec 5f       	subi	r30, 0xFC	; 252
     f68:	fe 4f       	sbci	r31, 0xFE	; 254
     f6a:	80 81       	ld	r24, Z
     f6c:	88 b9       	out	0x08, r24	; 8
		PORTD = (digit << 5);
     f6e:	8c 2f       	mov	r24, r28
     f70:	82 95       	swap	r24
     f72:	88 0f       	add	r24, r24
     f74:	80 7e       	andi	r24, 0xE0	; 224
     f76:	8b b9       	out	0x0b, r24	; 11
		digit = 1- digit;
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	9c 01       	movw	r18, r24
     f7e:	2c 1b       	sub	r18, r28
     f80:	3d 0b       	sbc	r19, r29
     f82:	e9 01       	movw	r28, r18
	}
     f84:	8f cf       	rjmp	.-226    	; 0xea4 <handle_game_over+0xa8>

00000f86 <play_game>:
	//Reset step counter
	step_counter = 0;
}

void play_game(void)
{
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	68 97       	sbiw	r28, 0x18	; 24
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	f8 94       	cli
     f94:	de bf       	out	0x3e, r29	; 62
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	cd bf       	out	0x3d, r28	; 61
	//Prepare variables for joystick
	uint16_t value_x;
	uint16_t value_y;
	
	//Initialise step counter
	step_counter = 0;
     f9a:	10 92 31 03 	sts	0x0331, r1	; 0x800331 <step_counter>
	uint8_t value = 0;
	uint8_t digit = 0; /* 0 = right, 1 = left */
	DDRC = 0xFF;
     f9e:	8f ef       	ldi	r24, 0xFF	; 255
     fa0:	87 b9       	out	0x07, r24	; 7
	DDRD = (1 << 5);
     fa2:	80 e2       	ldi	r24, 0x20	; 32
     fa4:	8a b9       	out	0x0a, r24	; 10
	
	uint32_t last_flash_time = get_current_time();
     fa6:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <get_current_time>
     faa:	4b 01       	movw	r8, r22
     fac:	5c 01       	movw	r10, r24
	uint32_t last_target_flash_time = get_current_time();
     fae:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <get_current_time>
     fb2:	2b 01       	movw	r4, r22
     fb4:	3c 01       	movw	r6, r24
	uint32_t last_animation_flash = get_current_time();
     fb6:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <get_current_time>
	uint32_t last_input = 0;
	
	bool accept_input = true;
	
	play_time = 0;
     fba:	10 92 34 03 	sts	0x0334, r1	; 0x800334 <play_time>
	uint32_t last_flash_time = get_current_time();
	uint32_t last_target_flash_time = get_current_time();
	uint32_t last_animation_flash = get_current_time();
	uint32_t last_input = 0;
	
	bool accept_input = true;
     fbe:	33 24       	eor	r3, r3
     fc0:	33 94       	inc	r3
	DDRD = (1 << 5);
	
	uint32_t last_flash_time = get_current_time();
	uint32_t last_target_flash_time = get_current_time();
	uint32_t last_animation_flash = get_current_time();
	uint32_t last_input = 0;
     fc2:	1d 8a       	std	Y+21, r1	; 0x15
     fc4:	1e 8a       	std	Y+22, r1	; 0x16
     fc6:	1f 8a       	std	Y+23, r1	; 0x17
     fc8:	18 8e       	std	Y+24, r1	; 0x18
	uint16_t value_y;
	
	//Initialise step counter
	step_counter = 0;
	uint8_t value = 0;
	uint8_t digit = 0; /* 0 = right, 1 = left */
     fca:	10 e0       	ldi	r17, 0x00	; 0
	
	play_time = 0;
	char play_time_str[20];

	// We play the game until it's over.
	while (!is_game_over())
     fcc:	d3 c1       	rjmp	.+934    	; 0x1374 <play_game+0x3ee>
	{
		// We need to check if any buttons have been pushed, this will
		// be NO_BUTTON_PUSHED if no button has been pushed. If button
		// 0 has been pushed, we get BUTTON0_PUSHED, and likewise, if
		// button 1 has been pushed, we get BUTTON1_PUSHED, and so on.
		ButtonState btn = button_pushed();
     fce:	0e 94 d6 01 	call	0x3ac	; 0x3ac <button_pushed>
     fd2:	08 2f       	mov	r16, r24
		int serial_input = -1;

		if (serial_input_available()) {
     fd4:	0e 94 41 0b 	call	0x1682	; 0x1682 <serial_input_available>
     fd8:	88 23       	and	r24, r24
     fda:	39 f0       	breq	.+14     	; 0xfea <play_game+0x64>
			serial_input = fgetc(stdin);
     fdc:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__iob>
     fe0:	90 91 4a 04 	lds	r25, 0x044A	; 0x80044a <__iob+0x1>
     fe4:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <fgetc>
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <play_game+0x68>
		// We need to check if any buttons have been pushed, this will
		// be NO_BUTTON_PUSHED if no button has been pushed. If button
		// 0 has been pushed, we get BUTTON0_PUSHED, and likewise, if
		// button 1 has been pushed, we get BUTTON1_PUSHED, and so on.
		ButtonState btn = button_pushed();
		int serial_input = -1;
     fea:	8f ef       	ldi	r24, 0xFF	; 255
     fec:	9f ef       	ldi	r25, 0xFF	; 255

		if (serial_input_available()) {
			serial_input = fgetc(stdin);
		}
		
		if (tolower(serial_input) == 'q') {
     fee:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <tolower>
     ff2:	7c 01       	movw	r14, r24
     ff4:	81 37       	cpi	r24, 0x71	; 113
     ff6:	91 05       	cpc	r25, r1
     ff8:	31 f4       	brne	.+12     	; 0x1006 <play_game+0x80>
			buzzer_enabled = 1 - buzzer_enabled;
     ffa:	90 91 32 03 	lds	r25, 0x0332	; 0x800332 <buzzer_enabled>
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	89 27       	eor	r24, r25
    1002:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <buzzer_enabled>
		}
		
		if (tolower(serial_input) == 'p') {
    1006:	80 e7       	ldi	r24, 0x70	; 112
    1008:	e8 16       	cp	r14, r24
    100a:	f1 04       	cpc	r15, r1
    100c:	09 f0       	breq	.+2      	; 0x1010 <play_game+0x8a>
    100e:	46 c0       	rjmp	.+140    	; 0x109c <play_game+0x116>
			while (1) {
				if (serial_input_available()) {
    1010:	0e 94 41 0b 	call	0x1682	; 0x1682 <serial_input_available>
    1014:	88 23       	and	r24, r24
    1016:	59 f0       	breq	.+22     	; 0x102e <play_game+0xa8>
					if (tolower(fgetc(stdin)) == 'p') {
    1018:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__iob>
    101c:	90 91 4a 04 	lds	r25, 0x044A	; 0x80044a <__iob+0x1>
    1020:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <fgetc>
    1024:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <tolower>
    1028:	80 37       	cpi	r24, 0x70	; 112
    102a:	91 05       	cpc	r25, r1
    102c:	b9 f1       	breq	.+110    	; 0x109c <play_game+0x116>
						break;
					}
				}
				//Keep ssd looping
				if(digit == 0) {
    102e:	11 11       	cpse	r17, r1
    1030:	11 c0       	rjmp	.+34     	; 0x1054 <play_game+0xce>
					value = step_counter % 10;
    1032:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <step_counter>
    1036:	ed ec       	ldi	r30, 0xCD	; 205
    1038:	9e 9f       	mul	r25, r30
    103a:	e1 2d       	mov	r30, r1
    103c:	11 24       	eor	r1, r1
    103e:	e6 95       	lsr	r30
    1040:	e6 95       	lsr	r30
    1042:	e6 95       	lsr	r30
    1044:	ee 0f       	add	r30, r30
    1046:	8e 2f       	mov	r24, r30
    1048:	88 0f       	add	r24, r24
    104a:	88 0f       	add	r24, r24
    104c:	e8 0f       	add	r30, r24
    104e:	9e 1b       	sub	r25, r30
    1050:	e9 2f       	mov	r30, r25
    1052:	16 c0       	rjmp	.+44     	; 0x1080 <play_game+0xfa>
					} else {
					value = (step_counter / 10) % 10;
    1054:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <step_counter>
    1058:	ed ec       	ldi	r30, 0xCD	; 205
    105a:	8e 9f       	mul	r24, r30
    105c:	81 2d       	mov	r24, r1
    105e:	11 24       	eor	r1, r1
    1060:	86 95       	lsr	r24
    1062:	86 95       	lsr	r24
    1064:	86 95       	lsr	r24
    1066:	8e 9f       	mul	r24, r30
    1068:	e1 2d       	mov	r30, r1
    106a:	11 24       	eor	r1, r1
    106c:	e6 95       	lsr	r30
    106e:	e6 95       	lsr	r30
    1070:	e6 95       	lsr	r30
    1072:	ee 0f       	add	r30, r30
    1074:	9e 2f       	mov	r25, r30
    1076:	99 0f       	add	r25, r25
    1078:	99 0f       	add	r25, r25
    107a:	e9 0f       	add	r30, r25
    107c:	8e 1b       	sub	r24, r30
    107e:	e8 2f       	mov	r30, r24
				}
				PORTC = seven_seg[value];
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	ec 5f       	subi	r30, 0xFC	; 252
    1084:	fe 4f       	sbci	r31, 0xFE	; 254
    1086:	80 81       	ld	r24, Z
    1088:	88 b9       	out	0x08, r24	; 8
				PORTD = (digit << 5);
    108a:	81 2f       	mov	r24, r17
    108c:	82 95       	swap	r24
    108e:	88 0f       	add	r24, r24
    1090:	80 7e       	andi	r24, 0xE0	; 224
    1092:	8b b9       	out	0x0b, r24	; 11
				digit = 1 - digit;
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	81 1b       	sub	r24, r17
    1098:	18 2f       	mov	r17, r24
			}
    109a:	ba cf       	rjmp	.-140    	; 0x1010 <play_game+0x8a>
		}
		
		//Detect values x and y from joystick
		//value x:
		ADMUX &= ~1;
    109c:	ec e7       	ldi	r30, 0x7C	; 124
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	8e 7f       	andi	r24, 0xFE	; 254
    10a4:	80 83       	st	Z, r24
		// Start the ADC conversion
		ADCSRA |= (1<<ADSC);
    10a6:	ea e7       	ldi	r30, 0x7A	; 122
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	80 64       	ori	r24, 0x40	; 64
    10ae:	80 83       	st	Z, r24
		while(ADCSRA & (1<<ADSC)) {
    10b0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    10b4:	86 fd       	sbrc	r24, 6
    10b6:	fc cf       	rjmp	.-8      	; 0x10b0 <play_game+0x12a>
			; /* Wait until conversion finished */
		}
		value_x = ADC; // read the value
    10b8:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    10bc:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
		
		//value y:
		ADMUX |= 1;
    10c0:	ec e7       	ldi	r30, 0x7C	; 124
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	81 60       	ori	r24, 0x01	; 1
    10c8:	80 83       	st	Z, r24
		// Start the ADC conversion
		ADCSRA |= (1<<ADSC);
    10ca:	ea e7       	ldi	r30, 0x7A	; 122
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	80 64       	ori	r24, 0x40	; 64
    10d2:	80 83       	st	Z, r24
		while(ADCSRA & (1<<ADSC)) {
    10d4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    10d8:	86 fd       	sbrc	r24, 6
    10da:	fc cf       	rjmp	.-8      	; 0x10d4 <play_game+0x14e>
			; /* Wait until conversion finished */
		}
		value_y = ADC; // read the value
    10dc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    10e0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
		
		
		if ((btn == BUTTON0_PUSHED || tolower(serial_input) == 'd' || value_x > 700) && accept_input) {
    10e4:	00 23       	and	r16, r16
    10e6:	41 f0       	breq	.+16     	; 0x10f8 <play_game+0x172>
    10e8:	44 e6       	ldi	r20, 0x64	; 100
    10ea:	e4 16       	cp	r14, r20
    10ec:	f1 04       	cpc	r15, r1
    10ee:	21 f0       	breq	.+8      	; 0x10f8 <play_game+0x172>
    10f0:	2d 3b       	cpi	r18, 0xBD	; 189
    10f2:	42 e0       	ldi	r20, 0x02	; 2
    10f4:	34 07       	cpc	r19, r20
    10f6:	00 f1       	brcs	.+64     	; 0x1138 <play_game+0x1b2>
    10f8:	33 20       	and	r3, r3
    10fa:	f1 f0       	breq	.+60     	; 0x1138 <play_game+0x1b2>
			if (move_player(0, 1)) {
    10fc:	61 e0       	ldi	r22, 0x01	; 1
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	0e 94 c4 04 	call	0x988	; 0x988 <move_player>
    1104:	88 23       	and	r24, r24
    1106:	99 f0       	breq	.+38     	; 0x112e <play_game+0x1a8>
				step_counter++; 
    1108:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <step_counter>
    110c:	8f 5f       	subi	r24, 0xFF	; 255
    110e:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <step_counter>
				DDRD |= (1 << 6); 
    1112:	8a b1       	in	r24, 0x0a	; 10
    1114:	80 64       	ori	r24, 0x40	; 64
    1116:	8a b9       	out	0x0a, r24	; 10
				play_move_sound(buzzer_enabled);
    1118:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <buzzer_enabled>
    111c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <play_move_sound>
				last_input = get_current_time();
    1120:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <get_current_time>
    1124:	6d 8b       	std	Y+21, r22	; 0x15
    1126:	7e 8b       	std	Y+22, r23	; 0x16
    1128:	8f 8b       	std	Y+23, r24	; 0x17
    112a:	98 8f       	std	Y+24, r25	; 0x18
				accept_input = false;
    112c:	31 2c       	mov	r3, r1
			}
			last_flash_time = get_current_time();
    112e:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <get_current_time>
    1132:	4b 01       	movw	r8, r22
    1134:	5c 01       	movw	r10, r24
    1136:	7b c0       	rjmp	.+246    	; 0x122e <play_game+0x2a8>
		} else if ((btn == BUTTON1_PUSHED || tolower(serial_input) == 's' || value_y < 300) && accept_input) {
    1138:	01 30       	cpi	r16, 0x01	; 1
    113a:	41 f0       	breq	.+16     	; 0x114c <play_game+0x1c6>
    113c:	43 e7       	ldi	r20, 0x73	; 115
    113e:	e4 16       	cp	r14, r20
    1140:	f1 04       	cpc	r15, r1
    1142:	21 f0       	breq	.+8      	; 0x114c <play_game+0x1c6>
    1144:	8c 32       	cpi	r24, 0x2C	; 44
    1146:	41 e0       	ldi	r20, 0x01	; 1
    1148:	94 07       	cpc	r25, r20
    114a:	00 f5       	brcc	.+64     	; 0x118c <play_game+0x206>
    114c:	33 20       	and	r3, r3
    114e:	f1 f0       	breq	.+60     	; 0x118c <play_game+0x206>
			if (move_player(-1, 0)) {
    1150:	60 e0       	ldi	r22, 0x00	; 0
    1152:	8f ef       	ldi	r24, 0xFF	; 255
    1154:	0e 94 c4 04 	call	0x988	; 0x988 <move_player>
    1158:	88 23       	and	r24, r24
    115a:	99 f0       	breq	.+38     	; 0x1182 <play_game+0x1fc>
				step_counter++; 
    115c:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <step_counter>
    1160:	8f 5f       	subi	r24, 0xFF	; 255
    1162:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <step_counter>
				DDRD |= (1 << 6); 
    1166:	8a b1       	in	r24, 0x0a	; 10
    1168:	80 64       	ori	r24, 0x40	; 64
    116a:	8a b9       	out	0x0a, r24	; 10
				play_move_sound(buzzer_enabled);
    116c:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <buzzer_enabled>
    1170:	0e 94 5d 02 	call	0x4ba	; 0x4ba <play_move_sound>
				last_input = get_current_time();
    1174:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <get_current_time>
    1178:	6d 8b       	std	Y+21, r22	; 0x15
    117a:	7e 8b       	std	Y+22, r23	; 0x16
    117c:	8f 8b       	std	Y+23, r24	; 0x17
    117e:	98 8f       	std	Y+24, r25	; 0x18
				accept_input = false;
    1180:	31 2c       	mov	r3, r1
			}
			last_flash_time = get_current_time();
    1182:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <get_current_time>
    1186:	4b 01       	movw	r8, r22
    1188:	5c 01       	movw	r10, r24
    118a:	51 c0       	rjmp	.+162    	; 0x122e <play_game+0x2a8>
		} else if ((btn == BUTTON2_PUSHED || tolower(serial_input) == 'w' || value_y > 700) && accept_input) {
    118c:	02 30       	cpi	r16, 0x02	; 2
    118e:	39 f0       	breq	.+14     	; 0x119e <play_game+0x218>
    1190:	47 e7       	ldi	r20, 0x77	; 119
    1192:	e4 16       	cp	r14, r20
    1194:	f1 04       	cpc	r15, r1
    1196:	19 f0       	breq	.+6      	; 0x119e <play_game+0x218>
    1198:	8d 3b       	cpi	r24, 0xBD	; 189
    119a:	92 40       	sbci	r25, 0x02	; 2
    119c:	00 f1       	brcs	.+64     	; 0x11de <play_game+0x258>
    119e:	33 20       	and	r3, r3
    11a0:	f1 f0       	breq	.+60     	; 0x11de <play_game+0x258>
			if (move_player(1, 0)) {
    11a2:	60 e0       	ldi	r22, 0x00	; 0
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	0e 94 c4 04 	call	0x988	; 0x988 <move_player>
    11aa:	88 23       	and	r24, r24
    11ac:	99 f0       	breq	.+38     	; 0x11d4 <play_game+0x24e>
				step_counter++; 
    11ae:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <step_counter>
    11b2:	8f 5f       	subi	r24, 0xFF	; 255
    11b4:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <step_counter>
				DDRD |= (1 << 6); 
    11b8:	8a b1       	in	r24, 0x0a	; 10
    11ba:	80 64       	ori	r24, 0x40	; 64
    11bc:	8a b9       	out	0x0a, r24	; 10
				play_move_sound(buzzer_enabled);
    11be:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <buzzer_enabled>
    11c2:	0e 94 5d 02 	call	0x4ba	; 0x4ba <play_move_sound>
				last_input = get_current_time();
    11c6:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <get_current_time>
    11ca:	6d 8b       	std	Y+21, r22	; 0x15
    11cc:	7e 8b       	std	Y+22, r23	; 0x16
    11ce:	8f 8b       	std	Y+23, r24	; 0x17
    11d0:	98 8f       	std	Y+24, r25	; 0x18
				accept_input = false;
    11d2:	31 2c       	mov	r3, r1
			}
			last_flash_time = get_current_time();
    11d4:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <get_current_time>
    11d8:	4b 01       	movw	r8, r22
    11da:	5c 01       	movw	r10, r24
    11dc:	28 c0       	rjmp	.+80     	; 0x122e <play_game+0x2a8>
		} else if ((btn == BUTTON3_PUSHED || tolower(serial_input) == 'a' || value_x < 300) && accept_input) {
    11de:	03 30       	cpi	r16, 0x03	; 3
    11e0:	39 f0       	breq	.+14     	; 0x11f0 <play_game+0x26a>
    11e2:	81 e6       	ldi	r24, 0x61	; 97
    11e4:	e8 16       	cp	r14, r24
    11e6:	f1 04       	cpc	r15, r1
    11e8:	19 f0       	breq	.+6      	; 0x11f0 <play_game+0x26a>
    11ea:	2c 32       	cpi	r18, 0x2C	; 44
    11ec:	31 40       	sbci	r19, 0x01	; 1
    11ee:	f8 f4       	brcc	.+62     	; 0x122e <play_game+0x2a8>
    11f0:	33 20       	and	r3, r3
    11f2:	e9 f0       	breq	.+58     	; 0x122e <play_game+0x2a8>
			if (move_player(0, -1)) {
    11f4:	6f ef       	ldi	r22, 0xFF	; 255
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	0e 94 c4 04 	call	0x988	; 0x988 <move_player>
    11fc:	88 23       	and	r24, r24
    11fe:	99 f0       	breq	.+38     	; 0x1226 <play_game+0x2a0>
				step_counter++; 
    1200:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <step_counter>
    1204:	8f 5f       	subi	r24, 0xFF	; 255
    1206:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <step_counter>
				DDRD |= (1 << 6); 
    120a:	8a b1       	in	r24, 0x0a	; 10
    120c:	80 64       	ori	r24, 0x40	; 64
    120e:	8a b9       	out	0x0a, r24	; 10
				play_move_sound(buzzer_enabled);
    1210:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <buzzer_enabled>
    1214:	0e 94 5d 02 	call	0x4ba	; 0x4ba <play_move_sound>
				last_input = get_current_time();
    1218:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <get_current_time>
    121c:	6d 8b       	std	Y+21, r22	; 0x15
    121e:	7e 8b       	std	Y+22, r23	; 0x16
    1220:	8f 8b       	std	Y+23, r24	; 0x17
    1222:	98 8f       	std	Y+24, r25	; 0x18
				accept_input = false;
    1224:	31 2c       	mov	r3, r1
			}
			last_flash_time = get_current_time();
    1226:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <get_current_time>
    122a:	4b 01       	movw	r8, r22
    122c:	5c 01       	movw	r10, r24
		}

		uint32_t current_time = get_current_time();
    122e:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <get_current_time>
    1232:	6b 01       	movw	r12, r22
    1234:	7c 01       	movw	r14, r24
		if (current_time >= last_flash_time + 200)
    1236:	d5 01       	movw	r26, r10
    1238:	c4 01       	movw	r24, r8
    123a:	88 53       	subi	r24, 0x38	; 56
    123c:	9f 4f       	sbci	r25, 0xFF	; 255
    123e:	af 4f       	sbci	r26, 0xFF	; 255
    1240:	bf 4f       	sbci	r27, 0xFF	; 255
    1242:	c8 16       	cp	r12, r24
    1244:	d9 06       	cpc	r13, r25
    1246:	ea 06       	cpc	r14, r26
    1248:	fb 06       	cpc	r15, r27
    124a:	20 f0       	brcs	.+8      	; 0x1254 <play_game+0x2ce>
		{
			// 200ms (0.2 seconds) has passed since the last time
			// we flashed the player icon, flash it now.
			flash_player();
    124c:	0e 94 80 03 	call	0x700	; 0x700 <flash_player>

			// Update the most recent icon flash time.
			last_flash_time = current_time;
    1250:	46 01       	movw	r8, r12
    1252:	57 01       	movw	r10, r14
		}
		if (current_time >= last_target_flash_time + 500) {
    1254:	d3 01       	movw	r26, r6
    1256:	c2 01       	movw	r24, r4
    1258:	8c 50       	subi	r24, 0x0C	; 12
    125a:	9e 4f       	sbci	r25, 0xFE	; 254
    125c:	af 4f       	sbci	r26, 0xFF	; 255
    125e:	bf 4f       	sbci	r27, 0xFF	; 255
    1260:	c8 16       	cp	r12, r24
    1262:	d9 06       	cpc	r13, r25
    1264:	ea 06       	cpc	r14, r26
    1266:	fb 06       	cpc	r15, r27
    1268:	20 f0       	brcs	.+8      	; 0x1272 <play_game+0x2ec>
			flash_targets();
    126a:	0e 94 97 03 	call	0x72e	; 0x72e <flash_targets>
			last_target_flash_time = current_time;
    126e:	26 01       	movw	r4, r12
    1270:	37 01       	movw	r6, r14
		}
		if (current_time >= last_input + 100) {
    1272:	8d 89       	ldd	r24, Y+21	; 0x15
    1274:	9e 89       	ldd	r25, Y+22	; 0x16
    1276:	af 89       	ldd	r26, Y+23	; 0x17
    1278:	b8 8d       	ldd	r27, Y+24	; 0x18
    127a:	8c 59       	subi	r24, 0x9C	; 156
    127c:	9f 4f       	sbci	r25, 0xFF	; 255
    127e:	af 4f       	sbci	r26, 0xFF	; 255
    1280:	bf 4f       	sbci	r27, 0xFF	; 255
    1282:	c8 16       	cp	r12, r24
    1284:	d9 06       	cpc	r13, r25
    1286:	ea 06       	cpc	r14, r26
    1288:	fb 06       	cpc	r15, r27
    128a:	10 f0       	brcs	.+4      	; 0x1290 <play_game+0x30a>
			accept_input = true;
    128c:	33 24       	eor	r3, r3
    128e:	33 94       	inc	r3
		}
		
		//Display step counter on seven segment display
		if(digit == 0) {
    1290:	11 11       	cpse	r17, r1
    1292:	11 c0       	rjmp	.+34     	; 0x12b6 <play_game+0x330>
			value = step_counter % 10;
    1294:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <step_counter>
    1298:	ed ec       	ldi	r30, 0xCD	; 205
    129a:	9e 9f       	mul	r25, r30
    129c:	e1 2d       	mov	r30, r1
    129e:	11 24       	eor	r1, r1
    12a0:	e6 95       	lsr	r30
    12a2:	e6 95       	lsr	r30
    12a4:	e6 95       	lsr	r30
    12a6:	ee 0f       	add	r30, r30
    12a8:	8e 2f       	mov	r24, r30
    12aa:	88 0f       	add	r24, r24
    12ac:	88 0f       	add	r24, r24
    12ae:	e8 0f       	add	r30, r24
    12b0:	9e 1b       	sub	r25, r30
    12b2:	e9 2f       	mov	r30, r25
    12b4:	16 c0       	rjmp	.+44     	; 0x12e2 <play_game+0x35c>
			} else {
			value = (step_counter / 10) % 10;
    12b6:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <step_counter>
    12ba:	ed ec       	ldi	r30, 0xCD	; 205
    12bc:	8e 9f       	mul	r24, r30
    12be:	81 2d       	mov	r24, r1
    12c0:	11 24       	eor	r1, r1
    12c2:	86 95       	lsr	r24
    12c4:	86 95       	lsr	r24
    12c6:	86 95       	lsr	r24
    12c8:	8e 9f       	mul	r24, r30
    12ca:	e1 2d       	mov	r30, r1
    12cc:	11 24       	eor	r1, r1
    12ce:	e6 95       	lsr	r30
    12d0:	e6 95       	lsr	r30
    12d2:	e6 95       	lsr	r30
    12d4:	ee 0f       	add	r30, r30
    12d6:	9e 2f       	mov	r25, r30
    12d8:	99 0f       	add	r25, r25
    12da:	99 0f       	add	r25, r25
    12dc:	e9 0f       	add	r30, r25
    12de:	8e 1b       	sub	r24, r30
    12e0:	e8 2f       	mov	r30, r24
		}
		PORTC = seven_seg[value];
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	ec 5f       	subi	r30, 0xFC	; 252
    12e6:	fe 4f       	sbci	r31, 0xFE	; 254
    12e8:	80 81       	ld	r24, Z
    12ea:	88 b9       	out	0x08, r24	; 8
		PORTD = (digit << 5);
    12ec:	81 2f       	mov	r24, r17
    12ee:	82 95       	swap	r24
    12f0:	88 0f       	add	r24, r24
    12f2:	80 7e       	andi	r24, 0xE0	; 224
    12f4:	8b b9       	out	0x0b, r24	; 11
		/* Change the digit flag for next time. if 0 becomes 1, if 1 becomes 0. */
		digit = 1 - digit;
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	81 1b       	sub	r24, r17
    12fa:	18 2f       	mov	r17, r24
		
		//Increment timer if necessary
		if (get_current_time() % 1000 == 0) {
    12fc:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <get_current_time>
    1300:	28 ee       	ldi	r18, 0xE8	; 232
    1302:	33 e0       	ldi	r19, 0x03	; 3
    1304:	40 e0       	ldi	r20, 0x00	; 0
    1306:	50 e0       	ldi	r21, 0x00	; 0
    1308:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <__udivmodsi4>
    130c:	67 2b       	or	r22, r23
    130e:	68 2b       	or	r22, r24
    1310:	69 2b       	or	r22, r25
    1312:	69 f5       	brne	.+90     	; 0x136e <play_game+0x3e8>
			move_terminal_cursor(22, 1);
    1314:	61 e0       	ldi	r22, 0x01	; 1
    1316:	70 e0       	ldi	r23, 0x00	; 0
    1318:	86 e1       	ldi	r24, 0x16	; 22
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <move_terminal_cursor>
			sprintf(play_time_str, "%d", play_time);
    1320:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <play_time>
    1324:	1f 92       	push	r1
    1326:	8f 93       	push	r24
    1328:	82 e8       	ldi	r24, 0x82	; 130
    132a:	92 e0       	ldi	r25, 0x02	; 2
    132c:	9f 93       	push	r25
    132e:	8f 93       	push	r24
    1330:	ce 01       	movw	r24, r28
    1332:	01 96       	adiw	r24, 0x01	; 1
    1334:	7c 01       	movw	r14, r24
    1336:	9f 93       	push	r25
    1338:	8f 93       	push	r24
    133a:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <sprintf>
			printf("%s", play_time_str);
    133e:	ff 92       	push	r15
    1340:	ef 92       	push	r14
    1342:	85 e8       	ldi	r24, 0x85	; 133
    1344:	92 e0       	ldi	r25, 0x02	; 2
    1346:	9f 93       	push	r25
    1348:	8f 93       	push	r24
    134a:	0e 94 75 0f 	call	0x1eea	; 0x1eea <printf>
			play_time++;
    134e:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <play_time>
    1352:	8f 5f       	subi	r24, 0xFF	; 255
    1354:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <play_time>
    1358:	8f e1       	ldi	r24, 0x1F	; 31
    135a:	9e e4       	ldi	r25, 0x4E	; 78
    135c:	01 97       	sbiw	r24, 0x01	; 1
    135e:	f1 f7       	brne	.-4      	; 0x135c <play_game+0x3d6>
    1360:	00 c0       	rjmp	.+0      	; 0x1362 <play_game+0x3dc>
    1362:	00 00       	nop
    1364:	0f b6       	in	r0, 0x3f	; 63
    1366:	f8 94       	cli
    1368:	de bf       	out	0x3e, r29	; 62
    136a:	0f be       	out	0x3f, r0	; 63
    136c:	cd bf       	out	0x3d, r28	; 61
			_delay_ms(10);
		}
		DDRD &= (11111101);
    136e:	8a b1       	in	r24, 0x0a	; 10
    1370:	8d 7b       	andi	r24, 0xBD	; 189
    1372:	8a b9       	out	0x0a, r24	; 10
	
	play_time = 0;
	char play_time_str[20];

	// We play the game until it's over.
	while (!is_game_over())
    1374:	0e 94 3a 04 	call	0x874	; 0x874 <is_game_over>
    1378:	88 23       	and	r24, r24
    137a:	09 f4       	brne	.+2      	; 0x137e <play_game+0x3f8>
    137c:	28 ce       	rjmp	.-944    	; 0xfce <play_game+0x48>
			play_time++;
			_delay_ms(10);
		}
		DDRD &= (11111101);
	}
	DDRD |= (1 << 6); 
    137e:	8a b1       	in	r24, 0x0a	; 10
    1380:	80 64       	ori	r24, 0x40	; 64
    1382:	8a b9       	out	0x0a, r24	; 10
	play_victory_sound(buzzer_enabled);
    1384:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <buzzer_enabled>
    1388:	0e 94 97 02 	call	0x52e	; 0x52e <play_victory_sound>
	DDRD &= (11111101);
    138c:	8a b1       	in	r24, 0x0a	; 10
    138e:	8d 7b       	andi	r24, 0xBD	; 189
    1390:	8a b9       	out	0x0a, r24	; 10
	handle_game_over();
    1392:	0e 94 fe 06 	call	0xdfc	; 0xdfc <handle_game_over>

00001396 <main>:

/////////////////////////////// main //////////////////////////////////
int main(void)
{
	//Set a seed for the random number generator
	srand(get_current_time());
    1396:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <get_current_time>
    139a:	cb 01       	movw	r24, r22
    139c:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <srand>
	
	// Setup hardware and callbacks. This will turn on interrupts.
	initialise_hardware();
    13a0:	0e 94 85 06 	call	0xd0a	; 0xd0a <initialise_hardware>

	// Show the start screen. Returns when the player starts the game.
	start_screen();
    13a4:	0e 94 9c 06 	call	0xd38	; 0xd38 <start_screen>
	
	//Set the level to 1
	current_level = 1;
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <current_level>
	
	//Enable buzzer sounds
	buzzer_enabled = true;
    13ae:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <buzzer_enabled>

	// Loop forever and continuously play the game.
	while (1)
	{
		new_game(current_level);
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	0e 94 d0 06 	call	0xda0	; 0xda0 <new_game>
		play_game();
    13ba:	0e 94 c3 07 	call	0xf86	; 0xf86 <play_game>

000013be <uart_put_char>:
// Variable to keep track of whether incoming characters are to be echoed
// back or not.
static bool do_echo;

static int uart_put_char(char c, FILE *stream)
{
    13be:	cf 93       	push	r28
    13c0:	c8 2f       	mov	r28, r24
	// Add the character to the buffer for transmission (if there is space
	// to do so). If not we wait until the buffer has space.

	// If the character is linefeed, we output carriage return.
	if (c == '\n')
    13c2:	8a 30       	cpi	r24, 0x0A	; 10
    13c4:	19 f4       	brne	.+6      	; 0x13cc <uart_put_char+0xe>
	{
		uart_put_char('\r', stream);
    13c6:	8d e0       	ldi	r24, 0x0D	; 13
    13c8:	0e 94 df 09 	call	0x13be	; 0x13be <uart_put_char>
	// we don't output the character since the buffer will never be
	// emptied if interrupts are disabled. If the buffer is full and
	// interrupts are enabled, then we loop until the buffer has enough
	// space. The bytes_in_buffer variable will get modified by the ISR
	// which extracts bytes from the buffer.
	bool interrupts_enabled = bit_is_set(SREG, SREG_I);
    13cc:	9f b7       	in	r25, 0x3f	; 63
    13ce:	90 78       	andi	r25, 0x80	; 128
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <uart_put_char+0x18>
	{
		if (!interrupts_enabled)
    13d2:	99 23       	and	r25, r25
    13d4:	29 f1       	breq	.+74     	; 0x1420 <uart_put_char+0x62>
	// emptied if interrupts are disabled. If the buffer is full and
	// interrupts are enabled, then we loop until the buffer has enough
	// space. The bytes_in_buffer variable will get modified by the ISR
	// which extracts bytes from the buffer.
	bool interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
    13d6:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <bytes_in_out_buffer>
    13da:	8f 3f       	cpi	r24, 0xFF	; 255
    13dc:	d1 f3       	breq	.-12     	; 0x13d2 <uart_put_char+0x14>
	// If this is beyond the end of the buffer, we wrap around back to the
	// beginning of the buffer. NOTE: We disable interrupts before
	// modifying the buffer. This prevents the ISR from modifying the
	// buffer at the same time. We reenable them if they were enabled when
	// we entered the function.
	cli();
    13de:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    13e0:	e0 91 35 03 	lds	r30, 0x0335	; 0x800335 <out_insert_pos>
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	8e 0f       	add	r24, r30
    13e8:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <out_insert_pos>
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	e9 5c       	subi	r30, 0xC9	; 201
    13f0:	fc 4f       	sbci	r31, 0xFC	; 252
    13f2:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    13f4:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <bytes_in_out_buffer>
    13f8:	8f 5f       	subi	r24, 0xFF	; 255
    13fa:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <bytes_in_out_buffer>
	if (out_insert_pos == OUTPUT_BUFFER_SIZE)
    13fe:	80 91 35 03 	lds	r24, 0x0335	; 0x800335 <out_insert_pos>
    1402:	8f 3f       	cpi	r24, 0xFF	; 255
    1404:	11 f4       	brne	.+4      	; 0x140a <uart_put_char+0x4c>
	{
		// Wrap around buffer pointer if necessary.
		out_insert_pos = 0;
    1406:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <out_insert_pos>
	}

	// Reenable interrupts (UDR Empty interrupt may have been disabled) -
	// we ensure it is now enabled so that it will fire and deal with the
	// next character in the buffer.
	UCSR0B |= (1 << UDRIE0);
    140a:	e1 ec       	ldi	r30, 0xC1	; 193
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	80 62       	ori	r24, 0x20	; 32
    1412:	80 83       	st	Z, r24
	if (interrupts_enabled)
    1414:	99 23       	and	r25, r25
    1416:	39 f0       	breq	.+14     	; 0x1426 <uart_put_char+0x68>
	{
		sei();
    1418:	78 94       	sei
	}
	return 0;
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	05 c0       	rjmp	.+10     	; 0x142a <uart_put_char+0x6c>
	bool interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
	{
		if (!interrupts_enabled)
		{
			return 1;
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	02 c0       	rjmp	.+4      	; 0x142a <uart_put_char+0x6c>
	UCSR0B |= (1 << UDRIE0);
	if (interrupts_enabled)
	{
		sei();
	}
	return 0;
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	90 e0       	ldi	r25, 0x00	; 0
}
    142a:	cf 91       	pop	r28
    142c:	08 95       	ret

0000142e <uart_get_char>:

static int uart_get_char(FILE *stream)
{
	// Wait until we've received a character.
	while (bytes_in_input_buffer == 0)
    142e:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <bytes_in_input_buffer>
    1432:	88 23       	and	r24, r24
    1434:	e1 f3       	breq	.-8      	; 0x142e <uart_get_char>

	// Turn interrupts off and remove a character from the input buffer.
	// We reenable interrupts if they were on. The pending character is
	// the one which is byte_in_input_buffer characters before the insert
	// position (taking into account that we may need to wrap around).
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    1436:	2f b7       	in	r18, 0x3f	; 63
    1438:	20 78       	andi	r18, 0x80	; 128
	cli();
    143a:	f8 94       	cli
	char c;
	if (input_insert_pos - bytes_in_input_buffer < 0)
    143c:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <input_insert_pos>
    1440:	30 91 48 04 	lds	r19, 0x0448	; 0x800448 <bytes_in_input_buffer>
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	83 1b       	sub	r24, r19
    1448:	91 09       	sbc	r25, r1
    144a:	5a f4       	brpl	.+22     	; 0x1462 <uart_get_char+0x34>
	{
		// Need to wrap around.
		c = input_buffer[input_insert_pos - bytes_in_input_buffer +
    144c:	e0 91 36 04 	lds	r30, 0x0436	; 0x800436 <input_insert_pos>
    1450:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <bytes_in_input_buffer>
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	e8 1b       	sub	r30, r24
    1458:	f1 09       	sbc	r31, r1
    145a:	e9 5b       	subi	r30, 0xB9	; 185
    145c:	fb 4f       	sbci	r31, 0xFB	; 251
    145e:	80 81       	ld	r24, Z
    1460:	0a c0       	rjmp	.+20     	; 0x1476 <uart_get_char+0x48>
			INPUT_BUFFER_SIZE];
	}
	else
	{
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    1462:	e0 91 36 04 	lds	r30, 0x0436	; 0x800436 <input_insert_pos>
    1466:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <bytes_in_input_buffer>
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	e8 1b       	sub	r30, r24
    146e:	f1 09       	sbc	r31, r1
    1470:	e9 5c       	subi	r30, 0xC9	; 201
    1472:	fb 4f       	sbci	r31, 0xFB	; 251
    1474:	80 81       	ld	r24, Z
	}

	// Decrement our count of bytes in the input buffer.
	bytes_in_input_buffer--;
    1476:	90 91 48 04 	lds	r25, 0x0448	; 0x800448 <bytes_in_input_buffer>
    147a:	91 50       	subi	r25, 0x01	; 1
    147c:	90 93 48 04 	sts	0x0448, r25	; 0x800448 <bytes_in_input_buffer>
	if (interrupts_enabled)
    1480:	22 23       	and	r18, r18
    1482:	09 f0       	breq	.+2      	; 0x1486 <uart_get_char+0x58>
	{
		sei();
    1484:	78 94       	sei
	// as WASD. If you're a student reading this, pretend you didn't see
	// it XD. Honestly, you cannot rely on the arrow keys to work like
	// WASD, this is what we call undocumented behaviour.
	static char first = 0;
	static char second = 0;
	if (first == 0x1B && second == '[')
    1486:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <first.1835>
    148a:	9b 31       	cpi	r25, 0x1B	; 27
    148c:	b1 f4       	brne	.+44     	; 0x14ba <uart_get_char+0x8c>
    148e:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <second.1836>
    1492:	9b 35       	cpi	r25, 0x5B	; 91
    1494:	91 f4       	brne	.+36     	; 0x14ba <uart_get_char+0x8c>
	{
		switch (c)
    1496:	82 34       	cpi	r24, 0x42	; 66
    1498:	49 f0       	breq	.+18     	; 0x14ac <uart_get_char+0x7e>
    149a:	18 f4       	brcc	.+6      	; 0x14a2 <uart_get_char+0x74>
    149c:	81 34       	cpi	r24, 0x41	; 65
    149e:	61 f0       	breq	.+24     	; 0x14b8 <uart_get_char+0x8a>
    14a0:	0c c0       	rjmp	.+24     	; 0x14ba <uart_get_char+0x8c>
    14a2:	83 34       	cpi	r24, 0x43	; 67
    14a4:	29 f0       	breq	.+10     	; 0x14b0 <uart_get_char+0x82>
    14a6:	84 34       	cpi	r24, 0x44	; 68
    14a8:	29 f0       	breq	.+10     	; 0x14b4 <uart_get_char+0x86>
    14aa:	07 c0       	rjmp	.+14     	; 0x14ba <uart_get_char+0x8c>
		{
			case 'A':
				c = 'w';
				break;
			case 'B':
				c = 's';
    14ac:	83 e7       	ldi	r24, 0x73	; 115
				break;
    14ae:	05 c0       	rjmp	.+10     	; 0x14ba <uart_get_char+0x8c>
			case 'C':
				c = 'd';
    14b0:	84 e6       	ldi	r24, 0x64	; 100
				break;
    14b2:	03 c0       	rjmp	.+6      	; 0x14ba <uart_get_char+0x8c>
			case 'D':
				c = 'a';
    14b4:	81 e6       	ldi	r24, 0x61	; 97
				break;
    14b6:	01 c0       	rjmp	.+2      	; 0x14ba <uart_get_char+0x8c>
	if (first == 0x1B && second == '[')
	{
		switch (c)
		{
			case 'A':
				c = 'w';
    14b8:	87 e7       	ldi	r24, 0x77	; 119
				break;
			default:
				break;
		}
	}
	first = second;
    14ba:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <second.1836>
    14be:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <first.1835>
	second = c;
    14c2:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <second.1836>

	return c;
}
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	08 95       	ret

000014ca <__vector_21>:
	_FDEV_SETUP_RW);

// Interrupt handler for UART Data Register Empty (i.e., another character
// can be taken from our buffer and written out).
ISR(USART0_UDRE_vect)
{
    14ca:	1f 92       	push	r1
    14cc:	0f 92       	push	r0
    14ce:	0f b6       	in	r0, 0x3f	; 63
    14d0:	0f 92       	push	r0
    14d2:	11 24       	eor	r1, r1
    14d4:	2f 93       	push	r18
    14d6:	8f 93       	push	r24
    14d8:	9f 93       	push	r25
    14da:	ef 93       	push	r30
    14dc:	ff 93       	push	r31
	// Check if we have data in our buffer.
	if (bytes_in_out_buffer > 0)
    14de:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <bytes_in_out_buffer>
    14e2:	88 23       	and	r24, r24
    14e4:	29 f1       	breq	.+74     	; 0x1530 <__vector_21+0x66>
		// UART. The pending byte (character) is the one which is
		// bytes_in_buffer characters before the insert_pos (taking
		// into account that we may need to wrap around to the end of
		// the buffer).
		char c;
		if (out_insert_pos - bytes_in_out_buffer < 0)
    14e6:	80 91 35 03 	lds	r24, 0x0335	; 0x800335 <out_insert_pos>
    14ea:	20 91 36 03 	lds	r18, 0x0336	; 0x800336 <bytes_in_out_buffer>
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	82 1b       	sub	r24, r18
    14f2:	91 09       	sbc	r25, r1
    14f4:	5a f4       	brpl	.+22     	; 0x150c <__vector_21+0x42>
		{
			// Need to wrap around.
			c = out_buffer[out_insert_pos - bytes_in_out_buffer +
    14f6:	e0 91 35 03 	lds	r30, 0x0335	; 0x800335 <out_insert_pos>
    14fa:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <bytes_in_out_buffer>
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	e8 1b       	sub	r30, r24
    1502:	f1 09       	sbc	r31, r1
    1504:	ea 5c       	subi	r30, 0xCA	; 202
    1506:	fb 4f       	sbci	r31, 0xFB	; 251
    1508:	90 81       	ld	r25, Z
    150a:	0a c0       	rjmp	.+20     	; 0x1520 <__vector_21+0x56>
				OUTPUT_BUFFER_SIZE];
		}
		else
		{
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    150c:	e0 91 35 03 	lds	r30, 0x0335	; 0x800335 <out_insert_pos>
    1510:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <bytes_in_out_buffer>
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	e8 1b       	sub	r30, r24
    1518:	f1 09       	sbc	r31, r1
    151a:	e9 5c       	subi	r30, 0xC9	; 201
    151c:	fc 4f       	sbci	r31, 0xFC	; 252
    151e:	90 81       	ld	r25, Z
		}

		// Decrement our count of the number of bytes in the buffer.
		bytes_in_out_buffer--;
    1520:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <bytes_in_out_buffer>
    1524:	81 50       	subi	r24, 0x01	; 1
    1526:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <bytes_in_out_buffer>

		// Output the character via the UART.
		UDR0 = c;
    152a:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    152e:	05 c0       	rjmp	.+10     	; 0x153a <__vector_21+0x70>
	{
		// No data in the buffer. We disable the UART Data Register
		// Empty interrupt because otherwise it will trigger again
		// immediately when this ISR exits. The interrupt is reenabled
		// when a character is placed in the buffer.
		UCSR0B &= ~(1 << UDRIE0);
    1530:	e1 ec       	ldi	r30, 0xC1	; 193
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	8f 7d       	andi	r24, 0xDF	; 223
    1538:	80 83       	st	Z, r24
	}
}
    153a:	ff 91       	pop	r31
    153c:	ef 91       	pop	r30
    153e:	9f 91       	pop	r25
    1540:	8f 91       	pop	r24
    1542:	2f 91       	pop	r18
    1544:	0f 90       	pop	r0
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	0f 90       	pop	r0
    154a:	1f 90       	pop	r1
    154c:	18 95       	reti

0000154e <__vector_20>:

// Interrupt handler for UART Receive Complete (i.e., can read a character).
// The character is read and placed in the input buffer.
ISR(USART0_RX_vect)
{
    154e:	1f 92       	push	r1
    1550:	0f 92       	push	r0
    1552:	0f b6       	in	r0, 0x3f	; 63
    1554:	0f 92       	push	r0
    1556:	11 24       	eor	r1, r1
    1558:	2f 93       	push	r18
    155a:	3f 93       	push	r19
    155c:	4f 93       	push	r20
    155e:	5f 93       	push	r21
    1560:	6f 93       	push	r22
    1562:	7f 93       	push	r23
    1564:	8f 93       	push	r24
    1566:	9f 93       	push	r25
    1568:	af 93       	push	r26
    156a:	bf 93       	push	r27
    156c:	cf 93       	push	r28
    156e:	ef 93       	push	r30
    1570:	ff 93       	push	r31
	// Read the character - we ignore the possibility of overrun.
	char c = UDR0;
    1572:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

	if (do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE)
    1576:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <do_echo>
    157a:	88 23       	and	r24, r24
    157c:	49 f0       	breq	.+18     	; 0x1590 <__vector_20+0x42>
    157e:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <bytes_in_out_buffer>
    1582:	8f 3f       	cpi	r24, 0xFF	; 255
    1584:	29 f0       	breq	.+10     	; 0x1590 <__vector_20+0x42>
	{
		// If echoing is enabled and there is output buffer space,
		// echo the received character back to the UART. If there
		// is no output buffer space, characters will be lost.
		uart_put_char(c, 0);
    1586:	60 e0       	ldi	r22, 0x00	; 0
    1588:	70 e0       	ldi	r23, 0x00	; 0
    158a:	8c 2f       	mov	r24, r28
    158c:	0e 94 df 09 	call	0x13be	; 0x13be <uart_put_char>
	}

	// Check if we have space in our buffer. If not, set the overrun flag
	// and throw away the character. We never clear the overrun flag -
	// it's up to the programmer to check/clear this flag if desired.
	if (bytes_in_input_buffer >= INPUT_BUFFER_SIZE)
    1590:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <bytes_in_input_buffer>
    1594:	80 31       	cpi	r24, 0x10	; 16
    1596:	20 f0       	brcs	.+8      	; 0x15a0 <__vector_20+0x52>
	{
		input_overrun = 1;
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <input_overrun>
    159e:	18 c0       	rjmp	.+48     	; 0x15d0 <__vector_20+0x82>
	}
	else
	{
		// If the character is carriage return, turn it into linefeed.
		if (c == '\r')
    15a0:	cd 30       	cpi	r28, 0x0D	; 13
    15a2:	09 f4       	brne	.+2      	; 0x15a6 <__vector_20+0x58>
		{
			c = '\n';
    15a4:	ca e0       	ldi	r28, 0x0A	; 10
		}

		// There is room in the input buffer.
		input_buffer[input_insert_pos++] = c;
    15a6:	e0 91 36 04 	lds	r30, 0x0436	; 0x800436 <input_insert_pos>
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	8e 0f       	add	r24, r30
    15ae:	80 93 36 04 	sts	0x0436, r24	; 0x800436 <input_insert_pos>
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	e9 5c       	subi	r30, 0xC9	; 201
    15b6:	fb 4f       	sbci	r31, 0xFB	; 251
    15b8:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    15ba:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <bytes_in_input_buffer>
    15be:	8f 5f       	subi	r24, 0xFF	; 255
    15c0:	80 93 48 04 	sts	0x0448, r24	; 0x800448 <bytes_in_input_buffer>
		if (input_insert_pos == INPUT_BUFFER_SIZE)
    15c4:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <input_insert_pos>
    15c8:	80 31       	cpi	r24, 0x10	; 16
    15ca:	11 f4       	brne	.+4      	; 0x15d0 <__vector_20+0x82>
		{
			// Wrap around buffer pointer if necessary.
			input_insert_pos = 0;
    15cc:	10 92 36 04 	sts	0x0436, r1	; 0x800436 <input_insert_pos>
		}
	}
}
    15d0:	ff 91       	pop	r31
    15d2:	ef 91       	pop	r30
    15d4:	cf 91       	pop	r28
    15d6:	bf 91       	pop	r27
    15d8:	af 91       	pop	r26
    15da:	9f 91       	pop	r25
    15dc:	8f 91       	pop	r24
    15de:	7f 91       	pop	r23
    15e0:	6f 91       	pop	r22
    15e2:	5f 91       	pop	r21
    15e4:	4f 91       	pop	r20
    15e6:	3f 91       	pop	r19
    15e8:	2f 91       	pop	r18
    15ea:	0f 90       	pop	r0
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	0f 90       	pop	r0
    15f0:	1f 90       	pop	r1
    15f2:	18 95       	reti

000015f4 <init_serial_stdio>:

void init_serial_stdio(long baudrate, bool echo)
{
	// Initialise our buffers.
	out_insert_pos = 0;
    15f4:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <out_insert_pos>
	bytes_in_out_buffer = 0;
    15f8:	10 92 36 03 	sts	0x0336, r1	; 0x800336 <bytes_in_out_buffer>
	input_insert_pos = 0;
    15fc:	10 92 36 04 	sts	0x0436, r1	; 0x800436 <input_insert_pos>
	bytes_in_input_buffer = 0;
    1600:	10 92 48 04 	sts	0x0448, r1	; 0x800448 <bytes_in_input_buffer>
	input_overrun = 0;
    1604:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <input_overrun>

	// Record whether we're going to echo characters or not.
	do_echo = echo;
    1608:	40 93 22 03 	sts	0x0322, r20	; 0x800322 <do_echo>

	// Configure the baud rate. This differs from the datasheet formula so
	// that we get rounding to the nearest integer while using integer
	// division (which truncates).
	UBRR0 = (uint16_t)((((SYSCLK / (8 * baudrate)) + 1) / 2) - 1);
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	88 0f       	add	r24, r24
    1612:	99 1f       	adc	r25, r25
    1614:	aa 1f       	adc	r26, r26
    1616:	bb 1f       	adc	r27, r27
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	aa 1f       	adc	r26, r26
    161e:	bb 1f       	adc	r27, r27
    1620:	9c 01       	movw	r18, r24
    1622:	ad 01       	movw	r20, r26
    1624:	22 0f       	add	r18, r18
    1626:	33 1f       	adc	r19, r19
    1628:	44 1f       	adc	r20, r20
    162a:	55 1f       	adc	r21, r21
    162c:	60 e0       	ldi	r22, 0x00	; 0
    162e:	72 e1       	ldi	r23, 0x12	; 18
    1630:	8a e7       	ldi	r24, 0x7A	; 122
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <__divmodsi4>
    1638:	ba 01       	movw	r22, r20
    163a:	a9 01       	movw	r20, r18
    163c:	4f 5f       	subi	r20, 0xFF	; 255
    163e:	5f 4f       	sbci	r21, 0xFF	; 255
    1640:	6f 4f       	sbci	r22, 0xFF	; 255
    1642:	7f 4f       	sbci	r23, 0xFF	; 255
    1644:	db 01       	movw	r26, r22
    1646:	ca 01       	movw	r24, r20
    1648:	1a f4       	brpl	.+6      	; 0x1650 <init_serial_stdio+0x5c>
    164a:	01 96       	adiw	r24, 0x01	; 1
    164c:	a1 1d       	adc	r26, r1
    164e:	b1 1d       	adc	r27, r1
    1650:	b5 95       	asr	r27
    1652:	a7 95       	ror	r26
    1654:	97 95       	ror	r25
    1656:	87 95       	ror	r24
    1658:	01 97       	sbiw	r24, 0x01	; 1
    165a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    165e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Enable transmission and receiving via UART. We don't enable the UDR
	// empty interrupt here (we wait until we've got a character to
	// transmit). NOTE: Interrupts must be enabled globally for this
	// module to work, but we do not do this here.
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
    1662:	e1 ec       	ldi	r30, 0xC1	; 193
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	88 e1       	ldi	r24, 0x18	; 24
    1668:	80 83       	st	Z, r24

	// Enable receive complete interrupt.
	UCSR0B |= (1 << RXCIE0);
    166a:	80 81       	ld	r24, Z
    166c:	80 68       	ori	r24, 0x80	; 128
    166e:	80 83       	st	Z, r24

	// Set up our stream so the get and put functions are used to
	// read/write characters via the serial port when we use stdio
	// functions.
	stdout = &serialio;
    1670:	e9 e4       	ldi	r30, 0x49	; 73
    1672:	f4 e0       	ldi	r31, 0x04	; 4
    1674:	8e e0       	ldi	r24, 0x0E	; 14
    1676:	91 e0       	ldi	r25, 0x01	; 1
    1678:	93 83       	std	Z+3, r25	; 0x03
    167a:	82 83       	std	Z+2, r24	; 0x02
	stdin = &serialio;
    167c:	91 83       	std	Z+1, r25	; 0x01
    167e:	80 83       	st	Z, r24
    1680:	08 95       	ret

00001682 <serial_input_available>:
}

bool serial_input_available(void)
{
	return bytes_in_input_buffer != 0;
    1682:	90 91 48 04 	lds	r25, 0x0448	; 0x800448 <bytes_in_input_buffer>
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	91 11       	cpse	r25, r1
    168a:	01 c0       	rjmp	.+2      	; 0x168e <serial_input_available+0xc>
    168c:	80 e0       	ldi	r24, 0x00	; 0
}
    168e:	08 95       	ret

00001690 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void)
{
	// Just adjust our buffer data so it looks empty.
	input_insert_pos = 0;
    1690:	10 92 36 04 	sts	0x0436, r1	; 0x800436 <input_insert_pos>
	bytes_in_input_buffer = 0;
    1694:	10 92 48 04 	sts	0x0448, r1	; 0x800448 <bytes_in_input_buffer>
    1698:	08 95       	ret

0000169a <spi_setup_master>:

void spi_setup_master(uint8_t clockdivider)
{
	// Make the SS, MOSI and SCK pins outputs. These are pins 4, 5 and 7
	// of port B on the ATmega324A.
	DDRB |= (1 << DDB7) | (1 << DDB5) | (1 << DDB4);
    169a:	94 b1       	in	r25, 0x04	; 4
    169c:	90 6b       	ori	r25, 0xB0	; 176
    169e:	94 b9       	out	0x04, r25	; 4

	// Set the slave select (SS) line high.
	PORTB |= (1 << PORTB4);
    16a0:	95 b1       	in	r25, 0x05	; 5
    16a2:	90 61       	ori	r25, 0x10	; 16
    16a4:	95 b9       	out	0x05, r25	; 5
	
	// Set up the SPI control registers SPCR and SPSR. Enable SPI as use
	// Master Mode by setting the SPE and MSTR bits of SPCR0.
	SPCR0 = (1 << SPE0) | (1 << MSTR0);
    16a6:	90 e5       	ldi	r25, 0x50	; 80
    16a8:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR based on the
	// given clock divider. Invalid values default to the slowest speed.
	// We consider each bit in turn.
	switch (clockdivider)
    16aa:	88 30       	cpi	r24, 0x08	; 8
    16ac:	21 f0       	breq	.+8      	; 0x16b6 <spi_setup_master+0x1c>
    16ae:	80 32       	cpi	r24, 0x20	; 32
    16b0:	11 f0       	breq	.+4      	; 0x16b6 <spi_setup_master+0x1c>
    16b2:	82 30       	cpi	r24, 0x02	; 2
    16b4:	19 f4       	brne	.+6      	; 0x16bc <spi_setup_master+0x22>
	{
		case 2: // Fallthrough.
		case 8: // Fallthrough.
		case 32:
			SPSR0 = (1 << SPI2X0);
    16b6:	91 e0       	ldi	r25, 0x01	; 1
    16b8:	9d bd       	out	0x2d, r25	; 45
			break;
    16ba:	01 c0       	rjmp	.+2      	; 0x16be <spi_setup_master+0x24>
		default:
			SPSR0 = 0;
    16bc:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch (clockdivider)
    16be:	80 32       	cpi	r24, 0x20	; 32
    16c0:	69 f0       	breq	.+26     	; 0x16dc <spi_setup_master+0x42>
    16c2:	28 f4       	brcc	.+10     	; 0x16ce <spi_setup_master+0x34>
    16c4:	88 30       	cpi	r24, 0x08	; 8
    16c6:	71 f0       	breq	.+28     	; 0x16e4 <spi_setup_master+0x4a>
    16c8:	80 31       	cpi	r24, 0x10	; 16
    16ca:	61 f0       	breq	.+24     	; 0x16e4 <spi_setup_master+0x4a>
    16cc:	0e c0       	rjmp	.+28     	; 0x16ea <spi_setup_master+0x50>
    16ce:	80 34       	cpi	r24, 0x40	; 64
    16d0:	29 f0       	breq	.+10     	; 0x16dc <spi_setup_master+0x42>
    16d2:	80 38       	cpi	r24, 0x80	; 128
    16d4:	51 f4       	brne	.+20     	; 0x16ea <spi_setup_master+0x50>
	{
		case 128:
			SPCR0 |= (1 << SPR00);
    16d6:	8c b5       	in	r24, 0x2c	; 44
    16d8:	81 60       	ori	r24, 0x01	; 1
    16da:	8c bd       	out	0x2c, r24	; 44
			// Fallthrough.
		case 32: // Fallthrough.
		case 64:
			SPCR0 |= (1 << SPR10);
    16dc:	8c b5       	in	r24, 0x2c	; 44
    16de:	82 60       	ori	r24, 0x02	; 2
    16e0:	8c bd       	out	0x2c, r24	; 44
			break;
    16e2:	03 c0       	rjmp	.+6      	; 0x16ea <spi_setup_master+0x50>
		case 8: // Fallthrough.
		case 16:
			SPCR0 |= (1 << SPR00);
    16e4:	8c b5       	in	r24, 0x2c	; 44
    16e6:	81 60       	ori	r24, 0x01	; 1
    16e8:	8c bd       	out	0x2c, r24	; 44
			break;
	}

	// Take SS (slave select) line low.
	PORTB &= ~(1 << PORTB4);
    16ea:	85 b1       	in	r24, 0x05	; 5
    16ec:	8f 7e       	andi	r24, 0xEF	; 239
    16ee:	85 b9       	out	0x05, r24	; 5
    16f0:	08 95       	ret

000016f2 <spi_send_byte>:
	// transfer. We then wait until the most significant bit of SPSR0
	// (SPIF0) is set - this indicates that the transfer is complete. The
	// final read of SPSR0 followed by a read of SPDR0 will cause the SPIF
	// bit to be reset to 0. See page 173 of the ATmega324A datasheet for
	// more info.
	SPDR0 = byte;
    16f2:	8e bd       	out	0x2e, r24	; 46
	while ((SPSR0 & (1 << SPIF0)) == 0)
    16f4:	0d b4       	in	r0, 0x2d	; 45
    16f6:	07 fe       	sbrs	r0, 7
    16f8:	fd cf       	rjmp	.-6      	; 0x16f4 <spi_send_byte+0x2>
	{
		; // Wait.
	}
	return SPDR0;
    16fa:	8e b5       	in	r24, 0x2e	; 46
}
    16fc:	08 95       	ret

000016fe <display_initial_image>:
// Macro for getting next column number.
#define GET_NEXT_COLUMN(x, d) (((x) + 1) % countof((d)))

// Displays the initial image of the start screen.
static void display_initial_image(void)
{
    16fe:	1f 93       	push	r17
    1700:	cf 93       	push	r28
    1702:	df 93       	push	r29
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
    1708:	28 97       	sbiw	r28, 0x08	; 8
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	f8 94       	cli
    170e:	de bf       	out	0x3e, r29	; 62
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	cd bf       	out	0x3d, r28	; 61
	for (uint8_t col = 0; col < min(MATRIX_NUM_COLUMNS,
    1714:	10 e0       	ldi	r17, 0x00	; 0
    1716:	17 c0       	rjmp	.+46     	; 0x1746 <display_initial_image+0x48>
		countof(anim_data)); col++)
	{
		MatrixColumn column_data;
		memcpy_P(column_data, &anim_data[col], sizeof(column_data));
    1718:	61 2f       	mov	r22, r17
    171a:	70 e0       	ldi	r23, 0x00	; 0
    171c:	66 0f       	add	r22, r22
    171e:	77 1f       	adc	r23, r23
    1720:	66 0f       	add	r22, r22
    1722:	77 1f       	adc	r23, r23
    1724:	66 0f       	add	r22, r22
    1726:	77 1f       	adc	r23, r23
    1728:	6a 56       	subi	r22, 0x6A	; 106
    172a:	7e 4f       	sbci	r23, 0xFE	; 254
    172c:	48 e0       	ldi	r20, 0x08	; 8
    172e:	50 e0       	ldi	r21, 0x00	; 0
    1730:	ce 01       	movw	r24, r28
    1732:	01 96       	adiw	r24, 0x01	; 1
    1734:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <memcpy_P>
		ledmatrix_update_column(col, column_data);
    1738:	be 01       	movw	r22, r28
    173a:	6f 5f       	subi	r22, 0xFF	; 255
    173c:	7f 4f       	sbci	r23, 0xFF	; 255
    173e:	81 2f       	mov	r24, r17
    1740:	0e 94 5d 06 	call	0xcba	; 0xcba <ledmatrix_update_column>

// Displays the initial image of the start screen.
static void display_initial_image(void)
{
	for (uint8_t col = 0; col < min(MATRIX_NUM_COLUMNS,
		countof(anim_data)); col++)
    1744:	1f 5f       	subi	r17, 0xFF	; 255
#define GET_NEXT_COLUMN(x, d) (((x) + 1) % countof((d)))

// Displays the initial image of the start screen.
static void display_initial_image(void)
{
	for (uint8_t col = 0; col < min(MATRIX_NUM_COLUMNS,
    1746:	10 31       	cpi	r17, 0x10	; 16
    1748:	38 f3       	brcs	.-50     	; 0x1718 <display_initial_image+0x1a>
	{
		MatrixColumn column_data;
		memcpy_P(column_data, &anim_data[col], sizeof(column_data));
		ledmatrix_update_column(col, column_data);
	}
}
    174a:	28 96       	adiw	r28, 0x08	; 8
    174c:	0f b6       	in	r0, 0x3f	; 63
    174e:	f8 94       	cli
    1750:	de bf       	out	0x3e, r29	; 62
    1752:	0f be       	out	0x3f, r0	; 63
    1754:	cd bf       	out	0x3d, r28	; 61
    1756:	df 91       	pop	r29
    1758:	cf 91       	pop	r28
    175a:	1f 91       	pop	r17
    175c:	08 95       	ret

0000175e <display_next_column>:

// Displays the next column of the start screen.
static void display_next_column(void)
{
    175e:	cf 93       	push	r28
    1760:	df 93       	push	r29
    1762:	cd b7       	in	r28, 0x3d	; 61
    1764:	de b7       	in	r29, 0x3e	; 62
    1766:	28 97       	sbiw	r28, 0x08	; 8
    1768:	0f b6       	in	r0, 0x3f	; 63
    176a:	f8 94       	cli
    176c:	de bf       	out	0x3e, r29	; 62
    176e:	0f be       	out	0x3f, r0	; 63
    1770:	cd bf       	out	0x3d, r28	; 61
	ledmatrix_shift_display_left();
    1772:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <ledmatrix_shift_display_left>
	MatrixColumn column_data;
	memcpy_P(column_data, &anim_data[next_column], sizeof(column_data));
    1776:	60 91 23 03 	lds	r22, 0x0323	; 0x800323 <next_column>
    177a:	70 e0       	ldi	r23, 0x00	; 0
    177c:	66 0f       	add	r22, r22
    177e:	77 1f       	adc	r23, r23
    1780:	66 0f       	add	r22, r22
    1782:	77 1f       	adc	r23, r23
    1784:	66 0f       	add	r22, r22
    1786:	77 1f       	adc	r23, r23
    1788:	6a 56       	subi	r22, 0x6A	; 106
    178a:	7e 4f       	sbci	r23, 0xFE	; 254
    178c:	48 e0       	ldi	r20, 0x08	; 8
    178e:	50 e0       	ldi	r21, 0x00	; 0
    1790:	ce 01       	movw	r24, r28
    1792:	01 96       	adiw	r24, 0x01	; 1
    1794:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <memcpy_P>
	ledmatrix_update_column(MATRIX_NUM_COLUMNS - 1, column_data);
    1798:	be 01       	movw	r22, r28
    179a:	6f 5f       	subi	r22, 0xFF	; 255
    179c:	7f 4f       	sbci	r23, 0xFF	; 255
    179e:	8f e0       	ldi	r24, 0x0F	; 15
    17a0:	0e 94 5d 06 	call	0xcba	; 0xcba <ledmatrix_update_column>
	next_column = GET_NEXT_COLUMN(next_column, anim_data);
    17a4:	40 91 23 03 	lds	r20, 0x0323	; 0x800323 <next_column>
    17a8:	50 e0       	ldi	r21, 0x00	; 0
    17aa:	4f 5f       	subi	r20, 0xFF	; 255
    17ac:	5f 4f       	sbci	r21, 0xFF	; 255
    17ae:	9a 01       	movw	r18, r20
    17b0:	36 95       	lsr	r19
    17b2:	27 95       	ror	r18
    17b4:	ab e7       	ldi	r26, 0x7B	; 123
    17b6:	b4 e1       	ldi	r27, 0x14	; 20
    17b8:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <__umulhisi3>
    17bc:	96 95       	lsr	r25
    17be:	87 95       	ror	r24
    17c0:	62 e3       	ldi	r22, 0x32	; 50
    17c2:	68 9f       	mul	r22, r24
    17c4:	90 01       	movw	r18, r0
    17c6:	69 9f       	mul	r22, r25
    17c8:	30 0d       	add	r19, r0
    17ca:	11 24       	eor	r1, r1
    17cc:	ca 01       	movw	r24, r20
    17ce:	82 1b       	sub	r24, r18
    17d0:	93 0b       	sbc	r25, r19
    17d2:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <next_column>
	if (next_column == MATRIX_NUM_COLUMNS)
    17d6:	80 31       	cpi	r24, 0x10	; 16
    17d8:	29 f4       	brne	.+10     	; 0x17e4 <display_next_column+0x86>
	{
		flags |= FLG_IS_NEW_CYCLE;
    17da:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <flags>
    17de:	81 60       	ori	r24, 0x01	; 1
    17e0:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <flags>
	}
}
    17e4:	28 96       	adiw	r28, 0x08	; 8
    17e6:	0f b6       	in	r0, 0x3f	; 63
    17e8:	f8 94       	cli
    17ea:	de bf       	out	0x3e, r29	; 62
    17ec:	0f be       	out	0x3f, r0	; 63
    17ee:	cd bf       	out	0x3d, r28	; 61
    17f0:	df 91       	pop	r29
    17f2:	cf 91       	pop	r28
    17f4:	08 95       	ret

000017f6 <display_title_pixel>:
		}
	}
}

static bool display_title_pixel(uint8_t line, uint8_t col, bool coloured)
{
    17f6:	ef 92       	push	r14
    17f8:	ff 92       	push	r15
    17fa:	0f 93       	push	r16
    17fc:	1f 93       	push	r17
    17fe:	cf 93       	push	r28
    1800:	df 93       	push	r29
    1802:	cd b7       	in	r28, 0x3d	; 61
    1804:	de b7       	in	r29, 0x3e	; 62
    1806:	28 97       	sbiw	r28, 0x08	; 8
    1808:	0f b6       	in	r0, 0x3f	; 63
    180a:	f8 94       	cli
    180c:	de bf       	out	0x3e, r29	; 62
    180e:	0f be       	out	0x3f, r0	; 63
    1810:	cd bf       	out	0x3d, r28	; 61
    1812:	f6 2e       	mov	r15, r22
    1814:	e4 2e       	mov	r14, r20
	uint64_t data;
	memcpy_P(&data, &title_data[line], sizeof(data));
    1816:	68 2f       	mov	r22, r24
    1818:	70 e0       	ldi	r23, 0x00	; 0
    181a:	66 0f       	add	r22, r22
    181c:	77 1f       	adc	r23, r23
    181e:	66 0f       	add	r22, r22
    1820:	77 1f       	adc	r23, r23
    1822:	66 0f       	add	r22, r22
    1824:	77 1f       	adc	r23, r23
    1826:	62 59       	subi	r22, 0x92	; 146
    1828:	7e 4f       	sbci	r23, 0xFE	; 254
    182a:	48 e0       	ldi	r20, 0x08	; 8
    182c:	50 e0       	ldi	r21, 0x00	; 0
    182e:	ce 01       	movw	r24, r28
    1830:	01 96       	adiw	r24, 0x01	; 1
    1832:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <memcpy_P>
	if (data & ((uint64_t)1U << (63 - col)))
    1836:	0f e3       	ldi	r16, 0x3F	; 63
    1838:	10 e0       	ldi	r17, 0x00	; 0
    183a:	0f 19       	sub	r16, r15
    183c:	11 09       	sbc	r17, r1
    183e:	29 81       	ldd	r18, Y+1	; 0x01
    1840:	3a 81       	ldd	r19, Y+2	; 0x02
    1842:	4b 81       	ldd	r20, Y+3	; 0x03
    1844:	5c 81       	ldd	r21, Y+4	; 0x04
    1846:	6d 81       	ldd	r22, Y+5	; 0x05
    1848:	7e 81       	ldd	r23, Y+6	; 0x06
    184a:	8f 81       	ldd	r24, Y+7	; 0x07
    184c:	98 85       	ldd	r25, Y+8	; 0x08
    184e:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__lshrdi3>
    1852:	21 70       	andi	r18, 0x01	; 1
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	40 e0       	ldi	r20, 0x00	; 0
    1858:	50 e0       	ldi	r21, 0x00	; 0
    185a:	60 e0       	ldi	r22, 0x00	; 0
    185c:	70 e0       	ldi	r23, 0x00	; 0
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	a0 e0       	ldi	r26, 0x00	; 0
    1864:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <__cmpdi2_s8>
    1868:	c1 f0       	breq	.+48     	; 0x189a <display_title_pixel+0xa4>
	{
		if (!coloured)
    186a:	e1 10       	cpse	r14, r1
    186c:	1b c0       	rjmp	.+54     	; 0x18a4 <display_title_pixel+0xae>
    186e:	10 e0       	ldi	r17, 0x00	; 0
    1870:	0f c0       	rjmp	.+30     	; 0x1890 <display_title_pixel+0x9a>
		{
			for (uint8_t j = 0; j < countof(title_pos); j++)
			{
				if (col <= title_pos[j])
    1872:	81 2f       	mov	r24, r17
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	fc 01       	movw	r30, r24
    1878:	e1 57       	subi	r30, 0x71	; 113
    187a:	fd 4f       	sbci	r31, 0xFD	; 253
    187c:	20 81       	ld	r18, Z
    187e:	2f 15       	cp	r18, r15
    1880:	30 f0       	brcs	.+12     	; 0x188e <display_title_pixel+0x98>
				{
					set_display_attribute(title_attr[j]);
    1882:	fc 01       	movw	r30, r24
    1884:	e8 57       	subi	r30, 0x78	; 120
    1886:	fd 4f       	sbci	r31, 0xFD	; 253
    1888:	80 81       	ld	r24, Z
    188a:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <set_display_attribute>
	memcpy_P(&data, &title_data[line], sizeof(data));
	if (data & ((uint64_t)1U << (63 - col)))
	{
		if (!coloured)
		{
			for (uint8_t j = 0; j < countof(title_pos); j++)
    188e:	1f 5f       	subi	r17, 0xFF	; 255
    1890:	17 30       	cpi	r17, 0x07	; 7
    1892:	78 f3       	brcs	.-34     	; 0x1872 <display_title_pixel+0x7c>
				if (col <= title_pos[j])
				{
					set_display_attribute(title_attr[j]);
				}
			}
			coloured = true;
    1894:	ee 24       	eor	r14, r14
    1896:	e3 94       	inc	r14
    1898:	05 c0       	rjmp	.+10     	; 0x18a4 <display_title_pixel+0xae>
		}
	}
	else
	{
		if (coloured)
    189a:	ee 20       	and	r14, r14
    189c:	19 f0       	breq	.+6      	; 0x18a4 <display_title_pixel+0xae>
		{
			normal_display_mode();
    189e:	0e 94 57 0d 	call	0x1aae	; 0x1aae <normal_display_mode>
			coloured = false;
    18a2:	e1 2c       	mov	r14, r1
		}
		
	}
	putchar(' ');
    18a4:	60 91 4b 04 	lds	r22, 0x044B	; 0x80044b <__iob+0x2>
    18a8:	70 91 4c 04 	lds	r23, 0x044C	; 0x80044c <__iob+0x3>
    18ac:	80 e2       	ldi	r24, 0x20	; 32
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <fputc>
	return coloured;
}
    18b4:	8e 2d       	mov	r24, r14
    18b6:	28 96       	adiw	r28, 0x08	; 8
    18b8:	0f b6       	in	r0, 0x3f	; 63
    18ba:	f8 94       	cli
    18bc:	de bf       	out	0x3e, r29	; 62
    18be:	0f be       	out	0x3f, r0	; 63
    18c0:	cd bf       	out	0x3d, r28	; 61
    18c2:	df 91       	pop	r29
    18c4:	cf 91       	pop	r28
    18c6:	1f 91       	pop	r17
    18c8:	0f 91       	pop	r16
    18ca:	ff 90       	pop	r15
    18cc:	ef 90       	pop	r14
    18ce:	08 95       	ret

000018d0 <setup_start_screen>:
	}
}

void setup_start_screen(void)
{
	ledmatrix_clear();
    18d0:	0e 94 81 06 	call	0xd02	; 0xd02 <ledmatrix_clear>
	display_initial_image();
    18d4:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <display_initial_image>
	flags |= FLG_IS_NEW_CYCLE;
    18d8:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <flags>
    18dc:	81 60       	ori	r24, 0x01	; 1
    18de:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <flags>
    18e2:	08 95       	ret

000018e4 <update_start_screen>:
}

void update_start_screen(void)
{
    18e4:	cf 92       	push	r12
    18e6:	df 92       	push	r13
    18e8:	ef 92       	push	r14
    18ea:	ff 92       	push	r15
	uint32_t time = get_current_time();
    18ec:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <get_current_time>
    18f0:	6b 01       	movw	r12, r22
    18f2:	7c 01       	movw	r14, r24

	if (flags & FLG_IS_NEW_CYCLE)
    18f4:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <flags>
    18f8:	80 ff       	sbrs	r24, 0
    18fa:	16 c0       	rjmp	.+44     	; 0x1928 <update_start_screen+0x44>
	{
		flashing_start_time = time;
    18fc:	c0 92 28 03 	sts	0x0328, r12	; 0x800328 <flashing_start_time>
    1900:	d0 92 29 03 	sts	0x0329, r13	; 0x800329 <flashing_start_time+0x1>
    1904:	e0 92 2a 03 	sts	0x032A, r14	; 0x80032a <flashing_start_time+0x2>
    1908:	f0 92 2b 03 	sts	0x032B, r15	; 0x80032b <flashing_start_time+0x3>
		last_update_time = time;
    190c:	c0 92 24 03 	sts	0x0324, r12	; 0x800324 <last_update_time>
    1910:	d0 92 25 03 	sts	0x0325, r13	; 0x800325 <last_update_time+0x1>
    1914:	e0 92 26 03 	sts	0x0326, r14	; 0x800326 <last_update_time+0x2>
    1918:	f0 92 27 03 	sts	0x0327, r15	; 0x800327 <last_update_time+0x3>
		next_column = MATRIX_NUM_COLUMNS;
    191c:	90 e1       	ldi	r25, 0x10	; 16
    191e:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <next_column>
		flags &= ((~FLG_IS_NEW_CYCLE) & (~FLG_IS_FLASH_DONE) &
    1922:	88 7f       	andi	r24, 0xF8	; 248
    1924:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <flags>
			(~FLG_TOGGLE_ON));
	}

	if (next_column == MATRIX_NUM_COLUMNS)
    1928:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <next_column>
    192c:	80 31       	cpi	r24, 0x10	; 16
    192e:	09 f0       	breq	.+2      	; 0x1932 <update_start_screen+0x4e>
    1930:	64 c0       	rjmp	.+200    	; 0x19fa <update_start_screen+0x116>
	{
		if (time > flashing_start_time + FLASH_TIME + STATIC_TIME)
    1932:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <flashing_start_time>
    1936:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <flashing_start_time+0x1>
    193a:	a0 91 2a 03 	lds	r26, 0x032A	; 0x80032a <flashing_start_time+0x2>
    193e:	b0 91 2b 03 	lds	r27, 0x032B	; 0x80032b <flashing_start_time+0x3>
    1942:	ac 01       	movw	r20, r24
    1944:	bd 01       	movw	r22, r26
    1946:	40 53       	subi	r20, 0x30	; 48
    1948:	58 4f       	sbci	r21, 0xF8	; 248
    194a:	6f 4f       	sbci	r22, 0xFF	; 255
    194c:	7f 4f       	sbci	r23, 0xFF	; 255
    194e:	4c 15       	cp	r20, r12
    1950:	5d 05       	cpc	r21, r13
    1952:	6e 05       	cpc	r22, r14
    1954:	7f 05       	cpc	r23, r15
    1956:	58 f4       	brcc	.+22     	; 0x196e <update_start_screen+0x8a>
		{
			// Two seconds have passed since start of flashing,
			// display next column.
			display_next_column();
    1958:	0e 94 af 0b 	call	0x175e	; 0x175e <display_next_column>
			last_update_time = time;
    195c:	c0 92 24 03 	sts	0x0324, r12	; 0x800324 <last_update_time>
    1960:	d0 92 25 03 	sts	0x0325, r13	; 0x800325 <last_update_time+0x1>
    1964:	e0 92 26 03 	sts	0x0326, r14	; 0x800326 <last_update_time+0x2>
    1968:	f0 92 27 03 	sts	0x0327, r15	; 0x800327 <last_update_time+0x3>
    196c:	61 c0       	rjmp	.+194    	; 0x1a30 <update_start_screen+0x14c>
		}
		else if (!(flags & FLG_IS_FLASH_DONE) && time >
    196e:	20 91 2c 03 	lds	r18, 0x032C	; 0x80032c <flags>
    1972:	32 2f       	mov	r19, r18
    1974:	32 70       	andi	r19, 0x02	; 2
    1976:	21 fd       	sbrc	r18, 1
    1978:	19 c0       	rjmp	.+50     	; 0x19ac <update_start_screen+0xc8>
			flashing_start_time + FLASH_TIME)
    197a:	88 51       	subi	r24, 0x18	; 24
    197c:	9c 4f       	sbci	r25, 0xFC	; 252
    197e:	af 4f       	sbci	r26, 0xFF	; 255
    1980:	bf 4f       	sbci	r27, 0xFF	; 255
			// Two seconds have passed since start of flashing,
			// display next column.
			display_next_column();
			last_update_time = time;
		}
		else if (!(flags & FLG_IS_FLASH_DONE) && time >
    1982:	8c 15       	cp	r24, r12
    1984:	9d 05       	cpc	r25, r13
    1986:	ae 05       	cpc	r26, r14
    1988:	bf 05       	cpc	r27, r15
    198a:	80 f4       	brcc	.+32     	; 0x19ac <update_start_screen+0xc8>
			flashing_start_time + FLASH_TIME)
		{
			// One second has passed since the start of flashing,
			// turn off flashing.
			display_initial_image();
    198c:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <display_initial_image>
			flags |= FLG_IS_FLASH_DONE;
    1990:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <flags>
    1994:	82 60       	ori	r24, 0x02	; 2
    1996:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <flags>
			last_update_time = time;
    199a:	c0 92 24 03 	sts	0x0324, r12	; 0x800324 <last_update_time>
    199e:	d0 92 25 03 	sts	0x0325, r13	; 0x800325 <last_update_time+0x1>
    19a2:	e0 92 26 03 	sts	0x0326, r14	; 0x800326 <last_update_time+0x2>
    19a6:	f0 92 27 03 	sts	0x0327, r15	; 0x800327 <last_update_time+0x3>
    19aa:	42 c0       	rjmp	.+132    	; 0x1a30 <update_start_screen+0x14c>
		}
		else if (!(flags & FLG_IS_FLASH_DONE) && time >
    19ac:	31 11       	cpse	r19, r1
    19ae:	40 c0       	rjmp	.+128    	; 0x1a30 <update_start_screen+0x14c>
			last_update_time + FLASH_SPEED)
    19b0:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <last_update_time>
    19b4:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <last_update_time+0x1>
    19b8:	a0 91 26 03 	lds	r26, 0x0326	; 0x800326 <last_update_time+0x2>
    19bc:	b0 91 27 03 	lds	r27, 0x0327	; 0x800327 <last_update_time+0x3>
    19c0:	8c 59       	subi	r24, 0x9C	; 156
    19c2:	9f 4f       	sbci	r25, 0xFF	; 255
    19c4:	af 4f       	sbci	r26, 0xFF	; 255
    19c6:	bf 4f       	sbci	r27, 0xFF	; 255
			// turn off flashing.
			display_initial_image();
			flags |= FLG_IS_FLASH_DONE;
			last_update_time = time;
		}
		else if (!(flags & FLG_IS_FLASH_DONE) && time >
    19c8:	8c 15       	cp	r24, r12
    19ca:	9d 05       	cpc	r25, r13
    19cc:	ae 05       	cpc	r26, r14
    19ce:	bf 05       	cpc	r27, r15
    19d0:	78 f5       	brcc	.+94     	; 0x1a30 <update_start_screen+0x14c>
			last_update_time + FLASH_SPEED)
		{
			// 0.1 seconds passed since last flash, flash the LED
			// matrix.
			if ((flags ^= FLG_TOGGLE_ON) & FLG_TOGGLE_ON)
    19d2:	84 e0       	ldi	r24, 0x04	; 4
    19d4:	28 27       	eor	r18, r24
    19d6:	20 93 2c 03 	sts	0x032C, r18	; 0x80032c <flags>
    19da:	22 ff       	sbrs	r18, 2
    19dc:	03 c0       	rjmp	.+6      	; 0x19e4 <update_start_screen+0x100>
			{
				ledmatrix_clear();
    19de:	0e 94 81 06 	call	0xd02	; 0xd02 <ledmatrix_clear>
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <update_start_screen+0x104>
			}
			else
			{
				display_initial_image();
    19e4:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <display_initial_image>
			}
			last_update_time = time;
    19e8:	c0 92 24 03 	sts	0x0324, r12	; 0x800324 <last_update_time>
    19ec:	d0 92 25 03 	sts	0x0325, r13	; 0x800325 <last_update_time+0x1>
    19f0:	e0 92 26 03 	sts	0x0326, r14	; 0x800326 <last_update_time+0x2>
    19f4:	f0 92 27 03 	sts	0x0327, r15	; 0x800327 <last_update_time+0x3>
    19f8:	1b c0       	rjmp	.+54     	; 0x1a30 <update_start_screen+0x14c>
		}
	}
	else
	{
		if (time > last_update_time + SCROLL_SPEED)
    19fa:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <last_update_time>
    19fe:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <last_update_time+0x1>
    1a02:	a0 91 26 03 	lds	r26, 0x0326	; 0x800326 <last_update_time+0x2>
    1a06:	b0 91 27 03 	lds	r27, 0x0327	; 0x800327 <last_update_time+0x3>
    1a0a:	88 53       	subi	r24, 0x38	; 56
    1a0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a0e:	af 4f       	sbci	r26, 0xFF	; 255
    1a10:	bf 4f       	sbci	r27, 0xFF	; 255
    1a12:	8c 15       	cp	r24, r12
    1a14:	9d 05       	cpc	r25, r13
    1a16:	ae 05       	cpc	r26, r14
    1a18:	bf 05       	cpc	r27, r15
    1a1a:	50 f4       	brcc	.+20     	; 0x1a30 <update_start_screen+0x14c>
		{
			display_next_column();
    1a1c:	0e 94 af 0b 	call	0x175e	; 0x175e <display_next_column>
			last_update_time = time;
    1a20:	c0 92 24 03 	sts	0x0324, r12	; 0x800324 <last_update_time>
    1a24:	d0 92 25 03 	sts	0x0325, r13	; 0x800325 <last_update_time+0x1>
    1a28:	e0 92 26 03 	sts	0x0326, r14	; 0x800326 <last_update_time+0x2>
    1a2c:	f0 92 27 03 	sts	0x0327, r15	; 0x800327 <last_update_time+0x3>
		}
	}
}
    1a30:	ff 90       	pop	r15
    1a32:	ef 90       	pop	r14
    1a34:	df 90       	pop	r13
    1a36:	cf 90       	pop	r12
    1a38:	08 95       	ret

00001a3a <display_terminal_title>:
	putchar(' ');
	return coloured;
}

void display_terminal_title(uint8_t row, uint8_t col)
{
    1a3a:	ff 92       	push	r15
    1a3c:	0f 93       	push	r16
    1a3e:	1f 93       	push	r17
    1a40:	cf 93       	push	r28
    1a42:	df 93       	push	r29
    1a44:	f8 2e       	mov	r15, r24
    1a46:	06 2f       	mov	r16, r22
	bool coloured = false;
	for (uint8_t line = 0; line < countof(title_data); line++)
    1a48:	10 e0       	ldi	r17, 0x00	; 0
	return coloured;
}

void display_terminal_title(uint8_t row, uint8_t col)
{
	bool coloured = false;
    1a4a:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t line = 0; line < countof(title_data); line++)
    1a4c:	14 c0       	rjmp	.+40     	; 0x1a76 <display_terminal_title+0x3c>
	{
		move_terminal_cursor(line + row, col);
    1a4e:	60 2f       	mov	r22, r16
    1a50:	70 e0       	ldi	r23, 0x00	; 0
    1a52:	8f 2d       	mov	r24, r15
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	81 0f       	add	r24, r17
    1a58:	91 1d       	adc	r25, r1
    1a5a:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <move_terminal_cursor>
		for (uint8_t i = 0; i < 64; i++)
    1a5e:	c0 e0       	ldi	r28, 0x00	; 0
    1a60:	07 c0       	rjmp	.+14     	; 0x1a70 <display_terminal_title+0x36>
		{
			coloured = display_title_pixel(line, i, coloured);
    1a62:	4d 2f       	mov	r20, r29
    1a64:	6c 2f       	mov	r22, r28
    1a66:	81 2f       	mov	r24, r17
    1a68:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <display_title_pixel>
    1a6c:	d8 2f       	mov	r29, r24
{
	bool coloured = false;
	for (uint8_t line = 0; line < countof(title_data); line++)
	{
		move_terminal_cursor(line + row, col);
		for (uint8_t i = 0; i < 64; i++)
    1a6e:	cf 5f       	subi	r28, 0xFF	; 255
    1a70:	c0 34       	cpi	r28, 0x40	; 64
    1a72:	b8 f3       	brcs	.-18     	; 0x1a62 <display_terminal_title+0x28>
}

void display_terminal_title(uint8_t row, uint8_t col)
{
	bool coloured = false;
	for (uint8_t line = 0; line < countof(title_data); line++)
    1a74:	1f 5f       	subi	r17, 0xFF	; 255
    1a76:	15 30       	cpi	r17, 0x05	; 5
    1a78:	50 f3       	brcs	.-44     	; 0x1a4e <display_terminal_title+0x14>
		for (uint8_t i = 0; i < 64; i++)
		{
			coloured = display_title_pixel(line, i, coloured);
		}
	}
}
    1a7a:	df 91       	pop	r29
    1a7c:	cf 91       	pop	r28
    1a7e:	1f 91       	pop	r17
    1a80:	0f 91       	pop	r16
    1a82:	ff 90       	pop	r15
    1a84:	08 95       	ret

00001a86 <move_terminal_cursor>:
}

void reverse_video(void)
{
	printf_P(PSTR("\x1b[7m"));
}
    1a86:	6f 5f       	subi	r22, 0xFF	; 255
    1a88:	7f 4f       	sbci	r23, 0xFF	; 255
    1a8a:	7f 93       	push	r23
    1a8c:	6f 93       	push	r22
    1a8e:	01 96       	adiw	r24, 0x01	; 1
    1a90:	9f 93       	push	r25
    1a92:	8f 93       	push	r24
    1a94:	81 e4       	ldi	r24, 0x41	; 65
    1a96:	93 e0       	ldi	r25, 0x03	; 3
    1a98:	9f 93       	push	r25
    1a9a:	8f 93       	push	r24
    1a9c:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <printf_P>
    1aa0:	0f 90       	pop	r0
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	0f 90       	pop	r0
    1aa8:	0f 90       	pop	r0
    1aaa:	0f 90       	pop	r0
    1aac:	08 95       	ret

00001aae <normal_display_mode>:
    1aae:	8c e3       	ldi	r24, 0x3C	; 60
    1ab0:	93 e0       	ldi	r25, 0x03	; 3
    1ab2:	9f 93       	push	r25
    1ab4:	8f 93       	push	r24
    1ab6:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <printf_P>
    1aba:	0f 90       	pop	r0
    1abc:	0f 90       	pop	r0
    1abe:	08 95       	ret

00001ac0 <clear_terminal>:

void clear_terminal(void)
{
	printf_P(PSTR("\x1b[2J"));
    1ac0:	87 e3       	ldi	r24, 0x37	; 55
    1ac2:	93 e0       	ldi	r25, 0x03	; 3
    1ac4:	9f 93       	push	r25
    1ac6:	8f 93       	push	r24
    1ac8:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <printf_P>
}
    1acc:	0f 90       	pop	r0
    1ace:	0f 90       	pop	r0
    1ad0:	08 95       	ret

00001ad2 <clear_to_end_of_line>:

void clear_to_end_of_line(void)
{
	printf_P(PSTR("\x1b[K"));
    1ad2:	83 e3       	ldi	r24, 0x33	; 51
    1ad4:	93 e0       	ldi	r25, 0x03	; 3
    1ad6:	9f 93       	push	r25
    1ad8:	8f 93       	push	r24
    1ada:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <printf_P>
}
    1ade:	0f 90       	pop	r0
    1ae0:	0f 90       	pop	r0
    1ae2:	08 95       	ret

00001ae4 <set_display_attribute>:

void set_display_attribute(DisplayParameter parameter)
{
	printf_P(PSTR("\x1b[%dm"), parameter);
    1ae4:	1f 92       	push	r1
    1ae6:	8f 93       	push	r24
    1ae8:	8d e2       	ldi	r24, 0x2D	; 45
    1aea:	93 e0       	ldi	r25, 0x03	; 3
    1aec:	9f 93       	push	r25
    1aee:	8f 93       	push	r24
    1af0:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <printf_P>
}
    1af4:	0f 90       	pop	r0
    1af6:	0f 90       	pop	r0
    1af8:	0f 90       	pop	r0
    1afa:	0f 90       	pop	r0
    1afc:	08 95       	ret

00001afe <hide_cursor>:

void hide_cursor(void)
{
	printf_P(PSTR("\x1b[?25l"));
    1afe:	86 e2       	ldi	r24, 0x26	; 38
    1b00:	93 e0       	ldi	r25, 0x03	; 3
    1b02:	9f 93       	push	r25
    1b04:	8f 93       	push	r24
    1b06:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <printf_P>
}
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	08 95       	ret

00001b10 <init_timer0>:
static volatile uint32_t clock_ticks_ms;

void init_timer0(void)
{
	// Reset clock tick count. L indicates a long (32 bit) constant.
	clock_ticks_ms = 0L;
    1b10:	10 92 2d 03 	sts	0x032D, r1	; 0x80032d <clock_ticks_ms>
    1b14:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <clock_ticks_ms+0x1>
    1b18:	10 92 2f 03 	sts	0x032F, r1	; 0x80032f <clock_ticks_ms+0x2>
    1b1c:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <clock_ticks_ms+0x3>
	// interrupt every 64 x 125 clock cycles, i.e. every 1 milliseconds
	// with an 8MHz clock. The counter will be reset to 0 when it reaches
	// it's output compare value.

	// Clear the timer.
	TCNT0 = 0;
    1b20:	16 bc       	out	0x26, r1	; 38

	// Set the output compare value to be 124.
	OCR0A = 124;
    1b22:	8c e7       	ldi	r24, 0x7C	; 124
    1b24:	87 bd       	out	0x27, r24	; 39

	// Set the timer to clear on compare match (CTC mode) and to
	// divide the clock by 64. This starts the timer running.
	TCCR0A = (1 << WGM01);
    1b26:	92 e0       	ldi	r25, 0x02	; 2
    1b28:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1 << CS01) | (1 << CS00);
    1b2a:	83 e0       	ldi	r24, 0x03	; 3
    1b2c:	85 bd       	out	0x25, r24	; 37

	// Enable an interrupt on output compare match. Note that
	// interrupts have to be enabled globally before the interrupts
	// will fire.
	TIMSK0 |= (1 << OCIE0A);
    1b2e:	ee e6       	ldi	r30, 0x6E	; 110
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	82 60       	ori	r24, 0x02	; 2
    1b36:	80 83       	st	Z, r24

	// Make sure the interrupt flag is cleared by writing a 1 to it.
	TIFR0 = (1 << OCF0A);
    1b38:	95 bb       	out	0x15, r25	; 21
    1b3a:	08 95       	ret

00001b3c <get_current_time>:
uint32_t get_current_time(void)
{
	// Disable interrupts so we can be sure that the interrupt doesn't
	// fire when we've copied just a couple of bytes of the value.
	// Interrupts are re-enabled if they were enabled at the start.
	uint8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
    1b3c:	8f b7       	in	r24, 0x3f	; 63
    1b3e:	28 2f       	mov	r18, r24
    1b40:	20 78       	andi	r18, 0x80	; 128
	cli();
    1b42:	f8 94       	cli
	uint32_t result = clock_ticks_ms;
    1b44:	60 91 2d 03 	lds	r22, 0x032D	; 0x80032d <clock_ticks_ms>
    1b48:	70 91 2e 03 	lds	r23, 0x032E	; 0x80032e <clock_ticks_ms+0x1>
    1b4c:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <clock_ticks_ms+0x2>
    1b50:	90 91 30 03 	lds	r25, 0x0330	; 0x800330 <clock_ticks_ms+0x3>
	if (interrupts_were_enabled)
    1b54:	22 23       	and	r18, r18
    1b56:	09 f0       	breq	.+2      	; 0x1b5a <get_current_time+0x1e>
	{
		sei();
    1b58:	78 94       	sei
	}
	return result;
}
    1b5a:	08 95       	ret

00001b5c <__vector_16>:

// Interrupt handler for clock tick.
ISR(TIMER0_COMPA_vect)
{
    1b5c:	1f 92       	push	r1
    1b5e:	0f 92       	push	r0
    1b60:	0f b6       	in	r0, 0x3f	; 63
    1b62:	0f 92       	push	r0
    1b64:	11 24       	eor	r1, r1
    1b66:	8f 93       	push	r24
    1b68:	9f 93       	push	r25
    1b6a:	af 93       	push	r26
    1b6c:	bf 93       	push	r27
	// Increment our clock tick count.
	clock_ticks_ms++;
    1b6e:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <clock_ticks_ms>
    1b72:	90 91 2e 03 	lds	r25, 0x032E	; 0x80032e <clock_ticks_ms+0x1>
    1b76:	a0 91 2f 03 	lds	r26, 0x032F	; 0x80032f <clock_ticks_ms+0x2>
    1b7a:	b0 91 30 03 	lds	r27, 0x0330	; 0x800330 <clock_ticks_ms+0x3>
    1b7e:	01 96       	adiw	r24, 0x01	; 1
    1b80:	a1 1d       	adc	r26, r1
    1b82:	b1 1d       	adc	r27, r1
    1b84:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <clock_ticks_ms>
    1b88:	90 93 2e 03 	sts	0x032E, r25	; 0x80032e <clock_ticks_ms+0x1>
    1b8c:	a0 93 2f 03 	sts	0x032F, r26	; 0x80032f <clock_ticks_ms+0x2>
    1b90:	b0 93 30 03 	sts	0x0330, r27	; 0x800330 <clock_ticks_ms+0x3>
}
    1b94:	bf 91       	pop	r27
    1b96:	af 91       	pop	r26
    1b98:	9f 91       	pop	r25
    1b9a:	8f 91       	pop	r24
    1b9c:	0f 90       	pop	r0
    1b9e:	0f be       	out	0x3f, r0	; 63
    1ba0:	0f 90       	pop	r0
    1ba2:	1f 90       	pop	r1
    1ba4:	18 95       	reti

00001ba6 <init_timer1>:
#include <avr/interrupt.h>

void init_timer1(void)
{
	// Setup timer 1.
	TCNT1 = 0;
    1ba6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    1baa:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    1bae:	08 95       	ret

00001bb0 <init_timer2>:
#include <avr/interrupt.h>

void init_timer2(void)
{
	// Setup timer 2.
	TCNT2 = 0;
    1bb0:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    1bb4:	08 95       	ret

00001bb6 <__divmodhi4>:
    1bb6:	97 fb       	bst	r25, 7
    1bb8:	07 2e       	mov	r0, r23
    1bba:	16 f4       	brtc	.+4      	; 0x1bc0 <__divmodhi4+0xa>
    1bbc:	00 94       	com	r0
    1bbe:	07 d0       	rcall	.+14     	; 0x1bce <__divmodhi4_neg1>
    1bc0:	77 fd       	sbrc	r23, 7
    1bc2:	09 d0       	rcall	.+18     	; 0x1bd6 <__divmodhi4_neg2>
    1bc4:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <__udivmodhi4>
    1bc8:	07 fc       	sbrc	r0, 7
    1bca:	05 d0       	rcall	.+10     	; 0x1bd6 <__divmodhi4_neg2>
    1bcc:	3e f4       	brtc	.+14     	; 0x1bdc <__divmodhi4_exit>

00001bce <__divmodhi4_neg1>:
    1bce:	90 95       	com	r25
    1bd0:	81 95       	neg	r24
    1bd2:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd4:	08 95       	ret

00001bd6 <__divmodhi4_neg2>:
    1bd6:	70 95       	com	r23
    1bd8:	61 95       	neg	r22
    1bda:	7f 4f       	sbci	r23, 0xFF	; 255

00001bdc <__divmodhi4_exit>:
    1bdc:	08 95       	ret

00001bde <__udivmodsi4>:
    1bde:	a1 e2       	ldi	r26, 0x21	; 33
    1be0:	1a 2e       	mov	r1, r26
    1be2:	aa 1b       	sub	r26, r26
    1be4:	bb 1b       	sub	r27, r27
    1be6:	fd 01       	movw	r30, r26
    1be8:	0d c0       	rjmp	.+26     	; 0x1c04 <__udivmodsi4_ep>

00001bea <__udivmodsi4_loop>:
    1bea:	aa 1f       	adc	r26, r26
    1bec:	bb 1f       	adc	r27, r27
    1bee:	ee 1f       	adc	r30, r30
    1bf0:	ff 1f       	adc	r31, r31
    1bf2:	a2 17       	cp	r26, r18
    1bf4:	b3 07       	cpc	r27, r19
    1bf6:	e4 07       	cpc	r30, r20
    1bf8:	f5 07       	cpc	r31, r21
    1bfa:	20 f0       	brcs	.+8      	; 0x1c04 <__udivmodsi4_ep>
    1bfc:	a2 1b       	sub	r26, r18
    1bfe:	b3 0b       	sbc	r27, r19
    1c00:	e4 0b       	sbc	r30, r20
    1c02:	f5 0b       	sbc	r31, r21

00001c04 <__udivmodsi4_ep>:
    1c04:	66 1f       	adc	r22, r22
    1c06:	77 1f       	adc	r23, r23
    1c08:	88 1f       	adc	r24, r24
    1c0a:	99 1f       	adc	r25, r25
    1c0c:	1a 94       	dec	r1
    1c0e:	69 f7       	brne	.-38     	; 0x1bea <__udivmodsi4_loop>
    1c10:	60 95       	com	r22
    1c12:	70 95       	com	r23
    1c14:	80 95       	com	r24
    1c16:	90 95       	com	r25
    1c18:	9b 01       	movw	r18, r22
    1c1a:	ac 01       	movw	r20, r24
    1c1c:	bd 01       	movw	r22, r26
    1c1e:	cf 01       	movw	r24, r30
    1c20:	08 95       	ret

00001c22 <__divmodsi4>:
    1c22:	05 2e       	mov	r0, r21
    1c24:	97 fb       	bst	r25, 7
    1c26:	1e f4       	brtc	.+6      	; 0x1c2e <__divmodsi4+0xc>
    1c28:	00 94       	com	r0
    1c2a:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <__negsi2>
    1c2e:	57 fd       	sbrc	r21, 7
    1c30:	07 d0       	rcall	.+14     	; 0x1c40 <__divmodsi4_neg2>
    1c32:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <__udivmodsi4>
    1c36:	07 fc       	sbrc	r0, 7
    1c38:	03 d0       	rcall	.+6      	; 0x1c40 <__divmodsi4_neg2>
    1c3a:	4e f4       	brtc	.+18     	; 0x1c4e <__divmodsi4_exit>
    1c3c:	0c 94 28 0e 	jmp	0x1c50	; 0x1c50 <__negsi2>

00001c40 <__divmodsi4_neg2>:
    1c40:	50 95       	com	r21
    1c42:	40 95       	com	r20
    1c44:	30 95       	com	r19
    1c46:	21 95       	neg	r18
    1c48:	3f 4f       	sbci	r19, 0xFF	; 255
    1c4a:	4f 4f       	sbci	r20, 0xFF	; 255
    1c4c:	5f 4f       	sbci	r21, 0xFF	; 255

00001c4e <__divmodsi4_exit>:
    1c4e:	08 95       	ret

00001c50 <__negsi2>:
    1c50:	90 95       	com	r25
    1c52:	80 95       	com	r24
    1c54:	70 95       	com	r23
    1c56:	61 95       	neg	r22
    1c58:	7f 4f       	sbci	r23, 0xFF	; 255
    1c5a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c5e:	08 95       	ret

00001c60 <__umulhisi3>:
    1c60:	a2 9f       	mul	r26, r18
    1c62:	b0 01       	movw	r22, r0
    1c64:	b3 9f       	mul	r27, r19
    1c66:	c0 01       	movw	r24, r0
    1c68:	a3 9f       	mul	r26, r19
    1c6a:	70 0d       	add	r23, r0
    1c6c:	81 1d       	adc	r24, r1
    1c6e:	11 24       	eor	r1, r1
    1c70:	91 1d       	adc	r25, r1
    1c72:	b2 9f       	mul	r27, r18
    1c74:	70 0d       	add	r23, r0
    1c76:	81 1d       	adc	r24, r1
    1c78:	11 24       	eor	r1, r1
    1c7a:	91 1d       	adc	r25, r1
    1c7c:	08 95       	ret

00001c7e <__ashrdi3>:
    1c7e:	97 fb       	bst	r25, 7
    1c80:	10 f8       	bld	r1, 0

00001c82 <__lshrdi3>:
    1c82:	16 94       	lsr	r1
    1c84:	00 08       	sbc	r0, r0
    1c86:	0f 93       	push	r16
    1c88:	08 30       	cpi	r16, 0x08	; 8
    1c8a:	98 f0       	brcs	.+38     	; 0x1cb2 <__lshrdi3+0x30>
    1c8c:	08 50       	subi	r16, 0x08	; 8
    1c8e:	23 2f       	mov	r18, r19
    1c90:	34 2f       	mov	r19, r20
    1c92:	45 2f       	mov	r20, r21
    1c94:	56 2f       	mov	r21, r22
    1c96:	67 2f       	mov	r22, r23
    1c98:	78 2f       	mov	r23, r24
    1c9a:	89 2f       	mov	r24, r25
    1c9c:	90 2d       	mov	r25, r0
    1c9e:	f4 cf       	rjmp	.-24     	; 0x1c88 <__lshrdi3+0x6>
    1ca0:	05 94       	asr	r0
    1ca2:	97 95       	ror	r25
    1ca4:	87 95       	ror	r24
    1ca6:	77 95       	ror	r23
    1ca8:	67 95       	ror	r22
    1caa:	57 95       	ror	r21
    1cac:	47 95       	ror	r20
    1cae:	37 95       	ror	r19
    1cb0:	27 95       	ror	r18
    1cb2:	0a 95       	dec	r16
    1cb4:	aa f7       	brpl	.-22     	; 0x1ca0 <__lshrdi3+0x1e>
    1cb6:	0f 91       	pop	r16
    1cb8:	08 95       	ret

00001cba <__cmpdi2_s8>:
    1cba:	00 24       	eor	r0, r0
    1cbc:	a7 fd       	sbrc	r26, 7
    1cbe:	00 94       	com	r0
    1cc0:	2a 17       	cp	r18, r26
    1cc2:	30 05       	cpc	r19, r0
    1cc4:	40 05       	cpc	r20, r0
    1cc6:	50 05       	cpc	r21, r0
    1cc8:	60 05       	cpc	r22, r0
    1cca:	70 05       	cpc	r23, r0
    1ccc:	80 05       	cpc	r24, r0
    1cce:	90 05       	cpc	r25, r0
    1cd0:	08 95       	ret

00001cd2 <__udivmodhi4>:
    1cd2:	aa 1b       	sub	r26, r26
    1cd4:	bb 1b       	sub	r27, r27
    1cd6:	51 e1       	ldi	r21, 0x11	; 17
    1cd8:	07 c0       	rjmp	.+14     	; 0x1ce8 <__udivmodhi4_ep>

00001cda <__udivmodhi4_loop>:
    1cda:	aa 1f       	adc	r26, r26
    1cdc:	bb 1f       	adc	r27, r27
    1cde:	a6 17       	cp	r26, r22
    1ce0:	b7 07       	cpc	r27, r23
    1ce2:	10 f0       	brcs	.+4      	; 0x1ce8 <__udivmodhi4_ep>
    1ce4:	a6 1b       	sub	r26, r22
    1ce6:	b7 0b       	sbc	r27, r23

00001ce8 <__udivmodhi4_ep>:
    1ce8:	88 1f       	adc	r24, r24
    1cea:	99 1f       	adc	r25, r25
    1cec:	5a 95       	dec	r21
    1cee:	a9 f7       	brne	.-22     	; 0x1cda <__udivmodhi4_loop>
    1cf0:	80 95       	com	r24
    1cf2:	90 95       	com	r25
    1cf4:	bc 01       	movw	r22, r24
    1cf6:	cd 01       	movw	r24, r26
    1cf8:	08 95       	ret

00001cfa <do_rand>:
    1cfa:	8f 92       	push	r8
    1cfc:	9f 92       	push	r9
    1cfe:	af 92       	push	r10
    1d00:	bf 92       	push	r11
    1d02:	cf 92       	push	r12
    1d04:	df 92       	push	r13
    1d06:	ef 92       	push	r14
    1d08:	ff 92       	push	r15
    1d0a:	cf 93       	push	r28
    1d0c:	df 93       	push	r29
    1d0e:	ec 01       	movw	r28, r24
    1d10:	68 81       	ld	r22, Y
    1d12:	79 81       	ldd	r23, Y+1	; 0x01
    1d14:	8a 81       	ldd	r24, Y+2	; 0x02
    1d16:	9b 81       	ldd	r25, Y+3	; 0x03
    1d18:	61 15       	cp	r22, r1
    1d1a:	71 05       	cpc	r23, r1
    1d1c:	81 05       	cpc	r24, r1
    1d1e:	91 05       	cpc	r25, r1
    1d20:	21 f4       	brne	.+8      	; 0x1d2a <do_rand+0x30>
    1d22:	64 e2       	ldi	r22, 0x24	; 36
    1d24:	79 ed       	ldi	r23, 0xD9	; 217
    1d26:	8b e5       	ldi	r24, 0x5B	; 91
    1d28:	97 e0       	ldi	r25, 0x07	; 7
    1d2a:	2d e1       	ldi	r18, 0x1D	; 29
    1d2c:	33 ef       	ldi	r19, 0xF3	; 243
    1d2e:	41 e0       	ldi	r20, 0x01	; 1
    1d30:	50 e0       	ldi	r21, 0x00	; 0
    1d32:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <__divmodsi4>
    1d36:	49 01       	movw	r8, r18
    1d38:	5a 01       	movw	r10, r20
    1d3a:	9b 01       	movw	r18, r22
    1d3c:	ac 01       	movw	r20, r24
    1d3e:	a7 ea       	ldi	r26, 0xA7	; 167
    1d40:	b1 e4       	ldi	r27, 0x41	; 65
    1d42:	0e 94 2f 12 	call	0x245e	; 0x245e <__muluhisi3>
    1d46:	6b 01       	movw	r12, r22
    1d48:	7c 01       	movw	r14, r24
    1d4a:	ac ee       	ldi	r26, 0xEC	; 236
    1d4c:	b4 ef       	ldi	r27, 0xF4	; 244
    1d4e:	a5 01       	movw	r20, r10
    1d50:	94 01       	movw	r18, r8
    1d52:	0e 94 3d 12 	call	0x247a	; 0x247a <__mulohisi3>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	8c 0d       	add	r24, r12
    1d5c:	9d 1d       	adc	r25, r13
    1d5e:	ae 1d       	adc	r26, r14
    1d60:	bf 1d       	adc	r27, r15
    1d62:	b7 ff       	sbrs	r27, 7
    1d64:	03 c0       	rjmp	.+6      	; 0x1d6c <do_rand+0x72>
    1d66:	01 97       	sbiw	r24, 0x01	; 1
    1d68:	a1 09       	sbc	r26, r1
    1d6a:	b0 48       	sbci	r27, 0x80	; 128
    1d6c:	88 83       	st	Y, r24
    1d6e:	99 83       	std	Y+1, r25	; 0x01
    1d70:	aa 83       	std	Y+2, r26	; 0x02
    1d72:	bb 83       	std	Y+3, r27	; 0x03
    1d74:	9f 77       	andi	r25, 0x7F	; 127
    1d76:	df 91       	pop	r29
    1d78:	cf 91       	pop	r28
    1d7a:	ff 90       	pop	r15
    1d7c:	ef 90       	pop	r14
    1d7e:	df 90       	pop	r13
    1d80:	cf 90       	pop	r12
    1d82:	bf 90       	pop	r11
    1d84:	af 90       	pop	r10
    1d86:	9f 90       	pop	r9
    1d88:	8f 90       	pop	r8
    1d8a:	08 95       	ret

00001d8c <rand_r>:
    1d8c:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <do_rand>
    1d90:	08 95       	ret

00001d92 <rand>:
    1d92:	80 e0       	ldi	r24, 0x00	; 0
    1d94:	91 e0       	ldi	r25, 0x01	; 1
    1d96:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <do_rand>
    1d9a:	08 95       	ret

00001d9c <srand>:
    1d9c:	a0 e0       	ldi	r26, 0x00	; 0
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    1da4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1da8:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    1dac:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    1db0:	08 95       	ret

00001db2 <tolower>:
    1db2:	91 11       	cpse	r25, r1
    1db4:	08 95       	ret
    1db6:	81 54       	subi	r24, 0x41	; 65
    1db8:	8a 51       	subi	r24, 0x1A	; 26
    1dba:	08 f4       	brcc	.+2      	; 0x1dbe <tolower+0xc>
    1dbc:	80 5e       	subi	r24, 0xE0	; 224
    1dbe:	85 5a       	subi	r24, 0xA5	; 165
    1dc0:	08 95       	ret

00001dc2 <toupper>:
    1dc2:	91 11       	cpse	r25, r1
    1dc4:	08 95       	ret
    1dc6:	81 56       	subi	r24, 0x61	; 97
    1dc8:	8a 51       	subi	r24, 0x1A	; 26
    1dca:	08 f4       	brcc	.+2      	; 0x1dce <toupper+0xc>
    1dcc:	80 52       	subi	r24, 0x20	; 32
    1dce:	85 58       	subi	r24, 0x85	; 133
    1dd0:	08 95       	ret

00001dd2 <memcpy_P>:
    1dd2:	fb 01       	movw	r30, r22
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	02 c0       	rjmp	.+4      	; 0x1ddc <memcpy_P+0xa>
    1dd8:	05 90       	lpm	r0, Z+
    1dda:	0d 92       	st	X+, r0
    1ddc:	41 50       	subi	r20, 0x01	; 1
    1dde:	50 40       	sbci	r21, 0x00	; 0
    1de0:	d8 f7       	brcc	.-10     	; 0x1dd8 <memcpy_P+0x6>
    1de2:	08 95       	ret

00001de4 <strcmp>:
    1de4:	fb 01       	movw	r30, r22
    1de6:	dc 01       	movw	r26, r24
    1de8:	8d 91       	ld	r24, X+
    1dea:	01 90       	ld	r0, Z+
    1dec:	80 19       	sub	r24, r0
    1dee:	01 10       	cpse	r0, r1
    1df0:	d9 f3       	breq	.-10     	; 0x1de8 <strcmp+0x4>
    1df2:	99 0b       	sbc	r25, r25
    1df4:	08 95       	ret

00001df6 <fgetc>:
    1df6:	cf 93       	push	r28
    1df8:	df 93       	push	r29
    1dfa:	ec 01       	movw	r28, r24
    1dfc:	2b 81       	ldd	r18, Y+3	; 0x03
    1dfe:	20 ff       	sbrs	r18, 0
    1e00:	33 c0       	rjmp	.+102    	; 0x1e68 <fgetc+0x72>
    1e02:	26 ff       	sbrs	r18, 6
    1e04:	0a c0       	rjmp	.+20     	; 0x1e1a <fgetc+0x24>
    1e06:	2f 7b       	andi	r18, 0xBF	; 191
    1e08:	2b 83       	std	Y+3, r18	; 0x03
    1e0a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e0c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e0e:	01 96       	adiw	r24, 0x01	; 1
    1e10:	9f 83       	std	Y+7, r25	; 0x07
    1e12:	8e 83       	std	Y+6, r24	; 0x06
    1e14:	8a 81       	ldd	r24, Y+2	; 0x02
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	29 c0       	rjmp	.+82     	; 0x1e6c <fgetc+0x76>
    1e1a:	22 ff       	sbrs	r18, 2
    1e1c:	0f c0       	rjmp	.+30     	; 0x1e3c <fgetc+0x46>
    1e1e:	e8 81       	ld	r30, Y
    1e20:	f9 81       	ldd	r31, Y+1	; 0x01
    1e22:	80 81       	ld	r24, Z
    1e24:	08 2e       	mov	r0, r24
    1e26:	00 0c       	add	r0, r0
    1e28:	99 0b       	sbc	r25, r25
    1e2a:	00 97       	sbiw	r24, 0x00	; 0
    1e2c:	19 f4       	brne	.+6      	; 0x1e34 <fgetc+0x3e>
    1e2e:	20 62       	ori	r18, 0x20	; 32
    1e30:	2b 83       	std	Y+3, r18	; 0x03
    1e32:	1a c0       	rjmp	.+52     	; 0x1e68 <fgetc+0x72>
    1e34:	31 96       	adiw	r30, 0x01	; 1
    1e36:	f9 83       	std	Y+1, r31	; 0x01
    1e38:	e8 83       	st	Y, r30
    1e3a:	0e c0       	rjmp	.+28     	; 0x1e58 <fgetc+0x62>
    1e3c:	ea 85       	ldd	r30, Y+10	; 0x0a
    1e3e:	fb 85       	ldd	r31, Y+11	; 0x0b
    1e40:	09 95       	icall
    1e42:	97 ff       	sbrs	r25, 7
    1e44:	09 c0       	rjmp	.+18     	; 0x1e58 <fgetc+0x62>
    1e46:	2b 81       	ldd	r18, Y+3	; 0x03
    1e48:	01 96       	adiw	r24, 0x01	; 1
    1e4a:	11 f0       	breq	.+4      	; 0x1e50 <fgetc+0x5a>
    1e4c:	80 e2       	ldi	r24, 0x20	; 32
    1e4e:	01 c0       	rjmp	.+2      	; 0x1e52 <fgetc+0x5c>
    1e50:	80 e1       	ldi	r24, 0x10	; 16
    1e52:	82 2b       	or	r24, r18
    1e54:	8b 83       	std	Y+3, r24	; 0x03
    1e56:	08 c0       	rjmp	.+16     	; 0x1e68 <fgetc+0x72>
    1e58:	2e 81       	ldd	r18, Y+6	; 0x06
    1e5a:	3f 81       	ldd	r19, Y+7	; 0x07
    1e5c:	2f 5f       	subi	r18, 0xFF	; 255
    1e5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e60:	3f 83       	std	Y+7, r19	; 0x07
    1e62:	2e 83       	std	Y+6, r18	; 0x06
    1e64:	99 27       	eor	r25, r25
    1e66:	02 c0       	rjmp	.+4      	; 0x1e6c <fgetc+0x76>
    1e68:	8f ef       	ldi	r24, 0xFF	; 255
    1e6a:	9f ef       	ldi	r25, 0xFF	; 255
    1e6c:	df 91       	pop	r29
    1e6e:	cf 91       	pop	r28
    1e70:	08 95       	ret

00001e72 <fputc>:
    1e72:	0f 93       	push	r16
    1e74:	1f 93       	push	r17
    1e76:	cf 93       	push	r28
    1e78:	df 93       	push	r29
    1e7a:	fb 01       	movw	r30, r22
    1e7c:	23 81       	ldd	r18, Z+3	; 0x03
    1e7e:	21 fd       	sbrc	r18, 1
    1e80:	03 c0       	rjmp	.+6      	; 0x1e88 <fputc+0x16>
    1e82:	8f ef       	ldi	r24, 0xFF	; 255
    1e84:	9f ef       	ldi	r25, 0xFF	; 255
    1e86:	2c c0       	rjmp	.+88     	; 0x1ee0 <fputc+0x6e>
    1e88:	22 ff       	sbrs	r18, 2
    1e8a:	16 c0       	rjmp	.+44     	; 0x1eb8 <fputc+0x46>
    1e8c:	46 81       	ldd	r20, Z+6	; 0x06
    1e8e:	57 81       	ldd	r21, Z+7	; 0x07
    1e90:	24 81       	ldd	r18, Z+4	; 0x04
    1e92:	35 81       	ldd	r19, Z+5	; 0x05
    1e94:	42 17       	cp	r20, r18
    1e96:	53 07       	cpc	r21, r19
    1e98:	44 f4       	brge	.+16     	; 0x1eaa <fputc+0x38>
    1e9a:	a0 81       	ld	r26, Z
    1e9c:	b1 81       	ldd	r27, Z+1	; 0x01
    1e9e:	9d 01       	movw	r18, r26
    1ea0:	2f 5f       	subi	r18, 0xFF	; 255
    1ea2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ea4:	31 83       	std	Z+1, r19	; 0x01
    1ea6:	20 83       	st	Z, r18
    1ea8:	8c 93       	st	X, r24
    1eaa:	26 81       	ldd	r18, Z+6	; 0x06
    1eac:	37 81       	ldd	r19, Z+7	; 0x07
    1eae:	2f 5f       	subi	r18, 0xFF	; 255
    1eb0:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb2:	37 83       	std	Z+7, r19	; 0x07
    1eb4:	26 83       	std	Z+6, r18	; 0x06
    1eb6:	14 c0       	rjmp	.+40     	; 0x1ee0 <fputc+0x6e>
    1eb8:	8b 01       	movw	r16, r22
    1eba:	ec 01       	movw	r28, r24
    1ebc:	fb 01       	movw	r30, r22
    1ebe:	00 84       	ldd	r0, Z+8	; 0x08
    1ec0:	f1 85       	ldd	r31, Z+9	; 0x09
    1ec2:	e0 2d       	mov	r30, r0
    1ec4:	09 95       	icall
    1ec6:	89 2b       	or	r24, r25
    1ec8:	e1 f6       	brne	.-72     	; 0x1e82 <fputc+0x10>
    1eca:	d8 01       	movw	r26, r16
    1ecc:	16 96       	adiw	r26, 0x06	; 6
    1ece:	8d 91       	ld	r24, X+
    1ed0:	9c 91       	ld	r25, X
    1ed2:	17 97       	sbiw	r26, 0x07	; 7
    1ed4:	01 96       	adiw	r24, 0x01	; 1
    1ed6:	17 96       	adiw	r26, 0x07	; 7
    1ed8:	9c 93       	st	X, r25
    1eda:	8e 93       	st	-X, r24
    1edc:	16 97       	sbiw	r26, 0x06	; 6
    1ede:	ce 01       	movw	r24, r28
    1ee0:	df 91       	pop	r29
    1ee2:	cf 91       	pop	r28
    1ee4:	1f 91       	pop	r17
    1ee6:	0f 91       	pop	r16
    1ee8:	08 95       	ret

00001eea <printf>:
    1eea:	a0 e0       	ldi	r26, 0x00	; 0
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	eb e7       	ldi	r30, 0x7B	; 123
    1ef0:	ff e0       	ldi	r31, 0x0F	; 15
    1ef2:	0c 94 52 12 	jmp	0x24a4	; 0x24a4 <__prologue_saves__+0x20>
    1ef6:	ae 01       	movw	r20, r28
    1ef8:	4b 5f       	subi	r20, 0xFB	; 251
    1efa:	5f 4f       	sbci	r21, 0xFF	; 255
    1efc:	fa 01       	movw	r30, r20
    1efe:	61 91       	ld	r22, Z+
    1f00:	71 91       	ld	r23, Z+
    1f02:	af 01       	movw	r20, r30
    1f04:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <__iob+0x2>
    1f08:	90 91 4c 04 	lds	r25, 0x044C	; 0x80044c <__iob+0x3>
    1f0c:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <vfprintf>
    1f10:	e2 e0       	ldi	r30, 0x02	; 2
    1f12:	0c 94 6e 12 	jmp	0x24dc	; 0x24dc <__epilogue_restores__+0x20>

00001f16 <printf_P>:
    1f16:	a0 e0       	ldi	r26, 0x00	; 0
    1f18:	b0 e0       	ldi	r27, 0x00	; 0
    1f1a:	e1 e9       	ldi	r30, 0x91	; 145
    1f1c:	ff e0       	ldi	r31, 0x0F	; 15
    1f1e:	0c 94 50 12 	jmp	0x24a0	; 0x24a0 <__prologue_saves__+0x1c>
    1f22:	ae 01       	movw	r20, r28
    1f24:	49 5f       	subi	r20, 0xF9	; 249
    1f26:	5f 4f       	sbci	r21, 0xFF	; 255
    1f28:	da 01       	movw	r26, r20
    1f2a:	6d 91       	ld	r22, X+
    1f2c:	7d 91       	ld	r23, X+
    1f2e:	ad 01       	movw	r20, r26
    1f30:	09 e4       	ldi	r16, 0x49	; 73
    1f32:	14 e0       	ldi	r17, 0x04	; 4
    1f34:	f8 01       	movw	r30, r16
    1f36:	82 81       	ldd	r24, Z+2	; 0x02
    1f38:	93 81       	ldd	r25, Z+3	; 0x03
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	13 96       	adiw	r26, 0x03	; 3
    1f3e:	2c 91       	ld	r18, X
    1f40:	13 97       	sbiw	r26, 0x03	; 3
    1f42:	28 60       	ori	r18, 0x08	; 8
    1f44:	13 96       	adiw	r26, 0x03	; 3
    1f46:	2c 93       	st	X, r18
    1f48:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <vfprintf>
    1f4c:	d8 01       	movw	r26, r16
    1f4e:	12 96       	adiw	r26, 0x02	; 2
    1f50:	ed 91       	ld	r30, X+
    1f52:	fc 91       	ld	r31, X
    1f54:	13 97       	sbiw	r26, 0x03	; 3
    1f56:	23 81       	ldd	r18, Z+3	; 0x03
    1f58:	27 7f       	andi	r18, 0xF7	; 247
    1f5a:	23 83       	std	Z+3, r18	; 0x03
    1f5c:	e4 e0       	ldi	r30, 0x04	; 4
    1f5e:	0c 94 6c 12 	jmp	0x24d8	; 0x24d8 <__epilogue_restores__+0x1c>

00001f62 <putchar>:
    1f62:	60 91 4b 04 	lds	r22, 0x044B	; 0x80044b <__iob+0x2>
    1f66:	70 91 4c 04 	lds	r23, 0x044C	; 0x80044c <__iob+0x3>
    1f6a:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <fputc>
    1f6e:	08 95       	ret

00001f70 <sprintf>:
    1f70:	ae e0       	ldi	r26, 0x0E	; 14
    1f72:	b0 e0       	ldi	r27, 0x00	; 0
    1f74:	ee eb       	ldi	r30, 0xBE	; 190
    1f76:	ff e0       	ldi	r31, 0x0F	; 15
    1f78:	0c 94 50 12 	jmp	0x24a0	; 0x24a0 <__prologue_saves__+0x1c>
    1f7c:	0d 89       	ldd	r16, Y+21	; 0x15
    1f7e:	1e 89       	ldd	r17, Y+22	; 0x16
    1f80:	86 e0       	ldi	r24, 0x06	; 6
    1f82:	8c 83       	std	Y+4, r24	; 0x04
    1f84:	1a 83       	std	Y+2, r17	; 0x02
    1f86:	09 83       	std	Y+1, r16	; 0x01
    1f88:	8f ef       	ldi	r24, 0xFF	; 255
    1f8a:	9f e7       	ldi	r25, 0x7F	; 127
    1f8c:	9e 83       	std	Y+6, r25	; 0x06
    1f8e:	8d 83       	std	Y+5, r24	; 0x05
    1f90:	ae 01       	movw	r20, r28
    1f92:	47 5e       	subi	r20, 0xE7	; 231
    1f94:	5f 4f       	sbci	r21, 0xFF	; 255
    1f96:	6f 89       	ldd	r22, Y+23	; 0x17
    1f98:	78 8d       	ldd	r23, Y+24	; 0x18
    1f9a:	ce 01       	movw	r24, r28
    1f9c:	01 96       	adiw	r24, 0x01	; 1
    1f9e:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <vfprintf>
    1fa2:	ef 81       	ldd	r30, Y+7	; 0x07
    1fa4:	f8 85       	ldd	r31, Y+8	; 0x08
    1fa6:	e0 0f       	add	r30, r16
    1fa8:	f1 1f       	adc	r31, r17
    1faa:	10 82       	st	Z, r1
    1fac:	2e 96       	adiw	r28, 0x0e	; 14
    1fae:	e4 e0       	ldi	r30, 0x04	; 4
    1fb0:	0c 94 6c 12 	jmp	0x24d8	; 0x24d8 <__epilogue_restores__+0x1c>

00001fb4 <vfprintf>:
    1fb4:	ab e0       	ldi	r26, 0x0B	; 11
    1fb6:	b0 e0       	ldi	r27, 0x00	; 0
    1fb8:	e0 ee       	ldi	r30, 0xE0	; 224
    1fba:	ff e0       	ldi	r31, 0x0F	; 15
    1fbc:	0c 94 42 12 	jmp	0x2484	; 0x2484 <__prologue_saves__>
    1fc0:	6c 01       	movw	r12, r24
    1fc2:	7b 01       	movw	r14, r22
    1fc4:	8a 01       	movw	r16, r20
    1fc6:	fc 01       	movw	r30, r24
    1fc8:	17 82       	std	Z+7, r1	; 0x07
    1fca:	16 82       	std	Z+6, r1	; 0x06
    1fcc:	83 81       	ldd	r24, Z+3	; 0x03
    1fce:	81 ff       	sbrs	r24, 1
    1fd0:	cc c1       	rjmp	.+920    	; 0x236a <vfprintf+0x3b6>
    1fd2:	ce 01       	movw	r24, r28
    1fd4:	01 96       	adiw	r24, 0x01	; 1
    1fd6:	3c 01       	movw	r6, r24
    1fd8:	f6 01       	movw	r30, r12
    1fda:	93 81       	ldd	r25, Z+3	; 0x03
    1fdc:	f7 01       	movw	r30, r14
    1fde:	93 fd       	sbrc	r25, 3
    1fe0:	85 91       	lpm	r24, Z+
    1fe2:	93 ff       	sbrs	r25, 3
    1fe4:	81 91       	ld	r24, Z+
    1fe6:	7f 01       	movw	r14, r30
    1fe8:	88 23       	and	r24, r24
    1fea:	09 f4       	brne	.+2      	; 0x1fee <vfprintf+0x3a>
    1fec:	ba c1       	rjmp	.+884    	; 0x2362 <vfprintf+0x3ae>
    1fee:	85 32       	cpi	r24, 0x25	; 37
    1ff0:	39 f4       	brne	.+14     	; 0x2000 <vfprintf+0x4c>
    1ff2:	93 fd       	sbrc	r25, 3
    1ff4:	85 91       	lpm	r24, Z+
    1ff6:	93 ff       	sbrs	r25, 3
    1ff8:	81 91       	ld	r24, Z+
    1ffa:	7f 01       	movw	r14, r30
    1ffc:	85 32       	cpi	r24, 0x25	; 37
    1ffe:	29 f4       	brne	.+10     	; 0x200a <vfprintf+0x56>
    2000:	b6 01       	movw	r22, r12
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <fputc>
    2008:	e7 cf       	rjmp	.-50     	; 0x1fd8 <vfprintf+0x24>
    200a:	91 2c       	mov	r9, r1
    200c:	21 2c       	mov	r2, r1
    200e:	31 2c       	mov	r3, r1
    2010:	ff e1       	ldi	r31, 0x1F	; 31
    2012:	f3 15       	cp	r31, r3
    2014:	d8 f0       	brcs	.+54     	; 0x204c <vfprintf+0x98>
    2016:	8b 32       	cpi	r24, 0x2B	; 43
    2018:	79 f0       	breq	.+30     	; 0x2038 <vfprintf+0x84>
    201a:	38 f4       	brcc	.+14     	; 0x202a <vfprintf+0x76>
    201c:	80 32       	cpi	r24, 0x20	; 32
    201e:	79 f0       	breq	.+30     	; 0x203e <vfprintf+0x8a>
    2020:	83 32       	cpi	r24, 0x23	; 35
    2022:	a1 f4       	brne	.+40     	; 0x204c <vfprintf+0x98>
    2024:	23 2d       	mov	r18, r3
    2026:	20 61       	ori	r18, 0x10	; 16
    2028:	1d c0       	rjmp	.+58     	; 0x2064 <vfprintf+0xb0>
    202a:	8d 32       	cpi	r24, 0x2D	; 45
    202c:	61 f0       	breq	.+24     	; 0x2046 <vfprintf+0x92>
    202e:	80 33       	cpi	r24, 0x30	; 48
    2030:	69 f4       	brne	.+26     	; 0x204c <vfprintf+0x98>
    2032:	23 2d       	mov	r18, r3
    2034:	21 60       	ori	r18, 0x01	; 1
    2036:	16 c0       	rjmp	.+44     	; 0x2064 <vfprintf+0xb0>
    2038:	83 2d       	mov	r24, r3
    203a:	82 60       	ori	r24, 0x02	; 2
    203c:	38 2e       	mov	r3, r24
    203e:	e3 2d       	mov	r30, r3
    2040:	e4 60       	ori	r30, 0x04	; 4
    2042:	3e 2e       	mov	r3, r30
    2044:	2a c0       	rjmp	.+84     	; 0x209a <vfprintf+0xe6>
    2046:	f3 2d       	mov	r31, r3
    2048:	f8 60       	ori	r31, 0x08	; 8
    204a:	1d c0       	rjmp	.+58     	; 0x2086 <vfprintf+0xd2>
    204c:	37 fc       	sbrc	r3, 7
    204e:	2d c0       	rjmp	.+90     	; 0x20aa <vfprintf+0xf6>
    2050:	20 ed       	ldi	r18, 0xD0	; 208
    2052:	28 0f       	add	r18, r24
    2054:	2a 30       	cpi	r18, 0x0A	; 10
    2056:	40 f0       	brcs	.+16     	; 0x2068 <vfprintf+0xb4>
    2058:	8e 32       	cpi	r24, 0x2E	; 46
    205a:	b9 f4       	brne	.+46     	; 0x208a <vfprintf+0xd6>
    205c:	36 fc       	sbrc	r3, 6
    205e:	81 c1       	rjmp	.+770    	; 0x2362 <vfprintf+0x3ae>
    2060:	23 2d       	mov	r18, r3
    2062:	20 64       	ori	r18, 0x40	; 64
    2064:	32 2e       	mov	r3, r18
    2066:	19 c0       	rjmp	.+50     	; 0x209a <vfprintf+0xe6>
    2068:	36 fe       	sbrs	r3, 6
    206a:	06 c0       	rjmp	.+12     	; 0x2078 <vfprintf+0xc4>
    206c:	8a e0       	ldi	r24, 0x0A	; 10
    206e:	98 9e       	mul	r9, r24
    2070:	20 0d       	add	r18, r0
    2072:	11 24       	eor	r1, r1
    2074:	92 2e       	mov	r9, r18
    2076:	11 c0       	rjmp	.+34     	; 0x209a <vfprintf+0xe6>
    2078:	ea e0       	ldi	r30, 0x0A	; 10
    207a:	2e 9e       	mul	r2, r30
    207c:	20 0d       	add	r18, r0
    207e:	11 24       	eor	r1, r1
    2080:	22 2e       	mov	r2, r18
    2082:	f3 2d       	mov	r31, r3
    2084:	f0 62       	ori	r31, 0x20	; 32
    2086:	3f 2e       	mov	r3, r31
    2088:	08 c0       	rjmp	.+16     	; 0x209a <vfprintf+0xe6>
    208a:	8c 36       	cpi	r24, 0x6C	; 108
    208c:	21 f4       	brne	.+8      	; 0x2096 <vfprintf+0xe2>
    208e:	83 2d       	mov	r24, r3
    2090:	80 68       	ori	r24, 0x80	; 128
    2092:	38 2e       	mov	r3, r24
    2094:	02 c0       	rjmp	.+4      	; 0x209a <vfprintf+0xe6>
    2096:	88 36       	cpi	r24, 0x68	; 104
    2098:	41 f4       	brne	.+16     	; 0x20aa <vfprintf+0xf6>
    209a:	f7 01       	movw	r30, r14
    209c:	93 fd       	sbrc	r25, 3
    209e:	85 91       	lpm	r24, Z+
    20a0:	93 ff       	sbrs	r25, 3
    20a2:	81 91       	ld	r24, Z+
    20a4:	7f 01       	movw	r14, r30
    20a6:	81 11       	cpse	r24, r1
    20a8:	b3 cf       	rjmp	.-154    	; 0x2010 <vfprintf+0x5c>
    20aa:	98 2f       	mov	r25, r24
    20ac:	9f 7d       	andi	r25, 0xDF	; 223
    20ae:	95 54       	subi	r25, 0x45	; 69
    20b0:	93 30       	cpi	r25, 0x03	; 3
    20b2:	28 f4       	brcc	.+10     	; 0x20be <vfprintf+0x10a>
    20b4:	0c 5f       	subi	r16, 0xFC	; 252
    20b6:	1f 4f       	sbci	r17, 0xFF	; 255
    20b8:	9f e3       	ldi	r25, 0x3F	; 63
    20ba:	99 83       	std	Y+1, r25	; 0x01
    20bc:	0d c0       	rjmp	.+26     	; 0x20d8 <vfprintf+0x124>
    20be:	83 36       	cpi	r24, 0x63	; 99
    20c0:	31 f0       	breq	.+12     	; 0x20ce <vfprintf+0x11a>
    20c2:	83 37       	cpi	r24, 0x73	; 115
    20c4:	71 f0       	breq	.+28     	; 0x20e2 <vfprintf+0x12e>
    20c6:	83 35       	cpi	r24, 0x53	; 83
    20c8:	09 f0       	breq	.+2      	; 0x20cc <vfprintf+0x118>
    20ca:	59 c0       	rjmp	.+178    	; 0x217e <vfprintf+0x1ca>
    20cc:	21 c0       	rjmp	.+66     	; 0x2110 <vfprintf+0x15c>
    20ce:	f8 01       	movw	r30, r16
    20d0:	80 81       	ld	r24, Z
    20d2:	89 83       	std	Y+1, r24	; 0x01
    20d4:	0e 5f       	subi	r16, 0xFE	; 254
    20d6:	1f 4f       	sbci	r17, 0xFF	; 255
    20d8:	88 24       	eor	r8, r8
    20da:	83 94       	inc	r8
    20dc:	91 2c       	mov	r9, r1
    20de:	53 01       	movw	r10, r6
    20e0:	13 c0       	rjmp	.+38     	; 0x2108 <vfprintf+0x154>
    20e2:	28 01       	movw	r4, r16
    20e4:	f2 e0       	ldi	r31, 0x02	; 2
    20e6:	4f 0e       	add	r4, r31
    20e8:	51 1c       	adc	r5, r1
    20ea:	f8 01       	movw	r30, r16
    20ec:	a0 80       	ld	r10, Z
    20ee:	b1 80       	ldd	r11, Z+1	; 0x01
    20f0:	36 fe       	sbrs	r3, 6
    20f2:	03 c0       	rjmp	.+6      	; 0x20fa <vfprintf+0x146>
    20f4:	69 2d       	mov	r22, r9
    20f6:	70 e0       	ldi	r23, 0x00	; 0
    20f8:	02 c0       	rjmp	.+4      	; 0x20fe <vfprintf+0x14a>
    20fa:	6f ef       	ldi	r22, 0xFF	; 255
    20fc:	7f ef       	ldi	r23, 0xFF	; 255
    20fe:	c5 01       	movw	r24, r10
    2100:	0e 94 c6 11 	call	0x238c	; 0x238c <strnlen>
    2104:	4c 01       	movw	r8, r24
    2106:	82 01       	movw	r16, r4
    2108:	f3 2d       	mov	r31, r3
    210a:	ff 77       	andi	r31, 0x7F	; 127
    210c:	3f 2e       	mov	r3, r31
    210e:	16 c0       	rjmp	.+44     	; 0x213c <vfprintf+0x188>
    2110:	28 01       	movw	r4, r16
    2112:	22 e0       	ldi	r18, 0x02	; 2
    2114:	42 0e       	add	r4, r18
    2116:	51 1c       	adc	r5, r1
    2118:	f8 01       	movw	r30, r16
    211a:	a0 80       	ld	r10, Z
    211c:	b1 80       	ldd	r11, Z+1	; 0x01
    211e:	36 fe       	sbrs	r3, 6
    2120:	03 c0       	rjmp	.+6      	; 0x2128 <vfprintf+0x174>
    2122:	69 2d       	mov	r22, r9
    2124:	70 e0       	ldi	r23, 0x00	; 0
    2126:	02 c0       	rjmp	.+4      	; 0x212c <vfprintf+0x178>
    2128:	6f ef       	ldi	r22, 0xFF	; 255
    212a:	7f ef       	ldi	r23, 0xFF	; 255
    212c:	c5 01       	movw	r24, r10
    212e:	0e 94 bb 11 	call	0x2376	; 0x2376 <strnlen_P>
    2132:	4c 01       	movw	r8, r24
    2134:	f3 2d       	mov	r31, r3
    2136:	f0 68       	ori	r31, 0x80	; 128
    2138:	3f 2e       	mov	r3, r31
    213a:	82 01       	movw	r16, r4
    213c:	33 fc       	sbrc	r3, 3
    213e:	1b c0       	rjmp	.+54     	; 0x2176 <vfprintf+0x1c2>
    2140:	82 2d       	mov	r24, r2
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	88 16       	cp	r8, r24
    2146:	99 06       	cpc	r9, r25
    2148:	b0 f4       	brcc	.+44     	; 0x2176 <vfprintf+0x1c2>
    214a:	b6 01       	movw	r22, r12
    214c:	80 e2       	ldi	r24, 0x20	; 32
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <fputc>
    2154:	2a 94       	dec	r2
    2156:	f4 cf       	rjmp	.-24     	; 0x2140 <vfprintf+0x18c>
    2158:	f5 01       	movw	r30, r10
    215a:	37 fc       	sbrc	r3, 7
    215c:	85 91       	lpm	r24, Z+
    215e:	37 fe       	sbrs	r3, 7
    2160:	81 91       	ld	r24, Z+
    2162:	5f 01       	movw	r10, r30
    2164:	b6 01       	movw	r22, r12
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <fputc>
    216c:	21 10       	cpse	r2, r1
    216e:	2a 94       	dec	r2
    2170:	21 e0       	ldi	r18, 0x01	; 1
    2172:	82 1a       	sub	r8, r18
    2174:	91 08       	sbc	r9, r1
    2176:	81 14       	cp	r8, r1
    2178:	91 04       	cpc	r9, r1
    217a:	71 f7       	brne	.-36     	; 0x2158 <vfprintf+0x1a4>
    217c:	e8 c0       	rjmp	.+464    	; 0x234e <vfprintf+0x39a>
    217e:	84 36       	cpi	r24, 0x64	; 100
    2180:	11 f0       	breq	.+4      	; 0x2186 <vfprintf+0x1d2>
    2182:	89 36       	cpi	r24, 0x69	; 105
    2184:	41 f5       	brne	.+80     	; 0x21d6 <vfprintf+0x222>
    2186:	f8 01       	movw	r30, r16
    2188:	37 fe       	sbrs	r3, 7
    218a:	07 c0       	rjmp	.+14     	; 0x219a <vfprintf+0x1e6>
    218c:	60 81       	ld	r22, Z
    218e:	71 81       	ldd	r23, Z+1	; 0x01
    2190:	82 81       	ldd	r24, Z+2	; 0x02
    2192:	93 81       	ldd	r25, Z+3	; 0x03
    2194:	0c 5f       	subi	r16, 0xFC	; 252
    2196:	1f 4f       	sbci	r17, 0xFF	; 255
    2198:	08 c0       	rjmp	.+16     	; 0x21aa <vfprintf+0x1f6>
    219a:	60 81       	ld	r22, Z
    219c:	71 81       	ldd	r23, Z+1	; 0x01
    219e:	07 2e       	mov	r0, r23
    21a0:	00 0c       	add	r0, r0
    21a2:	88 0b       	sbc	r24, r24
    21a4:	99 0b       	sbc	r25, r25
    21a6:	0e 5f       	subi	r16, 0xFE	; 254
    21a8:	1f 4f       	sbci	r17, 0xFF	; 255
    21aa:	f3 2d       	mov	r31, r3
    21ac:	ff 76       	andi	r31, 0x6F	; 111
    21ae:	3f 2e       	mov	r3, r31
    21b0:	97 ff       	sbrs	r25, 7
    21b2:	09 c0       	rjmp	.+18     	; 0x21c6 <vfprintf+0x212>
    21b4:	90 95       	com	r25
    21b6:	80 95       	com	r24
    21b8:	70 95       	com	r23
    21ba:	61 95       	neg	r22
    21bc:	7f 4f       	sbci	r23, 0xFF	; 255
    21be:	8f 4f       	sbci	r24, 0xFF	; 255
    21c0:	9f 4f       	sbci	r25, 0xFF	; 255
    21c2:	f0 68       	ori	r31, 0x80	; 128
    21c4:	3f 2e       	mov	r3, r31
    21c6:	2a e0       	ldi	r18, 0x0A	; 10
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	a3 01       	movw	r20, r6
    21cc:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__ultoa_invert>
    21d0:	88 2e       	mov	r8, r24
    21d2:	86 18       	sub	r8, r6
    21d4:	45 c0       	rjmp	.+138    	; 0x2260 <vfprintf+0x2ac>
    21d6:	85 37       	cpi	r24, 0x75	; 117
    21d8:	31 f4       	brne	.+12     	; 0x21e6 <vfprintf+0x232>
    21da:	23 2d       	mov	r18, r3
    21dc:	2f 7e       	andi	r18, 0xEF	; 239
    21de:	b2 2e       	mov	r11, r18
    21e0:	2a e0       	ldi	r18, 0x0A	; 10
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	25 c0       	rjmp	.+74     	; 0x2230 <vfprintf+0x27c>
    21e6:	93 2d       	mov	r25, r3
    21e8:	99 7f       	andi	r25, 0xF9	; 249
    21ea:	b9 2e       	mov	r11, r25
    21ec:	8f 36       	cpi	r24, 0x6F	; 111
    21ee:	c1 f0       	breq	.+48     	; 0x2220 <vfprintf+0x26c>
    21f0:	18 f4       	brcc	.+6      	; 0x21f8 <vfprintf+0x244>
    21f2:	88 35       	cpi	r24, 0x58	; 88
    21f4:	79 f0       	breq	.+30     	; 0x2214 <vfprintf+0x260>
    21f6:	b5 c0       	rjmp	.+362    	; 0x2362 <vfprintf+0x3ae>
    21f8:	80 37       	cpi	r24, 0x70	; 112
    21fa:	19 f0       	breq	.+6      	; 0x2202 <vfprintf+0x24e>
    21fc:	88 37       	cpi	r24, 0x78	; 120
    21fe:	21 f0       	breq	.+8      	; 0x2208 <vfprintf+0x254>
    2200:	b0 c0       	rjmp	.+352    	; 0x2362 <vfprintf+0x3ae>
    2202:	e9 2f       	mov	r30, r25
    2204:	e0 61       	ori	r30, 0x10	; 16
    2206:	be 2e       	mov	r11, r30
    2208:	b4 fe       	sbrs	r11, 4
    220a:	0d c0       	rjmp	.+26     	; 0x2226 <vfprintf+0x272>
    220c:	fb 2d       	mov	r31, r11
    220e:	f4 60       	ori	r31, 0x04	; 4
    2210:	bf 2e       	mov	r11, r31
    2212:	09 c0       	rjmp	.+18     	; 0x2226 <vfprintf+0x272>
    2214:	34 fe       	sbrs	r3, 4
    2216:	0a c0       	rjmp	.+20     	; 0x222c <vfprintf+0x278>
    2218:	29 2f       	mov	r18, r25
    221a:	26 60       	ori	r18, 0x06	; 6
    221c:	b2 2e       	mov	r11, r18
    221e:	06 c0       	rjmp	.+12     	; 0x222c <vfprintf+0x278>
    2220:	28 e0       	ldi	r18, 0x08	; 8
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	05 c0       	rjmp	.+10     	; 0x2230 <vfprintf+0x27c>
    2226:	20 e1       	ldi	r18, 0x10	; 16
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	02 c0       	rjmp	.+4      	; 0x2230 <vfprintf+0x27c>
    222c:	20 e1       	ldi	r18, 0x10	; 16
    222e:	32 e0       	ldi	r19, 0x02	; 2
    2230:	f8 01       	movw	r30, r16
    2232:	b7 fe       	sbrs	r11, 7
    2234:	07 c0       	rjmp	.+14     	; 0x2244 <vfprintf+0x290>
    2236:	60 81       	ld	r22, Z
    2238:	71 81       	ldd	r23, Z+1	; 0x01
    223a:	82 81       	ldd	r24, Z+2	; 0x02
    223c:	93 81       	ldd	r25, Z+3	; 0x03
    223e:	0c 5f       	subi	r16, 0xFC	; 252
    2240:	1f 4f       	sbci	r17, 0xFF	; 255
    2242:	06 c0       	rjmp	.+12     	; 0x2250 <vfprintf+0x29c>
    2244:	60 81       	ld	r22, Z
    2246:	71 81       	ldd	r23, Z+1	; 0x01
    2248:	80 e0       	ldi	r24, 0x00	; 0
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	0e 5f       	subi	r16, 0xFE	; 254
    224e:	1f 4f       	sbci	r17, 0xFF	; 255
    2250:	a3 01       	movw	r20, r6
    2252:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__ultoa_invert>
    2256:	88 2e       	mov	r8, r24
    2258:	86 18       	sub	r8, r6
    225a:	fb 2d       	mov	r31, r11
    225c:	ff 77       	andi	r31, 0x7F	; 127
    225e:	3f 2e       	mov	r3, r31
    2260:	36 fe       	sbrs	r3, 6
    2262:	0d c0       	rjmp	.+26     	; 0x227e <vfprintf+0x2ca>
    2264:	23 2d       	mov	r18, r3
    2266:	2e 7f       	andi	r18, 0xFE	; 254
    2268:	a2 2e       	mov	r10, r18
    226a:	89 14       	cp	r8, r9
    226c:	58 f4       	brcc	.+22     	; 0x2284 <vfprintf+0x2d0>
    226e:	34 fe       	sbrs	r3, 4
    2270:	0b c0       	rjmp	.+22     	; 0x2288 <vfprintf+0x2d4>
    2272:	32 fc       	sbrc	r3, 2
    2274:	09 c0       	rjmp	.+18     	; 0x2288 <vfprintf+0x2d4>
    2276:	83 2d       	mov	r24, r3
    2278:	8e 7e       	andi	r24, 0xEE	; 238
    227a:	a8 2e       	mov	r10, r24
    227c:	05 c0       	rjmp	.+10     	; 0x2288 <vfprintf+0x2d4>
    227e:	b8 2c       	mov	r11, r8
    2280:	a3 2c       	mov	r10, r3
    2282:	03 c0       	rjmp	.+6      	; 0x228a <vfprintf+0x2d6>
    2284:	b8 2c       	mov	r11, r8
    2286:	01 c0       	rjmp	.+2      	; 0x228a <vfprintf+0x2d6>
    2288:	b9 2c       	mov	r11, r9
    228a:	a4 fe       	sbrs	r10, 4
    228c:	0f c0       	rjmp	.+30     	; 0x22ac <vfprintf+0x2f8>
    228e:	fe 01       	movw	r30, r28
    2290:	e8 0d       	add	r30, r8
    2292:	f1 1d       	adc	r31, r1
    2294:	80 81       	ld	r24, Z
    2296:	80 33       	cpi	r24, 0x30	; 48
    2298:	21 f4       	brne	.+8      	; 0x22a2 <vfprintf+0x2ee>
    229a:	9a 2d       	mov	r25, r10
    229c:	99 7e       	andi	r25, 0xE9	; 233
    229e:	a9 2e       	mov	r10, r25
    22a0:	09 c0       	rjmp	.+18     	; 0x22b4 <vfprintf+0x300>
    22a2:	a2 fe       	sbrs	r10, 2
    22a4:	06 c0       	rjmp	.+12     	; 0x22b2 <vfprintf+0x2fe>
    22a6:	b3 94       	inc	r11
    22a8:	b3 94       	inc	r11
    22aa:	04 c0       	rjmp	.+8      	; 0x22b4 <vfprintf+0x300>
    22ac:	8a 2d       	mov	r24, r10
    22ae:	86 78       	andi	r24, 0x86	; 134
    22b0:	09 f0       	breq	.+2      	; 0x22b4 <vfprintf+0x300>
    22b2:	b3 94       	inc	r11
    22b4:	a3 fc       	sbrc	r10, 3
    22b6:	11 c0       	rjmp	.+34     	; 0x22da <vfprintf+0x326>
    22b8:	a0 fe       	sbrs	r10, 0
    22ba:	06 c0       	rjmp	.+12     	; 0x22c8 <vfprintf+0x314>
    22bc:	b2 14       	cp	r11, r2
    22be:	88 f4       	brcc	.+34     	; 0x22e2 <vfprintf+0x32e>
    22c0:	28 0c       	add	r2, r8
    22c2:	92 2c       	mov	r9, r2
    22c4:	9b 18       	sub	r9, r11
    22c6:	0e c0       	rjmp	.+28     	; 0x22e4 <vfprintf+0x330>
    22c8:	b2 14       	cp	r11, r2
    22ca:	60 f4       	brcc	.+24     	; 0x22e4 <vfprintf+0x330>
    22cc:	b6 01       	movw	r22, r12
    22ce:	80 e2       	ldi	r24, 0x20	; 32
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <fputc>
    22d6:	b3 94       	inc	r11
    22d8:	f7 cf       	rjmp	.-18     	; 0x22c8 <vfprintf+0x314>
    22da:	b2 14       	cp	r11, r2
    22dc:	18 f4       	brcc	.+6      	; 0x22e4 <vfprintf+0x330>
    22de:	2b 18       	sub	r2, r11
    22e0:	02 c0       	rjmp	.+4      	; 0x22e6 <vfprintf+0x332>
    22e2:	98 2c       	mov	r9, r8
    22e4:	21 2c       	mov	r2, r1
    22e6:	a4 fe       	sbrs	r10, 4
    22e8:	10 c0       	rjmp	.+32     	; 0x230a <vfprintf+0x356>
    22ea:	b6 01       	movw	r22, r12
    22ec:	80 e3       	ldi	r24, 0x30	; 48
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <fputc>
    22f4:	a2 fe       	sbrs	r10, 2
    22f6:	17 c0       	rjmp	.+46     	; 0x2326 <vfprintf+0x372>
    22f8:	a1 fc       	sbrc	r10, 1
    22fa:	03 c0       	rjmp	.+6      	; 0x2302 <vfprintf+0x34e>
    22fc:	88 e7       	ldi	r24, 0x78	; 120
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	02 c0       	rjmp	.+4      	; 0x2306 <vfprintf+0x352>
    2302:	88 e5       	ldi	r24, 0x58	; 88
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	b6 01       	movw	r22, r12
    2308:	0c c0       	rjmp	.+24     	; 0x2322 <vfprintf+0x36e>
    230a:	8a 2d       	mov	r24, r10
    230c:	86 78       	andi	r24, 0x86	; 134
    230e:	59 f0       	breq	.+22     	; 0x2326 <vfprintf+0x372>
    2310:	a1 fe       	sbrs	r10, 1
    2312:	02 c0       	rjmp	.+4      	; 0x2318 <vfprintf+0x364>
    2314:	8b e2       	ldi	r24, 0x2B	; 43
    2316:	01 c0       	rjmp	.+2      	; 0x231a <vfprintf+0x366>
    2318:	80 e2       	ldi	r24, 0x20	; 32
    231a:	a7 fc       	sbrc	r10, 7
    231c:	8d e2       	ldi	r24, 0x2D	; 45
    231e:	b6 01       	movw	r22, r12
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <fputc>
    2326:	89 14       	cp	r8, r9
    2328:	38 f4       	brcc	.+14     	; 0x2338 <vfprintf+0x384>
    232a:	b6 01       	movw	r22, r12
    232c:	80 e3       	ldi	r24, 0x30	; 48
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <fputc>
    2334:	9a 94       	dec	r9
    2336:	f7 cf       	rjmp	.-18     	; 0x2326 <vfprintf+0x372>
    2338:	8a 94       	dec	r8
    233a:	f3 01       	movw	r30, r6
    233c:	e8 0d       	add	r30, r8
    233e:	f1 1d       	adc	r31, r1
    2340:	80 81       	ld	r24, Z
    2342:	b6 01       	movw	r22, r12
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <fputc>
    234a:	81 10       	cpse	r8, r1
    234c:	f5 cf       	rjmp	.-22     	; 0x2338 <vfprintf+0x384>
    234e:	22 20       	and	r2, r2
    2350:	09 f4       	brne	.+2      	; 0x2354 <vfprintf+0x3a0>
    2352:	42 ce       	rjmp	.-892    	; 0x1fd8 <vfprintf+0x24>
    2354:	b6 01       	movw	r22, r12
    2356:	80 e2       	ldi	r24, 0x20	; 32
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <fputc>
    235e:	2a 94       	dec	r2
    2360:	f6 cf       	rjmp	.-20     	; 0x234e <vfprintf+0x39a>
    2362:	f6 01       	movw	r30, r12
    2364:	86 81       	ldd	r24, Z+6	; 0x06
    2366:	97 81       	ldd	r25, Z+7	; 0x07
    2368:	02 c0       	rjmp	.+4      	; 0x236e <vfprintf+0x3ba>
    236a:	8f ef       	ldi	r24, 0xFF	; 255
    236c:	9f ef       	ldi	r25, 0xFF	; 255
    236e:	2b 96       	adiw	r28, 0x0b	; 11
    2370:	e2 e1       	ldi	r30, 0x12	; 18
    2372:	0c 94 5e 12 	jmp	0x24bc	; 0x24bc <__epilogue_restores__>

00002376 <strnlen_P>:
    2376:	fc 01       	movw	r30, r24
    2378:	05 90       	lpm	r0, Z+
    237a:	61 50       	subi	r22, 0x01	; 1
    237c:	70 40       	sbci	r23, 0x00	; 0
    237e:	01 10       	cpse	r0, r1
    2380:	d8 f7       	brcc	.-10     	; 0x2378 <strnlen_P+0x2>
    2382:	80 95       	com	r24
    2384:	90 95       	com	r25
    2386:	8e 0f       	add	r24, r30
    2388:	9f 1f       	adc	r25, r31
    238a:	08 95       	ret

0000238c <strnlen>:
    238c:	fc 01       	movw	r30, r24
    238e:	61 50       	subi	r22, 0x01	; 1
    2390:	70 40       	sbci	r23, 0x00	; 0
    2392:	01 90       	ld	r0, Z+
    2394:	01 10       	cpse	r0, r1
    2396:	d8 f7       	brcc	.-10     	; 0x238e <strnlen+0x2>
    2398:	80 95       	com	r24
    239a:	90 95       	com	r25
    239c:	8e 0f       	add	r24, r30
    239e:	9f 1f       	adc	r25, r31
    23a0:	08 95       	ret

000023a2 <__ultoa_invert>:
    23a2:	fa 01       	movw	r30, r20
    23a4:	aa 27       	eor	r26, r26
    23a6:	28 30       	cpi	r18, 0x08	; 8
    23a8:	51 f1       	breq	.+84     	; 0x23fe <__ultoa_invert+0x5c>
    23aa:	20 31       	cpi	r18, 0x10	; 16
    23ac:	81 f1       	breq	.+96     	; 0x240e <__ultoa_invert+0x6c>
    23ae:	e8 94       	clt
    23b0:	6f 93       	push	r22
    23b2:	6e 7f       	andi	r22, 0xFE	; 254
    23b4:	6e 5f       	subi	r22, 0xFE	; 254
    23b6:	7f 4f       	sbci	r23, 0xFF	; 255
    23b8:	8f 4f       	sbci	r24, 0xFF	; 255
    23ba:	9f 4f       	sbci	r25, 0xFF	; 255
    23bc:	af 4f       	sbci	r26, 0xFF	; 255
    23be:	b1 e0       	ldi	r27, 0x01	; 1
    23c0:	3e d0       	rcall	.+124    	; 0x243e <__ultoa_invert+0x9c>
    23c2:	b4 e0       	ldi	r27, 0x04	; 4
    23c4:	3c d0       	rcall	.+120    	; 0x243e <__ultoa_invert+0x9c>
    23c6:	67 0f       	add	r22, r23
    23c8:	78 1f       	adc	r23, r24
    23ca:	89 1f       	adc	r24, r25
    23cc:	9a 1f       	adc	r25, r26
    23ce:	a1 1d       	adc	r26, r1
    23d0:	68 0f       	add	r22, r24
    23d2:	79 1f       	adc	r23, r25
    23d4:	8a 1f       	adc	r24, r26
    23d6:	91 1d       	adc	r25, r1
    23d8:	a1 1d       	adc	r26, r1
    23da:	6a 0f       	add	r22, r26
    23dc:	71 1d       	adc	r23, r1
    23de:	81 1d       	adc	r24, r1
    23e0:	91 1d       	adc	r25, r1
    23e2:	a1 1d       	adc	r26, r1
    23e4:	20 d0       	rcall	.+64     	; 0x2426 <__ultoa_invert+0x84>
    23e6:	09 f4       	brne	.+2      	; 0x23ea <__ultoa_invert+0x48>
    23e8:	68 94       	set
    23ea:	3f 91       	pop	r19
    23ec:	2a e0       	ldi	r18, 0x0A	; 10
    23ee:	26 9f       	mul	r18, r22
    23f0:	11 24       	eor	r1, r1
    23f2:	30 19       	sub	r19, r0
    23f4:	30 5d       	subi	r19, 0xD0	; 208
    23f6:	31 93       	st	Z+, r19
    23f8:	de f6       	brtc	.-74     	; 0x23b0 <__ultoa_invert+0xe>
    23fa:	cf 01       	movw	r24, r30
    23fc:	08 95       	ret
    23fe:	46 2f       	mov	r20, r22
    2400:	47 70       	andi	r20, 0x07	; 7
    2402:	40 5d       	subi	r20, 0xD0	; 208
    2404:	41 93       	st	Z+, r20
    2406:	b3 e0       	ldi	r27, 0x03	; 3
    2408:	0f d0       	rcall	.+30     	; 0x2428 <__ultoa_invert+0x86>
    240a:	c9 f7       	brne	.-14     	; 0x23fe <__ultoa_invert+0x5c>
    240c:	f6 cf       	rjmp	.-20     	; 0x23fa <__ultoa_invert+0x58>
    240e:	46 2f       	mov	r20, r22
    2410:	4f 70       	andi	r20, 0x0F	; 15
    2412:	40 5d       	subi	r20, 0xD0	; 208
    2414:	4a 33       	cpi	r20, 0x3A	; 58
    2416:	18 f0       	brcs	.+6      	; 0x241e <__ultoa_invert+0x7c>
    2418:	49 5d       	subi	r20, 0xD9	; 217
    241a:	31 fd       	sbrc	r19, 1
    241c:	40 52       	subi	r20, 0x20	; 32
    241e:	41 93       	st	Z+, r20
    2420:	02 d0       	rcall	.+4      	; 0x2426 <__ultoa_invert+0x84>
    2422:	a9 f7       	brne	.-22     	; 0x240e <__ultoa_invert+0x6c>
    2424:	ea cf       	rjmp	.-44     	; 0x23fa <__ultoa_invert+0x58>
    2426:	b4 e0       	ldi	r27, 0x04	; 4
    2428:	a6 95       	lsr	r26
    242a:	97 95       	ror	r25
    242c:	87 95       	ror	r24
    242e:	77 95       	ror	r23
    2430:	67 95       	ror	r22
    2432:	ba 95       	dec	r27
    2434:	c9 f7       	brne	.-14     	; 0x2428 <__ultoa_invert+0x86>
    2436:	00 97       	sbiw	r24, 0x00	; 0
    2438:	61 05       	cpc	r22, r1
    243a:	71 05       	cpc	r23, r1
    243c:	08 95       	ret
    243e:	9b 01       	movw	r18, r22
    2440:	ac 01       	movw	r20, r24
    2442:	0a 2e       	mov	r0, r26
    2444:	06 94       	lsr	r0
    2446:	57 95       	ror	r21
    2448:	47 95       	ror	r20
    244a:	37 95       	ror	r19
    244c:	27 95       	ror	r18
    244e:	ba 95       	dec	r27
    2450:	c9 f7       	brne	.-14     	; 0x2444 <__ultoa_invert+0xa2>
    2452:	62 0f       	add	r22, r18
    2454:	73 1f       	adc	r23, r19
    2456:	84 1f       	adc	r24, r20
    2458:	95 1f       	adc	r25, r21
    245a:	a0 1d       	adc	r26, r0
    245c:	08 95       	ret

0000245e <__muluhisi3>:
    245e:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <__umulhisi3>
    2462:	a5 9f       	mul	r26, r21
    2464:	90 0d       	add	r25, r0
    2466:	b4 9f       	mul	r27, r20
    2468:	90 0d       	add	r25, r0
    246a:	a4 9f       	mul	r26, r20
    246c:	80 0d       	add	r24, r0
    246e:	91 1d       	adc	r25, r1
    2470:	11 24       	eor	r1, r1
    2472:	08 95       	ret

00002474 <__mulshisi3>:
    2474:	b7 ff       	sbrs	r27, 7
    2476:	0c 94 2f 12 	jmp	0x245e	; 0x245e <__muluhisi3>

0000247a <__mulohisi3>:
    247a:	0e 94 2f 12 	call	0x245e	; 0x245e <__muluhisi3>
    247e:	82 1b       	sub	r24, r18
    2480:	93 0b       	sbc	r25, r19
    2482:	08 95       	ret

00002484 <__prologue_saves__>:
    2484:	2f 92       	push	r2
    2486:	3f 92       	push	r3
    2488:	4f 92       	push	r4
    248a:	5f 92       	push	r5
    248c:	6f 92       	push	r6
    248e:	7f 92       	push	r7
    2490:	8f 92       	push	r8
    2492:	9f 92       	push	r9
    2494:	af 92       	push	r10
    2496:	bf 92       	push	r11
    2498:	cf 92       	push	r12
    249a:	df 92       	push	r13
    249c:	ef 92       	push	r14
    249e:	ff 92       	push	r15
    24a0:	0f 93       	push	r16
    24a2:	1f 93       	push	r17
    24a4:	cf 93       	push	r28
    24a6:	df 93       	push	r29
    24a8:	cd b7       	in	r28, 0x3d	; 61
    24aa:	de b7       	in	r29, 0x3e	; 62
    24ac:	ca 1b       	sub	r28, r26
    24ae:	db 0b       	sbc	r29, r27
    24b0:	0f b6       	in	r0, 0x3f	; 63
    24b2:	f8 94       	cli
    24b4:	de bf       	out	0x3e, r29	; 62
    24b6:	0f be       	out	0x3f, r0	; 63
    24b8:	cd bf       	out	0x3d, r28	; 61
    24ba:	09 94       	ijmp

000024bc <__epilogue_restores__>:
    24bc:	2a 88       	ldd	r2, Y+18	; 0x12
    24be:	39 88       	ldd	r3, Y+17	; 0x11
    24c0:	48 88       	ldd	r4, Y+16	; 0x10
    24c2:	5f 84       	ldd	r5, Y+15	; 0x0f
    24c4:	6e 84       	ldd	r6, Y+14	; 0x0e
    24c6:	7d 84       	ldd	r7, Y+13	; 0x0d
    24c8:	8c 84       	ldd	r8, Y+12	; 0x0c
    24ca:	9b 84       	ldd	r9, Y+11	; 0x0b
    24cc:	aa 84       	ldd	r10, Y+10	; 0x0a
    24ce:	b9 84       	ldd	r11, Y+9	; 0x09
    24d0:	c8 84       	ldd	r12, Y+8	; 0x08
    24d2:	df 80       	ldd	r13, Y+7	; 0x07
    24d4:	ee 80       	ldd	r14, Y+6	; 0x06
    24d6:	fd 80       	ldd	r15, Y+5	; 0x05
    24d8:	0c 81       	ldd	r16, Y+4	; 0x04
    24da:	1b 81       	ldd	r17, Y+3	; 0x03
    24dc:	aa 81       	ldd	r26, Y+2	; 0x02
    24de:	b9 81       	ldd	r27, Y+1	; 0x01
    24e0:	ce 0f       	add	r28, r30
    24e2:	d1 1d       	adc	r29, r1
    24e4:	0f b6       	in	r0, 0x3f	; 63
    24e6:	f8 94       	cli
    24e8:	de bf       	out	0x3e, r29	; 62
    24ea:	0f be       	out	0x3f, r0	; 63
    24ec:	cd bf       	out	0x3d, r28	; 61
    24ee:	ed 01       	movw	r28, r26
    24f0:	08 95       	ret

000024f2 <_exit>:
    24f2:	f8 94       	cli

000024f4 <__stop_program>:
    24f4:	ff cf       	rjmp	.-2      	; 0x24f4 <__stop_program>
